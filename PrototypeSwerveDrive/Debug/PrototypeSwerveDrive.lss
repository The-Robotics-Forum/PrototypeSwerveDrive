
PrototypeSwerveDrive.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000be  00800200  00002b52  00002be6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002b52  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000027  008002be  008002be  00002ca4  2**0
                  ALLOC
  3 .stab         00001c50  00000000  00000000  00002ca4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000068a  00000000  00000000  000048f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  00004f7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000251  00000000  00000000  00004f9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001820  00000000  00000000  000051ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000471  00000000  00000000  00006a0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000015d1  00000000  00000000  00006e80  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001d0  00000000  00000000  00008454  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000096d  00000000  00000000  00008624  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000021e3  00000000  00000000  00008f91  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 0000007c  00000000  00000000  0000b174  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000180  00000000  00000000  0000b1f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__ctors_end>
       4:	0c 94 11 07 	jmp	0xe22	; 0xe22 <__vector_1>
       8:	0c 94 3c 07 	jmp	0xe78	; 0xe78 <__vector_2>
       c:	0c 94 67 07 	jmp	0xece	; 0xece <__vector_3>
      10:	0c 94 92 07 	jmp	0xf24	; 0xf24 <__vector_4>
      14:	0c 94 bd 07 	jmp	0xf7a	; 0xf7a <__vector_5>
      18:	0c 94 e8 07 	jmp	0xfd0	; 0xfd0 <__vector_6>
      1c:	0c 94 13 08 	jmp	0x1026	; 0x1026 <__vector_7>
      20:	0c 94 3e 08 	jmp	0x107c	; 0x107c <__vector_8>
      24:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      28:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      2c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      30:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      34:	0c 94 16 05 	jmp	0xa2c	; 0xa2c <__vector_13>
      38:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      3c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      40:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      44:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      48:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      4c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      50:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      54:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      58:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      5c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      60:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      64:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      68:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      6c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      70:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      74:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      78:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      7c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      80:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      84:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      88:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      8c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      90:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      94:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      98:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      9c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      a0:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      a4:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      a8:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      ac:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      b0:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      b4:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      b8:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      bc:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      c0:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      c4:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      c8:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      cc:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      d0:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      d4:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      d8:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      dc:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      e0:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>

000000e4 <__ctors_start>:
      e4:	78 13       	cpse	r23, r24

000000e6 <__ctors_end>:
      e6:	11 24       	eor	r1, r1
      e8:	1f be       	out	0x3f, r1	; 63
      ea:	cf ef       	ldi	r28, 0xFF	; 255
      ec:	d1 e2       	ldi	r29, 0x21	; 33
      ee:	de bf       	out	0x3e, r29	; 62
      f0:	cd bf       	out	0x3d, r28	; 61
      f2:	00 e0       	ldi	r16, 0x00	; 0
      f4:	0c bf       	out	0x3c, r16	; 60

000000f6 <__do_copy_data>:
      f6:	12 e0       	ldi	r17, 0x02	; 2
      f8:	a0 e0       	ldi	r26, 0x00	; 0
      fa:	b2 e0       	ldi	r27, 0x02	; 2
      fc:	e2 e5       	ldi	r30, 0x52	; 82
      fe:	fb e2       	ldi	r31, 0x2B	; 43
     100:	00 e0       	ldi	r16, 0x00	; 0
     102:	0b bf       	out	0x3b, r16	; 59
     104:	02 c0       	rjmp	.+4      	; 0x10a <__do_copy_data+0x14>
     106:	07 90       	elpm	r0, Z+
     108:	0d 92       	st	X+, r0
     10a:	ae 3b       	cpi	r26, 0xBE	; 190
     10c:	b1 07       	cpc	r27, r17
     10e:	d9 f7       	brne	.-10     	; 0x106 <__do_copy_data+0x10>

00000110 <__do_clear_bss>:
     110:	12 e0       	ldi	r17, 0x02	; 2
     112:	ae eb       	ldi	r26, 0xBE	; 190
     114:	b2 e0       	ldi	r27, 0x02	; 2
     116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
     118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
     11a:	a5 3e       	cpi	r26, 0xE5	; 229
     11c:	b1 07       	cpc	r27, r17
     11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>

00000120 <__do_global_ctors>:
     120:	10 e0       	ldi	r17, 0x00	; 0
     122:	00 e0       	ldi	r16, 0x00	; 0
     124:	c6 ee       	ldi	r28, 0xE6	; 230
     126:	d0 e0       	ldi	r29, 0x00	; 0
     128:	40 e0       	ldi	r20, 0x00	; 0
     12a:	06 c0       	rjmp	.+12     	; 0x138 <__do_global_ctors+0x18>
     12c:	22 97       	sbiw	r28, 0x02	; 2
     12e:	41 09       	sbc	r20, r1
     130:	fe 01       	movw	r30, r28
     132:	4b bf       	out	0x3b, r20	; 59
     134:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <__tablejump_elpm__>
     138:	c4 3e       	cpi	r28, 0xE4	; 228
     13a:	d1 07       	cpc	r29, r17
     13c:	40 07       	cpc	r20, r16
     13e:	b1 f7       	brne	.-20     	; 0x12c <__do_global_ctors+0xc>
     140:	0e 94 73 13 	call	0x26e6	; 0x26e6 <main>
     144:	0c 94 a7 15 	jmp	0x2b4e	; 0x2b4e <_exit>

00000148 <__bad_interrupt>:
     148:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000014c <_Z7pinModehh>:
//Functions:

void pinMode(uint8_t pInno,uint8_t mOde)
{
	int l;
  	if(mOde==0)
     14c:	66 23       	and	r22, r22
     14e:	09 f0       	breq	.+2      	; 0x152 <_Z7pinModehh+0x6>
     150:	b8 c0       	rjmp	.+368    	; 0x2c2 <_Z7pinModehh+0x176>
    {
    	switch(d[pInno]){
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	fc 01       	movw	r30, r24
     156:	e8 58       	subi	r30, 0x88	; 136
     158:	fd 4f       	sbci	r31, 0xFD	; 253
     15a:	20 81       	ld	r18, Z
     15c:	25 36       	cpi	r18, 0x65	; 101
     15e:	09 f4       	brne	.+2      	; 0x162 <_Z7pinModehh+0x16>
     160:	50 c0       	rjmp	.+160    	; 0x202 <_Z7pinModehh+0xb6>
     162:	26 36       	cpi	r18, 0x66	; 102
     164:	40 f4       	brcc	.+16     	; 0x176 <_Z7pinModehh+0x2a>
     166:	23 36       	cpi	r18, 0x63	; 99
     168:	41 f1       	breq	.+80     	; 0x1ba <_Z7pinModehh+0x6e>
     16a:	24 36       	cpi	r18, 0x64	; 100
     16c:	c0 f5       	brcc	.+112    	; 0x1de <_Z7pinModehh+0x92>
     16e:	22 36       	cpi	r18, 0x62	; 98
     170:	09 f0       	breq	.+2      	; 0x174 <_Z7pinModehh+0x28>
     172:	5e c1       	rjmp	.+700    	; 0x430 <_Z7pinModehh+0x2e4>
     174:	10 c0       	rjmp	.+32     	; 0x196 <_Z7pinModehh+0x4a>
     176:	28 36       	cpi	r18, 0x68	; 104
     178:	09 f4       	brne	.+2      	; 0x17c <_Z7pinModehh+0x30>
     17a:	67 c0       	rjmp	.+206    	; 0x24a <_Z7pinModehh+0xfe>
     17c:	29 36       	cpi	r18, 0x69	; 105
     17e:	20 f4       	brcc	.+8      	; 0x188 <_Z7pinModehh+0x3c>
     180:	27 36       	cpi	r18, 0x67	; 103
     182:	09 f0       	breq	.+2      	; 0x186 <_Z7pinModehh+0x3a>
     184:	55 c1       	rjmp	.+682    	; 0x430 <_Z7pinModehh+0x2e4>
     186:	4f c0       	rjmp	.+158    	; 0x226 <_Z7pinModehh+0xda>
     188:	2a 36       	cpi	r18, 0x6A	; 106
     18a:	09 f4       	brne	.+2      	; 0x18e <_Z7pinModehh+0x42>
     18c:	72 c0       	rjmp	.+228    	; 0x272 <_Z7pinModehh+0x126>
     18e:	2c 36       	cpi	r18, 0x6C	; 108
     190:	09 f0       	breq	.+2      	; 0x194 <_Z7pinModehh+0x48>
     192:	4e c1       	rjmp	.+668    	; 0x430 <_Z7pinModehh+0x2e4>
     194:	82 c0       	rjmp	.+260    	; 0x29a <_Z7pinModehh+0x14e>

          	case'b':
                  DDRB&=~(1<<c[pInno]);
     196:	24 b1       	in	r18, 0x04	; 4
     198:	fc 01       	movw	r30, r24
     19a:	ee 0f       	add	r30, r30
     19c:	ff 1f       	adc	r31, r31
     19e:	e0 50       	subi	r30, 0x00	; 0
     1a0:	fe 4f       	sbci	r31, 0xFE	; 254
     1a2:	81 e0       	ldi	r24, 0x01	; 1
     1a4:	90 e0       	ldi	r25, 0x00	; 0
     1a6:	00 80       	ld	r0, Z
     1a8:	02 c0       	rjmp	.+4      	; 0x1ae <_Z7pinModehh+0x62>
     1aa:	88 0f       	add	r24, r24
     1ac:	99 1f       	adc	r25, r25
     1ae:	0a 94       	dec	r0
     1b0:	e2 f7       	brpl	.-8      	; 0x1aa <_Z7pinModehh+0x5e>
     1b2:	80 95       	com	r24
     1b4:	82 23       	and	r24, r18
     1b6:	84 b9       	out	0x04, r24	; 4
		           break;
     1b8:	08 95       	ret
          	case'c':
                 DDRC&=~(1<<c[pInno]);
     1ba:	27 b1       	in	r18, 0x07	; 7
     1bc:	fc 01       	movw	r30, r24
     1be:	ee 0f       	add	r30, r30
     1c0:	ff 1f       	adc	r31, r31
     1c2:	e0 50       	subi	r30, 0x00	; 0
     1c4:	fe 4f       	sbci	r31, 0xFE	; 254
     1c6:	81 e0       	ldi	r24, 0x01	; 1
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	00 80       	ld	r0, Z
     1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <_Z7pinModehh+0x86>
     1ce:	88 0f       	add	r24, r24
     1d0:	99 1f       	adc	r25, r25
     1d2:	0a 94       	dec	r0
     1d4:	e2 f7       	brpl	.-8      	; 0x1ce <_Z7pinModehh+0x82>
     1d6:	80 95       	com	r24
     1d8:	82 23       	and	r24, r18
     1da:	87 b9       	out	0x07, r24	; 7
		          break;
     1dc:	08 95       	ret
          	case'd':
                 DDRD&=~(1<<c[pInno]);
     1de:	2a b1       	in	r18, 0x0a	; 10
     1e0:	fc 01       	movw	r30, r24
     1e2:	ee 0f       	add	r30, r30
     1e4:	ff 1f       	adc	r31, r31
     1e6:	e0 50       	subi	r30, 0x00	; 0
     1e8:	fe 4f       	sbci	r31, 0xFE	; 254
     1ea:	81 e0       	ldi	r24, 0x01	; 1
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	00 80       	ld	r0, Z
     1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <_Z7pinModehh+0xaa>
     1f2:	88 0f       	add	r24, r24
     1f4:	99 1f       	adc	r25, r25
     1f6:	0a 94       	dec	r0
     1f8:	e2 f7       	brpl	.-8      	; 0x1f2 <_Z7pinModehh+0xa6>
     1fa:	80 95       	com	r24
     1fc:	82 23       	and	r24, r18
     1fe:	8a b9       	out	0x0a, r24	; 10
		          break;
     200:	08 95       	ret
	      	case'e':
                  DDRE&=~(1<<c[pInno]);
     202:	2d b1       	in	r18, 0x0d	; 13
     204:	fc 01       	movw	r30, r24
     206:	ee 0f       	add	r30, r30
     208:	ff 1f       	adc	r31, r31
     20a:	e0 50       	subi	r30, 0x00	; 0
     20c:	fe 4f       	sbci	r31, 0xFE	; 254
     20e:	81 e0       	ldi	r24, 0x01	; 1
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	00 80       	ld	r0, Z
     214:	02 c0       	rjmp	.+4      	; 0x21a <_Z7pinModehh+0xce>
     216:	88 0f       	add	r24, r24
     218:	99 1f       	adc	r25, r25
     21a:	0a 94       	dec	r0
     21c:	e2 f7       	brpl	.-8      	; 0x216 <_Z7pinModehh+0xca>
     21e:	80 95       	com	r24
     220:	82 23       	and	r24, r18
     222:	8d b9       	out	0x0d, r24	; 13
		           break;
     224:	08 95       	ret
		    case'g':
                  DDRG&=~(1<<c[pInno]);
     226:	23 b3       	in	r18, 0x13	; 19
     228:	fc 01       	movw	r30, r24
     22a:	ee 0f       	add	r30, r30
     22c:	ff 1f       	adc	r31, r31
     22e:	e0 50       	subi	r30, 0x00	; 0
     230:	fe 4f       	sbci	r31, 0xFE	; 254
     232:	81 e0       	ldi	r24, 0x01	; 1
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	00 80       	ld	r0, Z
     238:	02 c0       	rjmp	.+4      	; 0x23e <_Z7pinModehh+0xf2>
     23a:	88 0f       	add	r24, r24
     23c:	99 1f       	adc	r25, r25
     23e:	0a 94       	dec	r0
     240:	e2 f7       	brpl	.-8      	; 0x23a <_Z7pinModehh+0xee>
     242:	80 95       	com	r24
     244:	82 23       	and	r24, r18
     246:	83 bb       	out	0x13, r24	; 19
		           break;
     248:	08 95       	ret
			case'h':
                  DDRH&=~(1<<c[pInno]);
     24a:	e1 e0       	ldi	r30, 0x01	; 1
     24c:	f1 e0       	ldi	r31, 0x01	; 1
     24e:	20 81       	ld	r18, Z
     250:	dc 01       	movw	r26, r24
     252:	aa 0f       	add	r26, r26
     254:	bb 1f       	adc	r27, r27
     256:	a0 50       	subi	r26, 0x00	; 0
     258:	be 4f       	sbci	r27, 0xFE	; 254
     25a:	81 e0       	ldi	r24, 0x01	; 1
     25c:	90 e0       	ldi	r25, 0x00	; 0
     25e:	0c 90       	ld	r0, X
     260:	02 c0       	rjmp	.+4      	; 0x266 <_Z7pinModehh+0x11a>
     262:	88 0f       	add	r24, r24
     264:	99 1f       	adc	r25, r25
     266:	0a 94       	dec	r0
     268:	e2 f7       	brpl	.-8      	; 0x262 <_Z7pinModehh+0x116>
     26a:	80 95       	com	r24
     26c:	82 23       	and	r24, r18
     26e:	80 83       	st	Z, r24
				  break;
     270:	08 95       	ret
		    case'j':
                  DDRJ&=~(1<<c[pInno]);
     272:	e4 e0       	ldi	r30, 0x04	; 4
     274:	f1 e0       	ldi	r31, 0x01	; 1
     276:	20 81       	ld	r18, Z
     278:	dc 01       	movw	r26, r24
     27a:	aa 0f       	add	r26, r26
     27c:	bb 1f       	adc	r27, r27
     27e:	a0 50       	subi	r26, 0x00	; 0
     280:	be 4f       	sbci	r27, 0xFE	; 254
     282:	81 e0       	ldi	r24, 0x01	; 1
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	0c 90       	ld	r0, X
     288:	02 c0       	rjmp	.+4      	; 0x28e <_Z7pinModehh+0x142>
     28a:	88 0f       	add	r24, r24
     28c:	99 1f       	adc	r25, r25
     28e:	0a 94       	dec	r0
     290:	e2 f7       	brpl	.-8      	; 0x28a <_Z7pinModehh+0x13e>
     292:	80 95       	com	r24
     294:	82 23       	and	r24, r18
     296:	80 83       	st	Z, r24
		          break;
     298:	08 95       	ret
			case'l':
                  DDRL&=~(1<<c[pInno]);
     29a:	ea e0       	ldi	r30, 0x0A	; 10
     29c:	f1 e0       	ldi	r31, 0x01	; 1
     29e:	20 81       	ld	r18, Z
     2a0:	dc 01       	movw	r26, r24
     2a2:	aa 0f       	add	r26, r26
     2a4:	bb 1f       	adc	r27, r27
     2a6:	a0 50       	subi	r26, 0x00	; 0
     2a8:	be 4f       	sbci	r27, 0xFE	; 254
     2aa:	81 e0       	ldi	r24, 0x01	; 1
     2ac:	90 e0       	ldi	r25, 0x00	; 0
     2ae:	0c 90       	ld	r0, X
     2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <_Z7pinModehh+0x16a>
     2b2:	88 0f       	add	r24, r24
     2b4:	99 1f       	adc	r25, r25
     2b6:	0a 94       	dec	r0
     2b8:	e2 f7       	brpl	.-8      	; 0x2b2 <_Z7pinModehh+0x166>
     2ba:	80 95       	com	r24
     2bc:	82 23       	and	r24, r18
     2be:	80 83       	st	Z, r24
		          break;
     2c0:	08 95       	ret
     	}
	}
	else{
			switch(d[pInno])
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	fc 01       	movw	r30, r24
     2c6:	e8 58       	subi	r30, 0x88	; 136
     2c8:	fd 4f       	sbci	r31, 0xFD	; 253
     2ca:	20 81       	ld	r18, Z
     2cc:	25 36       	cpi	r18, 0x65	; 101
     2ce:	09 f4       	brne	.+2      	; 0x2d2 <_Z7pinModehh+0x186>
     2d0:	50 c0       	rjmp	.+160    	; 0x372 <_Z7pinModehh+0x226>
     2d2:	26 36       	cpi	r18, 0x66	; 102
     2d4:	40 f4       	brcc	.+16     	; 0x2e6 <_Z7pinModehh+0x19a>
     2d6:	23 36       	cpi	r18, 0x63	; 99
     2d8:	41 f1       	breq	.+80     	; 0x32a <_Z7pinModehh+0x1de>
     2da:	24 36       	cpi	r18, 0x64	; 100
     2dc:	c0 f5       	brcc	.+112    	; 0x34e <_Z7pinModehh+0x202>
     2de:	22 36       	cpi	r18, 0x62	; 98
     2e0:	09 f0       	breq	.+2      	; 0x2e4 <_Z7pinModehh+0x198>
     2e2:	a6 c0       	rjmp	.+332    	; 0x430 <_Z7pinModehh+0x2e4>
     2e4:	10 c0       	rjmp	.+32     	; 0x306 <_Z7pinModehh+0x1ba>
     2e6:	28 36       	cpi	r18, 0x68	; 104
     2e8:	09 f4       	brne	.+2      	; 0x2ec <_Z7pinModehh+0x1a0>
     2ea:	67 c0       	rjmp	.+206    	; 0x3ba <_Z7pinModehh+0x26e>
     2ec:	29 36       	cpi	r18, 0x69	; 105
     2ee:	20 f4       	brcc	.+8      	; 0x2f8 <_Z7pinModehh+0x1ac>
     2f0:	27 36       	cpi	r18, 0x67	; 103
     2f2:	09 f0       	breq	.+2      	; 0x2f6 <_Z7pinModehh+0x1aa>
     2f4:	9d c0       	rjmp	.+314    	; 0x430 <_Z7pinModehh+0x2e4>
     2f6:	4f c0       	rjmp	.+158    	; 0x396 <_Z7pinModehh+0x24a>
     2f8:	2a 36       	cpi	r18, 0x6A	; 106
     2fa:	09 f4       	brne	.+2      	; 0x2fe <_Z7pinModehh+0x1b2>
     2fc:	72 c0       	rjmp	.+228    	; 0x3e2 <_Z7pinModehh+0x296>
     2fe:	2c 36       	cpi	r18, 0x6C	; 108
     300:	09 f0       	breq	.+2      	; 0x304 <_Z7pinModehh+0x1b8>
     302:	96 c0       	rjmp	.+300    	; 0x430 <_Z7pinModehh+0x2e4>
     304:	82 c0       	rjmp	.+260    	; 0x40a <_Z7pinModehh+0x2be>
         	{

	        	case'b':
	            	DDRB|=(1<<c[pInno]);
     306:	44 b1       	in	r20, 0x04	; 4
     308:	fc 01       	movw	r30, r24
     30a:	ee 0f       	add	r30, r30
     30c:	ff 1f       	adc	r31, r31
     30e:	e0 50       	subi	r30, 0x00	; 0
     310:	fe 4f       	sbci	r31, 0xFE	; 254
     312:	21 e0       	ldi	r18, 0x01	; 1
     314:	30 e0       	ldi	r19, 0x00	; 0
     316:	c9 01       	movw	r24, r18
     318:	00 80       	ld	r0, Z
     31a:	02 c0       	rjmp	.+4      	; 0x320 <_Z7pinModehh+0x1d4>
     31c:	88 0f       	add	r24, r24
     31e:	99 1f       	adc	r25, r25
     320:	0a 94       	dec	r0
     322:	e2 f7       	brpl	.-8      	; 0x31c <_Z7pinModehh+0x1d0>
     324:	84 2b       	or	r24, r20
     326:	84 b9       	out	0x04, r24	; 4
			    	break;
     328:	08 95       	ret
	          	case'c':
	                DDRC|=(1<<c[pInno]);
     32a:	47 b1       	in	r20, 0x07	; 7
     32c:	fc 01       	movw	r30, r24
     32e:	ee 0f       	add	r30, r30
     330:	ff 1f       	adc	r31, r31
     332:	e0 50       	subi	r30, 0x00	; 0
     334:	fe 4f       	sbci	r31, 0xFE	; 254
     336:	21 e0       	ldi	r18, 0x01	; 1
     338:	30 e0       	ldi	r19, 0x00	; 0
     33a:	c9 01       	movw	r24, r18
     33c:	00 80       	ld	r0, Z
     33e:	02 c0       	rjmp	.+4      	; 0x344 <_Z7pinModehh+0x1f8>
     340:	88 0f       	add	r24, r24
     342:	99 1f       	adc	r25, r25
     344:	0a 94       	dec	r0
     346:	e2 f7       	brpl	.-8      	; 0x340 <_Z7pinModehh+0x1f4>
     348:	84 2b       	or	r24, r20
     34a:	87 b9       	out	0x07, r24	; 7
			        break;
     34c:	08 95       	ret
	          	case'd':
	                DDRD|=(1<<c[pInno]);
     34e:	4a b1       	in	r20, 0x0a	; 10
     350:	fc 01       	movw	r30, r24
     352:	ee 0f       	add	r30, r30
     354:	ff 1f       	adc	r31, r31
     356:	e0 50       	subi	r30, 0x00	; 0
     358:	fe 4f       	sbci	r31, 0xFE	; 254
     35a:	21 e0       	ldi	r18, 0x01	; 1
     35c:	30 e0       	ldi	r19, 0x00	; 0
     35e:	c9 01       	movw	r24, r18
     360:	00 80       	ld	r0, Z
     362:	02 c0       	rjmp	.+4      	; 0x368 <_Z7pinModehh+0x21c>
     364:	88 0f       	add	r24, r24
     366:	99 1f       	adc	r25, r25
     368:	0a 94       	dec	r0
     36a:	e2 f7       	brpl	.-8      	; 0x364 <_Z7pinModehh+0x218>
     36c:	84 2b       	or	r24, r20
     36e:	8a b9       	out	0x0a, r24	; 10
			        break;
     370:	08 95       	ret
		      	case'e':
	                DDRE|=(1<<c[pInno]);
     372:	4d b1       	in	r20, 0x0d	; 13
     374:	fc 01       	movw	r30, r24
     376:	ee 0f       	add	r30, r30
     378:	ff 1f       	adc	r31, r31
     37a:	e0 50       	subi	r30, 0x00	; 0
     37c:	fe 4f       	sbci	r31, 0xFE	; 254
     37e:	21 e0       	ldi	r18, 0x01	; 1
     380:	30 e0       	ldi	r19, 0x00	; 0
     382:	c9 01       	movw	r24, r18
     384:	00 80       	ld	r0, Z
     386:	02 c0       	rjmp	.+4      	; 0x38c <_Z7pinModehh+0x240>
     388:	88 0f       	add	r24, r24
     38a:	99 1f       	adc	r25, r25
     38c:	0a 94       	dec	r0
     38e:	e2 f7       	brpl	.-8      	; 0x388 <_Z7pinModehh+0x23c>
     390:	84 2b       	or	r24, r20
     392:	8d b9       	out	0x0d, r24	; 13
			        break;
     394:	08 95       	ret
			    case'g':
	                DDRG|=(1<<c[pInno]);
     396:	43 b3       	in	r20, 0x13	; 19
     398:	fc 01       	movw	r30, r24
     39a:	ee 0f       	add	r30, r30
     39c:	ff 1f       	adc	r31, r31
     39e:	e0 50       	subi	r30, 0x00	; 0
     3a0:	fe 4f       	sbci	r31, 0xFE	; 254
     3a2:	21 e0       	ldi	r18, 0x01	; 1
     3a4:	30 e0       	ldi	r19, 0x00	; 0
     3a6:	c9 01       	movw	r24, r18
     3a8:	00 80       	ld	r0, Z
     3aa:	02 c0       	rjmp	.+4      	; 0x3b0 <_Z7pinModehh+0x264>
     3ac:	88 0f       	add	r24, r24
     3ae:	99 1f       	adc	r25, r25
     3b0:	0a 94       	dec	r0
     3b2:	e2 f7       	brpl	.-8      	; 0x3ac <_Z7pinModehh+0x260>
     3b4:	84 2b       	or	r24, r20
     3b6:	83 bb       	out	0x13, r24	; 19
			        break;
     3b8:	08 95       	ret
			 	case'h':
	                DDRH|=(1<<c[pInno]);
     3ba:	e1 e0       	ldi	r30, 0x01	; 1
     3bc:	f1 e0       	ldi	r31, 0x01	; 1
     3be:	40 81       	ld	r20, Z
     3c0:	dc 01       	movw	r26, r24
     3c2:	aa 0f       	add	r26, r26
     3c4:	bb 1f       	adc	r27, r27
     3c6:	a0 50       	subi	r26, 0x00	; 0
     3c8:	be 4f       	sbci	r27, 0xFE	; 254
     3ca:	21 e0       	ldi	r18, 0x01	; 1
     3cc:	30 e0       	ldi	r19, 0x00	; 0
     3ce:	c9 01       	movw	r24, r18
     3d0:	0c 90       	ld	r0, X
     3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <_Z7pinModehh+0x28c>
     3d4:	88 0f       	add	r24, r24
     3d6:	99 1f       	adc	r25, r25
     3d8:	0a 94       	dec	r0
     3da:	e2 f7       	brpl	.-8      	; 0x3d4 <_Z7pinModehh+0x288>
     3dc:	84 2b       	or	r24, r20
     3de:	80 83       	st	Z, r24
			        break;
     3e0:	08 95       	ret
			    case'j':
	                DDRJ|=(1<<c[pInno]);
     3e2:	e4 e0       	ldi	r30, 0x04	; 4
     3e4:	f1 e0       	ldi	r31, 0x01	; 1
     3e6:	40 81       	ld	r20, Z
     3e8:	dc 01       	movw	r26, r24
     3ea:	aa 0f       	add	r26, r26
     3ec:	bb 1f       	adc	r27, r27
     3ee:	a0 50       	subi	r26, 0x00	; 0
     3f0:	be 4f       	sbci	r27, 0xFE	; 254
     3f2:	21 e0       	ldi	r18, 0x01	; 1
     3f4:	30 e0       	ldi	r19, 0x00	; 0
     3f6:	c9 01       	movw	r24, r18
     3f8:	0c 90       	ld	r0, X
     3fa:	02 c0       	rjmp	.+4      	; 0x400 <_Z7pinModehh+0x2b4>
     3fc:	88 0f       	add	r24, r24
     3fe:	99 1f       	adc	r25, r25
     400:	0a 94       	dec	r0
     402:	e2 f7       	brpl	.-8      	; 0x3fc <_Z7pinModehh+0x2b0>
     404:	84 2b       	or	r24, r20
     406:	80 83       	st	Z, r24
			        break;
     408:	08 95       	ret
				case'l':
	                DDRL|=(1<<c[pInno]);
     40a:	ea e0       	ldi	r30, 0x0A	; 10
     40c:	f1 e0       	ldi	r31, 0x01	; 1
     40e:	40 81       	ld	r20, Z
     410:	dc 01       	movw	r26, r24
     412:	aa 0f       	add	r26, r26
     414:	bb 1f       	adc	r27, r27
     416:	a0 50       	subi	r26, 0x00	; 0
     418:	be 4f       	sbci	r27, 0xFE	; 254
     41a:	21 e0       	ldi	r18, 0x01	; 1
     41c:	30 e0       	ldi	r19, 0x00	; 0
     41e:	c9 01       	movw	r24, r18
     420:	0c 90       	ld	r0, X
     422:	02 c0       	rjmp	.+4      	; 0x428 <_Z7pinModehh+0x2dc>
     424:	88 0f       	add	r24, r24
     426:	99 1f       	adc	r25, r25
     428:	0a 94       	dec	r0
     42a:	e2 f7       	brpl	.-8      	; 0x424 <_Z7pinModehh+0x2d8>
     42c:	84 2b       	or	r24, r20
     42e:	80 83       	st	Z, r24
     430:	08 95       	ret

00000432 <_Z12digitalWritehh>:
	}
}

void digitalWrite (uint8_t pInno ,uint8_t mOde)
{
   if(mOde==0)
     432:	66 23       	and	r22, r22
     434:	09 f0       	breq	.+2      	; 0x438 <_Z12digitalWritehh+0x6>
     436:	b8 c0       	rjmp	.+368    	; 0x5a8 <_Z12digitalWritehh+0x176>
        { switch(d[pInno])
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	fc 01       	movw	r30, r24
     43c:	e8 58       	subi	r30, 0x88	; 136
     43e:	fd 4f       	sbci	r31, 0xFD	; 253
     440:	20 81       	ld	r18, Z
     442:	25 36       	cpi	r18, 0x65	; 101
     444:	09 f4       	brne	.+2      	; 0x448 <_Z12digitalWritehh+0x16>
     446:	50 c0       	rjmp	.+160    	; 0x4e8 <_Z12digitalWritehh+0xb6>
     448:	26 36       	cpi	r18, 0x66	; 102
     44a:	40 f4       	brcc	.+16     	; 0x45c <_Z12digitalWritehh+0x2a>
     44c:	23 36       	cpi	r18, 0x63	; 99
     44e:	41 f1       	breq	.+80     	; 0x4a0 <_Z12digitalWritehh+0x6e>
     450:	24 36       	cpi	r18, 0x64	; 100
     452:	c0 f5       	brcc	.+112    	; 0x4c4 <_Z12digitalWritehh+0x92>
     454:	22 36       	cpi	r18, 0x62	; 98
     456:	09 f0       	breq	.+2      	; 0x45a <_Z12digitalWritehh+0x28>
     458:	5e c1       	rjmp	.+700    	; 0x716 <_Z12digitalWritehh+0x2e4>
     45a:	10 c0       	rjmp	.+32     	; 0x47c <_Z12digitalWritehh+0x4a>
     45c:	28 36       	cpi	r18, 0x68	; 104
     45e:	09 f4       	brne	.+2      	; 0x462 <_Z12digitalWritehh+0x30>
     460:	67 c0       	rjmp	.+206    	; 0x530 <_Z12digitalWritehh+0xfe>
     462:	29 36       	cpi	r18, 0x69	; 105
     464:	20 f4       	brcc	.+8      	; 0x46e <_Z12digitalWritehh+0x3c>
     466:	27 36       	cpi	r18, 0x67	; 103
     468:	09 f0       	breq	.+2      	; 0x46c <_Z12digitalWritehh+0x3a>
     46a:	55 c1       	rjmp	.+682    	; 0x716 <_Z12digitalWritehh+0x2e4>
     46c:	4f c0       	rjmp	.+158    	; 0x50c <_Z12digitalWritehh+0xda>
     46e:	2a 36       	cpi	r18, 0x6A	; 106
     470:	09 f4       	brne	.+2      	; 0x474 <_Z12digitalWritehh+0x42>
     472:	72 c0       	rjmp	.+228    	; 0x558 <_Z12digitalWritehh+0x126>
     474:	2c 36       	cpi	r18, 0x6C	; 108
     476:	09 f0       	breq	.+2      	; 0x47a <_Z12digitalWritehh+0x48>
     478:	4e c1       	rjmp	.+668    	; 0x716 <_Z12digitalWritehh+0x2e4>
     47a:	82 c0       	rjmp	.+260    	; 0x580 <_Z12digitalWritehh+0x14e>
         {

	          case'b':
	                  PORTB&=~(1<<c[pInno]);
     47c:	25 b1       	in	r18, 0x05	; 5
     47e:	fc 01       	movw	r30, r24
     480:	ee 0f       	add	r30, r30
     482:	ff 1f       	adc	r31, r31
     484:	e0 50       	subi	r30, 0x00	; 0
     486:	fe 4f       	sbci	r31, 0xFE	; 254
     488:	81 e0       	ldi	r24, 0x01	; 1
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	00 80       	ld	r0, Z
     48e:	02 c0       	rjmp	.+4      	; 0x494 <_Z12digitalWritehh+0x62>
     490:	88 0f       	add	r24, r24
     492:	99 1f       	adc	r25, r25
     494:	0a 94       	dec	r0
     496:	e2 f7       	brpl	.-8      	; 0x490 <_Z12digitalWritehh+0x5e>
     498:	80 95       	com	r24
     49a:	82 23       	and	r24, r18
     49c:	85 b9       	out	0x05, r24	; 5
			           break;
     49e:	08 95       	ret
	          case'c':
	                 PORTB&=~(1<<c[pInno]);
     4a0:	25 b1       	in	r18, 0x05	; 5
     4a2:	fc 01       	movw	r30, r24
     4a4:	ee 0f       	add	r30, r30
     4a6:	ff 1f       	adc	r31, r31
     4a8:	e0 50       	subi	r30, 0x00	; 0
     4aa:	fe 4f       	sbci	r31, 0xFE	; 254
     4ac:	81 e0       	ldi	r24, 0x01	; 1
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	00 80       	ld	r0, Z
     4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <_Z12digitalWritehh+0x86>
     4b4:	88 0f       	add	r24, r24
     4b6:	99 1f       	adc	r25, r25
     4b8:	0a 94       	dec	r0
     4ba:	e2 f7       	brpl	.-8      	; 0x4b4 <_Z12digitalWritehh+0x82>
     4bc:	80 95       	com	r24
     4be:	82 23       	and	r24, r18
     4c0:	85 b9       	out	0x05, r24	; 5
			          break;
     4c2:	08 95       	ret
	          case'd':
	                 PORTD&=~(1<<c[pInno]);
     4c4:	2b b1       	in	r18, 0x0b	; 11
     4c6:	fc 01       	movw	r30, r24
     4c8:	ee 0f       	add	r30, r30
     4ca:	ff 1f       	adc	r31, r31
     4cc:	e0 50       	subi	r30, 0x00	; 0
     4ce:	fe 4f       	sbci	r31, 0xFE	; 254
     4d0:	81 e0       	ldi	r24, 0x01	; 1
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	00 80       	ld	r0, Z
     4d6:	02 c0       	rjmp	.+4      	; 0x4dc <_Z12digitalWritehh+0xaa>
     4d8:	88 0f       	add	r24, r24
     4da:	99 1f       	adc	r25, r25
     4dc:	0a 94       	dec	r0
     4de:	e2 f7       	brpl	.-8      	; 0x4d8 <_Z12digitalWritehh+0xa6>
     4e0:	80 95       	com	r24
     4e2:	82 23       	and	r24, r18
     4e4:	8b b9       	out	0x0b, r24	; 11
			          break;
     4e6:	08 95       	ret

		      case'e':
	                  PORTE&=~(1<<c[pInno]);
     4e8:	2e b1       	in	r18, 0x0e	; 14
     4ea:	fc 01       	movw	r30, r24
     4ec:	ee 0f       	add	r30, r30
     4ee:	ff 1f       	adc	r31, r31
     4f0:	e0 50       	subi	r30, 0x00	; 0
     4f2:	fe 4f       	sbci	r31, 0xFE	; 254
     4f4:	81 e0       	ldi	r24, 0x01	; 1
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	00 80       	ld	r0, Z
     4fa:	02 c0       	rjmp	.+4      	; 0x500 <_Z12digitalWritehh+0xce>
     4fc:	88 0f       	add	r24, r24
     4fe:	99 1f       	adc	r25, r25
     500:	0a 94       	dec	r0
     502:	e2 f7       	brpl	.-8      	; 0x4fc <_Z12digitalWritehh+0xca>
     504:	80 95       	com	r24
     506:	82 23       	and	r24, r18
     508:	8e b9       	out	0x0e, r24	; 14
			           break;
     50a:	08 95       	ret

			     case'g':
	                  PORTG&=~(1<<c[pInno]);
     50c:	24 b3       	in	r18, 0x14	; 20
     50e:	fc 01       	movw	r30, r24
     510:	ee 0f       	add	r30, r30
     512:	ff 1f       	adc	r31, r31
     514:	e0 50       	subi	r30, 0x00	; 0
     516:	fe 4f       	sbci	r31, 0xFE	; 254
     518:	81 e0       	ldi	r24, 0x01	; 1
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	00 80       	ld	r0, Z
     51e:	02 c0       	rjmp	.+4      	; 0x524 <_Z12digitalWritehh+0xf2>
     520:	88 0f       	add	r24, r24
     522:	99 1f       	adc	r25, r25
     524:	0a 94       	dec	r0
     526:	e2 f7       	brpl	.-8      	; 0x520 <_Z12digitalWritehh+0xee>
     528:	80 95       	com	r24
     52a:	82 23       	and	r24, r18
     52c:	84 bb       	out	0x14, r24	; 20
			           break;
     52e:	08 95       	ret
			 case'h':
	                  PORTH&=~(1<<c[pInno]);
     530:	e2 e0       	ldi	r30, 0x02	; 2
     532:	f1 e0       	ldi	r31, 0x01	; 1
     534:	20 81       	ld	r18, Z
     536:	dc 01       	movw	r26, r24
     538:	aa 0f       	add	r26, r26
     53a:	bb 1f       	adc	r27, r27
     53c:	a0 50       	subi	r26, 0x00	; 0
     53e:	be 4f       	sbci	r27, 0xFE	; 254
     540:	81 e0       	ldi	r24, 0x01	; 1
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	0c 90       	ld	r0, X
     546:	02 c0       	rjmp	.+4      	; 0x54c <_Z12digitalWritehh+0x11a>
     548:	88 0f       	add	r24, r24
     54a:	99 1f       	adc	r25, r25
     54c:	0a 94       	dec	r0
     54e:	e2 f7       	brpl	.-8      	; 0x548 <_Z12digitalWritehh+0x116>
     550:	80 95       	com	r24
     552:	82 23       	and	r24, r18
     554:	80 83       	st	Z, r24
			           break;
     556:	08 95       	ret

			     case'j':
	                  PORTJ&=~(1<<c[pInno]);
     558:	e5 e0       	ldi	r30, 0x05	; 5
     55a:	f1 e0       	ldi	r31, 0x01	; 1
     55c:	20 81       	ld	r18, Z
     55e:	dc 01       	movw	r26, r24
     560:	aa 0f       	add	r26, r26
     562:	bb 1f       	adc	r27, r27
     564:	a0 50       	subi	r26, 0x00	; 0
     566:	be 4f       	sbci	r27, 0xFE	; 254
     568:	81 e0       	ldi	r24, 0x01	; 1
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	0c 90       	ld	r0, X
     56e:	02 c0       	rjmp	.+4      	; 0x574 <_Z12digitalWritehh+0x142>
     570:	88 0f       	add	r24, r24
     572:	99 1f       	adc	r25, r25
     574:	0a 94       	dec	r0
     576:	e2 f7       	brpl	.-8      	; 0x570 <_Z12digitalWritehh+0x13e>
     578:	80 95       	com	r24
     57a:	82 23       	and	r24, r18
     57c:	80 83       	st	Z, r24
			           break;
     57e:	08 95       	ret
				     case'l':
	                  PORTL&=~(1<<c[pInno]);
     580:	eb e0       	ldi	r30, 0x0B	; 11
     582:	f1 e0       	ldi	r31, 0x01	; 1
     584:	20 81       	ld	r18, Z
     586:	dc 01       	movw	r26, r24
     588:	aa 0f       	add	r26, r26
     58a:	bb 1f       	adc	r27, r27
     58c:	a0 50       	subi	r26, 0x00	; 0
     58e:	be 4f       	sbci	r27, 0xFE	; 254
     590:	81 e0       	ldi	r24, 0x01	; 1
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	0c 90       	ld	r0, X
     596:	02 c0       	rjmp	.+4      	; 0x59c <_Z12digitalWritehh+0x16a>
     598:	88 0f       	add	r24, r24
     59a:	99 1f       	adc	r25, r25
     59c:	0a 94       	dec	r0
     59e:	e2 f7       	brpl	.-8      	; 0x598 <_Z12digitalWritehh+0x166>
     5a0:	80 95       	com	r24
     5a2:	82 23       	and	r24, r18
     5a4:	80 83       	st	Z, r24
			           break;
     5a6:	08 95       	ret
	     }  }
	else{          switch(d[pInno])
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	fc 01       	movw	r30, r24
     5ac:	e8 58       	subi	r30, 0x88	; 136
     5ae:	fd 4f       	sbci	r31, 0xFD	; 253
     5b0:	20 81       	ld	r18, Z
     5b2:	25 36       	cpi	r18, 0x65	; 101
     5b4:	09 f4       	brne	.+2      	; 0x5b8 <_Z12digitalWritehh+0x186>
     5b6:	50 c0       	rjmp	.+160    	; 0x658 <_Z12digitalWritehh+0x226>
     5b8:	26 36       	cpi	r18, 0x66	; 102
     5ba:	40 f4       	brcc	.+16     	; 0x5cc <_Z12digitalWritehh+0x19a>
     5bc:	23 36       	cpi	r18, 0x63	; 99
     5be:	41 f1       	breq	.+80     	; 0x610 <_Z12digitalWritehh+0x1de>
     5c0:	24 36       	cpi	r18, 0x64	; 100
     5c2:	c0 f5       	brcc	.+112    	; 0x634 <_Z12digitalWritehh+0x202>
     5c4:	22 36       	cpi	r18, 0x62	; 98
     5c6:	09 f0       	breq	.+2      	; 0x5ca <_Z12digitalWritehh+0x198>
     5c8:	a6 c0       	rjmp	.+332    	; 0x716 <_Z12digitalWritehh+0x2e4>
     5ca:	10 c0       	rjmp	.+32     	; 0x5ec <_Z12digitalWritehh+0x1ba>
     5cc:	28 36       	cpi	r18, 0x68	; 104
     5ce:	09 f4       	brne	.+2      	; 0x5d2 <_Z12digitalWritehh+0x1a0>
     5d0:	67 c0       	rjmp	.+206    	; 0x6a0 <_Z12digitalWritehh+0x26e>
     5d2:	29 36       	cpi	r18, 0x69	; 105
     5d4:	20 f4       	brcc	.+8      	; 0x5de <_Z12digitalWritehh+0x1ac>
     5d6:	27 36       	cpi	r18, 0x67	; 103
     5d8:	09 f0       	breq	.+2      	; 0x5dc <_Z12digitalWritehh+0x1aa>
     5da:	9d c0       	rjmp	.+314    	; 0x716 <_Z12digitalWritehh+0x2e4>
     5dc:	4f c0       	rjmp	.+158    	; 0x67c <_Z12digitalWritehh+0x24a>
     5de:	2a 36       	cpi	r18, 0x6A	; 106
     5e0:	09 f4       	brne	.+2      	; 0x5e4 <_Z12digitalWritehh+0x1b2>
     5e2:	72 c0       	rjmp	.+228    	; 0x6c8 <_Z12digitalWritehh+0x296>
     5e4:	2c 36       	cpi	r18, 0x6C	; 108
     5e6:	09 f0       	breq	.+2      	; 0x5ea <_Z12digitalWritehh+0x1b8>
     5e8:	96 c0       	rjmp	.+300    	; 0x716 <_Z12digitalWritehh+0x2e4>
     5ea:	82 c0       	rjmp	.+260    	; 0x6f0 <_Z12digitalWritehh+0x2be>
         {

	          case'b':
	                 PORTB|=(1<<c[pInno]);
     5ec:	45 b1       	in	r20, 0x05	; 5
     5ee:	fc 01       	movw	r30, r24
     5f0:	ee 0f       	add	r30, r30
     5f2:	ff 1f       	adc	r31, r31
     5f4:	e0 50       	subi	r30, 0x00	; 0
     5f6:	fe 4f       	sbci	r31, 0xFE	; 254
     5f8:	21 e0       	ldi	r18, 0x01	; 1
     5fa:	30 e0       	ldi	r19, 0x00	; 0
     5fc:	c9 01       	movw	r24, r18
     5fe:	00 80       	ld	r0, Z
     600:	02 c0       	rjmp	.+4      	; 0x606 <_Z12digitalWritehh+0x1d4>
     602:	88 0f       	add	r24, r24
     604:	99 1f       	adc	r25, r25
     606:	0a 94       	dec	r0
     608:	e2 f7       	brpl	.-8      	; 0x602 <_Z12digitalWritehh+0x1d0>
     60a:	84 2b       	or	r24, r20
     60c:	85 b9       	out	0x05, r24	; 5
			           break;
     60e:	08 95       	ret
	          case'c':
	                 PORTC|=(1<<c[pInno]);
     610:	48 b1       	in	r20, 0x08	; 8
     612:	fc 01       	movw	r30, r24
     614:	ee 0f       	add	r30, r30
     616:	ff 1f       	adc	r31, r31
     618:	e0 50       	subi	r30, 0x00	; 0
     61a:	fe 4f       	sbci	r31, 0xFE	; 254
     61c:	21 e0       	ldi	r18, 0x01	; 1
     61e:	30 e0       	ldi	r19, 0x00	; 0
     620:	c9 01       	movw	r24, r18
     622:	00 80       	ld	r0, Z
     624:	02 c0       	rjmp	.+4      	; 0x62a <_Z12digitalWritehh+0x1f8>
     626:	88 0f       	add	r24, r24
     628:	99 1f       	adc	r25, r25
     62a:	0a 94       	dec	r0
     62c:	e2 f7       	brpl	.-8      	; 0x626 <_Z12digitalWritehh+0x1f4>
     62e:	84 2b       	or	r24, r20
     630:	88 b9       	out	0x08, r24	; 8
			          break;
     632:	08 95       	ret
	          case'd':
	                 PORTD|=(1<<c[pInno]);
     634:	4b b1       	in	r20, 0x0b	; 11
     636:	fc 01       	movw	r30, r24
     638:	ee 0f       	add	r30, r30
     63a:	ff 1f       	adc	r31, r31
     63c:	e0 50       	subi	r30, 0x00	; 0
     63e:	fe 4f       	sbci	r31, 0xFE	; 254
     640:	21 e0       	ldi	r18, 0x01	; 1
     642:	30 e0       	ldi	r19, 0x00	; 0
     644:	c9 01       	movw	r24, r18
     646:	00 80       	ld	r0, Z
     648:	02 c0       	rjmp	.+4      	; 0x64e <_Z12digitalWritehh+0x21c>
     64a:	88 0f       	add	r24, r24
     64c:	99 1f       	adc	r25, r25
     64e:	0a 94       	dec	r0
     650:	e2 f7       	brpl	.-8      	; 0x64a <_Z12digitalWritehh+0x218>
     652:	84 2b       	or	r24, r20
     654:	8b b9       	out	0x0b, r24	; 11
			          break;
     656:	08 95       	ret

		      case'e':
	                  PORTE|=(1<<c[pInno]);
     658:	4e b1       	in	r20, 0x0e	; 14
     65a:	fc 01       	movw	r30, r24
     65c:	ee 0f       	add	r30, r30
     65e:	ff 1f       	adc	r31, r31
     660:	e0 50       	subi	r30, 0x00	; 0
     662:	fe 4f       	sbci	r31, 0xFE	; 254
     664:	21 e0       	ldi	r18, 0x01	; 1
     666:	30 e0       	ldi	r19, 0x00	; 0
     668:	c9 01       	movw	r24, r18
     66a:	00 80       	ld	r0, Z
     66c:	02 c0       	rjmp	.+4      	; 0x672 <_Z12digitalWritehh+0x240>
     66e:	88 0f       	add	r24, r24
     670:	99 1f       	adc	r25, r25
     672:	0a 94       	dec	r0
     674:	e2 f7       	brpl	.-8      	; 0x66e <_Z12digitalWritehh+0x23c>
     676:	84 2b       	or	r24, r20
     678:	8e b9       	out	0x0e, r24	; 14
			           break;
     67a:	08 95       	ret

			     case'g':
	                  PORTG|=(1<<c[pInno]);
     67c:	44 b3       	in	r20, 0x14	; 20
     67e:	fc 01       	movw	r30, r24
     680:	ee 0f       	add	r30, r30
     682:	ff 1f       	adc	r31, r31
     684:	e0 50       	subi	r30, 0x00	; 0
     686:	fe 4f       	sbci	r31, 0xFE	; 254
     688:	21 e0       	ldi	r18, 0x01	; 1
     68a:	30 e0       	ldi	r19, 0x00	; 0
     68c:	c9 01       	movw	r24, r18
     68e:	00 80       	ld	r0, Z
     690:	02 c0       	rjmp	.+4      	; 0x696 <_Z12digitalWritehh+0x264>
     692:	88 0f       	add	r24, r24
     694:	99 1f       	adc	r25, r25
     696:	0a 94       	dec	r0
     698:	e2 f7       	brpl	.-8      	; 0x692 <_Z12digitalWritehh+0x260>
     69a:	84 2b       	or	r24, r20
     69c:	84 bb       	out	0x14, r24	; 20
			           break;
     69e:	08 95       	ret
			 case'h':
	                  PORTH|=(1<<c[pInno]);
     6a0:	e2 e0       	ldi	r30, 0x02	; 2
     6a2:	f1 e0       	ldi	r31, 0x01	; 1
     6a4:	40 81       	ld	r20, Z
     6a6:	dc 01       	movw	r26, r24
     6a8:	aa 0f       	add	r26, r26
     6aa:	bb 1f       	adc	r27, r27
     6ac:	a0 50       	subi	r26, 0x00	; 0
     6ae:	be 4f       	sbci	r27, 0xFE	; 254
     6b0:	21 e0       	ldi	r18, 0x01	; 1
     6b2:	30 e0       	ldi	r19, 0x00	; 0
     6b4:	c9 01       	movw	r24, r18
     6b6:	0c 90       	ld	r0, X
     6b8:	02 c0       	rjmp	.+4      	; 0x6be <_Z12digitalWritehh+0x28c>
     6ba:	88 0f       	add	r24, r24
     6bc:	99 1f       	adc	r25, r25
     6be:	0a 94       	dec	r0
     6c0:	e2 f7       	brpl	.-8      	; 0x6ba <_Z12digitalWritehh+0x288>
     6c2:	84 2b       	or	r24, r20
     6c4:	80 83       	st	Z, r24
			           break;
     6c6:	08 95       	ret
		     /*case'i':
	                  PORTI|=(1<<c[pInno]);
			           break;*/
			     case'j':
	                  PORTJ|=(1<<c[pInno]);
     6c8:	e5 e0       	ldi	r30, 0x05	; 5
     6ca:	f1 e0       	ldi	r31, 0x01	; 1
     6cc:	40 81       	ld	r20, Z
     6ce:	dc 01       	movw	r26, r24
     6d0:	aa 0f       	add	r26, r26
     6d2:	bb 1f       	adc	r27, r27
     6d4:	a0 50       	subi	r26, 0x00	; 0
     6d6:	be 4f       	sbci	r27, 0xFE	; 254
     6d8:	21 e0       	ldi	r18, 0x01	; 1
     6da:	30 e0       	ldi	r19, 0x00	; 0
     6dc:	c9 01       	movw	r24, r18
     6de:	0c 90       	ld	r0, X
     6e0:	02 c0       	rjmp	.+4      	; 0x6e6 <_Z12digitalWritehh+0x2b4>
     6e2:	88 0f       	add	r24, r24
     6e4:	99 1f       	adc	r25, r25
     6e6:	0a 94       	dec	r0
     6e8:	e2 f7       	brpl	.-8      	; 0x6e2 <_Z12digitalWritehh+0x2b0>
     6ea:	84 2b       	or	r24, r20
     6ec:	80 83       	st	Z, r24
			           break;
     6ee:	08 95       	ret
				     case'l':
	                  PORTL|=(1<<c[pInno]);
     6f0:	eb e0       	ldi	r30, 0x0B	; 11
     6f2:	f1 e0       	ldi	r31, 0x01	; 1
     6f4:	40 81       	ld	r20, Z
     6f6:	dc 01       	movw	r26, r24
     6f8:	aa 0f       	add	r26, r26
     6fa:	bb 1f       	adc	r27, r27
     6fc:	a0 50       	subi	r26, 0x00	; 0
     6fe:	be 4f       	sbci	r27, 0xFE	; 254
     700:	21 e0       	ldi	r18, 0x01	; 1
     702:	30 e0       	ldi	r19, 0x00	; 0
     704:	c9 01       	movw	r24, r18
     706:	0c 90       	ld	r0, X
     708:	02 c0       	rjmp	.+4      	; 0x70e <_Z12digitalWritehh+0x2dc>
     70a:	88 0f       	add	r24, r24
     70c:	99 1f       	adc	r25, r25
     70e:	0a 94       	dec	r0
     710:	e2 f7       	brpl	.-8      	; 0x70a <_Z12digitalWritehh+0x2d8>
     712:	84 2b       	or	r24, r20
     714:	80 83       	st	Z, r24
     716:	08 95       	ret

00000718 <_Z11digitalReadh>:

uint8_t digitalRead(uint8_t pInno)
{
	uint8_t z;				//not a good practice
	uint8_t x;				//not a good practice
   switch(d[pInno])
     718:	28 e7       	ldi	r18, 0x78	; 120
     71a:	32 e0       	ldi	r19, 0x02	; 2
     71c:	28 0f       	add	r18, r24
     71e:	31 1d       	adc	r19, r1
     720:	f9 01       	movw	r30, r18
     722:	80 81       	ld	r24, Z
     724:	85 36       	cpi	r24, 0x65	; 101
     726:	d9 f0       	breq	.+54     	; 0x75e <_Z11digitalReadh+0x46>
     728:	86 36       	cpi	r24, 0x66	; 102
     72a:	38 f4       	brcc	.+14     	; 0x73a <_Z11digitalReadh+0x22>
     72c:	83 36       	cpi	r24, 0x63	; 99
     72e:	99 f0       	breq	.+38     	; 0x756 <_Z11digitalReadh+0x3e>
     730:	84 36       	cpi	r24, 0x64	; 100
     732:	98 f4       	brcc	.+38     	; 0x75a <_Z11digitalReadh+0x42>
     734:	82 36       	cpi	r24, 0x62	; 98
     736:	f9 f4       	brne	.+62     	; 0x776 <_Z11digitalReadh+0x5e>
     738:	0c c0       	rjmp	.+24     	; 0x752 <_Z11digitalReadh+0x3a>
     73a:	88 36       	cpi	r24, 0x68	; 104
     73c:	a1 f0       	breq	.+40     	; 0x766 <_Z11digitalReadh+0x4e>
     73e:	89 36       	cpi	r24, 0x69	; 105
     740:	18 f4       	brcc	.+6      	; 0x748 <_Z11digitalReadh+0x30>
     742:	87 36       	cpi	r24, 0x67	; 103
     744:	c1 f4       	brne	.+48     	; 0x776 <_Z11digitalReadh+0x5e>
     746:	0d c0       	rjmp	.+26     	; 0x762 <_Z11digitalReadh+0x4a>
     748:	8a 36       	cpi	r24, 0x6A	; 106
     74a:	81 f0       	breq	.+32     	; 0x76c <_Z11digitalReadh+0x54>
     74c:	8c 36       	cpi	r24, 0x6C	; 108
     74e:	99 f4       	brne	.+38     	; 0x776 <_Z11digitalReadh+0x5e>
     750:	10 c0       	rjmp	.+32     	; 0x772 <_Z11digitalReadh+0x5a>
         {

	          case'b':
	                  z=PINB&(1<<c[pInno]);
     752:	83 b1       	in	r24, 0x03	; 3
			           break;
     754:	08 95       	ret
	          case'c':
	                  z=PINC&(1<<c[pInno]);
     756:	86 b1       	in	r24, 0x06	; 6
			          break;
     758:	08 95       	ret
	          case'd':
	                  z=PIND&(1<<c[pInno]);
     75a:	89 b1       	in	r24, 0x09	; 9
			          break;
     75c:	08 95       	ret

		      case'e':
	                   z=PINE&(1<<c[pInno]);
     75e:	8c b1       	in	r24, 0x0c	; 12
			           break;
     760:	08 95       	ret

			     case'g':
	                   z=PING&(1<<c[pInno]);
     762:	82 b3       	in	r24, 0x12	; 18
			           break;
     764:	08 95       	ret
			 case'h':
	                  z=PINH&(1<<c[pInno]);
     766:	80 91 00 01 	lds	r24, 0x0100
			           break;
     76a:	08 95       	ret

			     case'j':
	                   z=PINJ&(1<<c[pInno]);
     76c:	80 91 03 01 	lds	r24, 0x0103
			           break;
     770:	08 95       	ret
				     case'l':
	                   z=PINL&(1<<c[pInno]);
     772:	80 91 09 01 	lds	r24, 0x0109
			           break;
					   return z;
	     }
}
     776:	08 95       	ret

00000778 <_Z20microsecondsToInchesm>:
{
  // According to Parallax's datasheet for the PING))), there are 73.746
  // microseconds per inch (i.e. sound travels at 1130 feet per second).
  // This gives the distance travelled by the ping, outbound and return,
  // so we divide by 2 to get the distance of the obstacle.
  return (mIcroseconds*0.00669/ 2);
     778:	0e 94 2f 14 	call	0x285e	; 0x285e <__floatunsisf>
     77c:	2a ec       	ldi	r18, 0xCA	; 202
     77e:	37 e3       	ldi	r19, 0x37	; 55
     780:	4b ed       	ldi	r20, 0xDB	; 219
     782:	5b e3       	ldi	r21, 0x3B	; 59
     784:	0e 94 bd 14 	call	0x297a	; 0x297a <__mulsf3>
     788:	20 e0       	ldi	r18, 0x00	; 0
     78a:	30 e0       	ldi	r19, 0x00	; 0
     78c:	40 e0       	ldi	r20, 0x00	; 0
     78e:	5f e3       	ldi	r21, 0x3F	; 63
     790:	0e 94 bd 14 	call	0x297a	; 0x297a <__mulsf3>
     794:	0e 94 03 14 	call	0x2806	; 0x2806 <__fixunssfsi>
}
     798:	08 95       	ret

0000079a <_Z25microsecondsToCentimetersm>:
long unsigned int microsecondsToCentimeters(long unsigned int microseconds)
{
  // The speed of sound is 340 m/s or 29 microseconds per centimeter.
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
     79a:	0e 94 2f 14 	call	0x285e	; 0x285e <__floatunsisf>
     79e:	2b e7       	ldi	r18, 0x7B	; 123
     7a0:	34 e1       	ldi	r19, 0x14	; 20
     7a2:	4e e2       	ldi	r20, 0x2E	; 46
     7a4:	5e e3       	ldi	r21, 0x3E	; 62
     7a6:	0e 94 bd 14 	call	0x297a	; 0x297a <__mulsf3>
     7aa:	20 e0       	ldi	r18, 0x00	; 0
     7ac:	30 e0       	ldi	r19, 0x00	; 0
     7ae:	40 e0       	ldi	r20, 0x00	; 0
     7b0:	5f e3       	ldi	r21, 0x3F	; 63
     7b2:	0e 94 bd 14 	call	0x297a	; 0x297a <__mulsf3>
     7b6:	0e 94 03 14 	call	0x2806	; 0x2806 <__fixunssfsi>
}
     7ba:	08 95       	ret

000007bc <_Z7initADCv>:
Serial1 Serial1;
Serial2 Serial2;
Serial3 Serial3;
void initADC()
{
	ADMUX=(1<<REFS0);				//Aref=AVcc
     7bc:	80 e4       	ldi	r24, 0x40	; 64
     7be:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1);		//ADC enabled, Prescaler 64
     7c2:	86 e8       	ldi	r24, 0x86	; 134
     7c4:	80 93 7a 00 	sts	0x007A, r24
}
     7c8:	08 95       	ret

000007ca <_Z10analogReadi>:

int analogRead(int (pInno))
{
     7ca:	0f 93       	push	r16
     7cc:	1f 93       	push	r17
     7ce:	cf 93       	push	r28
     7d0:	df 93       	push	r29
     7d2:	8c 01       	movw	r16, r24
        //prescalar set to default
  	initADC();
     7d4:	0e 94 de 03 	call	0x7bc	; 0x7bc <_Z7initADCv>
  	ADMUX=(1<<REFS0)|(0<<REFS1);
     7d8:	cc e7       	ldi	r28, 0x7C	; 124
     7da:	d0 e0       	ldi	r29, 0x00	; 0
     7dc:	80 e4       	ldi	r24, 0x40	; 64
     7de:	88 83       	st	Y, r24
  	ADCSRA|=(1<<ADEN);
     7e0:	ea e7       	ldi	r30, 0x7A	; 122
     7e2:	f0 e0       	ldi	r31, 0x00	; 0
     7e4:	80 81       	ld	r24, Z
     7e6:	80 68       	ori	r24, 0x80	; 128
     7e8:	80 83       	st	Z, r24
    ADMUX|=(pInno%8);//chose value from 0 to 7 to chose adc pin accordingly
     7ea:	28 81       	ld	r18, Y
     7ec:	c8 01       	movw	r24, r16
     7ee:	68 e0       	ldi	r22, 0x08	; 8
     7f0:	70 e0       	ldi	r23, 0x00	; 0
     7f2:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <__divmodhi4>
     7f6:	28 2b       	or	r18, r24
     7f8:	28 83       	st	Y, r18
    ADCSRA|=(1<<ADEN);
     7fa:	80 81       	ld	r24, Z
     7fc:	80 68       	ori	r24, 0x80	; 128
     7fe:	80 83       	st	Z, r24
    ADCSRA|=(1<<ADSC);
     800:	80 81       	ld	r24, Z
     802:	80 64       	ori	r24, 0x40	; 64
     804:	80 83       	st	Z, r24
	while(ADCSRA&(1<<ADSC));
     806:	80 81       	ld	r24, Z
     808:	86 fd       	sbrc	r24, 6
     80a:	fd cf       	rjmp	.-6      	; 0x806 <_Z10analogReadi+0x3c>
	return (ADC);
     80c:	20 91 78 00 	lds	r18, 0x0078
     810:	30 91 79 00 	lds	r19, 0x0079
}
     814:	82 2f       	mov	r24, r18
     816:	93 2f       	mov	r25, r19
     818:	df 91       	pop	r29
     81a:	cf 91       	pop	r28
     81c:	1f 91       	pop	r17
     81e:	0f 91       	pop	r16
     820:	08 95       	ret

00000822 <_Z11analogWritehh>:

void analogWrite(uint8_t pInno,uint8_t dUtycY)
{
  switch(pInno)
     822:	89 30       	cpi	r24, 0x09	; 9
     824:	09 f4       	brne	.+2      	; 0x828 <_Z11analogWritehh+0x6>
     826:	59 c0       	rjmp	.+178    	; 0x8da <_Z11analogWritehh+0xb8>
     828:	8a 30       	cpi	r24, 0x0A	; 10
     82a:	98 f4       	brcc	.+38     	; 0x852 <_Z11analogWritehh+0x30>
     82c:	85 30       	cpi	r24, 0x05	; 5
     82e:	09 f4       	brne	.+2      	; 0x832 <_Z11analogWritehh+0x10>
     830:	66 c0       	rjmp	.+204    	; 0x8fe <_Z11analogWritehh+0xdc>
     832:	86 30       	cpi	r24, 0x06	; 6
     834:	38 f4       	brcc	.+14     	; 0x844 <_Z11analogWritehh+0x22>
     836:	82 30       	cpi	r24, 0x02	; 2
     838:	09 f4       	brne	.+2      	; 0x83c <_Z11analogWritehh+0x1a>
     83a:	72 c0       	rjmp	.+228    	; 0x920 <_Z11analogWritehh+0xfe>
     83c:	84 30       	cpi	r24, 0x04	; 4
     83e:	09 f0       	breq	.+2      	; 0x842 <_Z11analogWritehh+0x20>
     840:	e5 c0       	rjmp	.+458    	; 0xa0c <_Z11analogWritehh+0x1ea>
     842:	b2 c0       	rjmp	.+356    	; 0x9a8 <_Z11analogWritehh+0x186>
     844:	86 30       	cpi	r24, 0x06	; 6
     846:	09 f4       	brne	.+2      	; 0x84a <_Z11analogWritehh+0x28>
     848:	b8 c0       	rjmp	.+368    	; 0x9ba <_Z11analogWritehh+0x198>
     84a:	87 30       	cpi	r24, 0x07	; 7
     84c:	09 f0       	breq	.+2      	; 0x850 <_Z11analogWritehh+0x2e>
     84e:	de c0       	rjmp	.+444    	; 0xa0c <_Z11analogWritehh+0x1ea>
     850:	c9 c0       	rjmp	.+402    	; 0x9e4 <_Z11analogWritehh+0x1c2>
     852:	8c 30       	cpi	r24, 0x0C	; 12
     854:	19 f1       	breq	.+70     	; 0x89c <_Z11analogWritehh+0x7a>
     856:	8d 30       	cpi	r24, 0x0D	; 13
     858:	30 f4       	brcc	.+12     	; 0x866 <_Z11analogWritehh+0x44>
     85a:	8a 30       	cpi	r24, 0x0A	; 10
     85c:	81 f1       	breq	.+96     	; 0x8be <_Z11analogWritehh+0x9c>
     85e:	8b 30       	cpi	r24, 0x0B	; 11
     860:	09 f0       	breq	.+2      	; 0x864 <_Z11analogWritehh+0x42>
     862:	d4 c0       	rjmp	.+424    	; 0xa0c <_Z11analogWritehh+0x1ea>
     864:	0a c0       	rjmp	.+20     	; 0x87a <_Z11analogWritehh+0x58>
     866:	8d 32       	cpi	r24, 0x2D	; 45
     868:	09 f4       	brne	.+2      	; 0x86c <_Z11analogWritehh+0x4a>
     86a:	80 c0       	rjmp	.+256    	; 0x96c <_Z11analogWritehh+0x14a>
     86c:	8e 32       	cpi	r24, 0x2E	; 46
     86e:	09 f4       	brne	.+2      	; 0x872 <_Z11analogWritehh+0x50>
     870:	68 c0       	rjmp	.+208    	; 0x942 <_Z11analogWritehh+0x120>
     872:	8d 30       	cpi	r24, 0x0D	; 13
     874:	09 f0       	breq	.+2      	; 0x878 <_Z11analogWritehh+0x56>
     876:	ca c0       	rjmp	.+404    	; 0xa0c <_Z11analogWritehh+0x1ea>
     878:	8e c0       	rjmp	.+284    	; 0x996 <_Z11analogWritehh+0x174>
  {
	  case 11:
		   DDRB|=(1<<PB5);
     87a:	25 9a       	sbi	0x04, 5	; 4
		   TCCR1A|=(1<<WGM10)|(1<<WGM12)|(1<<COM1A1);
     87c:	e0 e8       	ldi	r30, 0x80	; 128
     87e:	f0 e0       	ldi	r31, 0x00	; 0
     880:	80 81       	ld	r24, Z
     882:	89 68       	ori	r24, 0x89	; 137
     884:	80 83       	st	Z, r24
		   TCCR1B|=(1<<CS11)|(1<<CS10);
     886:	e1 e8       	ldi	r30, 0x81	; 129
     888:	f0 e0       	ldi	r31, 0x00	; 0
     88a:	80 81       	ld	r24, Z
     88c:	83 60       	ori	r24, 0x03	; 3
     88e:	80 83       	st	Z, r24
		   OCR1A=dUtycY;
     890:	70 e0       	ldi	r23, 0x00	; 0
     892:	70 93 89 00 	sts	0x0089, r23
     896:	60 93 88 00 	sts	0x0088, r22
		   break;
     89a:	08 95       	ret
	  case 12:
		  DDRB|=(1<<PB6);
     89c:	26 9a       	sbi	0x04, 6	; 4
		  TCCR1A|=(1<<WGM10)|(1<<WGM12)|(1<<COM1B1);
     89e:	e0 e8       	ldi	r30, 0x80	; 128
     8a0:	f0 e0       	ldi	r31, 0x00	; 0
     8a2:	80 81       	ld	r24, Z
     8a4:	89 62       	ori	r24, 0x29	; 41
     8a6:	80 83       	st	Z, r24
		  TCCR1B|=(1<<CS11)|(1<<CS10);
     8a8:	e1 e8       	ldi	r30, 0x81	; 129
     8aa:	f0 e0       	ldi	r31, 0x00	; 0
     8ac:	80 81       	ld	r24, Z
     8ae:	83 60       	ori	r24, 0x03	; 3
     8b0:	80 83       	st	Z, r24
		  OCR1B=dUtycY;
     8b2:	70 e0       	ldi	r23, 0x00	; 0
     8b4:	70 93 8b 00 	sts	0x008B, r23
     8b8:	60 93 8a 00 	sts	0x008A, r22
		  break;
     8bc:	08 95       	ret
	  case 10:
		  DDRB|=(1<<PB4);
     8be:	24 9a       	sbi	0x04, 4	; 4
		  TCCR2A|=(1<<COM2A1)|(1<<WGM21)|(1<<WGM20);
     8c0:	e0 eb       	ldi	r30, 0xB0	; 176
     8c2:	f0 e0       	ldi	r31, 0x00	; 0
     8c4:	80 81       	ld	r24, Z
     8c6:	83 68       	ori	r24, 0x83	; 131
     8c8:	80 83       	st	Z, r24
		  TCCR2B|=(1<<CS20);
     8ca:	e1 eb       	ldi	r30, 0xB1	; 177
     8cc:	f0 e0       	ldi	r31, 0x00	; 0
     8ce:	80 81       	ld	r24, Z
     8d0:	81 60       	ori	r24, 0x01	; 1
     8d2:	80 83       	st	Z, r24
		  OCR2A=dUtycY;
     8d4:	60 93 b3 00 	sts	0x00B3, r22
		  break;
     8d8:	08 95       	ret
	  case 9:
		   DDRH|=(1<<PH6);
     8da:	e1 e0       	ldi	r30, 0x01	; 1
     8dc:	f1 e0       	ldi	r31, 0x01	; 1
     8de:	80 81       	ld	r24, Z
     8e0:	80 64       	ori	r24, 0x40	; 64
     8e2:	80 83       	st	Z, r24
		   TCCR2A|=(1<<WGM21)|(1<<WGM20)|(1<<COM2B1);
     8e4:	e0 eb       	ldi	r30, 0xB0	; 176
     8e6:	f0 e0       	ldi	r31, 0x00	; 0
     8e8:	80 81       	ld	r24, Z
     8ea:	83 62       	ori	r24, 0x23	; 35
     8ec:	80 83       	st	Z, r24
		   TCCR2B|=(1<<CS20);
     8ee:	e1 eb       	ldi	r30, 0xB1	; 177
     8f0:	f0 e0       	ldi	r31, 0x00	; 0
     8f2:	80 81       	ld	r24, Z
     8f4:	81 60       	ori	r24, 0x01	; 1
     8f6:	80 83       	st	Z, r24
		   OCR2B=dUtycY;
     8f8:	60 93 b4 00 	sts	0x00B4, r22
		   break;
     8fc:	08 95       	ret
	  case 5:
		  DDRE|=(1<<PE3);
     8fe:	6b 9a       	sbi	0x0d, 3	; 13
		  TCCR3A|=(1<<WGM32)|(1<<WGM30)|(1<<COM3A1);
     900:	e0 e9       	ldi	r30, 0x90	; 144
     902:	f0 e0       	ldi	r31, 0x00	; 0
     904:	80 81       	ld	r24, Z
     906:	89 68       	ori	r24, 0x89	; 137
     908:	80 83       	st	Z, r24
		  TCCR3B|=(1<<CS30);
     90a:	e1 e9       	ldi	r30, 0x91	; 145
     90c:	f0 e0       	ldi	r31, 0x00	; 0
     90e:	80 81       	ld	r24, Z
     910:	81 60       	ori	r24, 0x01	; 1
     912:	80 83       	st	Z, r24
		  OCR3A=dUtycY;
     914:	70 e0       	ldi	r23, 0x00	; 0
     916:	70 93 99 00 	sts	0x0099, r23
     91a:	60 93 98 00 	sts	0x0098, r22
		  break;
     91e:	08 95       	ret
	  case 2:
	  	  DDRE|=(1<<PE4);	
     920:	6c 9a       	sbi	0x0d, 4	; 13
		  TCCR3A|=(1<<WGM32)|(1<<WGM30)|(1<<COM3B1);
     922:	e0 e9       	ldi	r30, 0x90	; 144
     924:	f0 e0       	ldi	r31, 0x00	; 0
     926:	80 81       	ld	r24, Z
     928:	89 62       	ori	r24, 0x29	; 41
     92a:	80 83       	st	Z, r24
		  TCCR3B|=(1<<CS30);
     92c:	e1 e9       	ldi	r30, 0x91	; 145
     92e:	f0 e0       	ldi	r31, 0x00	; 0
     930:	80 81       	ld	r24, Z
     932:	81 60       	ori	r24, 0x01	; 1
     934:	80 83       	st	Z, r24
		  OCR3B=dUtycY;
     936:	70 e0       	ldi	r23, 0x00	; 0
     938:	70 93 9b 00 	sts	0x009B, r23
     93c:	60 93 9a 00 	sts	0x009A, r22
		  break;
     940:	08 95       	ret
	  case 46:
		  DDRL|=(1<<PL3);
     942:	ea e0       	ldi	r30, 0x0A	; 10
     944:	f1 e0       	ldi	r31, 0x01	; 1
     946:	80 81       	ld	r24, Z
     948:	88 60       	ori	r24, 0x08	; 8
     94a:	80 83       	st	Z, r24
		  TCCR5A|=(1<<WGM52)|(1<<WGM50)|(1<<COM5A1);
     94c:	e0 e2       	ldi	r30, 0x20	; 32
     94e:	f1 e0       	ldi	r31, 0x01	; 1
     950:	80 81       	ld	r24, Z
     952:	89 68       	ori	r24, 0x89	; 137
     954:	80 83       	st	Z, r24
		  TCCR5B|=(1<<CS50);
     956:	e1 e2       	ldi	r30, 0x21	; 33
     958:	f1 e0       	ldi	r31, 0x01	; 1
     95a:	80 81       	ld	r24, Z
     95c:	81 60       	ori	r24, 0x01	; 1
     95e:	80 83       	st	Z, r24
		  OCR5A=dUtycY;
     960:	70 e0       	ldi	r23, 0x00	; 0
     962:	70 93 29 01 	sts	0x0129, r23
     966:	60 93 28 01 	sts	0x0128, r22
		  break;
     96a:	08 95       	ret
	  case 45:
		  DDRL|=(1<<PL4);
     96c:	ea e0       	ldi	r30, 0x0A	; 10
     96e:	f1 e0       	ldi	r31, 0x01	; 1
     970:	80 81       	ld	r24, Z
     972:	80 61       	ori	r24, 0x10	; 16
     974:	80 83       	st	Z, r24
		  TCCR5A|=(1<<WGM52)|(1<<WGM50)|(1<<COM5B1);
     976:	e0 e2       	ldi	r30, 0x20	; 32
     978:	f1 e0       	ldi	r31, 0x01	; 1
     97a:	80 81       	ld	r24, Z
     97c:	89 62       	ori	r24, 0x29	; 41
     97e:	80 83       	st	Z, r24
		  TCCR5B|=(1<<CS50);
     980:	e1 e2       	ldi	r30, 0x21	; 33
     982:	f1 e0       	ldi	r31, 0x01	; 1
     984:	80 81       	ld	r24, Z
     986:	81 60       	ori	r24, 0x01	; 1
     988:	80 83       	st	Z, r24
		  OCR5B=dUtycY;
     98a:	70 e0       	ldi	r23, 0x00	; 0
     98c:	70 93 2b 01 	sts	0x012B, r23
     990:	60 93 2a 01 	sts	0x012A, r22
		  break;
     994:	08 95       	ret
	  case 13:
		  DDRB|=(1<<PB7);
     996:	27 9a       	sbi	0x04, 7	; 4
		  TCCR0A|=(1<<WGM10)|(1<<WGM00)|(1<<COM0A1);
     998:	84 b5       	in	r24, 0x24	; 36
     99a:	81 68       	ori	r24, 0x81	; 129
     99c:	84 bd       	out	0x24, r24	; 36
		  TCCR0B|=(1<<CS00);
     99e:	85 b5       	in	r24, 0x25	; 37
     9a0:	81 60       	ori	r24, 0x01	; 1
     9a2:	85 bd       	out	0x25, r24	; 37
		  OCR0A=dUtycY;
     9a4:	67 bd       	out	0x27, r22	; 39
		  break;
     9a6:	08 95       	ret
	  case 4:
	  	DDRG|=(1<<PG5);
     9a8:	9d 9a       	sbi	0x13, 5	; 19
		TCCR0A|=(1<<WGM10)|(1<<WGM00)|(1<<COM0B1);
     9aa:	84 b5       	in	r24, 0x24	; 36
     9ac:	81 62       	ori	r24, 0x21	; 33
     9ae:	84 bd       	out	0x24, r24	; 36
		TCCR0B|=(1<<CS00);
     9b0:	85 b5       	in	r24, 0x25	; 37
     9b2:	81 60       	ori	r24, 0x01	; 1
     9b4:	85 bd       	out	0x25, r24	; 37
		OCR0B=dUtycY;
     9b6:	68 bd       	out	0x28, r22	; 40
		break;
     9b8:	08 95       	ret

	  case 6:
		  DDRH|=(1<<PH3);
     9ba:	e1 e0       	ldi	r30, 0x01	; 1
     9bc:	f1 e0       	ldi	r31, 0x01	; 1
     9be:	80 81       	ld	r24, Z
     9c0:	88 60       	ori	r24, 0x08	; 8
     9c2:	80 83       	st	Z, r24
		  TCCR4A|=(1<<WGM42)|(1<<WGM40)|(1<<COM4A1);
     9c4:	e0 ea       	ldi	r30, 0xA0	; 160
     9c6:	f0 e0       	ldi	r31, 0x00	; 0
     9c8:	80 81       	ld	r24, Z
     9ca:	89 68       	ori	r24, 0x89	; 137
     9cc:	80 83       	st	Z, r24
		  TCCR4B|=(1<<CS40);
     9ce:	e1 ea       	ldi	r30, 0xA1	; 161
     9d0:	f0 e0       	ldi	r31, 0x00	; 0
     9d2:	80 81       	ld	r24, Z
     9d4:	81 60       	ori	r24, 0x01	; 1
     9d6:	80 83       	st	Z, r24
		  OCR4A=dUtycY;
     9d8:	70 e0       	ldi	r23, 0x00	; 0
     9da:	70 93 a9 00 	sts	0x00A9, r23
     9de:	60 93 a8 00 	sts	0x00A8, r22
		  break;
     9e2:	08 95       	ret
	  case 7:
		  
		  DDRH|=(1<<PH4);
     9e4:	e1 e0       	ldi	r30, 0x01	; 1
     9e6:	f1 e0       	ldi	r31, 0x01	; 1
     9e8:	80 81       	ld	r24, Z
     9ea:	80 61       	ori	r24, 0x10	; 16
     9ec:	80 83       	st	Z, r24
		TCCR4A|=(1<<WGM42)|(1<<WGM40)|(1<<COM4B1);
     9ee:	e0 ea       	ldi	r30, 0xA0	; 160
     9f0:	f0 e0       	ldi	r31, 0x00	; 0
     9f2:	80 81       	ld	r24, Z
     9f4:	89 62       	ori	r24, 0x29	; 41
     9f6:	80 83       	st	Z, r24
		  TCCR4B|=(1<<CS40);
     9f8:	e1 ea       	ldi	r30, 0xA1	; 161
     9fa:	f0 e0       	ldi	r31, 0x00	; 0
     9fc:	80 81       	ld	r24, Z
     9fe:	81 60       	ori	r24, 0x01	; 1
     a00:	80 83       	st	Z, r24
		  OCR4B=dUtycY;
     a02:	70 e0       	ldi	r23, 0x00	; 0
     a04:	70 93 ab 00 	sts	0x00AB, r23
     a08:	60 93 aa 00 	sts	0x00AA, r22
     a0c:	08 95       	ret

00000a0e <_Z6millisv>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a0e:	f8 94       	cli
{
    unsigned long millis_return;

    // Ensure this cannot be disrupted
    ATOMIC_BLOCK(ATOMIC_FORCEON) {
        millis_return = tImer2_millis;
     a10:	20 91 be 02 	lds	r18, 0x02BE
     a14:	30 91 bf 02 	lds	r19, 0x02BF
     a18:	40 91 c0 02 	lds	r20, 0x02C0
     a1c:	50 91 c1 02 	lds	r21, 0x02C1
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
     a20:	78 94       	sei
    }

    return millis_return;
}
     a22:	62 2f       	mov	r22, r18
     a24:	73 2f       	mov	r23, r19
     a26:	84 2f       	mov	r24, r20
     a28:	95 2f       	mov	r25, r21
     a2a:	08 95       	ret

00000a2c <__vector_13>:

ISR (TIMER2_COMPA_vect)
{
     a2c:	1f 92       	push	r1
     a2e:	0f 92       	push	r0
     a30:	0f b6       	in	r0, 0x3f	; 63
     a32:	0f 92       	push	r0
     a34:	11 24       	eor	r1, r1
     a36:	8f 93       	push	r24
     a38:	9f 93       	push	r25
     a3a:	af 93       	push	r26
     a3c:	bf 93       	push	r27
    tImer2_millis++;
     a3e:	80 91 be 02 	lds	r24, 0x02BE
     a42:	90 91 bf 02 	lds	r25, 0x02BF
     a46:	a0 91 c0 02 	lds	r26, 0x02C0
     a4a:	b0 91 c1 02 	lds	r27, 0x02C1
     a4e:	01 96       	adiw	r24, 0x01	; 1
     a50:	a1 1d       	adc	r26, r1
     a52:	b1 1d       	adc	r27, r1
     a54:	80 93 be 02 	sts	0x02BE, r24
     a58:	90 93 bf 02 	sts	0x02BF, r25
     a5c:	a0 93 c0 02 	sts	0x02C0, r26
     a60:	b0 93 c1 02 	sts	0x02C1, r27
}
     a64:	bf 91       	pop	r27
     a66:	af 91       	pop	r26
     a68:	9f 91       	pop	r25
     a6a:	8f 91       	pop	r24
     a6c:	0f 90       	pop	r0
     a6e:	0f be       	out	0x3f, r0	; 63
     a70:	0f 90       	pop	r0
     a72:	1f 90       	pop	r1
     a74:	18 95       	reti

00000a76 <_Z5tinitv>:

void tinit()
{
	TCCR2B |= (1 << WGM22) | (1 << CS21);
     a76:	e1 eb       	ldi	r30, 0xB1	; 177
     a78:	f0 e0       	ldi	r31, 0x00	; 0
     a7a:	80 81       	ld	r24, Z
     a7c:	8a 60       	ori	r24, 0x0A	; 10
     a7e:	80 83       	st	Z, r24

    // Load the high byte, then the low byte
    // into the output compare
    OCR2A = CTC_MATCH_OVERFLOW;
     a80:	8d e7       	ldi	r24, 0x7D	; 125
     a82:	80 93 b3 00 	sts	0x00B3, r24

    // Enable the compare match interrupt
    TIMSK2 |= (1 << OCIE2A);
     a86:	e0 e7       	ldi	r30, 0x70	; 112
     a88:	f0 e0       	ldi	r31, 0x00	; 0
     a8a:	80 81       	ld	r24, Z
     a8c:	82 60       	ori	r24, 0x02	; 2
     a8e:	80 83       	st	Z, r24

    // Now enable global interrupts
    sei();
     a90:	78 94       	sei
}
     a92:	08 95       	ret

00000a94 <_Z5delaym>:


void delay(unsigned long mIllisec)
{
     a94:	9b 01       	movw	r18, r22
     a96:	ac 01       	movw	r20, r24
	int i;
	for(i=0;i<mIllisec;i++)
     a98:	61 15       	cp	r22, r1
     a9a:	71 05       	cpc	r23, r1
     a9c:	81 05       	cpc	r24, r1
     a9e:	91 05       	cpc	r25, r1
     aa0:	a1 f0       	breq	.+40     	; 0xaca <_Z5delaym+0x36>
     aa2:	60 e0       	ldi	r22, 0x00	; 0
     aa4:	70 e0       	ldi	r23, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     aa6:	89 ef       	ldi	r24, 0xF9	; 249
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	01 97       	sbiw	r24, 0x01	; 1
     aac:	f1 f7       	brne	.-4      	; 0xaaa <_Z5delaym+0x16>
     aae:	00 c0       	rjmp	.+0      	; 0xab0 <_Z5delaym+0x1c>
     ab0:	00 00       	nop
     ab2:	6f 5f       	subi	r22, 0xFF	; 255
     ab4:	7f 4f       	sbci	r23, 0xFF	; 255
     ab6:	cb 01       	movw	r24, r22
     ab8:	aa 27       	eor	r26, r26
     aba:	97 fd       	sbrc	r25, 7
     abc:	a0 95       	com	r26
     abe:	ba 2f       	mov	r27, r26
     ac0:	82 17       	cp	r24, r18
     ac2:	93 07       	cpc	r25, r19
     ac4:	a4 07       	cpc	r26, r20
     ac6:	b5 07       	cpc	r27, r21
     ac8:	70 f3       	brcs	.-36     	; 0xaa6 <_Z5delaym+0x12>
     aca:	08 95       	ret

00000acc <_Z17delayMicrosecondsm>:
	}
	return;
}

void delayMicroseconds(unsigned long mIcrosec)
{
     acc:	9b 01       	movw	r18, r22
     ace:	ac 01       	movw	r20, r24
	int i;
	for(i=0;i<mIcrosec;i++)
     ad0:	61 15       	cp	r22, r1
     ad2:	71 05       	cpc	r23, r1
     ad4:	81 05       	cpc	r24, r1
     ad6:	91 05       	cpc	r25, r1
     ad8:	79 f0       	breq	.+30     	; 0xaf8 <_Z17delayMicrosecondsm+0x2c>
     ada:	60 e0       	ldi	r22, 0x00	; 0
     adc:	70 e0       	ldi	r23, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ade:	00 00       	nop
     ae0:	6f 5f       	subi	r22, 0xFF	; 255
     ae2:	7f 4f       	sbci	r23, 0xFF	; 255
     ae4:	cb 01       	movw	r24, r22
     ae6:	aa 27       	eor	r26, r26
     ae8:	97 fd       	sbrc	r25, 7
     aea:	a0 95       	com	r26
     aec:	ba 2f       	mov	r27, r26
     aee:	82 17       	cp	r24, r18
     af0:	93 07       	cpc	r25, r19
     af2:	a4 07       	cpc	r26, r20
     af4:	b5 07       	cpc	r27, r21
     af6:	98 f3       	brcs	.-26     	; 0xade <_Z17delayMicrosecondsm+0x12>
     af8:	08 95       	ret

00000afa <_Z3maplllll>:
	}
	return;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
     afa:	2f 92       	push	r2
     afc:	3f 92       	push	r3
     afe:	4f 92       	push	r4
     b00:	5f 92       	push	r5
     b02:	6f 92       	push	r6
     b04:	7f 92       	push	r7
     b06:	8f 92       	push	r8
     b08:	9f 92       	push	r9
     b0a:	af 92       	push	r10
     b0c:	bf 92       	push	r11
     b0e:	cf 92       	push	r12
     b10:	df 92       	push	r13
     b12:	ef 92       	push	r14
     b14:	ff 92       	push	r15
     b16:	0f 93       	push	r16
     b18:	1f 93       	push	r17
     b1a:	df 93       	push	r29
     b1c:	cf 93       	push	r28
     b1e:	cd b7       	in	r28, 0x3d	; 61
     b20:	de b7       	in	r29, 0x3e	; 62
     b22:	dc 01       	movw	r26, r24
     b24:	cb 01       	movw	r24, r22
     b26:	39 01       	movw	r6, r18
     b28:	4a 01       	movw	r8, r20
     b2a:	17 01       	movw	r2, r14
     b2c:	28 01       	movw	r4, r16
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
     b2e:	ee 88       	ldd	r14, Y+22	; 0x16
     b30:	ff 88       	ldd	r15, Y+23	; 0x17
     b32:	08 8d       	ldd	r16, Y+24	; 0x18
     b34:	19 8d       	ldd	r17, Y+25	; 0x19
     b36:	ea 18       	sub	r14, r10
     b38:	fb 08       	sbc	r15, r11
     b3a:	0c 09       	sbc	r16, r12
     b3c:	1d 09       	sbc	r17, r13
     b3e:	9c 01       	movw	r18, r24
     b40:	ad 01       	movw	r20, r26
     b42:	26 19       	sub	r18, r6
     b44:	37 09       	sbc	r19, r7
     b46:	48 09       	sbc	r20, r8
     b48:	59 09       	sbc	r21, r9
     b4a:	c8 01       	movw	r24, r16
     b4c:	b7 01       	movw	r22, r14
     b4e:	0e 94 20 15 	call	0x2a40	; 0x2a40 <__mulsi3>
     b52:	a2 01       	movw	r20, r4
     b54:	91 01       	movw	r18, r2
     b56:	26 19       	sub	r18, r6
     b58:	37 09       	sbc	r19, r7
     b5a:	48 09       	sbc	r20, r8
     b5c:	59 09       	sbc	r21, r9
     b5e:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <__divmodsi4>
     b62:	2a 0d       	add	r18, r10
     b64:	3b 1d       	adc	r19, r11
     b66:	4c 1d       	adc	r20, r12
     b68:	5d 1d       	adc	r21, r13
}
     b6a:	62 2f       	mov	r22, r18
     b6c:	73 2f       	mov	r23, r19
     b6e:	84 2f       	mov	r24, r20
     b70:	95 2f       	mov	r25, r21
     b72:	cf 91       	pop	r28
     b74:	df 91       	pop	r29
     b76:	1f 91       	pop	r17
     b78:	0f 91       	pop	r16
     b7a:	ff 90       	pop	r15
     b7c:	ef 90       	pop	r14
     b7e:	df 90       	pop	r13
     b80:	cf 90       	pop	r12
     b82:	bf 90       	pop	r11
     b84:	af 90       	pop	r10
     b86:	9f 90       	pop	r9
     b88:	8f 90       	pop	r8
     b8a:	7f 90       	pop	r7
     b8c:	6f 90       	pop	r6
     b8e:	5f 90       	pop	r5
     b90:	4f 90       	pop	r4
     b92:	3f 90       	pop	r3
     b94:	2f 90       	pop	r2
     b96:	08 95       	ret

00000b98 <_Z9constrainlll>:

long constrain(long nUm, long lOwer, long uPper)
{
     b98:	ef 92       	push	r14
     b9a:	ff 92       	push	r15
     b9c:	0f 93       	push	r16
     b9e:	1f 93       	push	r17
     ba0:	dc 01       	movw	r26, r24
     ba2:	cb 01       	movw	r24, r22
	if(nUm>uPper){
     ba4:	e8 16       	cp	r14, r24
     ba6:	f9 06       	cpc	r15, r25
     ba8:	0a 07       	cpc	r16, r26
     baa:	1b 07       	cpc	r17, r27
     bac:	5c f0       	brlt	.+22     	; 0xbc4 <_Z9constrainlll+0x2c>
     bae:	e2 2e       	mov	r14, r18
     bb0:	f3 2e       	mov	r15, r19
     bb2:	04 2f       	mov	r16, r20
     bb4:	15 2f       	mov	r17, r21
     bb6:	e8 16       	cp	r14, r24
     bb8:	f9 06       	cpc	r15, r25
     bba:	0a 07       	cpc	r16, r26
     bbc:	1b 07       	cpc	r17, r27
     bbe:	14 f4       	brge	.+4      	; 0xbc4 <_Z9constrainlll+0x2c>
     bc0:	7c 01       	movw	r14, r24
     bc2:	8d 01       	movw	r16, r26
    else if(nUm<lOwer){
      return lOwer;
  	}
    else 
    return nUm;
}
     bc4:	6e 2d       	mov	r22, r14
     bc6:	7f 2d       	mov	r23, r15
     bc8:	80 2f       	mov	r24, r16
     bca:	91 2f       	mov	r25, r17
     bcc:	1f 91       	pop	r17
     bce:	0f 91       	pop	r16
     bd0:	ff 90       	pop	r15
     bd2:	ef 90       	pop	r14
     bd4:	08 95       	ret

00000bd6 <_Z15attachIntteruptiPFvvEi>:
void attachIntterupt(int pIn, void (*iSrfunc)(void), int cOmpare)		//cOmpare:LOW=0,HIGH1,RISING=2,FALLING=3
{
	sei();
     bd6:	78 94       	sei
	cAllisr=iSrfunc;
     bd8:	70 93 c3 02 	sts	0x02C3, r23
     bdc:	60 93 c2 02 	sts	0x02C2, r22
	switch(pIn)	  //enabling interrupt pin
     be0:	83 30       	cpi	r24, 0x03	; 3
     be2:	91 05       	cpc	r25, r1
     be4:	09 f4       	brne	.+2      	; 0xbe8 <_Z15attachIntteruptiPFvvEi+0x12>
     be6:	7d c0       	rjmp	.+250    	; 0xce2 <_Z15attachIntteruptiPFvvEi+0x10c>
     be8:	84 30       	cpi	r24, 0x04	; 4
     bea:	91 05       	cpc	r25, r1
     bec:	54 f4       	brge	.+20     	; 0xc02 <_Z15attachIntteruptiPFvvEi+0x2c>
     bee:	81 30       	cpi	r24, 0x01	; 1
     bf0:	91 05       	cpc	r25, r1
     bf2:	c9 f1       	breq	.+114    	; 0xc66 <_Z15attachIntteruptiPFvvEi+0x90>
     bf4:	82 30       	cpi	r24, 0x02	; 2
     bf6:	91 05       	cpc	r25, r1
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <_Z15attachIntteruptiPFvvEi+0x26>
     bfa:	54 c0       	rjmp	.+168    	; 0xca4 <_Z15attachIntteruptiPFvvEi+0xce>
     bfc:	00 97       	sbiw	r24, 0x00	; 0
     bfe:	91 f0       	breq	.+36     	; 0xc24 <_Z15attachIntteruptiPFvvEi+0x4e>
     c00:	0b c1       	rjmp	.+534    	; 0xe18 <_Z15attachIntteruptiPFvvEi+0x242>
     c02:	85 30       	cpi	r24, 0x05	; 5
     c04:	91 05       	cpc	r25, r1
     c06:	09 f4       	brne	.+2      	; 0xc0a <_Z15attachIntteruptiPFvvEi+0x34>
     c08:	aa c0       	rjmp	.+340    	; 0xd5e <_Z15attachIntteruptiPFvvEi+0x188>
     c0a:	85 30       	cpi	r24, 0x05	; 5
     c0c:	91 05       	cpc	r25, r1
     c0e:	0c f4       	brge	.+2      	; 0xc12 <_Z15attachIntteruptiPFvvEi+0x3c>
     c10:	87 c0       	rjmp	.+270    	; 0xd20 <_Z15attachIntteruptiPFvvEi+0x14a>
     c12:	86 30       	cpi	r24, 0x06	; 6
     c14:	91 05       	cpc	r25, r1
     c16:	09 f4       	brne	.+2      	; 0xc1a <_Z15attachIntteruptiPFvvEi+0x44>
     c18:	c1 c0       	rjmp	.+386    	; 0xd9c <_Z15attachIntteruptiPFvvEi+0x1c6>
     c1a:	87 30       	cpi	r24, 0x07	; 7
     c1c:	91 05       	cpc	r25, r1
     c1e:	09 f0       	breq	.+2      	; 0xc22 <_Z15attachIntteruptiPFvvEi+0x4c>
     c20:	fb c0       	rjmp	.+502    	; 0xe18 <_Z15attachIntteruptiPFvvEi+0x242>
     c22:	db c0       	rjmp	.+438    	; 0xdda <_Z15attachIntteruptiPFvvEi+0x204>
	{
		case 0:
		EIMSK|=1<<INT0;
     c24:	e8 9a       	sbi	0x1d, 0	; 29
		switch(cOmpare){
     c26:	43 30       	cpi	r20, 0x03	; 3
     c28:	51 05       	cpc	r21, r1
     c2a:	61 f0       	breq	.+24     	; 0xc44 <_Z15attachIntteruptiPFvvEi+0x6e>
     c2c:	44 30       	cpi	r20, 0x04	; 4
     c2e:	51 05       	cpc	r21, r1
     c30:	79 f0       	breq	.+30     	; 0xc50 <_Z15attachIntteruptiPFvvEi+0x7a>
     c32:	42 30       	cpi	r20, 0x02	; 2
     c34:	51 05       	cpc	r21, r1
     c36:	91 f4       	brne	.+36     	; 0xc5c <_Z15attachIntteruptiPFvvEi+0x86>
			case 2:
			EICRA|=(1<<ISC00)|(1<<ISC01);
     c38:	e9 e6       	ldi	r30, 0x69	; 105
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	83 60       	ori	r24, 0x03	; 3
     c40:	80 83       	st	Z, r24
			break;
     c42:	08 95       	ret
			case 3:
			EICRA|=(0<<ISC00)|(1<<ISC01);
     c44:	e9 e6       	ldi	r30, 0x69	; 105
     c46:	f0 e0       	ldi	r31, 0x00	; 0
     c48:	80 81       	ld	r24, Z
     c4a:	82 60       	ori	r24, 0x02	; 2
     c4c:	80 83       	st	Z, r24
			break;
     c4e:	08 95       	ret
			case 4:
			EICRA|=(1<<ISC00)|(0<<ISC01);
     c50:	e9 e6       	ldi	r30, 0x69	; 105
     c52:	f0 e0       	ldi	r31, 0x00	; 0
     c54:	80 81       	ld	r24, Z
     c56:	81 60       	ori	r24, 0x01	; 1
     c58:	80 83       	st	Z, r24
			break;
     c5a:	08 95       	ret
			default:
			EICRA|=(0<<ISC00)|(0<<ISC01);
     c5c:	e9 e6       	ldi	r30, 0x69	; 105
     c5e:	f0 e0       	ldi	r31, 0x00	; 0
     c60:	80 81       	ld	r24, Z
     c62:	80 83       	st	Z, r24
     c64:	08 95       	ret
		}
		break;

		case 1:
		EIMSK|=1<<INT1;
     c66:	e9 9a       	sbi	0x1d, 1	; 29
                switch(cOmpare)
     c68:	43 30       	cpi	r20, 0x03	; 3
     c6a:	51 05       	cpc	r21, r1
     c6c:	61 f0       	breq	.+24     	; 0xc86 <_Z15attachIntteruptiPFvvEi+0xb0>
     c6e:	44 30       	cpi	r20, 0x04	; 4
     c70:	51 05       	cpc	r21, r1
     c72:	69 f0       	breq	.+26     	; 0xc8e <_Z15attachIntteruptiPFvvEi+0xb8>
     c74:	42 30       	cpi	r20, 0x02	; 2
     c76:	51 05       	cpc	r21, r1
     c78:	81 f4       	brne	.+32     	; 0xc9a <_Z15attachIntteruptiPFvvEi+0xc4>
		{
			case 2:
			EICRA|=(1<<ISC10)|(1<<ISC11);
     c7a:	e9 e6       	ldi	r30, 0x69	; 105
     c7c:	f0 e0       	ldi	r31, 0x00	; 0
     c7e:	80 81       	ld	r24, Z
     c80:	8c 60       	ori	r24, 0x0C	; 12
     c82:	80 83       	st	Z, r24
			break;
     c84:	08 95       	ret
			case 3:
			EICRA=(0<<ISC10)|(1<<ISC11);
     c86:	88 e0       	ldi	r24, 0x08	; 8
     c88:	80 93 69 00 	sts	0x0069, r24
			break;
     c8c:	08 95       	ret
			case 4:
			EICRA|=(1<<ISC10)|(0<<ISC11);
     c8e:	e9 e6       	ldi	r30, 0x69	; 105
     c90:	f0 e0       	ldi	r31, 0x00	; 0
     c92:	80 81       	ld	r24, Z
     c94:	84 60       	ori	r24, 0x04	; 4
     c96:	80 83       	st	Z, r24
			break;
     c98:	08 95       	ret
			default:
			EICRA|=(0<<ISC10)|(0<<ISC11);
     c9a:	e9 e6       	ldi	r30, 0x69	; 105
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	80 81       	ld	r24, Z
     ca0:	80 83       	st	Z, r24
     ca2:	08 95       	ret
		}
		break;

		case 2:
		EIMSK|=1<<INT2;
     ca4:	ea 9a       	sbi	0x1d, 2	; 29
		switch(cOmpare)
     ca6:	43 30       	cpi	r20, 0x03	; 3
     ca8:	51 05       	cpc	r21, r1
     caa:	61 f0       	breq	.+24     	; 0xcc4 <_Z15attachIntteruptiPFvvEi+0xee>
     cac:	44 30       	cpi	r20, 0x04	; 4
     cae:	51 05       	cpc	r21, r1
     cb0:	69 f0       	breq	.+26     	; 0xccc <_Z15attachIntteruptiPFvvEi+0xf6>
     cb2:	42 30       	cpi	r20, 0x02	; 2
     cb4:	51 05       	cpc	r21, r1
     cb6:	81 f4       	brne	.+32     	; 0xcd8 <_Z15attachIntteruptiPFvvEi+0x102>
		{
			case 2:
			EICRA|=(1<<ISC20)|(1<<ISC21);
     cb8:	e9 e6       	ldi	r30, 0x69	; 105
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	80 81       	ld	r24, Z
     cbe:	80 63       	ori	r24, 0x30	; 48
     cc0:	80 83       	st	Z, r24
			break;
     cc2:	08 95       	ret
			case 3:
			EICRA=(0<<ISC20)|(1<<ISC21);
     cc4:	80 e2       	ldi	r24, 0x20	; 32
     cc6:	80 93 69 00 	sts	0x0069, r24
			break;
     cca:	08 95       	ret
			case 4:
			EICRA|=(1<<ISC20)|(0<<ISC21);
     ccc:	e9 e6       	ldi	r30, 0x69	; 105
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	80 81       	ld	r24, Z
     cd2:	80 61       	ori	r24, 0x10	; 16
     cd4:	80 83       	st	Z, r24
			break;
     cd6:	08 95       	ret
			default:
			EICRA|=(0<<ISC20)|(0<<ISC21);
     cd8:	e9 e6       	ldi	r30, 0x69	; 105
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	80 81       	ld	r24, Z
     cde:	80 83       	st	Z, r24
     ce0:	08 95       	ret
		}
		break;

		case 3:
		EIMSK|=1<<INT3;
     ce2:	eb 9a       	sbi	0x1d, 3	; 29
		switch(cOmpare)
     ce4:	43 30       	cpi	r20, 0x03	; 3
     ce6:	51 05       	cpc	r21, r1
     ce8:	61 f0       	breq	.+24     	; 0xd02 <_Z15attachIntteruptiPFvvEi+0x12c>
     cea:	44 30       	cpi	r20, 0x04	; 4
     cec:	51 05       	cpc	r21, r1
     cee:	69 f0       	breq	.+26     	; 0xd0a <_Z15attachIntteruptiPFvvEi+0x134>
     cf0:	42 30       	cpi	r20, 0x02	; 2
     cf2:	51 05       	cpc	r21, r1
     cf4:	81 f4       	brne	.+32     	; 0xd16 <_Z15attachIntteruptiPFvvEi+0x140>
		{
			case 2:
			EICRA|=(1<<ISC30)|(1<<ISC31);
     cf6:	e9 e6       	ldi	r30, 0x69	; 105
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	80 81       	ld	r24, Z
     cfc:	80 6c       	ori	r24, 0xC0	; 192
     cfe:	80 83       	st	Z, r24
			break;
     d00:	08 95       	ret
			case 3:
			EICRA=(0<<ISC30)|(1<<ISC31);
     d02:	80 e8       	ldi	r24, 0x80	; 128
     d04:	80 93 69 00 	sts	0x0069, r24
			break;
     d08:	08 95       	ret
			case 4:
			EICRA|=(1<<ISC30)|(0<<ISC31);
     d0a:	e9 e6       	ldi	r30, 0x69	; 105
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	80 81       	ld	r24, Z
     d10:	80 64       	ori	r24, 0x40	; 64
     d12:	80 83       	st	Z, r24
			break;
     d14:	08 95       	ret
			default:
			EICRA|=(0<<ISC30)|(0<<ISC31);
     d16:	e9 e6       	ldi	r30, 0x69	; 105
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	80 81       	ld	r24, Z
     d1c:	80 83       	st	Z, r24
     d1e:	08 95       	ret
		}
		break;

		case 4:
		EIMSK|=1<<INT4;
     d20:	ec 9a       	sbi	0x1d, 4	; 29
                switch(cOmpare)
     d22:	43 30       	cpi	r20, 0x03	; 3
     d24:	51 05       	cpc	r21, r1
     d26:	61 f0       	breq	.+24     	; 0xd40 <_Z15attachIntteruptiPFvvEi+0x16a>
     d28:	44 30       	cpi	r20, 0x04	; 4
     d2a:	51 05       	cpc	r21, r1
     d2c:	69 f0       	breq	.+26     	; 0xd48 <_Z15attachIntteruptiPFvvEi+0x172>
     d2e:	42 30       	cpi	r20, 0x02	; 2
     d30:	51 05       	cpc	r21, r1
     d32:	81 f4       	brne	.+32     	; 0xd54 <_Z15attachIntteruptiPFvvEi+0x17e>
		{
			case 2:
			EICRB|=(1<<ISC40)|(1<<ISC41);
     d34:	ea e6       	ldi	r30, 0x6A	; 106
     d36:	f0 e0       	ldi	r31, 0x00	; 0
     d38:	80 81       	ld	r24, Z
     d3a:	83 60       	ori	r24, 0x03	; 3
     d3c:	80 83       	st	Z, r24
			break;
     d3e:	08 95       	ret
			case 3:
			EICRB=(0<<ISC40)|(1<<ISC41);
     d40:	82 e0       	ldi	r24, 0x02	; 2
     d42:	80 93 6a 00 	sts	0x006A, r24
			break;
     d46:	08 95       	ret
			case 4:
			EICRB|=(1<<ISC40)|(0<<ISC41);
     d48:	ea e6       	ldi	r30, 0x6A	; 106
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	80 81       	ld	r24, Z
     d4e:	81 60       	ori	r24, 0x01	; 1
     d50:	80 83       	st	Z, r24
			break;
     d52:	08 95       	ret
			default:
			EICRB|=(0<<ISC40)|(0<<ISC41);
     d54:	ea e6       	ldi	r30, 0x6A	; 106
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	80 81       	ld	r24, Z
     d5a:	80 83       	st	Z, r24
     d5c:	08 95       	ret
		}
		break;

		case 5:
		EIMSK|=1<<INT5;
     d5e:	ed 9a       	sbi	0x1d, 5	; 29
		switch(cOmpare)
     d60:	43 30       	cpi	r20, 0x03	; 3
     d62:	51 05       	cpc	r21, r1
     d64:	61 f0       	breq	.+24     	; 0xd7e <_Z15attachIntteruptiPFvvEi+0x1a8>
     d66:	44 30       	cpi	r20, 0x04	; 4
     d68:	51 05       	cpc	r21, r1
     d6a:	69 f0       	breq	.+26     	; 0xd86 <_Z15attachIntteruptiPFvvEi+0x1b0>
     d6c:	42 30       	cpi	r20, 0x02	; 2
     d6e:	51 05       	cpc	r21, r1
     d70:	81 f4       	brne	.+32     	; 0xd92 <_Z15attachIntteruptiPFvvEi+0x1bc>
		{
			case 2:
			EICRB|=(1<<ISC50)|(1<<ISC51);
     d72:	ea e6       	ldi	r30, 0x6A	; 106
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	80 81       	ld	r24, Z
     d78:	8c 60       	ori	r24, 0x0C	; 12
     d7a:	80 83       	st	Z, r24
			break;
     d7c:	08 95       	ret
			case 3:
			EICRB=(0<<ISC50)|(1<<ISC51);
     d7e:	88 e0       	ldi	r24, 0x08	; 8
     d80:	80 93 6a 00 	sts	0x006A, r24
			break;
     d84:	08 95       	ret
			case 4:
			EICRB|=(1<<ISC50)|(0<<ISC51);
     d86:	ea e6       	ldi	r30, 0x6A	; 106
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	80 81       	ld	r24, Z
     d8c:	84 60       	ori	r24, 0x04	; 4
     d8e:	80 83       	st	Z, r24
			break;
     d90:	08 95       	ret
			default:
                 	EICRB|=(0<<ISC40)|(0<<ISC41);
     d92:	ea e6       	ldi	r30, 0x6A	; 106
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	80 81       	ld	r24, Z
     d98:	80 83       	st	Z, r24
     d9a:	08 95       	ret

		}
		break;

		case 6:
		EIMSK|=1<<INT6;
     d9c:	ee 9a       	sbi	0x1d, 6	; 29
	        switch(cOmpare)
     d9e:	43 30       	cpi	r20, 0x03	; 3
     da0:	51 05       	cpc	r21, r1
     da2:	61 f0       	breq	.+24     	; 0xdbc <_Z15attachIntteruptiPFvvEi+0x1e6>
     da4:	44 30       	cpi	r20, 0x04	; 4
     da6:	51 05       	cpc	r21, r1
     da8:	69 f0       	breq	.+26     	; 0xdc4 <_Z15attachIntteruptiPFvvEi+0x1ee>
     daa:	42 30       	cpi	r20, 0x02	; 2
     dac:	51 05       	cpc	r21, r1
     dae:	81 f4       	brne	.+32     	; 0xdd0 <_Z15attachIntteruptiPFvvEi+0x1fa>
		{
			case 2:
			EICRB|=(1<<ISC60)|(1<<ISC61);
     db0:	ea e6       	ldi	r30, 0x6A	; 106
     db2:	f0 e0       	ldi	r31, 0x00	; 0
     db4:	80 81       	ld	r24, Z
     db6:	80 63       	ori	r24, 0x30	; 48
     db8:	80 83       	st	Z, r24
			break;
     dba:	08 95       	ret
			case 3:
			EICRB=(0<<ISC60)|(1<<ISC61);
     dbc:	80 e2       	ldi	r24, 0x20	; 32
     dbe:	80 93 6a 00 	sts	0x006A, r24
			break;
     dc2:	08 95       	ret
			case 4:
			EICRB|=(1<<ISC60)|(0<<ISC61);
     dc4:	ea e6       	ldi	r30, 0x6A	; 106
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	80 81       	ld	r24, Z
     dca:	80 61       	ori	r24, 0x10	; 16
     dcc:	80 83       	st	Z, r24
			break;
     dce:	08 95       	ret
			default:
			EICRB|=(0<<ISC60)|(0<<ISC61);
     dd0:	ea e6       	ldi	r30, 0x6A	; 106
     dd2:	f0 e0       	ldi	r31, 0x00	; 0
     dd4:	80 81       	ld	r24, Z
     dd6:	80 83       	st	Z, r24
     dd8:	08 95       	ret

		}
		break;

		case 7:
		EIMSK|=1<<INT7;
     dda:	ef 9a       	sbi	0x1d, 7	; 29
		switch(cOmpare)
     ddc:	43 30       	cpi	r20, 0x03	; 3
     dde:	51 05       	cpc	r21, r1
     de0:	61 f0       	breq	.+24     	; 0xdfa <_Z15attachIntteruptiPFvvEi+0x224>
     de2:	44 30       	cpi	r20, 0x04	; 4
     de4:	51 05       	cpc	r21, r1
     de6:	69 f0       	breq	.+26     	; 0xe02 <_Z15attachIntteruptiPFvvEi+0x22c>
     de8:	42 30       	cpi	r20, 0x02	; 2
     dea:	51 05       	cpc	r21, r1
     dec:	81 f4       	brne	.+32     	; 0xe0e <_Z15attachIntteruptiPFvvEi+0x238>
		{
			case 2:
			EICRB|=(1<<ISC70)|(1<<ISC71);
     dee:	ea e6       	ldi	r30, 0x6A	; 106
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	80 81       	ld	r24, Z
     df4:	80 6c       	ori	r24, 0xC0	; 192
     df6:	80 83       	st	Z, r24
			break;
     df8:	08 95       	ret
			case 3:
			EICRB=(0<<ISC70)|(1<<ISC71);
     dfa:	80 e8       	ldi	r24, 0x80	; 128
     dfc:	80 93 6a 00 	sts	0x006A, r24
			break;
     e00:	08 95       	ret
			case 4:
			EICRB|=(1<<ISC70)|(0<<ISC71);
     e02:	ea e6       	ldi	r30, 0x6A	; 106
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	80 81       	ld	r24, Z
     e08:	80 64       	ori	r24, 0x40	; 64
     e0a:	80 83       	st	Z, r24
			break;
     e0c:	08 95       	ret
			default:
			EICRB|=(0<<ISC70)|(0<<ISC71);
     e0e:	ea e6       	ldi	r30, 0x6A	; 106
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	80 83       	st	Z, r24
     e16:	08 95       	ret
		}
		break;

	        default:EICRA|=(0<<ISC01)|(0<<ISC00);
     e18:	e9 e6       	ldi	r30, 0x69	; 105
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	80 81       	ld	r24, Z
     e1e:	80 83       	st	Z, r24
     e20:	08 95       	ret

00000e22 <__vector_1>:
	}
}
ISR(INT0_vect)
{
     e22:	1f 92       	push	r1
     e24:	0f 92       	push	r0
     e26:	0f b6       	in	r0, 0x3f	; 63
     e28:	0f 92       	push	r0
     e2a:	0b b6       	in	r0, 0x3b	; 59
     e2c:	0f 92       	push	r0
     e2e:	11 24       	eor	r1, r1
     e30:	2f 93       	push	r18
     e32:	3f 93       	push	r19
     e34:	4f 93       	push	r20
     e36:	5f 93       	push	r21
     e38:	6f 93       	push	r22
     e3a:	7f 93       	push	r23
     e3c:	8f 93       	push	r24
     e3e:	9f 93       	push	r25
     e40:	af 93       	push	r26
     e42:	bf 93       	push	r27
     e44:	ef 93       	push	r30
     e46:	ff 93       	push	r31
   cAllisr();
     e48:	e0 91 c2 02 	lds	r30, 0x02C2
     e4c:	f0 91 c3 02 	lds	r31, 0x02C3
     e50:	19 95       	eicall
}
     e52:	ff 91       	pop	r31
     e54:	ef 91       	pop	r30
     e56:	bf 91       	pop	r27
     e58:	af 91       	pop	r26
     e5a:	9f 91       	pop	r25
     e5c:	8f 91       	pop	r24
     e5e:	7f 91       	pop	r23
     e60:	6f 91       	pop	r22
     e62:	5f 91       	pop	r21
     e64:	4f 91       	pop	r20
     e66:	3f 91       	pop	r19
     e68:	2f 91       	pop	r18
     e6a:	0f 90       	pop	r0
     e6c:	0b be       	out	0x3b, r0	; 59
     e6e:	0f 90       	pop	r0
     e70:	0f be       	out	0x3f, r0	; 63
     e72:	0f 90       	pop	r0
     e74:	1f 90       	pop	r1
     e76:	18 95       	reti

00000e78 <__vector_2>:
ISR(INT1_vect)
{
     e78:	1f 92       	push	r1
     e7a:	0f 92       	push	r0
     e7c:	0f b6       	in	r0, 0x3f	; 63
     e7e:	0f 92       	push	r0
     e80:	0b b6       	in	r0, 0x3b	; 59
     e82:	0f 92       	push	r0
     e84:	11 24       	eor	r1, r1
     e86:	2f 93       	push	r18
     e88:	3f 93       	push	r19
     e8a:	4f 93       	push	r20
     e8c:	5f 93       	push	r21
     e8e:	6f 93       	push	r22
     e90:	7f 93       	push	r23
     e92:	8f 93       	push	r24
     e94:	9f 93       	push	r25
     e96:	af 93       	push	r26
     e98:	bf 93       	push	r27
     e9a:	ef 93       	push	r30
     e9c:	ff 93       	push	r31
   cAllisr();
     e9e:	e0 91 c2 02 	lds	r30, 0x02C2
     ea2:	f0 91 c3 02 	lds	r31, 0x02C3
     ea6:	19 95       	eicall
}
     ea8:	ff 91       	pop	r31
     eaa:	ef 91       	pop	r30
     eac:	bf 91       	pop	r27
     eae:	af 91       	pop	r26
     eb0:	9f 91       	pop	r25
     eb2:	8f 91       	pop	r24
     eb4:	7f 91       	pop	r23
     eb6:	6f 91       	pop	r22
     eb8:	5f 91       	pop	r21
     eba:	4f 91       	pop	r20
     ebc:	3f 91       	pop	r19
     ebe:	2f 91       	pop	r18
     ec0:	0f 90       	pop	r0
     ec2:	0b be       	out	0x3b, r0	; 59
     ec4:	0f 90       	pop	r0
     ec6:	0f be       	out	0x3f, r0	; 63
     ec8:	0f 90       	pop	r0
     eca:	1f 90       	pop	r1
     ecc:	18 95       	reti

00000ece <__vector_3>:
ISR(INT2_vect)
{
     ece:	1f 92       	push	r1
     ed0:	0f 92       	push	r0
     ed2:	0f b6       	in	r0, 0x3f	; 63
     ed4:	0f 92       	push	r0
     ed6:	0b b6       	in	r0, 0x3b	; 59
     ed8:	0f 92       	push	r0
     eda:	11 24       	eor	r1, r1
     edc:	2f 93       	push	r18
     ede:	3f 93       	push	r19
     ee0:	4f 93       	push	r20
     ee2:	5f 93       	push	r21
     ee4:	6f 93       	push	r22
     ee6:	7f 93       	push	r23
     ee8:	8f 93       	push	r24
     eea:	9f 93       	push	r25
     eec:	af 93       	push	r26
     eee:	bf 93       	push	r27
     ef0:	ef 93       	push	r30
     ef2:	ff 93       	push	r31
   cAllisr();
     ef4:	e0 91 c2 02 	lds	r30, 0x02C2
     ef8:	f0 91 c3 02 	lds	r31, 0x02C3
     efc:	19 95       	eicall
}
     efe:	ff 91       	pop	r31
     f00:	ef 91       	pop	r30
     f02:	bf 91       	pop	r27
     f04:	af 91       	pop	r26
     f06:	9f 91       	pop	r25
     f08:	8f 91       	pop	r24
     f0a:	7f 91       	pop	r23
     f0c:	6f 91       	pop	r22
     f0e:	5f 91       	pop	r21
     f10:	4f 91       	pop	r20
     f12:	3f 91       	pop	r19
     f14:	2f 91       	pop	r18
     f16:	0f 90       	pop	r0
     f18:	0b be       	out	0x3b, r0	; 59
     f1a:	0f 90       	pop	r0
     f1c:	0f be       	out	0x3f, r0	; 63
     f1e:	0f 90       	pop	r0
     f20:	1f 90       	pop	r1
     f22:	18 95       	reti

00000f24 <__vector_4>:
ISR(INT3_vect)
{
     f24:	1f 92       	push	r1
     f26:	0f 92       	push	r0
     f28:	0f b6       	in	r0, 0x3f	; 63
     f2a:	0f 92       	push	r0
     f2c:	0b b6       	in	r0, 0x3b	; 59
     f2e:	0f 92       	push	r0
     f30:	11 24       	eor	r1, r1
     f32:	2f 93       	push	r18
     f34:	3f 93       	push	r19
     f36:	4f 93       	push	r20
     f38:	5f 93       	push	r21
     f3a:	6f 93       	push	r22
     f3c:	7f 93       	push	r23
     f3e:	8f 93       	push	r24
     f40:	9f 93       	push	r25
     f42:	af 93       	push	r26
     f44:	bf 93       	push	r27
     f46:	ef 93       	push	r30
     f48:	ff 93       	push	r31
   cAllisr();
     f4a:	e0 91 c2 02 	lds	r30, 0x02C2
     f4e:	f0 91 c3 02 	lds	r31, 0x02C3
     f52:	19 95       	eicall
}
     f54:	ff 91       	pop	r31
     f56:	ef 91       	pop	r30
     f58:	bf 91       	pop	r27
     f5a:	af 91       	pop	r26
     f5c:	9f 91       	pop	r25
     f5e:	8f 91       	pop	r24
     f60:	7f 91       	pop	r23
     f62:	6f 91       	pop	r22
     f64:	5f 91       	pop	r21
     f66:	4f 91       	pop	r20
     f68:	3f 91       	pop	r19
     f6a:	2f 91       	pop	r18
     f6c:	0f 90       	pop	r0
     f6e:	0b be       	out	0x3b, r0	; 59
     f70:	0f 90       	pop	r0
     f72:	0f be       	out	0x3f, r0	; 63
     f74:	0f 90       	pop	r0
     f76:	1f 90       	pop	r1
     f78:	18 95       	reti

00000f7a <__vector_5>:
ISR(INT4_vect)
{
     f7a:	1f 92       	push	r1
     f7c:	0f 92       	push	r0
     f7e:	0f b6       	in	r0, 0x3f	; 63
     f80:	0f 92       	push	r0
     f82:	0b b6       	in	r0, 0x3b	; 59
     f84:	0f 92       	push	r0
     f86:	11 24       	eor	r1, r1
     f88:	2f 93       	push	r18
     f8a:	3f 93       	push	r19
     f8c:	4f 93       	push	r20
     f8e:	5f 93       	push	r21
     f90:	6f 93       	push	r22
     f92:	7f 93       	push	r23
     f94:	8f 93       	push	r24
     f96:	9f 93       	push	r25
     f98:	af 93       	push	r26
     f9a:	bf 93       	push	r27
     f9c:	ef 93       	push	r30
     f9e:	ff 93       	push	r31
    cAllisr();
     fa0:	e0 91 c2 02 	lds	r30, 0x02C2
     fa4:	f0 91 c3 02 	lds	r31, 0x02C3
     fa8:	19 95       	eicall
}
     faa:	ff 91       	pop	r31
     fac:	ef 91       	pop	r30
     fae:	bf 91       	pop	r27
     fb0:	af 91       	pop	r26
     fb2:	9f 91       	pop	r25
     fb4:	8f 91       	pop	r24
     fb6:	7f 91       	pop	r23
     fb8:	6f 91       	pop	r22
     fba:	5f 91       	pop	r21
     fbc:	4f 91       	pop	r20
     fbe:	3f 91       	pop	r19
     fc0:	2f 91       	pop	r18
     fc2:	0f 90       	pop	r0
     fc4:	0b be       	out	0x3b, r0	; 59
     fc6:	0f 90       	pop	r0
     fc8:	0f be       	out	0x3f, r0	; 63
     fca:	0f 90       	pop	r0
     fcc:	1f 90       	pop	r1
     fce:	18 95       	reti

00000fd0 <__vector_6>:
ISR(INT5_vect)
{
     fd0:	1f 92       	push	r1
     fd2:	0f 92       	push	r0
     fd4:	0f b6       	in	r0, 0x3f	; 63
     fd6:	0f 92       	push	r0
     fd8:	0b b6       	in	r0, 0x3b	; 59
     fda:	0f 92       	push	r0
     fdc:	11 24       	eor	r1, r1
     fde:	2f 93       	push	r18
     fe0:	3f 93       	push	r19
     fe2:	4f 93       	push	r20
     fe4:	5f 93       	push	r21
     fe6:	6f 93       	push	r22
     fe8:	7f 93       	push	r23
     fea:	8f 93       	push	r24
     fec:	9f 93       	push	r25
     fee:	af 93       	push	r26
     ff0:	bf 93       	push	r27
     ff2:	ef 93       	push	r30
     ff4:	ff 93       	push	r31
    cAllisr();
     ff6:	e0 91 c2 02 	lds	r30, 0x02C2
     ffa:	f0 91 c3 02 	lds	r31, 0x02C3
     ffe:	19 95       	eicall
}
    1000:	ff 91       	pop	r31
    1002:	ef 91       	pop	r30
    1004:	bf 91       	pop	r27
    1006:	af 91       	pop	r26
    1008:	9f 91       	pop	r25
    100a:	8f 91       	pop	r24
    100c:	7f 91       	pop	r23
    100e:	6f 91       	pop	r22
    1010:	5f 91       	pop	r21
    1012:	4f 91       	pop	r20
    1014:	3f 91       	pop	r19
    1016:	2f 91       	pop	r18
    1018:	0f 90       	pop	r0
    101a:	0b be       	out	0x3b, r0	; 59
    101c:	0f 90       	pop	r0
    101e:	0f be       	out	0x3f, r0	; 63
    1020:	0f 90       	pop	r0
    1022:	1f 90       	pop	r1
    1024:	18 95       	reti

00001026 <__vector_7>:
ISR(INT6_vect)
{
    1026:	1f 92       	push	r1
    1028:	0f 92       	push	r0
    102a:	0f b6       	in	r0, 0x3f	; 63
    102c:	0f 92       	push	r0
    102e:	0b b6       	in	r0, 0x3b	; 59
    1030:	0f 92       	push	r0
    1032:	11 24       	eor	r1, r1
    1034:	2f 93       	push	r18
    1036:	3f 93       	push	r19
    1038:	4f 93       	push	r20
    103a:	5f 93       	push	r21
    103c:	6f 93       	push	r22
    103e:	7f 93       	push	r23
    1040:	8f 93       	push	r24
    1042:	9f 93       	push	r25
    1044:	af 93       	push	r26
    1046:	bf 93       	push	r27
    1048:	ef 93       	push	r30
    104a:	ff 93       	push	r31
    cAllisr();
    104c:	e0 91 c2 02 	lds	r30, 0x02C2
    1050:	f0 91 c3 02 	lds	r31, 0x02C3
    1054:	19 95       	eicall
}
    1056:	ff 91       	pop	r31
    1058:	ef 91       	pop	r30
    105a:	bf 91       	pop	r27
    105c:	af 91       	pop	r26
    105e:	9f 91       	pop	r25
    1060:	8f 91       	pop	r24
    1062:	7f 91       	pop	r23
    1064:	6f 91       	pop	r22
    1066:	5f 91       	pop	r21
    1068:	4f 91       	pop	r20
    106a:	3f 91       	pop	r19
    106c:	2f 91       	pop	r18
    106e:	0f 90       	pop	r0
    1070:	0b be       	out	0x3b, r0	; 59
    1072:	0f 90       	pop	r0
    1074:	0f be       	out	0x3f, r0	; 63
    1076:	0f 90       	pop	r0
    1078:	1f 90       	pop	r1
    107a:	18 95       	reti

0000107c <__vector_8>:
ISR(INT7_vect)
{
    107c:	1f 92       	push	r1
    107e:	0f 92       	push	r0
    1080:	0f b6       	in	r0, 0x3f	; 63
    1082:	0f 92       	push	r0
    1084:	0b b6       	in	r0, 0x3b	; 59
    1086:	0f 92       	push	r0
    1088:	11 24       	eor	r1, r1
    108a:	2f 93       	push	r18
    108c:	3f 93       	push	r19
    108e:	4f 93       	push	r20
    1090:	5f 93       	push	r21
    1092:	6f 93       	push	r22
    1094:	7f 93       	push	r23
    1096:	8f 93       	push	r24
    1098:	9f 93       	push	r25
    109a:	af 93       	push	r26
    109c:	bf 93       	push	r27
    109e:	ef 93       	push	r30
    10a0:	ff 93       	push	r31
    cAllisr();
    10a2:	e0 91 c2 02 	lds	r30, 0x02C2
    10a6:	f0 91 c3 02 	lds	r31, 0x02C3
    10aa:	19 95       	eicall
}
    10ac:	ff 91       	pop	r31
    10ae:	ef 91       	pop	r30
    10b0:	bf 91       	pop	r27
    10b2:	af 91       	pop	r26
    10b4:	9f 91       	pop	r25
    10b6:	8f 91       	pop	r24
    10b8:	7f 91       	pop	r23
    10ba:	6f 91       	pop	r22
    10bc:	5f 91       	pop	r21
    10be:	4f 91       	pop	r20
    10c0:	3f 91       	pop	r19
    10c2:	2f 91       	pop	r18
    10c4:	0f 90       	pop	r0
    10c6:	0b be       	out	0x3b, r0	; 59
    10c8:	0f 90       	pop	r0
    10ca:	0f be       	out	0x3f, r0	; 63
    10cc:	0f 90       	pop	r0
    10ce:	1f 90       	pop	r1
    10d0:	18 95       	reti

000010d2 <_Z5setupv>:
#define servoPwm4 2

int correction[4]={-10,-20,-45,5},angle=150;		//HACK:All four servo are not mounted parallely, thus to compensate the offset angle, correction aray is made. 
Cytron motors(dir1,pwm1,dir2,pwm2,dir3,pwm3,dir4,pwm4);
/******************Main Code********************/	
void setup(){
    10d2:	1f 93       	push	r17
    10d4:	cf 93       	push	r28
    10d6:	df 93       	push	r29
{
	public:
	void begin( unsigned int BAUD){
		/*Set baud rate */int uBrr;
		uBrr=(F_CPU/16UL/BAUD-1);
		UBRR0H = (unsigned char)(uBrr>>8);
    10d8:	10 92 c5 00 	sts	0x00C5, r1
		UBRR0L = (unsigned char)uBrr;
    10dc:	1c e0       	ldi	r17, 0x0C	; 12
    10de:	10 93 c4 00 	sts	0x00C4, r17
		/* Enable receiver and transmitter */
		UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    10e2:	88 e1       	ldi	r24, 0x18	; 24
    10e4:	80 93 c1 00 	sts	0x00C1, r24
		/* Set frame format: 8data, 2stop bit */
		UCSR0C = (1<<USBS0)|(3<<UCSZ00);
    10e8:	8e e0       	ldi	r24, 0x0E	; 14
    10ea:	80 93 c2 00 	sts	0x00C2, r24
		digitalWrite(dIrpin1,dIrection1);
		digitalWrite(dIrpin2,dIrection2);
	}

	void direction(uint8_t dIrection, uint8_t dIrection1, uint8_t dIrection2, uint8_t dIrection3){
		pinMode(dIrpin,OUTPUT);     //sets direction pin as output
    10ee:	80 91 d4 02 	lds	r24, 0x02D4
    10f2:	61 e0       	ldi	r22, 0x01	; 1
    10f4:	0e 94 a6 00 	call	0x14c	; 0x14c <_Z7pinModehh>
	    pinMode(dIrpin1,OUTPUT);
    10f8:	80 91 d9 02 	lds	r24, 0x02D9
    10fc:	61 e0       	ldi	r22, 0x01	; 1
    10fe:	0e 94 a6 00 	call	0x14c	; 0x14c <_Z7pinModehh>
	    pinMode(dIrpin2,OUTPUT);
    1102:	80 91 dd 02 	lds	r24, 0x02DD
    1106:	61 e0       	ldi	r22, 0x01	; 1
    1108:	0e 94 a6 00 	call	0x14c	; 0x14c <_Z7pinModehh>
	    pinMode(dIrpin3,OUTPUT);
    110c:	80 91 e1 02 	lds	r24, 0x02E1
    1110:	61 e0       	ldi	r22, 0x01	; 1
    1112:	0e 94 a6 00 	call	0x14c	; 0x14c <_Z7pinModehh>
		digitalWrite(dIrpin,dIrection);
    1116:	80 91 d4 02 	lds	r24, 0x02D4
    111a:	60 e0       	ldi	r22, 0x00	; 0
    111c:	0e 94 19 02 	call	0x432	; 0x432 <_Z12digitalWritehh>
		digitalWrite(dIrpin1,dIrection1);
    1120:	80 91 d9 02 	lds	r24, 0x02D9
    1124:	60 e0       	ldi	r22, 0x00	; 0
    1126:	0e 94 19 02 	call	0x432	; 0x432 <_Z12digitalWritehh>
		digitalWrite(dIrpin2,dIrection2);
    112a:	80 91 dd 02 	lds	r24, 0x02DD
    112e:	60 e0       	ldi	r22, 0x00	; 0
    1130:	0e 94 19 02 	call	0x432	; 0x432 <_Z12digitalWritehh>
		digitalWrite(dIrpin3,dIrection3);
    1134:	80 91 e1 02 	lds	r24, 0x02E1
    1138:	60 e0       	ldi	r22, 0x00	; 0
    113a:	0e 94 19 02 	call	0x432	; 0x432 <_Z12digitalWritehh>
public:
  uint8_t pIn;
  
  void attach(uint8_t nUm)       //F_CPU=clock frequency and num=pin no.to be attached
  {
    iCr=19999;
    113e:	8f e1       	ldi	r24, 0x1F	; 31
    1140:	9e e4       	ldi	r25, 0x4E	; 78
    1142:	90 93 c9 02 	sts	0x02C9, r25
    1146:	80 93 c8 02 	sts	0x02C8, r24
    pIn=nUm;
    114a:	2b e0       	ldi	r18, 0x0B	; 11
    114c:	20 93 ca 02 	sts	0x02CA, r18
    switch(pIn)
    {
     case 11 :                           //OC1A
        DDRB|=(1<<PB5); // PORTB as OUTPUT
    1150:	25 9a       	sbi	0x04, 5	; 4
        TCCR1A |= (1<<WGM11) | (1<<COM1A1) | (1<<COM1A0);
    1152:	a0 e8       	ldi	r26, 0x80	; 128
    1154:	b0 e0       	ldi	r27, 0x00	; 0
    1156:	2c 91       	ld	r18, X
    1158:	22 6c       	ori	r18, 0xC2	; 194
    115a:	2c 93       	st	X, r18
        TCCR1B |= (1<<WGM12) | (1<<WGM13);
    115c:	e1 e8       	ldi	r30, 0x81	; 129
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	20 81       	ld	r18, Z
    1162:	28 61       	ori	r18, 0x18	; 24
    1164:	20 83       	st	Z, r18
        TCCR1B |= (1<<CS10);
    1166:	20 81       	ld	r18, Z
    1168:	21 60       	ori	r18, 0x01	; 1
    116a:	20 83       	st	Z, r18
        ICR1=iCr;                    //generating 20msec pulse (pwm method)
    116c:	c6 e8       	ldi	r28, 0x86	; 134
    116e:	d0 e0       	ldi	r29, 0x00	; 0
    1170:	99 83       	std	Y+1, r25	; 0x01
    1172:	88 83       	st	Y, r24
public:
  uint8_t pIn;
  
  void attach(uint8_t nUm)       //F_CPU=clock frequency and num=pin no.to be attached
  {
    iCr=19999;
    1174:	90 93 cc 02 	sts	0x02CC, r25
    1178:	80 93 cb 02 	sts	0x02CB, r24
    pIn=nUm;
    117c:	10 93 cd 02 	sts	0x02CD, r17
        TCCR1B |= (1<<CS10);
        ICR1=iCr;                    //generating 20msec pulse (pwm method)
        break; 

     case 12 :                            //OC1B
        DDRB|=(1<<PB6); // PORTB as OUTPUT
    1180:	26 9a       	sbi	0x04, 6	; 4
        TCCR1A|=(1<<WGM11)|(1<<COM1B1)|(1<<COM1B0);  //SETTING PRESCALAR AS 64 
    1182:	2c 91       	ld	r18, X
    1184:	22 63       	ori	r18, 0x32	; 50
    1186:	2c 93       	st	X, r18
        TCCR1B|=(1<<WGM12)|(1<<WGM13)|(1<<CS10); //FAST PWM MODE
    1188:	20 81       	ld	r18, Z
    118a:	29 61       	ori	r18, 0x19	; 25
    118c:	20 83       	st	Z, r18
        ICR1=iCr;                    //generating 20msec pulse (pwm method)
    118e:	99 83       	std	Y+1, r25	; 0x01
    1190:	88 83       	st	Y, r24
public:
  uint8_t pIn;
  
  void attach(uint8_t nUm)       //F_CPU=clock frequency and num=pin no.to be attached
  {
    iCr=19999;
    1192:	90 93 cf 02 	sts	0x02CF, r25
    1196:	80 93 ce 02 	sts	0x02CE, r24
    pIn=nUm;
    119a:	25 e0       	ldi	r18, 0x05	; 5
    119c:	20 93 d0 02 	sts	0x02D0, r18
        TCCR1B|=(1<<WGM12)|(1<<WGM13)|(1<<CS10); //FAST PWM MODE
        ICR1=iCr;                    //generating 20msec pulse (pwm method)
        break;

      case 5 :                            //OC3A
        DDRE|=(1<<PE3); // PORTB as OUTPUT
    11a0:	6b 9a       	sbi	0x0d, 3	; 13
        TCCR3A|=(1<<WGM31)|(1<<COM3A1)|(1<<COM3A0);  //SETTING PRESCALAR AS 64 
    11a2:	a0 e9       	ldi	r26, 0x90	; 144
    11a4:	b0 e0       	ldi	r27, 0x00	; 0
    11a6:	2c 91       	ld	r18, X
    11a8:	22 6c       	ori	r18, 0xC2	; 194
    11aa:	2c 93       	st	X, r18
        TCCR3B|=(1<<WGM32)|(1<<WGM33)|(1<<CS30); //FAST PWM MODE
    11ac:	e1 e9       	ldi	r30, 0x91	; 145
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	20 81       	ld	r18, Z
    11b2:	29 61       	ori	r18, 0x19	; 25
    11b4:	20 83       	st	Z, r18
        ICR3=iCr;                    //generating 20msec pulse (pwm method)
    11b6:	c6 e9       	ldi	r28, 0x96	; 150
    11b8:	d0 e0       	ldi	r29, 0x00	; 0
    11ba:	99 83       	std	Y+1, r25	; 0x01
    11bc:	88 83       	st	Y, r24
public:
  uint8_t pIn;
  
  void attach(uint8_t nUm)       //F_CPU=clock frequency and num=pin no.to be attached
  {
    iCr=19999;
    11be:	90 93 d2 02 	sts	0x02D2, r25
    11c2:	80 93 d1 02 	sts	0x02D1, r24
    pIn=nUm;
    11c6:	22 e0       	ldi	r18, 0x02	; 2
    11c8:	20 93 d3 02 	sts	0x02D3, r18
        TCCR3B|=(1<<WGM32)|(1<<WGM33)|(1<<CS30); //FAST PWM MODE
        ICR3=iCr;                    //generating 20msec pulse (pwm method)
        break;

      case 2 :                            //OC3B
        DDRE|=(1<<PE4); // PORTB as OUTPUT
    11cc:	6c 9a       	sbi	0x0d, 4	; 13
        TCCR3A|=(1<<WGM31)|(1<<COM3B1)|(1<<COM3B0);  //SETTING PRESCALAR AS 64 
    11ce:	2c 91       	ld	r18, X
    11d0:	22 63       	ori	r18, 0x32	; 50
    11d2:	2c 93       	st	X, r18
        TCCR3B|=(1<<WGM32)|(1<<WGM33)|(1<<CS30); //FAST PWM MODE
    11d4:	20 81       	ld	r18, Z
    11d6:	29 61       	ori	r18, 0x19	; 25
    11d8:	20 83       	st	Z, r18
        ICR3=iCr;                    //generating 20msec pulse (pwm method)
    11da:	99 83       	std	Y+1, r25	; 0x01
    11dc:	88 83       	st	Y, r24
	motors.direction(0,0,0,0);
	swerve1.attach(servoPwm1);
	swerve2.attach(servoPwm2);
	swerve3.attach(servoPwm3);
	swerve4.attach(servoPwm4);	
}
    11de:	df 91       	pop	r29
    11e0:	cf 91       	pop	r28
    11e2:	1f 91       	pop	r17
    11e4:	08 95       	ret

000011e6 <_Z4loopv>:
void loop(){
    11e6:	2f 92       	push	r2
    11e8:	3f 92       	push	r3
    11ea:	4f 92       	push	r4
    11ec:	5f 92       	push	r5
    11ee:	6f 92       	push	r6
    11f0:	7f 92       	push	r7
    11f2:	8f 92       	push	r8
    11f4:	9f 92       	push	r9
    11f6:	af 92       	push	r10
    11f8:	bf 92       	push	r11
    11fa:	cf 92       	push	r12
    11fc:	df 92       	push	r13
    11fe:	ef 92       	push	r14
    1200:	ff 92       	push	r15
    1202:	0f 93       	push	r16
    1204:	1f 93       	push	r17
    1206:	df 93       	push	r29
    1208:	cf 93       	push	r28
    120a:	cd b7       	in	r28, 0x3d	; 61
    120c:	de b7       	in	r29, 0x3e	; 62
    120e:	60 97       	sbiw	r28, 0x10	; 16
    1210:	0f b6       	in	r0, 0x3f	; 63
    1212:	f8 94       	cli
    1214:	de bf       	out	0x3e, r29	; 62
    1216:	0f be       	out	0x3f, r0	; 63
    1218:	cd bf       	out	0x3d, r28	; 61
	}	
	
	//FOUR MOTORS
	void drive(uint8_t pWm, uint8_t pWm1, uint8_t pWm2, uint8_t pWm3){
		
		if(pWm>lAstpwm||pWm1>lAstpwm1||pWm2>lAstpwm2||pWm3>lAstpwm3){		//accelerate
    121a:	80 91 d6 02 	lds	r24, 0x02D6
    121e:	84 36       	cpi	r24, 0x64	; 100
    1220:	08 f4       	brcc	.+2      	; 0x1224 <_Z4loopv+0x3e>
    1222:	9f c0       	rjmp	.+318    	; 0x1362 <_Z4loopv+0x17c>
    1224:	90 91 db 02 	lds	r25, 0x02DB
    1228:	94 36       	cpi	r25, 0x64	; 100
    122a:	08 f4       	brcc	.+2      	; 0x122e <_Z4loopv+0x48>
    122c:	9a c0       	rjmp	.+308    	; 0x1362 <_Z4loopv+0x17c>
    122e:	20 91 df 02 	lds	r18, 0x02DF
    1232:	24 36       	cpi	r18, 0x64	; 100
    1234:	08 f4       	brcc	.+2      	; 0x1238 <_Z4loopv+0x52>
    1236:	95 c0       	rjmp	.+298    	; 0x1362 <_Z4loopv+0x17c>
    1238:	30 91 e3 02 	lds	r19, 0x02E3
    123c:	34 36       	cpi	r19, 0x64	; 100
    123e:	08 f4       	brcc	.+2      	; 0x1242 <_Z4loopv+0x5c>
    1240:	90 c0       	rjmp	.+288    	; 0x1362 <_Z4loopv+0x17c>
    1242:	f0 c0       	rjmp	.+480    	; 0x1424 <_Z4loopv+0x23e>

			for(lAstpwm=lAstpwm,lAstpwm1=lAstpwm1,lAstpwm2=lAstpwm2,lAstpwm3=lAstpwm3;lAstpwm<pWm||lAstpwm1<pWm1||lAstpwm2<pWm2||lAstpwm3<pWm3;){		//increase the speed step by step
				if (pWm>lAstpwm){
					lAstpwm+=step1;
    1244:	f2 01       	movw	r30, r4
    1246:	60 81       	ld	r22, Z
    1248:	86 0f       	add	r24, r22
    124a:	e9 81       	ldd	r30, Y+1	; 0x01
    124c:	fa 81       	ldd	r31, Y+2	; 0x02
    124e:	80 83       	st	Z, r24
					analogWrite(pWmpin,constrain(lAstpwm,0,pWm));
    1250:	68 2f       	mov	r22, r24
    1252:	70 e0       	ldi	r23, 0x00	; 0
    1254:	80 e0       	ldi	r24, 0x00	; 0
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	20 e0       	ldi	r18, 0x00	; 0
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	a9 01       	movw	r20, r18
    125e:	0f 2e       	mov	r0, r31
    1260:	f4 e6       	ldi	r31, 0x64	; 100
    1262:	ef 2e       	mov	r14, r31
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	ff 2e       	mov	r15, r31
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	0f 2f       	mov	r16, r31
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	1f 2f       	mov	r17, r31
    1270:	f0 2d       	mov	r31, r0
    1272:	0e 94 cc 05 	call	0xb98	; 0xb98 <_Z9constrainlll>
    1276:	eb 81       	ldd	r30, Y+3	; 0x03
    1278:	fc 81       	ldd	r31, Y+4	; 0x04
    127a:	80 81       	ld	r24, Z
    127c:	0e 94 11 04 	call	0x822	; 0x822 <_Z11analogWritehh>
				}
				if (pWm1>lAstpwm1){
    1280:	eb ed       	ldi	r30, 0xDB	; 219
    1282:	f2 e0       	ldi	r31, 0x02	; 2
    1284:	80 81       	ld	r24, Z
    1286:	84 36       	cpi	r24, 0x64	; 100
    1288:	f0 f4       	brcc	.+60     	; 0x12c6 <_Z4loopv+0xe0>
					lAstpwm1+=step2;
    128a:	f1 01       	movw	r30, r2
    128c:	60 81       	ld	r22, Z
    128e:	86 0f       	add	r24, r22
    1290:	ed 81       	ldd	r30, Y+5	; 0x05
    1292:	fe 81       	ldd	r31, Y+6	; 0x06
    1294:	80 83       	st	Z, r24
					analogWrite(pWmpin1,constrain(lAstpwm1,0,pWm1));
    1296:	68 2f       	mov	r22, r24
    1298:	70 e0       	ldi	r23, 0x00	; 0
    129a:	80 e0       	ldi	r24, 0x00	; 0
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	20 e0       	ldi	r18, 0x00	; 0
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	a9 01       	movw	r20, r18
    12a4:	0f 2e       	mov	r0, r31
    12a6:	f4 e6       	ldi	r31, 0x64	; 100
    12a8:	ef 2e       	mov	r14, r31
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	ff 2e       	mov	r15, r31
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	0f 2f       	mov	r16, r31
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	1f 2f       	mov	r17, r31
    12b6:	f0 2d       	mov	r31, r0
    12b8:	0e 94 cc 05 	call	0xb98	; 0xb98 <_Z9constrainlll>
    12bc:	ef 81       	ldd	r30, Y+7	; 0x07
    12be:	f8 85       	ldd	r31, Y+8	; 0x08
    12c0:	80 81       	ld	r24, Z
    12c2:	0e 94 11 04 	call	0x822	; 0x822 <_Z11analogWritehh>
				}
				if (pWm2>lAstpwm2){
    12c6:	f6 01       	movw	r30, r12
    12c8:	80 81       	ld	r24, Z
    12ca:	84 36       	cpi	r24, 0x64	; 100
    12cc:	f8 f4       	brcc	.+62     	; 0x130c <_Z4loopv+0x126>
					lAstpwm2+=step3;
    12ce:	e0 ee       	ldi	r30, 0xE0	; 224
    12d0:	f2 e0       	ldi	r31, 0x02	; 2
    12d2:	60 81       	ld	r22, Z
    12d4:	86 0f       	add	r24, r22
    12d6:	e9 85       	ldd	r30, Y+9	; 0x09
    12d8:	fa 85       	ldd	r31, Y+10	; 0x0a
    12da:	80 83       	st	Z, r24
					analogWrite(pWmpin2,constrain(lAstpwm2,0,pWm2));
    12dc:	68 2f       	mov	r22, r24
    12de:	70 e0       	ldi	r23, 0x00	; 0
    12e0:	80 e0       	ldi	r24, 0x00	; 0
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	20 e0       	ldi	r18, 0x00	; 0
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	a9 01       	movw	r20, r18
    12ea:	0f 2e       	mov	r0, r31
    12ec:	f4 e6       	ldi	r31, 0x64	; 100
    12ee:	ef 2e       	mov	r14, r31
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	ff 2e       	mov	r15, r31
    12f4:	f0 e0       	ldi	r31, 0x00	; 0
    12f6:	0f 2f       	mov	r16, r31
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	1f 2f       	mov	r17, r31
    12fc:	f0 2d       	mov	r31, r0
    12fe:	0e 94 cc 05 	call	0xb98	; 0xb98 <_Z9constrainlll>
    1302:	eb 85       	ldd	r30, Y+11	; 0x0b
    1304:	fc 85       	ldd	r31, Y+12	; 0x0c
    1306:	80 81       	ld	r24, Z
    1308:	0e 94 11 04 	call	0x822	; 0x822 <_Z11analogWritehh>
				}
				if (pWm3>lAstpwm3){
    130c:	f5 01       	movw	r30, r10
    130e:	80 81       	ld	r24, Z
    1310:	84 36       	cpi	r24, 0x64	; 100
    1312:	f8 f4       	brcc	.+62     	; 0x1352 <_Z4loopv+0x16c>
					lAstpwm3+=step4;
    1314:	e4 ee       	ldi	r30, 0xE4	; 228
    1316:	f2 e0       	ldi	r31, 0x02	; 2
    1318:	60 81       	ld	r22, Z
    131a:	86 0f       	add	r24, r22
    131c:	ed 85       	ldd	r30, Y+13	; 0x0d
    131e:	fe 85       	ldd	r31, Y+14	; 0x0e
    1320:	80 83       	st	Z, r24
					analogWrite(pWmpin3,constrain(lAstpwm3,0,pWm3));
    1322:	68 2f       	mov	r22, r24
    1324:	70 e0       	ldi	r23, 0x00	; 0
    1326:	80 e0       	ldi	r24, 0x00	; 0
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	20 e0       	ldi	r18, 0x00	; 0
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	a9 01       	movw	r20, r18
    1330:	0f 2e       	mov	r0, r31
    1332:	f4 e6       	ldi	r31, 0x64	; 100
    1334:	ef 2e       	mov	r14, r31
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	ff 2e       	mov	r15, r31
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	0f 2f       	mov	r16, r31
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	1f 2f       	mov	r17, r31
    1342:	f0 2d       	mov	r31, r0
    1344:	0e 94 cc 05 	call	0xb98	; 0xb98 <_Z9constrainlll>
    1348:	ef 85       	ldd	r30, Y+15	; 0x0f
    134a:	f8 89       	ldd	r31, Y+16	; 0x10
    134c:	80 81       	ld	r24, Z
    134e:	0e 94 11 04 	call	0x822	; 0x822 <_Z11analogWritehh>
				}	
				delay(interval);		
    1352:	f3 01       	movw	r30, r6
    1354:	60 81       	ld	r22, Z
    1356:	70 e0       	ldi	r23, 0x00	; 0
    1358:	80 e0       	ldi	r24, 0x00	; 0
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	0e 94 4a 05 	call	0xa94	; 0xa94 <_Z5delaym>
    1360:	4b c0       	rjmp	.+150    	; 0x13f8 <_Z4loopv+0x212>
	//FOUR MOTORS
	void drive(uint8_t pWm, uint8_t pWm1, uint8_t pWm2, uint8_t pWm3){
		
		if(pWm>lAstpwm||pWm1>lAstpwm1||pWm2>lAstpwm2||pWm3>lAstpwm3){		//accelerate

			for(lAstpwm=lAstpwm,lAstpwm1=lAstpwm1,lAstpwm2=lAstpwm2,lAstpwm3=lAstpwm3;lAstpwm<pWm||lAstpwm1<pWm1||lAstpwm2<pWm2||lAstpwm3<pWm3;){		//increase the speed step by step
    1362:	0f 2e       	mov	r0, r31
    1364:	f6 ed       	ldi	r31, 0xD6	; 214
    1366:	8f 2e       	mov	r8, r31
    1368:	f2 e0       	ldi	r31, 0x02	; 2
    136a:	9f 2e       	mov	r9, r31
    136c:	f0 2d       	mov	r31, r0
				if (pWm>lAstpwm){
					lAstpwm+=step1;
    136e:	0f 2e       	mov	r0, r31
    1370:	f7 ed       	ldi	r31, 0xD7	; 215
    1372:	4f 2e       	mov	r4, r31
    1374:	f2 e0       	ldi	r31, 0x02	; 2
    1376:	5f 2e       	mov	r5, r31
    1378:	f0 2d       	mov	r31, r0
    137a:	a2 01       	movw	r20, r4
    137c:	41 50       	subi	r20, 0x01	; 1
    137e:	50 40       	sbci	r21, 0x00	; 0
    1380:	5a 83       	std	Y+2, r21	; 0x02
    1382:	49 83       	std	Y+1, r20	; 0x01
					analogWrite(pWmpin,constrain(lAstpwm,0,pWm));
    1384:	c2 01       	movw	r24, r4
    1386:	02 97       	sbiw	r24, 0x02	; 2
    1388:	9c 83       	std	Y+4, r25	; 0x04
    138a:	8b 83       	std	Y+3, r24	; 0x03
	//FOUR MOTORS
	void drive(uint8_t pWm, uint8_t pWm1, uint8_t pWm2, uint8_t pWm3){
		
		if(pWm>lAstpwm||pWm1>lAstpwm1||pWm2>lAstpwm2||pWm3>lAstpwm3){		//accelerate

			for(lAstpwm=lAstpwm,lAstpwm1=lAstpwm1,lAstpwm2=lAstpwm2,lAstpwm3=lAstpwm3;lAstpwm<pWm||lAstpwm1<pWm1||lAstpwm2<pWm2||lAstpwm3<pWm3;){		//increase the speed step by step
    138c:	0f 2e       	mov	r0, r31
    138e:	ff ed       	ldi	r31, 0xDF	; 223
    1390:	cf 2e       	mov	r12, r31
    1392:	f2 e0       	ldi	r31, 0x02	; 2
    1394:	df 2e       	mov	r13, r31
    1396:	f0 2d       	mov	r31, r0
    1398:	0f 2e       	mov	r0, r31
    139a:	f3 ee       	ldi	r31, 0xE3	; 227
    139c:	af 2e       	mov	r10, r31
    139e:	f2 e0       	ldi	r31, 0x02	; 2
    13a0:	bf 2e       	mov	r11, r31
    13a2:	f0 2d       	mov	r31, r0
				if (pWm>lAstpwm){
					lAstpwm+=step1;
					analogWrite(pWmpin,constrain(lAstpwm,0,pWm));
				}
				if (pWm1>lAstpwm1){
					lAstpwm1+=step2;
    13a4:	0f 2e       	mov	r0, r31
    13a6:	fc ed       	ldi	r31, 0xDC	; 220
    13a8:	2f 2e       	mov	r2, r31
    13aa:	f2 e0       	ldi	r31, 0x02	; 2
    13ac:	3f 2e       	mov	r3, r31
    13ae:	f0 2d       	mov	r31, r0
    13b0:	f1 01       	movw	r30, r2
    13b2:	31 97       	sbiw	r30, 0x01	; 1
    13b4:	fe 83       	std	Y+6, r31	; 0x06
    13b6:	ed 83       	std	Y+5, r30	; 0x05
					analogWrite(pWmpin1,constrain(lAstpwm1,0,pWm1));
    13b8:	a1 01       	movw	r20, r2
    13ba:	42 50       	subi	r20, 0x02	; 2
    13bc:	50 40       	sbci	r21, 0x00	; 0
    13be:	58 87       	std	Y+8, r21	; 0x08
    13c0:	4f 83       	std	Y+7, r20	; 0x07
				}
				if (pWm2>lAstpwm2){
					lAstpwm2+=step3;
    13c2:	80 ee       	ldi	r24, 0xE0	; 224
    13c4:	92 e0       	ldi	r25, 0x02	; 2
    13c6:	01 97       	sbiw	r24, 0x01	; 1
    13c8:	9a 87       	std	Y+10, r25	; 0x0a
    13ca:	89 87       	std	Y+9, r24	; 0x09
					analogWrite(pWmpin2,constrain(lAstpwm2,0,pWm2));
    13cc:	e0 ee       	ldi	r30, 0xE0	; 224
    13ce:	f2 e0       	ldi	r31, 0x02	; 2
    13d0:	32 97       	sbiw	r30, 0x02	; 2
    13d2:	fc 87       	std	Y+12, r31	; 0x0c
    13d4:	eb 87       	std	Y+11, r30	; 0x0b
				}
				if (pWm3>lAstpwm3){
					lAstpwm3+=step4;
    13d6:	44 ee       	ldi	r20, 0xE4	; 228
    13d8:	52 e0       	ldi	r21, 0x02	; 2
    13da:	41 50       	subi	r20, 0x01	; 1
    13dc:	50 40       	sbci	r21, 0x00	; 0
    13de:	5e 87       	std	Y+14, r21	; 0x0e
    13e0:	4d 87       	std	Y+13, r20	; 0x0d
					analogWrite(pWmpin3,constrain(lAstpwm3,0,pWm3));
    13e2:	84 ee       	ldi	r24, 0xE4	; 228
    13e4:	92 e0       	ldi	r25, 0x02	; 2
    13e6:	02 97       	sbiw	r24, 0x02	; 2
    13e8:	98 8b       	std	Y+16, r25	; 0x10
    13ea:	8f 87       	std	Y+15, r24	; 0x0f
				}	
				delay(interval);		
    13ec:	0f 2e       	mov	r0, r31
    13ee:	f8 ed       	ldi	r31, 0xD8	; 216
    13f0:	6f 2e       	mov	r6, r31
    13f2:	f2 e0       	ldi	r31, 0x02	; 2
    13f4:	7f 2e       	mov	r7, r31
    13f6:	f0 2d       	mov	r31, r0
	//FOUR MOTORS
	void drive(uint8_t pWm, uint8_t pWm1, uint8_t pWm2, uint8_t pWm3){
		
		if(pWm>lAstpwm||pWm1>lAstpwm1||pWm2>lAstpwm2||pWm3>lAstpwm3){		//accelerate

			for(lAstpwm=lAstpwm,lAstpwm1=lAstpwm1,lAstpwm2=lAstpwm2,lAstpwm3=lAstpwm3;lAstpwm<pWm||lAstpwm1<pWm1||lAstpwm2<pWm2||lAstpwm3<pWm3;){		//increase the speed step by step
    13f8:	f4 01       	movw	r30, r8
    13fa:	80 81       	ld	r24, Z
    13fc:	84 36       	cpi	r24, 0x64	; 100
    13fe:	08 f4       	brcc	.+2      	; 0x1402 <_Z4loopv+0x21c>
    1400:	21 cf       	rjmp	.-446    	; 0x1244 <_Z4loopv+0x5e>
    1402:	eb ed       	ldi	r30, 0xDB	; 219
    1404:	f2 e0       	ldi	r31, 0x02	; 2
    1406:	80 81       	ld	r24, Z
    1408:	84 36       	cpi	r24, 0x64	; 100
    140a:	08 f4       	brcc	.+2      	; 0x140e <_Z4loopv+0x228>
    140c:	39 cf       	rjmp	.-398    	; 0x1280 <_Z4loopv+0x9a>
    140e:	f6 01       	movw	r30, r12
    1410:	80 81       	ld	r24, Z
    1412:	84 36       	cpi	r24, 0x64	; 100
    1414:	08 f4       	brcc	.+2      	; 0x1418 <_Z4loopv+0x232>
    1416:	34 cf       	rjmp	.-408    	; 0x1280 <_Z4loopv+0x9a>
    1418:	f5 01       	movw	r30, r10
    141a:	80 81       	ld	r24, Z
    141c:	84 36       	cpi	r24, 0x64	; 100
    141e:	08 f0       	brcs	.+2      	; 0x1422 <_Z4loopv+0x23c>
    1420:	11 c1       	rjmp	.+546    	; 0x1644 <_Z4loopv+0x45e>
    1422:	2e cf       	rjmp	.-420    	; 0x1280 <_Z4loopv+0x9a>
				delay(interval);		
			}
			
		}

		else if(pWm<lAstpwm||pWm1<lAstpwm1||pWm2<lAstpwm2||pWm3<lAstpwm3){				//decelerate
    1424:	85 36       	cpi	r24, 0x65	; 101
    1426:	08 f0       	brcs	.+2      	; 0x142a <_Z4loopv+0x244>
    1428:	99 c0       	rjmp	.+306    	; 0x155c <_Z4loopv+0x376>
    142a:	95 36       	cpi	r25, 0x65	; 101
    142c:	08 f0       	brcs	.+2      	; 0x1430 <_Z4loopv+0x24a>
    142e:	96 c0       	rjmp	.+300    	; 0x155c <_Z4loopv+0x376>
    1430:	25 36       	cpi	r18, 0x65	; 101
    1432:	08 f0       	brcs	.+2      	; 0x1436 <_Z4loopv+0x250>
    1434:	93 c0       	rjmp	.+294    	; 0x155c <_Z4loopv+0x376>
    1436:	35 36       	cpi	r19, 0x65	; 101
    1438:	08 f0       	brcs	.+2      	; 0x143c <_Z4loopv+0x256>
    143a:	90 c0       	rjmp	.+288    	; 0x155c <_Z4loopv+0x376>
    143c:	ef c0       	rjmp	.+478    	; 0x161c <_Z4loopv+0x436>

			for(lAstpwm=lAstpwm,lAstpwm1=lAstpwm1,lAstpwm2=lAstpwm2,lAstpwm3=lAstpwm3;lAstpwm>pWm||lAstpwm1>pWm1||lAstpwm2>pWm2||lAstpwm3>pWm3;){		//decrease the speed step by step
				if (pWm<lAstpwm){
					lAstpwm-=step1;
    143e:	f2 01       	movw	r30, r4
    1440:	80 81       	ld	r24, Z
    1442:	68 1b       	sub	r22, r24
    1444:	e9 81       	ldd	r30, Y+1	; 0x01
    1446:	fa 81       	ldd	r31, Y+2	; 0x02
    1448:	60 83       	st	Z, r22
					analogWrite(pWmpin,constrain(lAstpwm,pWm,255));
    144a:	70 e0       	ldi	r23, 0x00	; 0
    144c:	80 e0       	ldi	r24, 0x00	; 0
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	24 e6       	ldi	r18, 0x64	; 100
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	40 e0       	ldi	r20, 0x00	; 0
    1456:	50 e0       	ldi	r21, 0x00	; 0
    1458:	0f 2e       	mov	r0, r31
    145a:	ff ef       	ldi	r31, 0xFF	; 255
    145c:	ef 2e       	mov	r14, r31
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	ff 2e       	mov	r15, r31
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	0f 2f       	mov	r16, r31
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	1f 2f       	mov	r17, r31
    146a:	f0 2d       	mov	r31, r0
    146c:	0e 94 cc 05 	call	0xb98	; 0xb98 <_Z9constrainlll>
    1470:	eb 81       	ldd	r30, Y+3	; 0x03
    1472:	fc 81       	ldd	r31, Y+4	; 0x04
    1474:	80 81       	ld	r24, Z
    1476:	0e 94 11 04 	call	0x822	; 0x822 <_Z11analogWritehh>
				}
				if (pWm1<lAstpwm1){
    147a:	eb ed       	ldi	r30, 0xDB	; 219
    147c:	f2 e0       	ldi	r31, 0x02	; 2
    147e:	60 81       	ld	r22, Z
    1480:	65 36       	cpi	r22, 0x65	; 101
    1482:	f0 f0       	brcs	.+60     	; 0x14c0 <_Z4loopv+0x2da>
					lAstpwm1-=step2;
    1484:	f1 01       	movw	r30, r2
    1486:	80 81       	ld	r24, Z
    1488:	68 1b       	sub	r22, r24
    148a:	ed 81       	ldd	r30, Y+5	; 0x05
    148c:	fe 81       	ldd	r31, Y+6	; 0x06
    148e:	60 83       	st	Z, r22
					analogWrite(pWmpin1,constrain(lAstpwm1,pWm1,255));
    1490:	70 e0       	ldi	r23, 0x00	; 0
    1492:	80 e0       	ldi	r24, 0x00	; 0
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	24 e6       	ldi	r18, 0x64	; 100
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	40 e0       	ldi	r20, 0x00	; 0
    149c:	50 e0       	ldi	r21, 0x00	; 0
    149e:	0f 2e       	mov	r0, r31
    14a0:	ff ef       	ldi	r31, 0xFF	; 255
    14a2:	ef 2e       	mov	r14, r31
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	ff 2e       	mov	r15, r31
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	0f 2f       	mov	r16, r31
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	1f 2f       	mov	r17, r31
    14b0:	f0 2d       	mov	r31, r0
    14b2:	0e 94 cc 05 	call	0xb98	; 0xb98 <_Z9constrainlll>
    14b6:	ef 81       	ldd	r30, Y+7	; 0x07
    14b8:	f8 85       	ldd	r31, Y+8	; 0x08
    14ba:	80 81       	ld	r24, Z
    14bc:	0e 94 11 04 	call	0x822	; 0x822 <_Z11analogWritehh>
				}
				if (pWm2<lAstpwm2){
    14c0:	f6 01       	movw	r30, r12
    14c2:	60 81       	ld	r22, Z
    14c4:	65 36       	cpi	r22, 0x65	; 101
    14c6:	f8 f0       	brcs	.+62     	; 0x1506 <_Z4loopv+0x320>
					lAstpwm2-=step3;
    14c8:	e0 ee       	ldi	r30, 0xE0	; 224
    14ca:	f2 e0       	ldi	r31, 0x02	; 2
    14cc:	80 81       	ld	r24, Z
    14ce:	68 1b       	sub	r22, r24
    14d0:	e9 85       	ldd	r30, Y+9	; 0x09
    14d2:	fa 85       	ldd	r31, Y+10	; 0x0a
    14d4:	60 83       	st	Z, r22
					analogWrite(pWmpin2,constrain(lAstpwm2,pWm2,255));
    14d6:	70 e0       	ldi	r23, 0x00	; 0
    14d8:	80 e0       	ldi	r24, 0x00	; 0
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	24 e6       	ldi	r18, 0x64	; 100
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	40 e0       	ldi	r20, 0x00	; 0
    14e2:	50 e0       	ldi	r21, 0x00	; 0
    14e4:	0f 2e       	mov	r0, r31
    14e6:	ff ef       	ldi	r31, 0xFF	; 255
    14e8:	ef 2e       	mov	r14, r31
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	ff 2e       	mov	r15, r31
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	0f 2f       	mov	r16, r31
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	1f 2f       	mov	r17, r31
    14f6:	f0 2d       	mov	r31, r0
    14f8:	0e 94 cc 05 	call	0xb98	; 0xb98 <_Z9constrainlll>
    14fc:	eb 85       	ldd	r30, Y+11	; 0x0b
    14fe:	fc 85       	ldd	r31, Y+12	; 0x0c
    1500:	80 81       	ld	r24, Z
    1502:	0e 94 11 04 	call	0x822	; 0x822 <_Z11analogWritehh>
				}
				if (pWm3<lAstpwm3){
    1506:	f5 01       	movw	r30, r10
    1508:	60 81       	ld	r22, Z
    150a:	65 36       	cpi	r22, 0x65	; 101
    150c:	f8 f0       	brcs	.+62     	; 0x154c <_Z4loopv+0x366>
					lAstpwm3-=step4;
    150e:	e4 ee       	ldi	r30, 0xE4	; 228
    1510:	f2 e0       	ldi	r31, 0x02	; 2
    1512:	80 81       	ld	r24, Z
    1514:	68 1b       	sub	r22, r24
    1516:	ed 85       	ldd	r30, Y+13	; 0x0d
    1518:	fe 85       	ldd	r31, Y+14	; 0x0e
    151a:	60 83       	st	Z, r22
					analogWrite(pWmpin3,constrain(lAstpwm3,pWm3,255));
    151c:	70 e0       	ldi	r23, 0x00	; 0
    151e:	80 e0       	ldi	r24, 0x00	; 0
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	24 e6       	ldi	r18, 0x64	; 100
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	40 e0       	ldi	r20, 0x00	; 0
    1528:	50 e0       	ldi	r21, 0x00	; 0
    152a:	0f 2e       	mov	r0, r31
    152c:	ff ef       	ldi	r31, 0xFF	; 255
    152e:	ef 2e       	mov	r14, r31
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	ff 2e       	mov	r15, r31
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	0f 2f       	mov	r16, r31
    1538:	f0 e0       	ldi	r31, 0x00	; 0
    153a:	1f 2f       	mov	r17, r31
    153c:	f0 2d       	mov	r31, r0
    153e:	0e 94 cc 05 	call	0xb98	; 0xb98 <_Z9constrainlll>
    1542:	ef 85       	ldd	r30, Y+15	; 0x0f
    1544:	f8 89       	ldd	r31, Y+16	; 0x10
    1546:	80 81       	ld	r24, Z
    1548:	0e 94 11 04 	call	0x822	; 0x822 <_Z11analogWritehh>
				}
				delay(interval);		
    154c:	f3 01       	movw	r30, r6
    154e:	60 81       	ld	r22, Z
    1550:	70 e0       	ldi	r23, 0x00	; 0
    1552:	80 e0       	ldi	r24, 0x00	; 0
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	0e 94 4a 05 	call	0xa94	; 0xa94 <_Z5delaym>
    155a:	4b c0       	rjmp	.+150    	; 0x15f2 <_Z4loopv+0x40c>
			
		}

		else if(pWm<lAstpwm||pWm1<lAstpwm1||pWm2<lAstpwm2||pWm3<lAstpwm3){				//decelerate

			for(lAstpwm=lAstpwm,lAstpwm1=lAstpwm1,lAstpwm2=lAstpwm2,lAstpwm3=lAstpwm3;lAstpwm>pWm||lAstpwm1>pWm1||lAstpwm2>pWm2||lAstpwm3>pWm3;){		//decrease the speed step by step
    155c:	0f 2e       	mov	r0, r31
    155e:	f6 ed       	ldi	r31, 0xD6	; 214
    1560:	8f 2e       	mov	r8, r31
    1562:	f2 e0       	ldi	r31, 0x02	; 2
    1564:	9f 2e       	mov	r9, r31
    1566:	f0 2d       	mov	r31, r0
				if (pWm<lAstpwm){
					lAstpwm-=step1;
    1568:	0f 2e       	mov	r0, r31
    156a:	f7 ed       	ldi	r31, 0xD7	; 215
    156c:	4f 2e       	mov	r4, r31
    156e:	f2 e0       	ldi	r31, 0x02	; 2
    1570:	5f 2e       	mov	r5, r31
    1572:	f0 2d       	mov	r31, r0
    1574:	a2 01       	movw	r20, r4
    1576:	41 50       	subi	r20, 0x01	; 1
    1578:	50 40       	sbci	r21, 0x00	; 0
    157a:	5a 83       	std	Y+2, r21	; 0x02
    157c:	49 83       	std	Y+1, r20	; 0x01
					analogWrite(pWmpin,constrain(lAstpwm,pWm,255));
    157e:	c2 01       	movw	r24, r4
    1580:	02 97       	sbiw	r24, 0x02	; 2
    1582:	9c 83       	std	Y+4, r25	; 0x04
    1584:	8b 83       	std	Y+3, r24	; 0x03
			
		}

		else if(pWm<lAstpwm||pWm1<lAstpwm1||pWm2<lAstpwm2||pWm3<lAstpwm3){				//decelerate

			for(lAstpwm=lAstpwm,lAstpwm1=lAstpwm1,lAstpwm2=lAstpwm2,lAstpwm3=lAstpwm3;lAstpwm>pWm||lAstpwm1>pWm1||lAstpwm2>pWm2||lAstpwm3>pWm3;){		//decrease the speed step by step
    1586:	0f 2e       	mov	r0, r31
    1588:	ff ed       	ldi	r31, 0xDF	; 223
    158a:	cf 2e       	mov	r12, r31
    158c:	f2 e0       	ldi	r31, 0x02	; 2
    158e:	df 2e       	mov	r13, r31
    1590:	f0 2d       	mov	r31, r0
    1592:	0f 2e       	mov	r0, r31
    1594:	f3 ee       	ldi	r31, 0xE3	; 227
    1596:	af 2e       	mov	r10, r31
    1598:	f2 e0       	ldi	r31, 0x02	; 2
    159a:	bf 2e       	mov	r11, r31
    159c:	f0 2d       	mov	r31, r0
				if (pWm<lAstpwm){
					lAstpwm-=step1;
					analogWrite(pWmpin,constrain(lAstpwm,pWm,255));
				}
				if (pWm1<lAstpwm1){
					lAstpwm1-=step2;
    159e:	0f 2e       	mov	r0, r31
    15a0:	fc ed       	ldi	r31, 0xDC	; 220
    15a2:	2f 2e       	mov	r2, r31
    15a4:	f2 e0       	ldi	r31, 0x02	; 2
    15a6:	3f 2e       	mov	r3, r31
    15a8:	f0 2d       	mov	r31, r0
    15aa:	f1 01       	movw	r30, r2
    15ac:	31 97       	sbiw	r30, 0x01	; 1
    15ae:	fe 83       	std	Y+6, r31	; 0x06
    15b0:	ed 83       	std	Y+5, r30	; 0x05
					analogWrite(pWmpin1,constrain(lAstpwm1,pWm1,255));
    15b2:	a1 01       	movw	r20, r2
    15b4:	42 50       	subi	r20, 0x02	; 2
    15b6:	50 40       	sbci	r21, 0x00	; 0
    15b8:	58 87       	std	Y+8, r21	; 0x08
    15ba:	4f 83       	std	Y+7, r20	; 0x07
				}
				if (pWm2<lAstpwm2){
					lAstpwm2-=step3;
    15bc:	80 ee       	ldi	r24, 0xE0	; 224
    15be:	92 e0       	ldi	r25, 0x02	; 2
    15c0:	01 97       	sbiw	r24, 0x01	; 1
    15c2:	9a 87       	std	Y+10, r25	; 0x0a
    15c4:	89 87       	std	Y+9, r24	; 0x09
					analogWrite(pWmpin2,constrain(lAstpwm2,pWm2,255));
    15c6:	e0 ee       	ldi	r30, 0xE0	; 224
    15c8:	f2 e0       	ldi	r31, 0x02	; 2
    15ca:	32 97       	sbiw	r30, 0x02	; 2
    15cc:	fc 87       	std	Y+12, r31	; 0x0c
    15ce:	eb 87       	std	Y+11, r30	; 0x0b
				}
				if (pWm3<lAstpwm3){
					lAstpwm3-=step4;
    15d0:	44 ee       	ldi	r20, 0xE4	; 228
    15d2:	52 e0       	ldi	r21, 0x02	; 2
    15d4:	41 50       	subi	r20, 0x01	; 1
    15d6:	50 40       	sbci	r21, 0x00	; 0
    15d8:	5e 87       	std	Y+14, r21	; 0x0e
    15da:	4d 87       	std	Y+13, r20	; 0x0d
					analogWrite(pWmpin3,constrain(lAstpwm3,pWm3,255));
    15dc:	84 ee       	ldi	r24, 0xE4	; 228
    15de:	92 e0       	ldi	r25, 0x02	; 2
    15e0:	02 97       	sbiw	r24, 0x02	; 2
    15e2:	98 8b       	std	Y+16, r25	; 0x10
    15e4:	8f 87       	std	Y+15, r24	; 0x0f
				}
				delay(interval);		
    15e6:	0f 2e       	mov	r0, r31
    15e8:	f8 ed       	ldi	r31, 0xD8	; 216
    15ea:	6f 2e       	mov	r6, r31
    15ec:	f2 e0       	ldi	r31, 0x02	; 2
    15ee:	7f 2e       	mov	r7, r31
    15f0:	f0 2d       	mov	r31, r0
			
		}

		else if(pWm<lAstpwm||pWm1<lAstpwm1||pWm2<lAstpwm2||pWm3<lAstpwm3){				//decelerate

			for(lAstpwm=lAstpwm,lAstpwm1=lAstpwm1,lAstpwm2=lAstpwm2,lAstpwm3=lAstpwm3;lAstpwm>pWm||lAstpwm1>pWm1||lAstpwm2>pWm2||lAstpwm3>pWm3;){		//decrease the speed step by step
    15f2:	f4 01       	movw	r30, r8
    15f4:	60 81       	ld	r22, Z
    15f6:	65 36       	cpi	r22, 0x65	; 101
    15f8:	08 f0       	brcs	.+2      	; 0x15fc <_Z4loopv+0x416>
    15fa:	21 cf       	rjmp	.-446    	; 0x143e <_Z4loopv+0x258>
    15fc:	eb ed       	ldi	r30, 0xDB	; 219
    15fe:	f2 e0       	ldi	r31, 0x02	; 2
    1600:	80 81       	ld	r24, Z
    1602:	85 36       	cpi	r24, 0x65	; 101
    1604:	08 f0       	brcs	.+2      	; 0x1608 <_Z4loopv+0x422>
    1606:	39 cf       	rjmp	.-398    	; 0x147a <_Z4loopv+0x294>
    1608:	f6 01       	movw	r30, r12
    160a:	80 81       	ld	r24, Z
    160c:	85 36       	cpi	r24, 0x65	; 101
    160e:	08 f0       	brcs	.+2      	; 0x1612 <_Z4loopv+0x42c>
    1610:	34 cf       	rjmp	.-408    	; 0x147a <_Z4loopv+0x294>
    1612:	f5 01       	movw	r30, r10
    1614:	80 81       	ld	r24, Z
    1616:	85 36       	cpi	r24, 0x65	; 101
    1618:	a8 f0       	brcs	.+42     	; 0x1644 <_Z4loopv+0x45e>
    161a:	2f cf       	rjmp	.-418    	; 0x147a <_Z4loopv+0x294>
				delay(interval);		
			}
		}

		else{		//no change
			analogWrite(pWmpin,pWm);
    161c:	80 91 d5 02 	lds	r24, 0x02D5
    1620:	64 e6       	ldi	r22, 0x64	; 100
    1622:	0e 94 11 04 	call	0x822	; 0x822 <_Z11analogWritehh>
			analogWrite(pWmpin1,pWm1);
    1626:	80 91 da 02 	lds	r24, 0x02DA
    162a:	64 e6       	ldi	r22, 0x64	; 100
    162c:	0e 94 11 04 	call	0x822	; 0x822 <_Z11analogWritehh>
			analogWrite(pWmpin2,pWm2);
    1630:	80 91 de 02 	lds	r24, 0x02DE
    1634:	64 e6       	ldi	r22, 0x64	; 100
    1636:	0e 94 11 04 	call	0x822	; 0x822 <_Z11analogWritehh>
			analogWrite(pWmpin3,pWm3);
    163a:	80 91 e2 02 	lds	r24, 0x02E2
    163e:	64 e6       	ldi	r22, 0x64	; 100
    1640:	0e 94 11 04 	call	0x822	; 0x822 <_Z11analogWritehh>
	//XXX: Check if servo is stalling, if yes don't freak out just make sure it doesn't stall for long time. Check if heating
	motors.drive(100,100,100,100);
	angle=170;
    1644:	8a ea       	ldi	r24, 0xAA	; 170
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	90 93 bd 02 	sts	0x02BD, r25
    164c:	80 93 bc 02 	sts	0x02BC, r24
     }
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,270,iCr/40,iCr/8.7),iCr/40,iCr/8);
    1650:	00 91 c8 02 	lds	r16, 0x02C8
    1654:	10 91 c9 02 	lds	r17, 0x02C9
    1658:	c8 01       	movw	r24, r16
    165a:	68 e2       	ldi	r22, 0x28	; 40
    165c:	70 e0       	ldi	r23, 0x00	; 0
    165e:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <__divmodhi4>
    1662:	6b 01       	movw	r12, r22
    1664:	ee 24       	eor	r14, r14
    1666:	d7 fc       	sbrc	r13, 7
    1668:	e0 94       	com	r14
    166a:	fe 2c       	mov	r15, r14
    166c:	b8 01       	movw	r22, r16
    166e:	88 27       	eor	r24, r24
    1670:	77 fd       	sbrc	r23, 7
    1672:	80 95       	com	r24
    1674:	98 2f       	mov	r25, r24
    1676:	0e 94 31 14 	call	0x2862	; 0x2862 <__floatsisf>
    167a:	23 e3       	ldi	r18, 0x33	; 51
    167c:	33 e3       	ldi	r19, 0x33	; 51
    167e:	4b e0       	ldi	r20, 0x0B	; 11
    1680:	51 e4       	ldi	r21, 0x41	; 65
    1682:	0e 94 96 13 	call	0x272c	; 0x272c <__divsf3>
    1686:	0e 94 fe 13 	call	0x27fc	; 0x27fc <__fixsfsi>
        break; 
    }   
  }
  long mapAngle(long x, long in_min, long in_max, long out_min, long out_max)
  {
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    168a:	6c 19       	sub	r22, r12
    168c:	7d 09       	sbc	r23, r13
    168e:	8e 09       	sbc	r24, r14
    1690:	9f 09       	sbc	r25, r15
	swerve1.write(angle+correction[0]);
    1692:	20 91 b4 02 	lds	r18, 0x02B4
    1696:	30 91 b5 02 	lds	r19, 0x02B5
    169a:	26 55       	subi	r18, 0x56	; 86
    169c:	3f 4f       	sbci	r19, 0xFF	; 255
     }
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,270,iCr/40,iCr/8.7),iCr/40,iCr/8);
    169e:	44 27       	eor	r20, r20
    16a0:	37 fd       	sbrc	r19, 7
    16a2:	40 95       	com	r20
    16a4:	54 2f       	mov	r21, r20
        break; 
    }   
  }
  long mapAngle(long x, long in_min, long in_max, long out_min, long out_max)
  {
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    16a6:	0e 94 20 15 	call	0x2a40	; 0x2a40 <__mulsi3>
    16aa:	2e e0       	ldi	r18, 0x0E	; 14
    16ac:	31 e0       	ldi	r19, 0x01	; 1
    16ae:	40 e0       	ldi	r20, 0x00	; 0
    16b0:	50 e0       	ldi	r21, 0x00	; 0
    16b2:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <__divmodsi4>
    16b6:	2c 0d       	add	r18, r12
    16b8:	3d 1d       	adc	r19, r13
    16ba:	4e 1d       	adc	r20, r14
    16bc:	5f 1d       	adc	r21, r15
     }
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,270,iCr/40,iCr/8.7),iCr/40,iCr/8);
    16be:	c8 01       	movw	r24, r16
    16c0:	99 23       	and	r25, r25
    16c2:	0c f4       	brge	.+2      	; 0x16c6 <_Z4loopv+0x4e0>
    16c4:	07 96       	adiw	r24, 0x07	; 7
    16c6:	95 95       	asr	r25
    16c8:	87 95       	ror	r24
    16ca:	95 95       	asr	r25
    16cc:	87 95       	ror	r24
    16ce:	95 95       	asr	r25
    16d0:	87 95       	ror	r24
    16d2:	aa 27       	eor	r26, r26
    16d4:	97 fd       	sbrc	r25, 7
    16d6:	a0 95       	com	r26
    16d8:	ba 2f       	mov	r27, r26
  {
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  }
  long constraint(long nUm,long lOwer,long uPper)
  {
    if(nUm>uPper){
    16da:	82 17       	cp	r24, r18
    16dc:	93 07       	cpc	r25, r19
    16de:	a4 07       	cpc	r26, r20
    16e0:	b5 07       	cpc	r27, r21
    16e2:	4c f0       	brlt	.+18     	; 0x16f6 <_Z4loopv+0x510>
    16e4:	da 01       	movw	r26, r20
    16e6:	c9 01       	movw	r24, r18
    16e8:	2c 15       	cp	r18, r12
    16ea:	3d 05       	cpc	r19, r13
    16ec:	4e 05       	cpc	r20, r14
    16ee:	5f 05       	cpc	r21, r15
    16f0:	14 f4       	brge	.+4      	; 0x16f6 <_Z4loopv+0x510>
    16f2:	d7 01       	movw	r26, r14
    16f4:	c6 01       	movw	r24, r12
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,270,iCr/40,iCr/8.7),iCr/40,iCr/8);
    switch(pIn)
    16f6:	20 91 ca 02 	lds	r18, 0x02CA
    16fa:	28 30       	cpi	r18, 0x08	; 8
    16fc:	09 f4       	brne	.+2      	; 0x1700 <_Z4loopv+0x51a>
    16fe:	7a c0       	rjmp	.+244    	; 0x17f4 <_Z4loopv+0x60e>
    1700:	29 30       	cpi	r18, 0x09	; 9
    1702:	90 f4       	brcc	.+36     	; 0x1728 <_Z4loopv+0x542>
    1704:	25 30       	cpi	r18, 0x05	; 5
    1706:	d1 f1       	breq	.+116    	; 0x177c <_Z4loopv+0x596>
    1708:	26 30       	cpi	r18, 0x06	; 6
    170a:	38 f4       	brcc	.+14     	; 0x171a <_Z4loopv+0x534>
    170c:	22 30       	cpi	r18, 0x02	; 2
    170e:	09 f4       	brne	.+2      	; 0x1712 <_Z4loopv+0x52c>
    1710:	41 c0       	rjmp	.+130    	; 0x1794 <_Z4loopv+0x5ae>
    1712:	23 30       	cpi	r18, 0x03	; 3
    1714:	09 f0       	breq	.+2      	; 0x1718 <_Z4loopv+0x532>
    1716:	9d c0       	rjmp	.+314    	; 0x1852 <_Z4loopv+0x66c>
    1718:	49 c0       	rjmp	.+146    	; 0x17ac <_Z4loopv+0x5c6>
    171a:	26 30       	cpi	r18, 0x06	; 6
    171c:	09 f4       	brne	.+2      	; 0x1720 <_Z4loopv+0x53a>
    171e:	52 c0       	rjmp	.+164    	; 0x17c4 <_Z4loopv+0x5de>
    1720:	27 30       	cpi	r18, 0x07	; 7
    1722:	09 f0       	breq	.+2      	; 0x1726 <_Z4loopv+0x540>
    1724:	96 c0       	rjmp	.+300    	; 0x1852 <_Z4loopv+0x66c>
    1726:	5a c0       	rjmp	.+180    	; 0x17dc <_Z4loopv+0x5f6>
    1728:	2c 32       	cpi	r18, 0x2C	; 44
    172a:	09 f4       	brne	.+2      	; 0x172e <_Z4loopv+0x548>
    172c:	87 c0       	rjmp	.+270    	; 0x183c <_Z4loopv+0x656>
    172e:	2d 32       	cpi	r18, 0x2D	; 45
    1730:	30 f4       	brcc	.+12     	; 0x173e <_Z4loopv+0x558>
    1732:	2b 30       	cpi	r18, 0x0B	; 11
    1734:	59 f0       	breq	.+22     	; 0x174c <_Z4loopv+0x566>
    1736:	2c 30       	cpi	r18, 0x0C	; 12
    1738:	09 f0       	breq	.+2      	; 0x173c <_Z4loopv+0x556>
    173a:	8b c0       	rjmp	.+278    	; 0x1852 <_Z4loopv+0x66c>
    173c:	13 c0       	rjmp	.+38     	; 0x1764 <_Z4loopv+0x57e>
    173e:	2d 32       	cpi	r18, 0x2D	; 45
    1740:	09 f4       	brne	.+2      	; 0x1744 <_Z4loopv+0x55e>
    1742:	70 c0       	rjmp	.+224    	; 0x1824 <_Z4loopv+0x63e>
    1744:	2e 32       	cpi	r18, 0x2E	; 46
    1746:	09 f0       	breq	.+2      	; 0x174a <_Z4loopv+0x564>
    1748:	84 c0       	rjmp	.+264    	; 0x1852 <_Z4loopv+0x66c>
    174a:	60 c0       	rjmp	.+192    	; 0x180c <_Z4loopv+0x626>
    {
     case 11:
        OCR1A=ICR1-vAl;
    174c:	20 91 86 00 	lds	r18, 0x0086
    1750:	30 91 87 00 	lds	r19, 0x0087
    1754:	a9 01       	movw	r20, r18
    1756:	48 1b       	sub	r20, r24
    1758:	59 0b       	sbc	r21, r25
    175a:	50 93 89 00 	sts	0x0089, r21
    175e:	40 93 88 00 	sts	0x0088, r20
    1762:	77 c0       	rjmp	.+238    	; 0x1852 <_Z4loopv+0x66c>
        break;
      case 12:
        OCR1B=ICR1-vAl;
    1764:	20 91 86 00 	lds	r18, 0x0086
    1768:	30 91 87 00 	lds	r19, 0x0087
    176c:	f9 01       	movw	r30, r18
    176e:	e8 1b       	sub	r30, r24
    1770:	f9 0b       	sbc	r31, r25
    1772:	f0 93 8b 00 	sts	0x008B, r31
    1776:	e0 93 8a 00 	sts	0x008A, r30
    177a:	6b c0       	rjmp	.+214    	; 0x1852 <_Z4loopv+0x66c>
        break;
      case 5:
        OCR3A=ICR3-vAl;
    177c:	20 91 96 00 	lds	r18, 0x0096
    1780:	30 91 97 00 	lds	r19, 0x0097
    1784:	a9 01       	movw	r20, r18
    1786:	48 1b       	sub	r20, r24
    1788:	59 0b       	sbc	r21, r25
    178a:	50 93 99 00 	sts	0x0099, r21
    178e:	40 93 98 00 	sts	0x0098, r20
    1792:	5f c0       	rjmp	.+190    	; 0x1852 <_Z4loopv+0x66c>
        break;
      case 2:
        OCR3B=ICR3-vAl;
    1794:	20 91 96 00 	lds	r18, 0x0096
    1798:	30 91 97 00 	lds	r19, 0x0097
    179c:	f9 01       	movw	r30, r18
    179e:	e8 1b       	sub	r30, r24
    17a0:	f9 0b       	sbc	r31, r25
    17a2:	f0 93 9b 00 	sts	0x009B, r31
    17a6:	e0 93 9a 00 	sts	0x009A, r30
    17aa:	53 c0       	rjmp	.+166    	; 0x1852 <_Z4loopv+0x66c>
        break;
      case 3:
        OCR3C=ICR3-vAl;
    17ac:	20 91 96 00 	lds	r18, 0x0096
    17b0:	30 91 97 00 	lds	r19, 0x0097
    17b4:	a9 01       	movw	r20, r18
    17b6:	48 1b       	sub	r20, r24
    17b8:	59 0b       	sbc	r21, r25
    17ba:	50 93 9d 00 	sts	0x009D, r21
    17be:	40 93 9c 00 	sts	0x009C, r20
    17c2:	47 c0       	rjmp	.+142    	; 0x1852 <_Z4loopv+0x66c>
        break;
      case 6:
        OCR4A=ICR4-vAl;
    17c4:	20 91 a6 00 	lds	r18, 0x00A6
    17c8:	30 91 a7 00 	lds	r19, 0x00A7
    17cc:	f9 01       	movw	r30, r18
    17ce:	e8 1b       	sub	r30, r24
    17d0:	f9 0b       	sbc	r31, r25
    17d2:	f0 93 a9 00 	sts	0x00A9, r31
    17d6:	e0 93 a8 00 	sts	0x00A8, r30
    17da:	3b c0       	rjmp	.+118    	; 0x1852 <_Z4loopv+0x66c>
        break;
      case 7:
        OCR4B=ICR4-vAl;
    17dc:	20 91 a6 00 	lds	r18, 0x00A6
    17e0:	30 91 a7 00 	lds	r19, 0x00A7
    17e4:	a9 01       	movw	r20, r18
    17e6:	48 1b       	sub	r20, r24
    17e8:	59 0b       	sbc	r21, r25
    17ea:	50 93 ab 00 	sts	0x00AB, r21
    17ee:	40 93 aa 00 	sts	0x00AA, r20
    17f2:	2f c0       	rjmp	.+94     	; 0x1852 <_Z4loopv+0x66c>
        break; 
      case 8:
        OCR4C=ICR4-vAl;
    17f4:	20 91 a6 00 	lds	r18, 0x00A6
    17f8:	30 91 a7 00 	lds	r19, 0x00A7
    17fc:	f9 01       	movw	r30, r18
    17fe:	e8 1b       	sub	r30, r24
    1800:	f9 0b       	sbc	r31, r25
    1802:	f0 93 ad 00 	sts	0x00AD, r31
    1806:	e0 93 ac 00 	sts	0x00AC, r30
    180a:	23 c0       	rjmp	.+70     	; 0x1852 <_Z4loopv+0x66c>
        break;
      case 46:
        OCR5A=ICR5-vAl;
    180c:	20 91 26 01 	lds	r18, 0x0126
    1810:	30 91 27 01 	lds	r19, 0x0127
    1814:	a9 01       	movw	r20, r18
    1816:	48 1b       	sub	r20, r24
    1818:	59 0b       	sbc	r21, r25
    181a:	50 93 29 01 	sts	0x0129, r21
    181e:	40 93 28 01 	sts	0x0128, r20
    1822:	17 c0       	rjmp	.+46     	; 0x1852 <_Z4loopv+0x66c>
        break;
      case 45:
        OCR5B=ICR5-vAl;
    1824:	20 91 26 01 	lds	r18, 0x0126
    1828:	30 91 27 01 	lds	r19, 0x0127
    182c:	f9 01       	movw	r30, r18
    182e:	e8 1b       	sub	r30, r24
    1830:	f9 0b       	sbc	r31, r25
    1832:	f0 93 2b 01 	sts	0x012B, r31
    1836:	e0 93 2a 01 	sts	0x012A, r30
    183a:	0b c0       	rjmp	.+22     	; 0x1852 <_Z4loopv+0x66c>
        break;
      case 44:
        OCR5C=ICR5-vAl;
    183c:	20 91 26 01 	lds	r18, 0x0126
    1840:	30 91 27 01 	lds	r19, 0x0127
    1844:	a9 01       	movw	r20, r18
    1846:	48 1b       	sub	r20, r24
    1848:	59 0b       	sbc	r21, r25
    184a:	50 93 2d 01 	sts	0x012D, r21
    184e:	40 93 2c 01 	sts	0x012C, r20
     }
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,270,iCr/40,iCr/8.7),iCr/40,iCr/8);
    1852:	00 91 cb 02 	lds	r16, 0x02CB
    1856:	10 91 cc 02 	lds	r17, 0x02CC
    185a:	c8 01       	movw	r24, r16
    185c:	68 e2       	ldi	r22, 0x28	; 40
    185e:	70 e0       	ldi	r23, 0x00	; 0
    1860:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <__divmodhi4>
    1864:	6b 01       	movw	r12, r22
    1866:	ee 24       	eor	r14, r14
    1868:	d7 fc       	sbrc	r13, 7
    186a:	e0 94       	com	r14
    186c:	fe 2c       	mov	r15, r14
    186e:	b8 01       	movw	r22, r16
    1870:	88 27       	eor	r24, r24
    1872:	77 fd       	sbrc	r23, 7
    1874:	80 95       	com	r24
    1876:	98 2f       	mov	r25, r24
    1878:	0e 94 31 14 	call	0x2862	; 0x2862 <__floatsisf>
    187c:	23 e3       	ldi	r18, 0x33	; 51
    187e:	33 e3       	ldi	r19, 0x33	; 51
    1880:	4b e0       	ldi	r20, 0x0B	; 11
    1882:	51 e4       	ldi	r21, 0x41	; 65
    1884:	0e 94 96 13 	call	0x272c	; 0x272c <__divsf3>
    1888:	0e 94 fe 13 	call	0x27fc	; 0x27fc <__fixsfsi>
        break; 
    }   
  }
  long mapAngle(long x, long in_min, long in_max, long out_min, long out_max)
  {
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    188c:	6c 19       	sub	r22, r12
    188e:	7d 09       	sbc	r23, r13
    1890:	8e 09       	sbc	r24, r14
    1892:	9f 09       	sbc	r25, r15
	swerve2.write(angle+correction[1]);
    1894:	40 91 bc 02 	lds	r20, 0x02BC
    1898:	50 91 bd 02 	lds	r21, 0x02BD
    189c:	20 91 b6 02 	lds	r18, 0x02B6
    18a0:	30 91 b7 02 	lds	r19, 0x02B7
    18a4:	24 0f       	add	r18, r20
    18a6:	35 1f       	adc	r19, r21
     }
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,270,iCr/40,iCr/8.7),iCr/40,iCr/8);
    18a8:	44 27       	eor	r20, r20
    18aa:	37 fd       	sbrc	r19, 7
    18ac:	40 95       	com	r20
    18ae:	54 2f       	mov	r21, r20
        break; 
    }   
  }
  long mapAngle(long x, long in_min, long in_max, long out_min, long out_max)
  {
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    18b0:	0e 94 20 15 	call	0x2a40	; 0x2a40 <__mulsi3>
    18b4:	2e e0       	ldi	r18, 0x0E	; 14
    18b6:	31 e0       	ldi	r19, 0x01	; 1
    18b8:	40 e0       	ldi	r20, 0x00	; 0
    18ba:	50 e0       	ldi	r21, 0x00	; 0
    18bc:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <__divmodsi4>
    18c0:	2c 0d       	add	r18, r12
    18c2:	3d 1d       	adc	r19, r13
    18c4:	4e 1d       	adc	r20, r14
    18c6:	5f 1d       	adc	r21, r15
     }
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,270,iCr/40,iCr/8.7),iCr/40,iCr/8);
    18c8:	c8 01       	movw	r24, r16
    18ca:	99 23       	and	r25, r25
    18cc:	0c f4       	brge	.+2      	; 0x18d0 <_Z4loopv+0x6ea>
    18ce:	07 96       	adiw	r24, 0x07	; 7
    18d0:	95 95       	asr	r25
    18d2:	87 95       	ror	r24
    18d4:	95 95       	asr	r25
    18d6:	87 95       	ror	r24
    18d8:	95 95       	asr	r25
    18da:	87 95       	ror	r24
    18dc:	aa 27       	eor	r26, r26
    18de:	97 fd       	sbrc	r25, 7
    18e0:	a0 95       	com	r26
    18e2:	ba 2f       	mov	r27, r26
  {
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  }
  long constraint(long nUm,long lOwer,long uPper)
  {
    if(nUm>uPper){
    18e4:	82 17       	cp	r24, r18
    18e6:	93 07       	cpc	r25, r19
    18e8:	a4 07       	cpc	r26, r20
    18ea:	b5 07       	cpc	r27, r21
    18ec:	4c f0       	brlt	.+18     	; 0x1900 <_Z4loopv+0x71a>
    18ee:	da 01       	movw	r26, r20
    18f0:	c9 01       	movw	r24, r18
    18f2:	2c 15       	cp	r18, r12
    18f4:	3d 05       	cpc	r19, r13
    18f6:	4e 05       	cpc	r20, r14
    18f8:	5f 05       	cpc	r21, r15
    18fa:	14 f4       	brge	.+4      	; 0x1900 <_Z4loopv+0x71a>
    18fc:	d7 01       	movw	r26, r14
    18fe:	c6 01       	movw	r24, r12
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,270,iCr/40,iCr/8.7),iCr/40,iCr/8);
    switch(pIn)
    1900:	20 91 cd 02 	lds	r18, 0x02CD
    1904:	28 30       	cpi	r18, 0x08	; 8
    1906:	09 f4       	brne	.+2      	; 0x190a <_Z4loopv+0x724>
    1908:	7a c0       	rjmp	.+244    	; 0x19fe <_Z4loopv+0x818>
    190a:	29 30       	cpi	r18, 0x09	; 9
    190c:	90 f4       	brcc	.+36     	; 0x1932 <_Z4loopv+0x74c>
    190e:	25 30       	cpi	r18, 0x05	; 5
    1910:	d1 f1       	breq	.+116    	; 0x1986 <_Z4loopv+0x7a0>
    1912:	26 30       	cpi	r18, 0x06	; 6
    1914:	38 f4       	brcc	.+14     	; 0x1924 <_Z4loopv+0x73e>
    1916:	22 30       	cpi	r18, 0x02	; 2
    1918:	09 f4       	brne	.+2      	; 0x191c <_Z4loopv+0x736>
    191a:	41 c0       	rjmp	.+130    	; 0x199e <_Z4loopv+0x7b8>
    191c:	23 30       	cpi	r18, 0x03	; 3
    191e:	09 f0       	breq	.+2      	; 0x1922 <_Z4loopv+0x73c>
    1920:	9d c0       	rjmp	.+314    	; 0x1a5c <_Z4loopv+0x876>
    1922:	49 c0       	rjmp	.+146    	; 0x19b6 <_Z4loopv+0x7d0>
    1924:	26 30       	cpi	r18, 0x06	; 6
    1926:	09 f4       	brne	.+2      	; 0x192a <_Z4loopv+0x744>
    1928:	52 c0       	rjmp	.+164    	; 0x19ce <_Z4loopv+0x7e8>
    192a:	27 30       	cpi	r18, 0x07	; 7
    192c:	09 f0       	breq	.+2      	; 0x1930 <_Z4loopv+0x74a>
    192e:	96 c0       	rjmp	.+300    	; 0x1a5c <_Z4loopv+0x876>
    1930:	5a c0       	rjmp	.+180    	; 0x19e6 <_Z4loopv+0x800>
    1932:	2c 32       	cpi	r18, 0x2C	; 44
    1934:	09 f4       	brne	.+2      	; 0x1938 <_Z4loopv+0x752>
    1936:	87 c0       	rjmp	.+270    	; 0x1a46 <_Z4loopv+0x860>
    1938:	2d 32       	cpi	r18, 0x2D	; 45
    193a:	30 f4       	brcc	.+12     	; 0x1948 <_Z4loopv+0x762>
    193c:	2b 30       	cpi	r18, 0x0B	; 11
    193e:	59 f0       	breq	.+22     	; 0x1956 <_Z4loopv+0x770>
    1940:	2c 30       	cpi	r18, 0x0C	; 12
    1942:	09 f0       	breq	.+2      	; 0x1946 <_Z4loopv+0x760>
    1944:	8b c0       	rjmp	.+278    	; 0x1a5c <_Z4loopv+0x876>
    1946:	13 c0       	rjmp	.+38     	; 0x196e <_Z4loopv+0x788>
    1948:	2d 32       	cpi	r18, 0x2D	; 45
    194a:	09 f4       	brne	.+2      	; 0x194e <_Z4loopv+0x768>
    194c:	70 c0       	rjmp	.+224    	; 0x1a2e <_Z4loopv+0x848>
    194e:	2e 32       	cpi	r18, 0x2E	; 46
    1950:	09 f0       	breq	.+2      	; 0x1954 <_Z4loopv+0x76e>
    1952:	84 c0       	rjmp	.+264    	; 0x1a5c <_Z4loopv+0x876>
    1954:	60 c0       	rjmp	.+192    	; 0x1a16 <_Z4loopv+0x830>
    {
     case 11:
        OCR1A=ICR1-vAl;
    1956:	20 91 86 00 	lds	r18, 0x0086
    195a:	30 91 87 00 	lds	r19, 0x0087
    195e:	f9 01       	movw	r30, r18
    1960:	e8 1b       	sub	r30, r24
    1962:	f9 0b       	sbc	r31, r25
    1964:	f0 93 89 00 	sts	0x0089, r31
    1968:	e0 93 88 00 	sts	0x0088, r30
    196c:	77 c0       	rjmp	.+238    	; 0x1a5c <_Z4loopv+0x876>
        break;
      case 12:
        OCR1B=ICR1-vAl;
    196e:	20 91 86 00 	lds	r18, 0x0086
    1972:	30 91 87 00 	lds	r19, 0x0087
    1976:	a9 01       	movw	r20, r18
    1978:	48 1b       	sub	r20, r24
    197a:	59 0b       	sbc	r21, r25
    197c:	50 93 8b 00 	sts	0x008B, r21
    1980:	40 93 8a 00 	sts	0x008A, r20
    1984:	6b c0       	rjmp	.+214    	; 0x1a5c <_Z4loopv+0x876>
        break;
      case 5:
        OCR3A=ICR3-vAl;
    1986:	20 91 96 00 	lds	r18, 0x0096
    198a:	30 91 97 00 	lds	r19, 0x0097
    198e:	f9 01       	movw	r30, r18
    1990:	e8 1b       	sub	r30, r24
    1992:	f9 0b       	sbc	r31, r25
    1994:	f0 93 99 00 	sts	0x0099, r31
    1998:	e0 93 98 00 	sts	0x0098, r30
    199c:	5f c0       	rjmp	.+190    	; 0x1a5c <_Z4loopv+0x876>
        break;
      case 2:
        OCR3B=ICR3-vAl;
    199e:	20 91 96 00 	lds	r18, 0x0096
    19a2:	30 91 97 00 	lds	r19, 0x0097
    19a6:	a9 01       	movw	r20, r18
    19a8:	48 1b       	sub	r20, r24
    19aa:	59 0b       	sbc	r21, r25
    19ac:	50 93 9b 00 	sts	0x009B, r21
    19b0:	40 93 9a 00 	sts	0x009A, r20
    19b4:	53 c0       	rjmp	.+166    	; 0x1a5c <_Z4loopv+0x876>
        break;
      case 3:
        OCR3C=ICR3-vAl;
    19b6:	20 91 96 00 	lds	r18, 0x0096
    19ba:	30 91 97 00 	lds	r19, 0x0097
    19be:	f9 01       	movw	r30, r18
    19c0:	e8 1b       	sub	r30, r24
    19c2:	f9 0b       	sbc	r31, r25
    19c4:	f0 93 9d 00 	sts	0x009D, r31
    19c8:	e0 93 9c 00 	sts	0x009C, r30
    19cc:	47 c0       	rjmp	.+142    	; 0x1a5c <_Z4loopv+0x876>
        break;
      case 6:
        OCR4A=ICR4-vAl;
    19ce:	20 91 a6 00 	lds	r18, 0x00A6
    19d2:	30 91 a7 00 	lds	r19, 0x00A7
    19d6:	a9 01       	movw	r20, r18
    19d8:	48 1b       	sub	r20, r24
    19da:	59 0b       	sbc	r21, r25
    19dc:	50 93 a9 00 	sts	0x00A9, r21
    19e0:	40 93 a8 00 	sts	0x00A8, r20
    19e4:	3b c0       	rjmp	.+118    	; 0x1a5c <_Z4loopv+0x876>
        break;
      case 7:
        OCR4B=ICR4-vAl;
    19e6:	20 91 a6 00 	lds	r18, 0x00A6
    19ea:	30 91 a7 00 	lds	r19, 0x00A7
    19ee:	f9 01       	movw	r30, r18
    19f0:	e8 1b       	sub	r30, r24
    19f2:	f9 0b       	sbc	r31, r25
    19f4:	f0 93 ab 00 	sts	0x00AB, r31
    19f8:	e0 93 aa 00 	sts	0x00AA, r30
    19fc:	2f c0       	rjmp	.+94     	; 0x1a5c <_Z4loopv+0x876>
        break; 
      case 8:
        OCR4C=ICR4-vAl;
    19fe:	20 91 a6 00 	lds	r18, 0x00A6
    1a02:	30 91 a7 00 	lds	r19, 0x00A7
    1a06:	a9 01       	movw	r20, r18
    1a08:	48 1b       	sub	r20, r24
    1a0a:	59 0b       	sbc	r21, r25
    1a0c:	50 93 ad 00 	sts	0x00AD, r21
    1a10:	40 93 ac 00 	sts	0x00AC, r20
    1a14:	23 c0       	rjmp	.+70     	; 0x1a5c <_Z4loopv+0x876>
        break;
      case 46:
        OCR5A=ICR5-vAl;
    1a16:	20 91 26 01 	lds	r18, 0x0126
    1a1a:	30 91 27 01 	lds	r19, 0x0127
    1a1e:	f9 01       	movw	r30, r18
    1a20:	e8 1b       	sub	r30, r24
    1a22:	f9 0b       	sbc	r31, r25
    1a24:	f0 93 29 01 	sts	0x0129, r31
    1a28:	e0 93 28 01 	sts	0x0128, r30
    1a2c:	17 c0       	rjmp	.+46     	; 0x1a5c <_Z4loopv+0x876>
        break;
      case 45:
        OCR5B=ICR5-vAl;
    1a2e:	20 91 26 01 	lds	r18, 0x0126
    1a32:	30 91 27 01 	lds	r19, 0x0127
    1a36:	a9 01       	movw	r20, r18
    1a38:	48 1b       	sub	r20, r24
    1a3a:	59 0b       	sbc	r21, r25
    1a3c:	50 93 2b 01 	sts	0x012B, r21
    1a40:	40 93 2a 01 	sts	0x012A, r20
    1a44:	0b c0       	rjmp	.+22     	; 0x1a5c <_Z4loopv+0x876>
        break;
      case 44:
        OCR5C=ICR5-vAl;
    1a46:	20 91 26 01 	lds	r18, 0x0126
    1a4a:	30 91 27 01 	lds	r19, 0x0127
    1a4e:	f9 01       	movw	r30, r18
    1a50:	e8 1b       	sub	r30, r24
    1a52:	f9 0b       	sbc	r31, r25
    1a54:	f0 93 2d 01 	sts	0x012D, r31
    1a58:	e0 93 2c 01 	sts	0x012C, r30
     }
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,270,iCr/40,iCr/8.7),iCr/40,iCr/8);
    1a5c:	00 91 ce 02 	lds	r16, 0x02CE
    1a60:	10 91 cf 02 	lds	r17, 0x02CF
    1a64:	c8 01       	movw	r24, r16
    1a66:	68 e2       	ldi	r22, 0x28	; 40
    1a68:	70 e0       	ldi	r23, 0x00	; 0
    1a6a:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <__divmodhi4>
    1a6e:	6b 01       	movw	r12, r22
    1a70:	ee 24       	eor	r14, r14
    1a72:	d7 fc       	sbrc	r13, 7
    1a74:	e0 94       	com	r14
    1a76:	fe 2c       	mov	r15, r14
    1a78:	b8 01       	movw	r22, r16
    1a7a:	88 27       	eor	r24, r24
    1a7c:	77 fd       	sbrc	r23, 7
    1a7e:	80 95       	com	r24
    1a80:	98 2f       	mov	r25, r24
    1a82:	0e 94 31 14 	call	0x2862	; 0x2862 <__floatsisf>
    1a86:	23 e3       	ldi	r18, 0x33	; 51
    1a88:	33 e3       	ldi	r19, 0x33	; 51
    1a8a:	4b e0       	ldi	r20, 0x0B	; 11
    1a8c:	51 e4       	ldi	r21, 0x41	; 65
    1a8e:	0e 94 96 13 	call	0x272c	; 0x272c <__divsf3>
    1a92:	0e 94 fe 13 	call	0x27fc	; 0x27fc <__fixsfsi>
        break; 
    }   
  }
  long mapAngle(long x, long in_min, long in_max, long out_min, long out_max)
  {
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    1a96:	6c 19       	sub	r22, r12
    1a98:	7d 09       	sbc	r23, r13
    1a9a:	8e 09       	sbc	r24, r14
    1a9c:	9f 09       	sbc	r25, r15
	swerve3.write(angle+correction[2]);
    1a9e:	40 91 bc 02 	lds	r20, 0x02BC
    1aa2:	50 91 bd 02 	lds	r21, 0x02BD
    1aa6:	20 91 b8 02 	lds	r18, 0x02B8
    1aaa:	30 91 b9 02 	lds	r19, 0x02B9
    1aae:	24 0f       	add	r18, r20
    1ab0:	35 1f       	adc	r19, r21
     }
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,270,iCr/40,iCr/8.7),iCr/40,iCr/8);
    1ab2:	44 27       	eor	r20, r20
    1ab4:	37 fd       	sbrc	r19, 7
    1ab6:	40 95       	com	r20
    1ab8:	54 2f       	mov	r21, r20
        break; 
    }   
  }
  long mapAngle(long x, long in_min, long in_max, long out_min, long out_max)
  {
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    1aba:	0e 94 20 15 	call	0x2a40	; 0x2a40 <__mulsi3>
    1abe:	2e e0       	ldi	r18, 0x0E	; 14
    1ac0:	31 e0       	ldi	r19, 0x01	; 1
    1ac2:	40 e0       	ldi	r20, 0x00	; 0
    1ac4:	50 e0       	ldi	r21, 0x00	; 0
    1ac6:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <__divmodsi4>
    1aca:	2c 0d       	add	r18, r12
    1acc:	3d 1d       	adc	r19, r13
    1ace:	4e 1d       	adc	r20, r14
    1ad0:	5f 1d       	adc	r21, r15
     }
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,270,iCr/40,iCr/8.7),iCr/40,iCr/8);
    1ad2:	c8 01       	movw	r24, r16
    1ad4:	99 23       	and	r25, r25
    1ad6:	0c f4       	brge	.+2      	; 0x1ada <_Z4loopv+0x8f4>
    1ad8:	07 96       	adiw	r24, 0x07	; 7
    1ada:	95 95       	asr	r25
    1adc:	87 95       	ror	r24
    1ade:	95 95       	asr	r25
    1ae0:	87 95       	ror	r24
    1ae2:	95 95       	asr	r25
    1ae4:	87 95       	ror	r24
    1ae6:	aa 27       	eor	r26, r26
    1ae8:	97 fd       	sbrc	r25, 7
    1aea:	a0 95       	com	r26
    1aec:	ba 2f       	mov	r27, r26
  {
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  }
  long constraint(long nUm,long lOwer,long uPper)
  {
    if(nUm>uPper){
    1aee:	82 17       	cp	r24, r18
    1af0:	93 07       	cpc	r25, r19
    1af2:	a4 07       	cpc	r26, r20
    1af4:	b5 07       	cpc	r27, r21
    1af6:	4c f0       	brlt	.+18     	; 0x1b0a <_Z4loopv+0x924>
    1af8:	da 01       	movw	r26, r20
    1afa:	c9 01       	movw	r24, r18
    1afc:	2c 15       	cp	r18, r12
    1afe:	3d 05       	cpc	r19, r13
    1b00:	4e 05       	cpc	r20, r14
    1b02:	5f 05       	cpc	r21, r15
    1b04:	14 f4       	brge	.+4      	; 0x1b0a <_Z4loopv+0x924>
    1b06:	d7 01       	movw	r26, r14
    1b08:	c6 01       	movw	r24, r12
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,270,iCr/40,iCr/8.7),iCr/40,iCr/8);
    switch(pIn)
    1b0a:	20 91 d0 02 	lds	r18, 0x02D0
    1b0e:	28 30       	cpi	r18, 0x08	; 8
    1b10:	09 f4       	brne	.+2      	; 0x1b14 <_Z4loopv+0x92e>
    1b12:	7a c0       	rjmp	.+244    	; 0x1c08 <_Z4loopv+0xa22>
    1b14:	29 30       	cpi	r18, 0x09	; 9
    1b16:	90 f4       	brcc	.+36     	; 0x1b3c <_Z4loopv+0x956>
    1b18:	25 30       	cpi	r18, 0x05	; 5
    1b1a:	d1 f1       	breq	.+116    	; 0x1b90 <_Z4loopv+0x9aa>
    1b1c:	26 30       	cpi	r18, 0x06	; 6
    1b1e:	38 f4       	brcc	.+14     	; 0x1b2e <_Z4loopv+0x948>
    1b20:	22 30       	cpi	r18, 0x02	; 2
    1b22:	09 f4       	brne	.+2      	; 0x1b26 <_Z4loopv+0x940>
    1b24:	41 c0       	rjmp	.+130    	; 0x1ba8 <_Z4loopv+0x9c2>
    1b26:	23 30       	cpi	r18, 0x03	; 3
    1b28:	09 f0       	breq	.+2      	; 0x1b2c <_Z4loopv+0x946>
    1b2a:	9d c0       	rjmp	.+314    	; 0x1c66 <_Z4loopv+0xa80>
    1b2c:	49 c0       	rjmp	.+146    	; 0x1bc0 <_Z4loopv+0x9da>
    1b2e:	26 30       	cpi	r18, 0x06	; 6
    1b30:	09 f4       	brne	.+2      	; 0x1b34 <_Z4loopv+0x94e>
    1b32:	52 c0       	rjmp	.+164    	; 0x1bd8 <_Z4loopv+0x9f2>
    1b34:	27 30       	cpi	r18, 0x07	; 7
    1b36:	09 f0       	breq	.+2      	; 0x1b3a <_Z4loopv+0x954>
    1b38:	96 c0       	rjmp	.+300    	; 0x1c66 <_Z4loopv+0xa80>
    1b3a:	5a c0       	rjmp	.+180    	; 0x1bf0 <_Z4loopv+0xa0a>
    1b3c:	2c 32       	cpi	r18, 0x2C	; 44
    1b3e:	09 f4       	brne	.+2      	; 0x1b42 <_Z4loopv+0x95c>
    1b40:	87 c0       	rjmp	.+270    	; 0x1c50 <_Z4loopv+0xa6a>
    1b42:	2d 32       	cpi	r18, 0x2D	; 45
    1b44:	30 f4       	brcc	.+12     	; 0x1b52 <_Z4loopv+0x96c>
    1b46:	2b 30       	cpi	r18, 0x0B	; 11
    1b48:	59 f0       	breq	.+22     	; 0x1b60 <_Z4loopv+0x97a>
    1b4a:	2c 30       	cpi	r18, 0x0C	; 12
    1b4c:	09 f0       	breq	.+2      	; 0x1b50 <_Z4loopv+0x96a>
    1b4e:	8b c0       	rjmp	.+278    	; 0x1c66 <_Z4loopv+0xa80>
    1b50:	13 c0       	rjmp	.+38     	; 0x1b78 <_Z4loopv+0x992>
    1b52:	2d 32       	cpi	r18, 0x2D	; 45
    1b54:	09 f4       	brne	.+2      	; 0x1b58 <_Z4loopv+0x972>
    1b56:	70 c0       	rjmp	.+224    	; 0x1c38 <_Z4loopv+0xa52>
    1b58:	2e 32       	cpi	r18, 0x2E	; 46
    1b5a:	09 f0       	breq	.+2      	; 0x1b5e <_Z4loopv+0x978>
    1b5c:	84 c0       	rjmp	.+264    	; 0x1c66 <_Z4loopv+0xa80>
    1b5e:	60 c0       	rjmp	.+192    	; 0x1c20 <_Z4loopv+0xa3a>
    {
     case 11:
        OCR1A=ICR1-vAl;
    1b60:	20 91 86 00 	lds	r18, 0x0086
    1b64:	30 91 87 00 	lds	r19, 0x0087
    1b68:	a9 01       	movw	r20, r18
    1b6a:	48 1b       	sub	r20, r24
    1b6c:	59 0b       	sbc	r21, r25
    1b6e:	50 93 89 00 	sts	0x0089, r21
    1b72:	40 93 88 00 	sts	0x0088, r20
    1b76:	77 c0       	rjmp	.+238    	; 0x1c66 <_Z4loopv+0xa80>
        break;
      case 12:
        OCR1B=ICR1-vAl;
    1b78:	20 91 86 00 	lds	r18, 0x0086
    1b7c:	30 91 87 00 	lds	r19, 0x0087
    1b80:	f9 01       	movw	r30, r18
    1b82:	e8 1b       	sub	r30, r24
    1b84:	f9 0b       	sbc	r31, r25
    1b86:	f0 93 8b 00 	sts	0x008B, r31
    1b8a:	e0 93 8a 00 	sts	0x008A, r30
    1b8e:	6b c0       	rjmp	.+214    	; 0x1c66 <_Z4loopv+0xa80>
        break;
      case 5:
        OCR3A=ICR3-vAl;
    1b90:	20 91 96 00 	lds	r18, 0x0096
    1b94:	30 91 97 00 	lds	r19, 0x0097
    1b98:	a9 01       	movw	r20, r18
    1b9a:	48 1b       	sub	r20, r24
    1b9c:	59 0b       	sbc	r21, r25
    1b9e:	50 93 99 00 	sts	0x0099, r21
    1ba2:	40 93 98 00 	sts	0x0098, r20
    1ba6:	5f c0       	rjmp	.+190    	; 0x1c66 <_Z4loopv+0xa80>
        break;
      case 2:
        OCR3B=ICR3-vAl;
    1ba8:	20 91 96 00 	lds	r18, 0x0096
    1bac:	30 91 97 00 	lds	r19, 0x0097
    1bb0:	f9 01       	movw	r30, r18
    1bb2:	e8 1b       	sub	r30, r24
    1bb4:	f9 0b       	sbc	r31, r25
    1bb6:	f0 93 9b 00 	sts	0x009B, r31
    1bba:	e0 93 9a 00 	sts	0x009A, r30
    1bbe:	53 c0       	rjmp	.+166    	; 0x1c66 <_Z4loopv+0xa80>
        break;
      case 3:
        OCR3C=ICR3-vAl;
    1bc0:	20 91 96 00 	lds	r18, 0x0096
    1bc4:	30 91 97 00 	lds	r19, 0x0097
    1bc8:	a9 01       	movw	r20, r18
    1bca:	48 1b       	sub	r20, r24
    1bcc:	59 0b       	sbc	r21, r25
    1bce:	50 93 9d 00 	sts	0x009D, r21
    1bd2:	40 93 9c 00 	sts	0x009C, r20
    1bd6:	47 c0       	rjmp	.+142    	; 0x1c66 <_Z4loopv+0xa80>
        break;
      case 6:
        OCR4A=ICR4-vAl;
    1bd8:	20 91 a6 00 	lds	r18, 0x00A6
    1bdc:	30 91 a7 00 	lds	r19, 0x00A7
    1be0:	f9 01       	movw	r30, r18
    1be2:	e8 1b       	sub	r30, r24
    1be4:	f9 0b       	sbc	r31, r25
    1be6:	f0 93 a9 00 	sts	0x00A9, r31
    1bea:	e0 93 a8 00 	sts	0x00A8, r30
    1bee:	3b c0       	rjmp	.+118    	; 0x1c66 <_Z4loopv+0xa80>
        break;
      case 7:
        OCR4B=ICR4-vAl;
    1bf0:	20 91 a6 00 	lds	r18, 0x00A6
    1bf4:	30 91 a7 00 	lds	r19, 0x00A7
    1bf8:	a9 01       	movw	r20, r18
    1bfa:	48 1b       	sub	r20, r24
    1bfc:	59 0b       	sbc	r21, r25
    1bfe:	50 93 ab 00 	sts	0x00AB, r21
    1c02:	40 93 aa 00 	sts	0x00AA, r20
    1c06:	2f c0       	rjmp	.+94     	; 0x1c66 <_Z4loopv+0xa80>
        break; 
      case 8:
        OCR4C=ICR4-vAl;
    1c08:	20 91 a6 00 	lds	r18, 0x00A6
    1c0c:	30 91 a7 00 	lds	r19, 0x00A7
    1c10:	f9 01       	movw	r30, r18
    1c12:	e8 1b       	sub	r30, r24
    1c14:	f9 0b       	sbc	r31, r25
    1c16:	f0 93 ad 00 	sts	0x00AD, r31
    1c1a:	e0 93 ac 00 	sts	0x00AC, r30
    1c1e:	23 c0       	rjmp	.+70     	; 0x1c66 <_Z4loopv+0xa80>
        break;
      case 46:
        OCR5A=ICR5-vAl;
    1c20:	20 91 26 01 	lds	r18, 0x0126
    1c24:	30 91 27 01 	lds	r19, 0x0127
    1c28:	a9 01       	movw	r20, r18
    1c2a:	48 1b       	sub	r20, r24
    1c2c:	59 0b       	sbc	r21, r25
    1c2e:	50 93 29 01 	sts	0x0129, r21
    1c32:	40 93 28 01 	sts	0x0128, r20
    1c36:	17 c0       	rjmp	.+46     	; 0x1c66 <_Z4loopv+0xa80>
        break;
      case 45:
        OCR5B=ICR5-vAl;
    1c38:	20 91 26 01 	lds	r18, 0x0126
    1c3c:	30 91 27 01 	lds	r19, 0x0127
    1c40:	f9 01       	movw	r30, r18
    1c42:	e8 1b       	sub	r30, r24
    1c44:	f9 0b       	sbc	r31, r25
    1c46:	f0 93 2b 01 	sts	0x012B, r31
    1c4a:	e0 93 2a 01 	sts	0x012A, r30
    1c4e:	0b c0       	rjmp	.+22     	; 0x1c66 <_Z4loopv+0xa80>
        break;
      case 44:
        OCR5C=ICR5-vAl;
    1c50:	20 91 26 01 	lds	r18, 0x0126
    1c54:	30 91 27 01 	lds	r19, 0x0127
    1c58:	a9 01       	movw	r20, r18
    1c5a:	48 1b       	sub	r20, r24
    1c5c:	59 0b       	sbc	r21, r25
    1c5e:	50 93 2d 01 	sts	0x012D, r21
    1c62:	40 93 2c 01 	sts	0x012C, r20
     }
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,270,iCr/40,iCr/8.7),iCr/40,iCr/8);
    1c66:	00 91 d1 02 	lds	r16, 0x02D1
    1c6a:	10 91 d2 02 	lds	r17, 0x02D2
    1c6e:	c8 01       	movw	r24, r16
    1c70:	68 e2       	ldi	r22, 0x28	; 40
    1c72:	70 e0       	ldi	r23, 0x00	; 0
    1c74:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <__divmodhi4>
    1c78:	6b 01       	movw	r12, r22
    1c7a:	ee 24       	eor	r14, r14
    1c7c:	d7 fc       	sbrc	r13, 7
    1c7e:	e0 94       	com	r14
    1c80:	fe 2c       	mov	r15, r14
    1c82:	b8 01       	movw	r22, r16
    1c84:	88 27       	eor	r24, r24
    1c86:	77 fd       	sbrc	r23, 7
    1c88:	80 95       	com	r24
    1c8a:	98 2f       	mov	r25, r24
    1c8c:	0e 94 31 14 	call	0x2862	; 0x2862 <__floatsisf>
    1c90:	23 e3       	ldi	r18, 0x33	; 51
    1c92:	33 e3       	ldi	r19, 0x33	; 51
    1c94:	4b e0       	ldi	r20, 0x0B	; 11
    1c96:	51 e4       	ldi	r21, 0x41	; 65
    1c98:	0e 94 96 13 	call	0x272c	; 0x272c <__divsf3>
    1c9c:	0e 94 fe 13 	call	0x27fc	; 0x27fc <__fixsfsi>
        break; 
    }   
  }
  long mapAngle(long x, long in_min, long in_max, long out_min, long out_max)
  {
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    1ca0:	6c 19       	sub	r22, r12
    1ca2:	7d 09       	sbc	r23, r13
    1ca4:	8e 09       	sbc	r24, r14
    1ca6:	9f 09       	sbc	r25, r15
	swerve4.write(angle+correction[3]);	
    1ca8:	40 91 bc 02 	lds	r20, 0x02BC
    1cac:	50 91 bd 02 	lds	r21, 0x02BD
    1cb0:	20 91 ba 02 	lds	r18, 0x02BA
    1cb4:	30 91 bb 02 	lds	r19, 0x02BB
    1cb8:	24 0f       	add	r18, r20
    1cba:	35 1f       	adc	r19, r21
     }
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,270,iCr/40,iCr/8.7),iCr/40,iCr/8);
    1cbc:	44 27       	eor	r20, r20
    1cbe:	37 fd       	sbrc	r19, 7
    1cc0:	40 95       	com	r20
    1cc2:	54 2f       	mov	r21, r20
        break; 
    }   
  }
  long mapAngle(long x, long in_min, long in_max, long out_min, long out_max)
  {
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    1cc4:	0e 94 20 15 	call	0x2a40	; 0x2a40 <__mulsi3>
    1cc8:	2e e0       	ldi	r18, 0x0E	; 14
    1cca:	31 e0       	ldi	r19, 0x01	; 1
    1ccc:	40 e0       	ldi	r20, 0x00	; 0
    1cce:	50 e0       	ldi	r21, 0x00	; 0
    1cd0:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <__divmodsi4>
    1cd4:	2c 0d       	add	r18, r12
    1cd6:	3d 1d       	adc	r19, r13
    1cd8:	4e 1d       	adc	r20, r14
    1cda:	5f 1d       	adc	r21, r15
     }
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,270,iCr/40,iCr/8.7),iCr/40,iCr/8);
    1cdc:	c8 01       	movw	r24, r16
    1cde:	99 23       	and	r25, r25
    1ce0:	0c f4       	brge	.+2      	; 0x1ce4 <_Z4loopv+0xafe>
    1ce2:	07 96       	adiw	r24, 0x07	; 7
    1ce4:	95 95       	asr	r25
    1ce6:	87 95       	ror	r24
    1ce8:	95 95       	asr	r25
    1cea:	87 95       	ror	r24
    1cec:	95 95       	asr	r25
    1cee:	87 95       	ror	r24
    1cf0:	aa 27       	eor	r26, r26
    1cf2:	97 fd       	sbrc	r25, 7
    1cf4:	a0 95       	com	r26
    1cf6:	ba 2f       	mov	r27, r26
  {
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  }
  long constraint(long nUm,long lOwer,long uPper)
  {
    if(nUm>uPper){
    1cf8:	82 17       	cp	r24, r18
    1cfa:	93 07       	cpc	r25, r19
    1cfc:	a4 07       	cpc	r26, r20
    1cfe:	b5 07       	cpc	r27, r21
    1d00:	4c f0       	brlt	.+18     	; 0x1d14 <_Z4loopv+0xb2e>
    1d02:	da 01       	movw	r26, r20
    1d04:	c9 01       	movw	r24, r18
    1d06:	2c 15       	cp	r18, r12
    1d08:	3d 05       	cpc	r19, r13
    1d0a:	4e 05       	cpc	r20, r14
    1d0c:	5f 05       	cpc	r21, r15
    1d0e:	14 f4       	brge	.+4      	; 0x1d14 <_Z4loopv+0xb2e>
    1d10:	d7 01       	movw	r26, r14
    1d12:	c6 01       	movw	r24, r12
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,270,iCr/40,iCr/8.7),iCr/40,iCr/8);
    switch(pIn)
    1d14:	20 91 d3 02 	lds	r18, 0x02D3
    1d18:	28 30       	cpi	r18, 0x08	; 8
    1d1a:	09 f4       	brne	.+2      	; 0x1d1e <_Z4loopv+0xb38>
    1d1c:	7a c0       	rjmp	.+244    	; 0x1e12 <_Z4loopv+0xc2c>
    1d1e:	29 30       	cpi	r18, 0x09	; 9
    1d20:	90 f4       	brcc	.+36     	; 0x1d46 <_Z4loopv+0xb60>
    1d22:	25 30       	cpi	r18, 0x05	; 5
    1d24:	d1 f1       	breq	.+116    	; 0x1d9a <_Z4loopv+0xbb4>
    1d26:	26 30       	cpi	r18, 0x06	; 6
    1d28:	38 f4       	brcc	.+14     	; 0x1d38 <_Z4loopv+0xb52>
    1d2a:	22 30       	cpi	r18, 0x02	; 2
    1d2c:	09 f4       	brne	.+2      	; 0x1d30 <_Z4loopv+0xb4a>
    1d2e:	41 c0       	rjmp	.+130    	; 0x1db2 <_Z4loopv+0xbcc>
    1d30:	23 30       	cpi	r18, 0x03	; 3
    1d32:	09 f0       	breq	.+2      	; 0x1d36 <_Z4loopv+0xb50>
    1d34:	9d c0       	rjmp	.+314    	; 0x1e70 <_Z4loopv+0xc8a>
    1d36:	49 c0       	rjmp	.+146    	; 0x1dca <_Z4loopv+0xbe4>
    1d38:	26 30       	cpi	r18, 0x06	; 6
    1d3a:	09 f4       	brne	.+2      	; 0x1d3e <_Z4loopv+0xb58>
    1d3c:	52 c0       	rjmp	.+164    	; 0x1de2 <_Z4loopv+0xbfc>
    1d3e:	27 30       	cpi	r18, 0x07	; 7
    1d40:	09 f0       	breq	.+2      	; 0x1d44 <_Z4loopv+0xb5e>
    1d42:	96 c0       	rjmp	.+300    	; 0x1e70 <_Z4loopv+0xc8a>
    1d44:	5a c0       	rjmp	.+180    	; 0x1dfa <_Z4loopv+0xc14>
    1d46:	2c 32       	cpi	r18, 0x2C	; 44
    1d48:	09 f4       	brne	.+2      	; 0x1d4c <_Z4loopv+0xb66>
    1d4a:	87 c0       	rjmp	.+270    	; 0x1e5a <_Z4loopv+0xc74>
    1d4c:	2d 32       	cpi	r18, 0x2D	; 45
    1d4e:	30 f4       	brcc	.+12     	; 0x1d5c <_Z4loopv+0xb76>
    1d50:	2b 30       	cpi	r18, 0x0B	; 11
    1d52:	59 f0       	breq	.+22     	; 0x1d6a <_Z4loopv+0xb84>
    1d54:	2c 30       	cpi	r18, 0x0C	; 12
    1d56:	09 f0       	breq	.+2      	; 0x1d5a <_Z4loopv+0xb74>
    1d58:	8b c0       	rjmp	.+278    	; 0x1e70 <_Z4loopv+0xc8a>
    1d5a:	13 c0       	rjmp	.+38     	; 0x1d82 <_Z4loopv+0xb9c>
    1d5c:	2d 32       	cpi	r18, 0x2D	; 45
    1d5e:	09 f4       	brne	.+2      	; 0x1d62 <_Z4loopv+0xb7c>
    1d60:	70 c0       	rjmp	.+224    	; 0x1e42 <_Z4loopv+0xc5c>
    1d62:	2e 32       	cpi	r18, 0x2E	; 46
    1d64:	09 f0       	breq	.+2      	; 0x1d68 <_Z4loopv+0xb82>
    1d66:	84 c0       	rjmp	.+264    	; 0x1e70 <_Z4loopv+0xc8a>
    1d68:	60 c0       	rjmp	.+192    	; 0x1e2a <_Z4loopv+0xc44>
    {
     case 11:
        OCR1A=ICR1-vAl;
    1d6a:	20 91 86 00 	lds	r18, 0x0086
    1d6e:	30 91 87 00 	lds	r19, 0x0087
    1d72:	f9 01       	movw	r30, r18
    1d74:	e8 1b       	sub	r30, r24
    1d76:	f9 0b       	sbc	r31, r25
    1d78:	f0 93 89 00 	sts	0x0089, r31
    1d7c:	e0 93 88 00 	sts	0x0088, r30
    1d80:	77 c0       	rjmp	.+238    	; 0x1e70 <_Z4loopv+0xc8a>
        break;
      case 12:
        OCR1B=ICR1-vAl;
    1d82:	20 91 86 00 	lds	r18, 0x0086
    1d86:	30 91 87 00 	lds	r19, 0x0087
    1d8a:	a9 01       	movw	r20, r18
    1d8c:	48 1b       	sub	r20, r24
    1d8e:	59 0b       	sbc	r21, r25
    1d90:	50 93 8b 00 	sts	0x008B, r21
    1d94:	40 93 8a 00 	sts	0x008A, r20
    1d98:	6b c0       	rjmp	.+214    	; 0x1e70 <_Z4loopv+0xc8a>
        break;
      case 5:
        OCR3A=ICR3-vAl;
    1d9a:	20 91 96 00 	lds	r18, 0x0096
    1d9e:	30 91 97 00 	lds	r19, 0x0097
    1da2:	f9 01       	movw	r30, r18
    1da4:	e8 1b       	sub	r30, r24
    1da6:	f9 0b       	sbc	r31, r25
    1da8:	f0 93 99 00 	sts	0x0099, r31
    1dac:	e0 93 98 00 	sts	0x0098, r30
    1db0:	5f c0       	rjmp	.+190    	; 0x1e70 <_Z4loopv+0xc8a>
        break;
      case 2:
        OCR3B=ICR3-vAl;
    1db2:	20 91 96 00 	lds	r18, 0x0096
    1db6:	30 91 97 00 	lds	r19, 0x0097
    1dba:	a9 01       	movw	r20, r18
    1dbc:	48 1b       	sub	r20, r24
    1dbe:	59 0b       	sbc	r21, r25
    1dc0:	50 93 9b 00 	sts	0x009B, r21
    1dc4:	40 93 9a 00 	sts	0x009A, r20
    1dc8:	53 c0       	rjmp	.+166    	; 0x1e70 <_Z4loopv+0xc8a>
        break;
      case 3:
        OCR3C=ICR3-vAl;
    1dca:	20 91 96 00 	lds	r18, 0x0096
    1dce:	30 91 97 00 	lds	r19, 0x0097
    1dd2:	f9 01       	movw	r30, r18
    1dd4:	e8 1b       	sub	r30, r24
    1dd6:	f9 0b       	sbc	r31, r25
    1dd8:	f0 93 9d 00 	sts	0x009D, r31
    1ddc:	e0 93 9c 00 	sts	0x009C, r30
    1de0:	47 c0       	rjmp	.+142    	; 0x1e70 <_Z4loopv+0xc8a>
        break;
      case 6:
        OCR4A=ICR4-vAl;
    1de2:	20 91 a6 00 	lds	r18, 0x00A6
    1de6:	30 91 a7 00 	lds	r19, 0x00A7
    1dea:	a9 01       	movw	r20, r18
    1dec:	48 1b       	sub	r20, r24
    1dee:	59 0b       	sbc	r21, r25
    1df0:	50 93 a9 00 	sts	0x00A9, r21
    1df4:	40 93 a8 00 	sts	0x00A8, r20
    1df8:	3b c0       	rjmp	.+118    	; 0x1e70 <_Z4loopv+0xc8a>
        break;
      case 7:
        OCR4B=ICR4-vAl;
    1dfa:	20 91 a6 00 	lds	r18, 0x00A6
    1dfe:	30 91 a7 00 	lds	r19, 0x00A7
    1e02:	f9 01       	movw	r30, r18
    1e04:	e8 1b       	sub	r30, r24
    1e06:	f9 0b       	sbc	r31, r25
    1e08:	f0 93 ab 00 	sts	0x00AB, r31
    1e0c:	e0 93 aa 00 	sts	0x00AA, r30
    1e10:	2f c0       	rjmp	.+94     	; 0x1e70 <_Z4loopv+0xc8a>
        break; 
      case 8:
        OCR4C=ICR4-vAl;
    1e12:	20 91 a6 00 	lds	r18, 0x00A6
    1e16:	30 91 a7 00 	lds	r19, 0x00A7
    1e1a:	a9 01       	movw	r20, r18
    1e1c:	48 1b       	sub	r20, r24
    1e1e:	59 0b       	sbc	r21, r25
    1e20:	50 93 ad 00 	sts	0x00AD, r21
    1e24:	40 93 ac 00 	sts	0x00AC, r20
    1e28:	23 c0       	rjmp	.+70     	; 0x1e70 <_Z4loopv+0xc8a>
        break;
      case 46:
        OCR5A=ICR5-vAl;
    1e2a:	20 91 26 01 	lds	r18, 0x0126
    1e2e:	30 91 27 01 	lds	r19, 0x0127
    1e32:	f9 01       	movw	r30, r18
    1e34:	e8 1b       	sub	r30, r24
    1e36:	f9 0b       	sbc	r31, r25
    1e38:	f0 93 29 01 	sts	0x0129, r31
    1e3c:	e0 93 28 01 	sts	0x0128, r30
    1e40:	17 c0       	rjmp	.+46     	; 0x1e70 <_Z4loopv+0xc8a>
        break;
      case 45:
        OCR5B=ICR5-vAl;
    1e42:	20 91 26 01 	lds	r18, 0x0126
    1e46:	30 91 27 01 	lds	r19, 0x0127
    1e4a:	a9 01       	movw	r20, r18
    1e4c:	48 1b       	sub	r20, r24
    1e4e:	59 0b       	sbc	r21, r25
    1e50:	50 93 2b 01 	sts	0x012B, r21
    1e54:	40 93 2a 01 	sts	0x012A, r20
    1e58:	0b c0       	rjmp	.+22     	; 0x1e70 <_Z4loopv+0xc8a>
        break;
      case 44:
        OCR5C=ICR5-vAl;
    1e5a:	20 91 26 01 	lds	r18, 0x0126
    1e5e:	30 91 27 01 	lds	r19, 0x0127
    1e62:	f9 01       	movw	r30, r18
    1e64:	e8 1b       	sub	r30, r24
    1e66:	f9 0b       	sbc	r31, r25
    1e68:	f0 93 2d 01 	sts	0x012D, r31
    1e6c:	e0 93 2c 01 	sts	0x012C, r30
	delay(5000);
    1e70:	68 e8       	ldi	r22, 0x88	; 136
    1e72:	73 e1       	ldi	r23, 0x13	; 19
    1e74:	80 e0       	ldi	r24, 0x00	; 0
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	0e 94 4a 05 	call	0xa94	; 0xa94 <_Z5delaym>
	angle=270;
    1e7c:	8e e0       	ldi	r24, 0x0E	; 14
    1e7e:	91 e0       	ldi	r25, 0x01	; 1
    1e80:	90 93 bd 02 	sts	0x02BD, r25
    1e84:	80 93 bc 02 	sts	0x02BC, r24
     }
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,270,iCr/40,iCr/8.7),iCr/40,iCr/8);
    1e88:	00 91 c8 02 	lds	r16, 0x02C8
    1e8c:	10 91 c9 02 	lds	r17, 0x02C9
    1e90:	c8 01       	movw	r24, r16
    1e92:	68 e2       	ldi	r22, 0x28	; 40
    1e94:	70 e0       	ldi	r23, 0x00	; 0
    1e96:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <__divmodhi4>
    1e9a:	6b 01       	movw	r12, r22
    1e9c:	ee 24       	eor	r14, r14
    1e9e:	d7 fc       	sbrc	r13, 7
    1ea0:	e0 94       	com	r14
    1ea2:	fe 2c       	mov	r15, r14
    1ea4:	b8 01       	movw	r22, r16
    1ea6:	88 27       	eor	r24, r24
    1ea8:	77 fd       	sbrc	r23, 7
    1eaa:	80 95       	com	r24
    1eac:	98 2f       	mov	r25, r24
    1eae:	0e 94 31 14 	call	0x2862	; 0x2862 <__floatsisf>
    1eb2:	23 e3       	ldi	r18, 0x33	; 51
    1eb4:	33 e3       	ldi	r19, 0x33	; 51
    1eb6:	4b e0       	ldi	r20, 0x0B	; 11
    1eb8:	51 e4       	ldi	r21, 0x41	; 65
    1eba:	0e 94 96 13 	call	0x272c	; 0x272c <__divsf3>
    1ebe:	0e 94 fe 13 	call	0x27fc	; 0x27fc <__fixsfsi>
        break; 
    }   
  }
  long mapAngle(long x, long in_min, long in_max, long out_min, long out_max)
  {
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    1ec2:	6c 19       	sub	r22, r12
    1ec4:	7d 09       	sbc	r23, r13
    1ec6:	8e 09       	sbc	r24, r14
    1ec8:	9f 09       	sbc	r25, r15
	swerve1.write(angle+correction[0]);
    1eca:	20 91 b4 02 	lds	r18, 0x02B4
    1ece:	30 91 b5 02 	lds	r19, 0x02B5
    1ed2:	22 5f       	subi	r18, 0xF2	; 242
    1ed4:	3e 4f       	sbci	r19, 0xFE	; 254
     }
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,270,iCr/40,iCr/8.7),iCr/40,iCr/8);
    1ed6:	44 27       	eor	r20, r20
    1ed8:	37 fd       	sbrc	r19, 7
    1eda:	40 95       	com	r20
    1edc:	54 2f       	mov	r21, r20
        break; 
    }   
  }
  long mapAngle(long x, long in_min, long in_max, long out_min, long out_max)
  {
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    1ede:	0e 94 20 15 	call	0x2a40	; 0x2a40 <__mulsi3>
    1ee2:	2e e0       	ldi	r18, 0x0E	; 14
    1ee4:	31 e0       	ldi	r19, 0x01	; 1
    1ee6:	40 e0       	ldi	r20, 0x00	; 0
    1ee8:	50 e0       	ldi	r21, 0x00	; 0
    1eea:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <__divmodsi4>
    1eee:	2c 0d       	add	r18, r12
    1ef0:	3d 1d       	adc	r19, r13
    1ef2:	4e 1d       	adc	r20, r14
    1ef4:	5f 1d       	adc	r21, r15
     }
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,270,iCr/40,iCr/8.7),iCr/40,iCr/8);
    1ef6:	c8 01       	movw	r24, r16
    1ef8:	99 23       	and	r25, r25
    1efa:	0c f4       	brge	.+2      	; 0x1efe <_Z4loopv+0xd18>
    1efc:	07 96       	adiw	r24, 0x07	; 7
    1efe:	95 95       	asr	r25
    1f00:	87 95       	ror	r24
    1f02:	95 95       	asr	r25
    1f04:	87 95       	ror	r24
    1f06:	95 95       	asr	r25
    1f08:	87 95       	ror	r24
    1f0a:	aa 27       	eor	r26, r26
    1f0c:	97 fd       	sbrc	r25, 7
    1f0e:	a0 95       	com	r26
    1f10:	ba 2f       	mov	r27, r26
  {
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  }
  long constraint(long nUm,long lOwer,long uPper)
  {
    if(nUm>uPper){
    1f12:	82 17       	cp	r24, r18
    1f14:	93 07       	cpc	r25, r19
    1f16:	a4 07       	cpc	r26, r20
    1f18:	b5 07       	cpc	r27, r21
    1f1a:	4c f0       	brlt	.+18     	; 0x1f2e <_Z4loopv+0xd48>
    1f1c:	da 01       	movw	r26, r20
    1f1e:	c9 01       	movw	r24, r18
    1f20:	2c 15       	cp	r18, r12
    1f22:	3d 05       	cpc	r19, r13
    1f24:	4e 05       	cpc	r20, r14
    1f26:	5f 05       	cpc	r21, r15
    1f28:	14 f4       	brge	.+4      	; 0x1f2e <_Z4loopv+0xd48>
    1f2a:	d7 01       	movw	r26, r14
    1f2c:	c6 01       	movw	r24, r12
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,270,iCr/40,iCr/8.7),iCr/40,iCr/8);
    switch(pIn)
    1f2e:	20 91 ca 02 	lds	r18, 0x02CA
    1f32:	28 30       	cpi	r18, 0x08	; 8
    1f34:	09 f4       	brne	.+2      	; 0x1f38 <_Z4loopv+0xd52>
    1f36:	7a c0       	rjmp	.+244    	; 0x202c <_Z4loopv+0xe46>
    1f38:	29 30       	cpi	r18, 0x09	; 9
    1f3a:	90 f4       	brcc	.+36     	; 0x1f60 <_Z4loopv+0xd7a>
    1f3c:	25 30       	cpi	r18, 0x05	; 5
    1f3e:	d1 f1       	breq	.+116    	; 0x1fb4 <_Z4loopv+0xdce>
    1f40:	26 30       	cpi	r18, 0x06	; 6
    1f42:	38 f4       	brcc	.+14     	; 0x1f52 <_Z4loopv+0xd6c>
    1f44:	22 30       	cpi	r18, 0x02	; 2
    1f46:	09 f4       	brne	.+2      	; 0x1f4a <_Z4loopv+0xd64>
    1f48:	41 c0       	rjmp	.+130    	; 0x1fcc <_Z4loopv+0xde6>
    1f4a:	23 30       	cpi	r18, 0x03	; 3
    1f4c:	09 f0       	breq	.+2      	; 0x1f50 <_Z4loopv+0xd6a>
    1f4e:	9d c0       	rjmp	.+314    	; 0x208a <_Z4loopv+0xea4>
    1f50:	49 c0       	rjmp	.+146    	; 0x1fe4 <_Z4loopv+0xdfe>
    1f52:	26 30       	cpi	r18, 0x06	; 6
    1f54:	09 f4       	brne	.+2      	; 0x1f58 <_Z4loopv+0xd72>
    1f56:	52 c0       	rjmp	.+164    	; 0x1ffc <_Z4loopv+0xe16>
    1f58:	27 30       	cpi	r18, 0x07	; 7
    1f5a:	09 f0       	breq	.+2      	; 0x1f5e <_Z4loopv+0xd78>
    1f5c:	96 c0       	rjmp	.+300    	; 0x208a <_Z4loopv+0xea4>
    1f5e:	5a c0       	rjmp	.+180    	; 0x2014 <_Z4loopv+0xe2e>
    1f60:	2c 32       	cpi	r18, 0x2C	; 44
    1f62:	09 f4       	brne	.+2      	; 0x1f66 <_Z4loopv+0xd80>
    1f64:	87 c0       	rjmp	.+270    	; 0x2074 <_Z4loopv+0xe8e>
    1f66:	2d 32       	cpi	r18, 0x2D	; 45
    1f68:	30 f4       	brcc	.+12     	; 0x1f76 <_Z4loopv+0xd90>
    1f6a:	2b 30       	cpi	r18, 0x0B	; 11
    1f6c:	59 f0       	breq	.+22     	; 0x1f84 <_Z4loopv+0xd9e>
    1f6e:	2c 30       	cpi	r18, 0x0C	; 12
    1f70:	09 f0       	breq	.+2      	; 0x1f74 <_Z4loopv+0xd8e>
    1f72:	8b c0       	rjmp	.+278    	; 0x208a <_Z4loopv+0xea4>
    1f74:	13 c0       	rjmp	.+38     	; 0x1f9c <_Z4loopv+0xdb6>
    1f76:	2d 32       	cpi	r18, 0x2D	; 45
    1f78:	09 f4       	brne	.+2      	; 0x1f7c <_Z4loopv+0xd96>
    1f7a:	70 c0       	rjmp	.+224    	; 0x205c <_Z4loopv+0xe76>
    1f7c:	2e 32       	cpi	r18, 0x2E	; 46
    1f7e:	09 f0       	breq	.+2      	; 0x1f82 <_Z4loopv+0xd9c>
    1f80:	84 c0       	rjmp	.+264    	; 0x208a <_Z4loopv+0xea4>
    1f82:	60 c0       	rjmp	.+192    	; 0x2044 <_Z4loopv+0xe5e>
    {
     case 11:
        OCR1A=ICR1-vAl;
    1f84:	20 91 86 00 	lds	r18, 0x0086
    1f88:	30 91 87 00 	lds	r19, 0x0087
    1f8c:	a9 01       	movw	r20, r18
    1f8e:	48 1b       	sub	r20, r24
    1f90:	59 0b       	sbc	r21, r25
    1f92:	50 93 89 00 	sts	0x0089, r21
    1f96:	40 93 88 00 	sts	0x0088, r20
    1f9a:	77 c0       	rjmp	.+238    	; 0x208a <_Z4loopv+0xea4>
        break;
      case 12:
        OCR1B=ICR1-vAl;
    1f9c:	20 91 86 00 	lds	r18, 0x0086
    1fa0:	30 91 87 00 	lds	r19, 0x0087
    1fa4:	f9 01       	movw	r30, r18
    1fa6:	e8 1b       	sub	r30, r24
    1fa8:	f9 0b       	sbc	r31, r25
    1faa:	f0 93 8b 00 	sts	0x008B, r31
    1fae:	e0 93 8a 00 	sts	0x008A, r30
    1fb2:	6b c0       	rjmp	.+214    	; 0x208a <_Z4loopv+0xea4>
        break;
      case 5:
        OCR3A=ICR3-vAl;
    1fb4:	20 91 96 00 	lds	r18, 0x0096
    1fb8:	30 91 97 00 	lds	r19, 0x0097
    1fbc:	a9 01       	movw	r20, r18
    1fbe:	48 1b       	sub	r20, r24
    1fc0:	59 0b       	sbc	r21, r25
    1fc2:	50 93 99 00 	sts	0x0099, r21
    1fc6:	40 93 98 00 	sts	0x0098, r20
    1fca:	5f c0       	rjmp	.+190    	; 0x208a <_Z4loopv+0xea4>
        break;
      case 2:
        OCR3B=ICR3-vAl;
    1fcc:	20 91 96 00 	lds	r18, 0x0096
    1fd0:	30 91 97 00 	lds	r19, 0x0097
    1fd4:	f9 01       	movw	r30, r18
    1fd6:	e8 1b       	sub	r30, r24
    1fd8:	f9 0b       	sbc	r31, r25
    1fda:	f0 93 9b 00 	sts	0x009B, r31
    1fde:	e0 93 9a 00 	sts	0x009A, r30
    1fe2:	53 c0       	rjmp	.+166    	; 0x208a <_Z4loopv+0xea4>
        break;
      case 3:
        OCR3C=ICR3-vAl;
    1fe4:	20 91 96 00 	lds	r18, 0x0096
    1fe8:	30 91 97 00 	lds	r19, 0x0097
    1fec:	a9 01       	movw	r20, r18
    1fee:	48 1b       	sub	r20, r24
    1ff0:	59 0b       	sbc	r21, r25
    1ff2:	50 93 9d 00 	sts	0x009D, r21
    1ff6:	40 93 9c 00 	sts	0x009C, r20
    1ffa:	47 c0       	rjmp	.+142    	; 0x208a <_Z4loopv+0xea4>
        break;
      case 6:
        OCR4A=ICR4-vAl;
    1ffc:	20 91 a6 00 	lds	r18, 0x00A6
    2000:	30 91 a7 00 	lds	r19, 0x00A7
    2004:	f9 01       	movw	r30, r18
    2006:	e8 1b       	sub	r30, r24
    2008:	f9 0b       	sbc	r31, r25
    200a:	f0 93 a9 00 	sts	0x00A9, r31
    200e:	e0 93 a8 00 	sts	0x00A8, r30
    2012:	3b c0       	rjmp	.+118    	; 0x208a <_Z4loopv+0xea4>
        break;
      case 7:
        OCR4B=ICR4-vAl;
    2014:	20 91 a6 00 	lds	r18, 0x00A6
    2018:	30 91 a7 00 	lds	r19, 0x00A7
    201c:	a9 01       	movw	r20, r18
    201e:	48 1b       	sub	r20, r24
    2020:	59 0b       	sbc	r21, r25
    2022:	50 93 ab 00 	sts	0x00AB, r21
    2026:	40 93 aa 00 	sts	0x00AA, r20
    202a:	2f c0       	rjmp	.+94     	; 0x208a <_Z4loopv+0xea4>
        break; 
      case 8:
        OCR4C=ICR4-vAl;
    202c:	20 91 a6 00 	lds	r18, 0x00A6
    2030:	30 91 a7 00 	lds	r19, 0x00A7
    2034:	f9 01       	movw	r30, r18
    2036:	e8 1b       	sub	r30, r24
    2038:	f9 0b       	sbc	r31, r25
    203a:	f0 93 ad 00 	sts	0x00AD, r31
    203e:	e0 93 ac 00 	sts	0x00AC, r30
    2042:	23 c0       	rjmp	.+70     	; 0x208a <_Z4loopv+0xea4>
        break;
      case 46:
        OCR5A=ICR5-vAl;
    2044:	20 91 26 01 	lds	r18, 0x0126
    2048:	30 91 27 01 	lds	r19, 0x0127
    204c:	a9 01       	movw	r20, r18
    204e:	48 1b       	sub	r20, r24
    2050:	59 0b       	sbc	r21, r25
    2052:	50 93 29 01 	sts	0x0129, r21
    2056:	40 93 28 01 	sts	0x0128, r20
    205a:	17 c0       	rjmp	.+46     	; 0x208a <_Z4loopv+0xea4>
        break;
      case 45:
        OCR5B=ICR5-vAl;
    205c:	20 91 26 01 	lds	r18, 0x0126
    2060:	30 91 27 01 	lds	r19, 0x0127
    2064:	f9 01       	movw	r30, r18
    2066:	e8 1b       	sub	r30, r24
    2068:	f9 0b       	sbc	r31, r25
    206a:	f0 93 2b 01 	sts	0x012B, r31
    206e:	e0 93 2a 01 	sts	0x012A, r30
    2072:	0b c0       	rjmp	.+22     	; 0x208a <_Z4loopv+0xea4>
        break;
      case 44:
        OCR5C=ICR5-vAl;
    2074:	20 91 26 01 	lds	r18, 0x0126
    2078:	30 91 27 01 	lds	r19, 0x0127
    207c:	a9 01       	movw	r20, r18
    207e:	48 1b       	sub	r20, r24
    2080:	59 0b       	sbc	r21, r25
    2082:	50 93 2d 01 	sts	0x012D, r21
    2086:	40 93 2c 01 	sts	0x012C, r20
     }
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,270,iCr/40,iCr/8.7),iCr/40,iCr/8);
    208a:	00 91 cb 02 	lds	r16, 0x02CB
    208e:	10 91 cc 02 	lds	r17, 0x02CC
    2092:	c8 01       	movw	r24, r16
    2094:	68 e2       	ldi	r22, 0x28	; 40
    2096:	70 e0       	ldi	r23, 0x00	; 0
    2098:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <__divmodhi4>
    209c:	6b 01       	movw	r12, r22
    209e:	ee 24       	eor	r14, r14
    20a0:	d7 fc       	sbrc	r13, 7
    20a2:	e0 94       	com	r14
    20a4:	fe 2c       	mov	r15, r14
    20a6:	b8 01       	movw	r22, r16
    20a8:	88 27       	eor	r24, r24
    20aa:	77 fd       	sbrc	r23, 7
    20ac:	80 95       	com	r24
    20ae:	98 2f       	mov	r25, r24
    20b0:	0e 94 31 14 	call	0x2862	; 0x2862 <__floatsisf>
    20b4:	23 e3       	ldi	r18, 0x33	; 51
    20b6:	33 e3       	ldi	r19, 0x33	; 51
    20b8:	4b e0       	ldi	r20, 0x0B	; 11
    20ba:	51 e4       	ldi	r21, 0x41	; 65
    20bc:	0e 94 96 13 	call	0x272c	; 0x272c <__divsf3>
    20c0:	0e 94 fe 13 	call	0x27fc	; 0x27fc <__fixsfsi>
        break; 
    }   
  }
  long mapAngle(long x, long in_min, long in_max, long out_min, long out_max)
  {
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    20c4:	6c 19       	sub	r22, r12
    20c6:	7d 09       	sbc	r23, r13
    20c8:	8e 09       	sbc	r24, r14
    20ca:	9f 09       	sbc	r25, r15
	swerve2.write(angle+correction[1]);
    20cc:	40 91 bc 02 	lds	r20, 0x02BC
    20d0:	50 91 bd 02 	lds	r21, 0x02BD
    20d4:	20 91 b6 02 	lds	r18, 0x02B6
    20d8:	30 91 b7 02 	lds	r19, 0x02B7
    20dc:	24 0f       	add	r18, r20
    20de:	35 1f       	adc	r19, r21
     }
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,270,iCr/40,iCr/8.7),iCr/40,iCr/8);
    20e0:	44 27       	eor	r20, r20
    20e2:	37 fd       	sbrc	r19, 7
    20e4:	40 95       	com	r20
    20e6:	54 2f       	mov	r21, r20
        break; 
    }   
  }
  long mapAngle(long x, long in_min, long in_max, long out_min, long out_max)
  {
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    20e8:	0e 94 20 15 	call	0x2a40	; 0x2a40 <__mulsi3>
    20ec:	2e e0       	ldi	r18, 0x0E	; 14
    20ee:	31 e0       	ldi	r19, 0x01	; 1
    20f0:	40 e0       	ldi	r20, 0x00	; 0
    20f2:	50 e0       	ldi	r21, 0x00	; 0
    20f4:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <__divmodsi4>
    20f8:	2c 0d       	add	r18, r12
    20fa:	3d 1d       	adc	r19, r13
    20fc:	4e 1d       	adc	r20, r14
    20fe:	5f 1d       	adc	r21, r15
     }
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,270,iCr/40,iCr/8.7),iCr/40,iCr/8);
    2100:	c8 01       	movw	r24, r16
    2102:	99 23       	and	r25, r25
    2104:	0c f4       	brge	.+2      	; 0x2108 <_Z4loopv+0xf22>
    2106:	07 96       	adiw	r24, 0x07	; 7
    2108:	95 95       	asr	r25
    210a:	87 95       	ror	r24
    210c:	95 95       	asr	r25
    210e:	87 95       	ror	r24
    2110:	95 95       	asr	r25
    2112:	87 95       	ror	r24
    2114:	aa 27       	eor	r26, r26
    2116:	97 fd       	sbrc	r25, 7
    2118:	a0 95       	com	r26
    211a:	ba 2f       	mov	r27, r26
  {
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  }
  long constraint(long nUm,long lOwer,long uPper)
  {
    if(nUm>uPper){
    211c:	82 17       	cp	r24, r18
    211e:	93 07       	cpc	r25, r19
    2120:	a4 07       	cpc	r26, r20
    2122:	b5 07       	cpc	r27, r21
    2124:	4c f0       	brlt	.+18     	; 0x2138 <_Z4loopv+0xf52>
    2126:	da 01       	movw	r26, r20
    2128:	c9 01       	movw	r24, r18
    212a:	2c 15       	cp	r18, r12
    212c:	3d 05       	cpc	r19, r13
    212e:	4e 05       	cpc	r20, r14
    2130:	5f 05       	cpc	r21, r15
    2132:	14 f4       	brge	.+4      	; 0x2138 <_Z4loopv+0xf52>
    2134:	d7 01       	movw	r26, r14
    2136:	c6 01       	movw	r24, r12
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,270,iCr/40,iCr/8.7),iCr/40,iCr/8);
    switch(pIn)
    2138:	20 91 cd 02 	lds	r18, 0x02CD
    213c:	28 30       	cpi	r18, 0x08	; 8
    213e:	09 f4       	brne	.+2      	; 0x2142 <_Z4loopv+0xf5c>
    2140:	7a c0       	rjmp	.+244    	; 0x2236 <__stack+0x37>
    2142:	29 30       	cpi	r18, 0x09	; 9
    2144:	90 f4       	brcc	.+36     	; 0x216a <_Z4loopv+0xf84>
    2146:	25 30       	cpi	r18, 0x05	; 5
    2148:	d1 f1       	breq	.+116    	; 0x21be <_Z4loopv+0xfd8>
    214a:	26 30       	cpi	r18, 0x06	; 6
    214c:	38 f4       	brcc	.+14     	; 0x215c <_Z4loopv+0xf76>
    214e:	22 30       	cpi	r18, 0x02	; 2
    2150:	09 f4       	brne	.+2      	; 0x2154 <_Z4loopv+0xf6e>
    2152:	41 c0       	rjmp	.+130    	; 0x21d6 <_Z4loopv+0xff0>
    2154:	23 30       	cpi	r18, 0x03	; 3
    2156:	09 f0       	breq	.+2      	; 0x215a <_Z4loopv+0xf74>
    2158:	9d c0       	rjmp	.+314    	; 0x2294 <__stack+0x95>
    215a:	49 c0       	rjmp	.+146    	; 0x21ee <_Z4loopv+0x1008>
    215c:	26 30       	cpi	r18, 0x06	; 6
    215e:	09 f4       	brne	.+2      	; 0x2162 <_Z4loopv+0xf7c>
    2160:	52 c0       	rjmp	.+164    	; 0x2206 <__stack+0x7>
    2162:	27 30       	cpi	r18, 0x07	; 7
    2164:	09 f0       	breq	.+2      	; 0x2168 <_Z4loopv+0xf82>
    2166:	96 c0       	rjmp	.+300    	; 0x2294 <__stack+0x95>
    2168:	5a c0       	rjmp	.+180    	; 0x221e <__stack+0x1f>
    216a:	2c 32       	cpi	r18, 0x2C	; 44
    216c:	09 f4       	brne	.+2      	; 0x2170 <_Z4loopv+0xf8a>
    216e:	87 c0       	rjmp	.+270    	; 0x227e <__stack+0x7f>
    2170:	2d 32       	cpi	r18, 0x2D	; 45
    2172:	30 f4       	brcc	.+12     	; 0x2180 <_Z4loopv+0xf9a>
    2174:	2b 30       	cpi	r18, 0x0B	; 11
    2176:	59 f0       	breq	.+22     	; 0x218e <_Z4loopv+0xfa8>
    2178:	2c 30       	cpi	r18, 0x0C	; 12
    217a:	09 f0       	breq	.+2      	; 0x217e <_Z4loopv+0xf98>
    217c:	8b c0       	rjmp	.+278    	; 0x2294 <__stack+0x95>
    217e:	13 c0       	rjmp	.+38     	; 0x21a6 <_Z4loopv+0xfc0>
    2180:	2d 32       	cpi	r18, 0x2D	; 45
    2182:	09 f4       	brne	.+2      	; 0x2186 <_Z4loopv+0xfa0>
    2184:	70 c0       	rjmp	.+224    	; 0x2266 <__stack+0x67>
    2186:	2e 32       	cpi	r18, 0x2E	; 46
    2188:	09 f0       	breq	.+2      	; 0x218c <_Z4loopv+0xfa6>
    218a:	84 c0       	rjmp	.+264    	; 0x2294 <__stack+0x95>
    218c:	60 c0       	rjmp	.+192    	; 0x224e <__stack+0x4f>
    {
     case 11:
        OCR1A=ICR1-vAl;
    218e:	20 91 86 00 	lds	r18, 0x0086
    2192:	30 91 87 00 	lds	r19, 0x0087
    2196:	f9 01       	movw	r30, r18
    2198:	e8 1b       	sub	r30, r24
    219a:	f9 0b       	sbc	r31, r25
    219c:	f0 93 89 00 	sts	0x0089, r31
    21a0:	e0 93 88 00 	sts	0x0088, r30
    21a4:	77 c0       	rjmp	.+238    	; 0x2294 <__stack+0x95>
        break;
      case 12:
        OCR1B=ICR1-vAl;
    21a6:	20 91 86 00 	lds	r18, 0x0086
    21aa:	30 91 87 00 	lds	r19, 0x0087
    21ae:	a9 01       	movw	r20, r18
    21b0:	48 1b       	sub	r20, r24
    21b2:	59 0b       	sbc	r21, r25
    21b4:	50 93 8b 00 	sts	0x008B, r21
    21b8:	40 93 8a 00 	sts	0x008A, r20
    21bc:	6b c0       	rjmp	.+214    	; 0x2294 <__stack+0x95>
        break;
      case 5:
        OCR3A=ICR3-vAl;
    21be:	20 91 96 00 	lds	r18, 0x0096
    21c2:	30 91 97 00 	lds	r19, 0x0097
    21c6:	f9 01       	movw	r30, r18
    21c8:	e8 1b       	sub	r30, r24
    21ca:	f9 0b       	sbc	r31, r25
    21cc:	f0 93 99 00 	sts	0x0099, r31
    21d0:	e0 93 98 00 	sts	0x0098, r30
    21d4:	5f c0       	rjmp	.+190    	; 0x2294 <__stack+0x95>
        break;
      case 2:
        OCR3B=ICR3-vAl;
    21d6:	20 91 96 00 	lds	r18, 0x0096
    21da:	30 91 97 00 	lds	r19, 0x0097
    21de:	a9 01       	movw	r20, r18
    21e0:	48 1b       	sub	r20, r24
    21e2:	59 0b       	sbc	r21, r25
    21e4:	50 93 9b 00 	sts	0x009B, r21
    21e8:	40 93 9a 00 	sts	0x009A, r20
    21ec:	53 c0       	rjmp	.+166    	; 0x2294 <__stack+0x95>
        break;
      case 3:
        OCR3C=ICR3-vAl;
    21ee:	20 91 96 00 	lds	r18, 0x0096
    21f2:	30 91 97 00 	lds	r19, 0x0097
    21f6:	f9 01       	movw	r30, r18
    21f8:	e8 1b       	sub	r30, r24
    21fa:	f9 0b       	sbc	r31, r25
    21fc:	f0 93 9d 00 	sts	0x009D, r31
    2200:	e0 93 9c 00 	sts	0x009C, r30
    2204:	47 c0       	rjmp	.+142    	; 0x2294 <__stack+0x95>
        break;
      case 6:
        OCR4A=ICR4-vAl;
    2206:	20 91 a6 00 	lds	r18, 0x00A6
    220a:	30 91 a7 00 	lds	r19, 0x00A7
    220e:	a9 01       	movw	r20, r18
    2210:	48 1b       	sub	r20, r24
    2212:	59 0b       	sbc	r21, r25
    2214:	50 93 a9 00 	sts	0x00A9, r21
    2218:	40 93 a8 00 	sts	0x00A8, r20
    221c:	3b c0       	rjmp	.+118    	; 0x2294 <__stack+0x95>
        break;
      case 7:
        OCR4B=ICR4-vAl;
    221e:	20 91 a6 00 	lds	r18, 0x00A6
    2222:	30 91 a7 00 	lds	r19, 0x00A7
    2226:	f9 01       	movw	r30, r18
    2228:	e8 1b       	sub	r30, r24
    222a:	f9 0b       	sbc	r31, r25
    222c:	f0 93 ab 00 	sts	0x00AB, r31
    2230:	e0 93 aa 00 	sts	0x00AA, r30
    2234:	2f c0       	rjmp	.+94     	; 0x2294 <__stack+0x95>
        break; 
      case 8:
        OCR4C=ICR4-vAl;
    2236:	20 91 a6 00 	lds	r18, 0x00A6
    223a:	30 91 a7 00 	lds	r19, 0x00A7
    223e:	a9 01       	movw	r20, r18
    2240:	48 1b       	sub	r20, r24
    2242:	59 0b       	sbc	r21, r25
    2244:	50 93 ad 00 	sts	0x00AD, r21
    2248:	40 93 ac 00 	sts	0x00AC, r20
    224c:	23 c0       	rjmp	.+70     	; 0x2294 <__stack+0x95>
        break;
      case 46:
        OCR5A=ICR5-vAl;
    224e:	20 91 26 01 	lds	r18, 0x0126
    2252:	30 91 27 01 	lds	r19, 0x0127
    2256:	f9 01       	movw	r30, r18
    2258:	e8 1b       	sub	r30, r24
    225a:	f9 0b       	sbc	r31, r25
    225c:	f0 93 29 01 	sts	0x0129, r31
    2260:	e0 93 28 01 	sts	0x0128, r30
    2264:	17 c0       	rjmp	.+46     	; 0x2294 <__stack+0x95>
        break;
      case 45:
        OCR5B=ICR5-vAl;
    2266:	20 91 26 01 	lds	r18, 0x0126
    226a:	30 91 27 01 	lds	r19, 0x0127
    226e:	a9 01       	movw	r20, r18
    2270:	48 1b       	sub	r20, r24
    2272:	59 0b       	sbc	r21, r25
    2274:	50 93 2b 01 	sts	0x012B, r21
    2278:	40 93 2a 01 	sts	0x012A, r20
    227c:	0b c0       	rjmp	.+22     	; 0x2294 <__stack+0x95>
        break;
      case 44:
        OCR5C=ICR5-vAl;
    227e:	20 91 26 01 	lds	r18, 0x0126
    2282:	30 91 27 01 	lds	r19, 0x0127
    2286:	f9 01       	movw	r30, r18
    2288:	e8 1b       	sub	r30, r24
    228a:	f9 0b       	sbc	r31, r25
    228c:	f0 93 2d 01 	sts	0x012D, r31
    2290:	e0 93 2c 01 	sts	0x012C, r30
     }
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,270,iCr/40,iCr/8.7),iCr/40,iCr/8);
    2294:	00 91 ce 02 	lds	r16, 0x02CE
    2298:	10 91 cf 02 	lds	r17, 0x02CF
    229c:	c8 01       	movw	r24, r16
    229e:	68 e2       	ldi	r22, 0x28	; 40
    22a0:	70 e0       	ldi	r23, 0x00	; 0
    22a2:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <__divmodhi4>
    22a6:	6b 01       	movw	r12, r22
    22a8:	ee 24       	eor	r14, r14
    22aa:	d7 fc       	sbrc	r13, 7
    22ac:	e0 94       	com	r14
    22ae:	fe 2c       	mov	r15, r14
    22b0:	b8 01       	movw	r22, r16
    22b2:	88 27       	eor	r24, r24
    22b4:	77 fd       	sbrc	r23, 7
    22b6:	80 95       	com	r24
    22b8:	98 2f       	mov	r25, r24
    22ba:	0e 94 31 14 	call	0x2862	; 0x2862 <__floatsisf>
    22be:	23 e3       	ldi	r18, 0x33	; 51
    22c0:	33 e3       	ldi	r19, 0x33	; 51
    22c2:	4b e0       	ldi	r20, 0x0B	; 11
    22c4:	51 e4       	ldi	r21, 0x41	; 65
    22c6:	0e 94 96 13 	call	0x272c	; 0x272c <__divsf3>
    22ca:	0e 94 fe 13 	call	0x27fc	; 0x27fc <__fixsfsi>
        break; 
    }   
  }
  long mapAngle(long x, long in_min, long in_max, long out_min, long out_max)
  {
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    22ce:	6c 19       	sub	r22, r12
    22d0:	7d 09       	sbc	r23, r13
    22d2:	8e 09       	sbc	r24, r14
    22d4:	9f 09       	sbc	r25, r15
	swerve3.write(angle+correction[2]);
    22d6:	40 91 bc 02 	lds	r20, 0x02BC
    22da:	50 91 bd 02 	lds	r21, 0x02BD
    22de:	20 91 b8 02 	lds	r18, 0x02B8
    22e2:	30 91 b9 02 	lds	r19, 0x02B9
    22e6:	24 0f       	add	r18, r20
    22e8:	35 1f       	adc	r19, r21
     }
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,270,iCr/40,iCr/8.7),iCr/40,iCr/8);
    22ea:	44 27       	eor	r20, r20
    22ec:	37 fd       	sbrc	r19, 7
    22ee:	40 95       	com	r20
    22f0:	54 2f       	mov	r21, r20
        break; 
    }   
  }
  long mapAngle(long x, long in_min, long in_max, long out_min, long out_max)
  {
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    22f2:	0e 94 20 15 	call	0x2a40	; 0x2a40 <__mulsi3>
    22f6:	2e e0       	ldi	r18, 0x0E	; 14
    22f8:	31 e0       	ldi	r19, 0x01	; 1
    22fa:	40 e0       	ldi	r20, 0x00	; 0
    22fc:	50 e0       	ldi	r21, 0x00	; 0
    22fe:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <__divmodsi4>
    2302:	2c 0d       	add	r18, r12
    2304:	3d 1d       	adc	r19, r13
    2306:	4e 1d       	adc	r20, r14
    2308:	5f 1d       	adc	r21, r15
     }
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,270,iCr/40,iCr/8.7),iCr/40,iCr/8);
    230a:	c8 01       	movw	r24, r16
    230c:	99 23       	and	r25, r25
    230e:	0c f4       	brge	.+2      	; 0x2312 <__stack+0x113>
    2310:	07 96       	adiw	r24, 0x07	; 7
    2312:	95 95       	asr	r25
    2314:	87 95       	ror	r24
    2316:	95 95       	asr	r25
    2318:	87 95       	ror	r24
    231a:	95 95       	asr	r25
    231c:	87 95       	ror	r24
    231e:	aa 27       	eor	r26, r26
    2320:	97 fd       	sbrc	r25, 7
    2322:	a0 95       	com	r26
    2324:	ba 2f       	mov	r27, r26
  {
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  }
  long constraint(long nUm,long lOwer,long uPper)
  {
    if(nUm>uPper){
    2326:	82 17       	cp	r24, r18
    2328:	93 07       	cpc	r25, r19
    232a:	a4 07       	cpc	r26, r20
    232c:	b5 07       	cpc	r27, r21
    232e:	4c f0       	brlt	.+18     	; 0x2342 <__stack+0x143>
    2330:	da 01       	movw	r26, r20
    2332:	c9 01       	movw	r24, r18
    2334:	2c 15       	cp	r18, r12
    2336:	3d 05       	cpc	r19, r13
    2338:	4e 05       	cpc	r20, r14
    233a:	5f 05       	cpc	r21, r15
    233c:	14 f4       	brge	.+4      	; 0x2342 <__stack+0x143>
    233e:	d7 01       	movw	r26, r14
    2340:	c6 01       	movw	r24, r12
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,270,iCr/40,iCr/8.7),iCr/40,iCr/8);
    switch(pIn)
    2342:	20 91 d0 02 	lds	r18, 0x02D0
    2346:	28 30       	cpi	r18, 0x08	; 8
    2348:	09 f4       	brne	.+2      	; 0x234c <__stack+0x14d>
    234a:	7a c0       	rjmp	.+244    	; 0x2440 <__stack+0x241>
    234c:	29 30       	cpi	r18, 0x09	; 9
    234e:	90 f4       	brcc	.+36     	; 0x2374 <__stack+0x175>
    2350:	25 30       	cpi	r18, 0x05	; 5
    2352:	d1 f1       	breq	.+116    	; 0x23c8 <__stack+0x1c9>
    2354:	26 30       	cpi	r18, 0x06	; 6
    2356:	38 f4       	brcc	.+14     	; 0x2366 <__stack+0x167>
    2358:	22 30       	cpi	r18, 0x02	; 2
    235a:	09 f4       	brne	.+2      	; 0x235e <__stack+0x15f>
    235c:	41 c0       	rjmp	.+130    	; 0x23e0 <__stack+0x1e1>
    235e:	23 30       	cpi	r18, 0x03	; 3
    2360:	09 f0       	breq	.+2      	; 0x2364 <__stack+0x165>
    2362:	9d c0       	rjmp	.+314    	; 0x249e <__stack+0x29f>
    2364:	49 c0       	rjmp	.+146    	; 0x23f8 <__stack+0x1f9>
    2366:	26 30       	cpi	r18, 0x06	; 6
    2368:	09 f4       	brne	.+2      	; 0x236c <__stack+0x16d>
    236a:	52 c0       	rjmp	.+164    	; 0x2410 <__stack+0x211>
    236c:	27 30       	cpi	r18, 0x07	; 7
    236e:	09 f0       	breq	.+2      	; 0x2372 <__stack+0x173>
    2370:	96 c0       	rjmp	.+300    	; 0x249e <__stack+0x29f>
    2372:	5a c0       	rjmp	.+180    	; 0x2428 <__stack+0x229>
    2374:	2c 32       	cpi	r18, 0x2C	; 44
    2376:	09 f4       	brne	.+2      	; 0x237a <__stack+0x17b>
    2378:	87 c0       	rjmp	.+270    	; 0x2488 <__stack+0x289>
    237a:	2d 32       	cpi	r18, 0x2D	; 45
    237c:	30 f4       	brcc	.+12     	; 0x238a <__stack+0x18b>
    237e:	2b 30       	cpi	r18, 0x0B	; 11
    2380:	59 f0       	breq	.+22     	; 0x2398 <__stack+0x199>
    2382:	2c 30       	cpi	r18, 0x0C	; 12
    2384:	09 f0       	breq	.+2      	; 0x2388 <__stack+0x189>
    2386:	8b c0       	rjmp	.+278    	; 0x249e <__stack+0x29f>
    2388:	13 c0       	rjmp	.+38     	; 0x23b0 <__stack+0x1b1>
    238a:	2d 32       	cpi	r18, 0x2D	; 45
    238c:	09 f4       	brne	.+2      	; 0x2390 <__stack+0x191>
    238e:	70 c0       	rjmp	.+224    	; 0x2470 <__stack+0x271>
    2390:	2e 32       	cpi	r18, 0x2E	; 46
    2392:	09 f0       	breq	.+2      	; 0x2396 <__stack+0x197>
    2394:	84 c0       	rjmp	.+264    	; 0x249e <__stack+0x29f>
    2396:	60 c0       	rjmp	.+192    	; 0x2458 <__stack+0x259>
    {
     case 11:
        OCR1A=ICR1-vAl;
    2398:	20 91 86 00 	lds	r18, 0x0086
    239c:	30 91 87 00 	lds	r19, 0x0087
    23a0:	a9 01       	movw	r20, r18
    23a2:	48 1b       	sub	r20, r24
    23a4:	59 0b       	sbc	r21, r25
    23a6:	50 93 89 00 	sts	0x0089, r21
    23aa:	40 93 88 00 	sts	0x0088, r20
    23ae:	77 c0       	rjmp	.+238    	; 0x249e <__stack+0x29f>
        break;
      case 12:
        OCR1B=ICR1-vAl;
    23b0:	20 91 86 00 	lds	r18, 0x0086
    23b4:	30 91 87 00 	lds	r19, 0x0087
    23b8:	f9 01       	movw	r30, r18
    23ba:	e8 1b       	sub	r30, r24
    23bc:	f9 0b       	sbc	r31, r25
    23be:	f0 93 8b 00 	sts	0x008B, r31
    23c2:	e0 93 8a 00 	sts	0x008A, r30
    23c6:	6b c0       	rjmp	.+214    	; 0x249e <__stack+0x29f>
        break;
      case 5:
        OCR3A=ICR3-vAl;
    23c8:	20 91 96 00 	lds	r18, 0x0096
    23cc:	30 91 97 00 	lds	r19, 0x0097
    23d0:	a9 01       	movw	r20, r18
    23d2:	48 1b       	sub	r20, r24
    23d4:	59 0b       	sbc	r21, r25
    23d6:	50 93 99 00 	sts	0x0099, r21
    23da:	40 93 98 00 	sts	0x0098, r20
    23de:	5f c0       	rjmp	.+190    	; 0x249e <__stack+0x29f>
        break;
      case 2:
        OCR3B=ICR3-vAl;
    23e0:	20 91 96 00 	lds	r18, 0x0096
    23e4:	30 91 97 00 	lds	r19, 0x0097
    23e8:	f9 01       	movw	r30, r18
    23ea:	e8 1b       	sub	r30, r24
    23ec:	f9 0b       	sbc	r31, r25
    23ee:	f0 93 9b 00 	sts	0x009B, r31
    23f2:	e0 93 9a 00 	sts	0x009A, r30
    23f6:	53 c0       	rjmp	.+166    	; 0x249e <__stack+0x29f>
        break;
      case 3:
        OCR3C=ICR3-vAl;
    23f8:	20 91 96 00 	lds	r18, 0x0096
    23fc:	30 91 97 00 	lds	r19, 0x0097
    2400:	a9 01       	movw	r20, r18
    2402:	48 1b       	sub	r20, r24
    2404:	59 0b       	sbc	r21, r25
    2406:	50 93 9d 00 	sts	0x009D, r21
    240a:	40 93 9c 00 	sts	0x009C, r20
    240e:	47 c0       	rjmp	.+142    	; 0x249e <__stack+0x29f>
        break;
      case 6:
        OCR4A=ICR4-vAl;
    2410:	20 91 a6 00 	lds	r18, 0x00A6
    2414:	30 91 a7 00 	lds	r19, 0x00A7
    2418:	f9 01       	movw	r30, r18
    241a:	e8 1b       	sub	r30, r24
    241c:	f9 0b       	sbc	r31, r25
    241e:	f0 93 a9 00 	sts	0x00A9, r31
    2422:	e0 93 a8 00 	sts	0x00A8, r30
    2426:	3b c0       	rjmp	.+118    	; 0x249e <__stack+0x29f>
        break;
      case 7:
        OCR4B=ICR4-vAl;
    2428:	20 91 a6 00 	lds	r18, 0x00A6
    242c:	30 91 a7 00 	lds	r19, 0x00A7
    2430:	a9 01       	movw	r20, r18
    2432:	48 1b       	sub	r20, r24
    2434:	59 0b       	sbc	r21, r25
    2436:	50 93 ab 00 	sts	0x00AB, r21
    243a:	40 93 aa 00 	sts	0x00AA, r20
    243e:	2f c0       	rjmp	.+94     	; 0x249e <__stack+0x29f>
        break; 
      case 8:
        OCR4C=ICR4-vAl;
    2440:	20 91 a6 00 	lds	r18, 0x00A6
    2444:	30 91 a7 00 	lds	r19, 0x00A7
    2448:	f9 01       	movw	r30, r18
    244a:	e8 1b       	sub	r30, r24
    244c:	f9 0b       	sbc	r31, r25
    244e:	f0 93 ad 00 	sts	0x00AD, r31
    2452:	e0 93 ac 00 	sts	0x00AC, r30
    2456:	23 c0       	rjmp	.+70     	; 0x249e <__stack+0x29f>
        break;
      case 46:
        OCR5A=ICR5-vAl;
    2458:	20 91 26 01 	lds	r18, 0x0126
    245c:	30 91 27 01 	lds	r19, 0x0127
    2460:	a9 01       	movw	r20, r18
    2462:	48 1b       	sub	r20, r24
    2464:	59 0b       	sbc	r21, r25
    2466:	50 93 29 01 	sts	0x0129, r21
    246a:	40 93 28 01 	sts	0x0128, r20
    246e:	17 c0       	rjmp	.+46     	; 0x249e <__stack+0x29f>
        break;
      case 45:
        OCR5B=ICR5-vAl;
    2470:	20 91 26 01 	lds	r18, 0x0126
    2474:	30 91 27 01 	lds	r19, 0x0127
    2478:	f9 01       	movw	r30, r18
    247a:	e8 1b       	sub	r30, r24
    247c:	f9 0b       	sbc	r31, r25
    247e:	f0 93 2b 01 	sts	0x012B, r31
    2482:	e0 93 2a 01 	sts	0x012A, r30
    2486:	0b c0       	rjmp	.+22     	; 0x249e <__stack+0x29f>
        break;
      case 44:
        OCR5C=ICR5-vAl;
    2488:	20 91 26 01 	lds	r18, 0x0126
    248c:	30 91 27 01 	lds	r19, 0x0127
    2490:	a9 01       	movw	r20, r18
    2492:	48 1b       	sub	r20, r24
    2494:	59 0b       	sbc	r21, r25
    2496:	50 93 2d 01 	sts	0x012D, r21
    249a:	40 93 2c 01 	sts	0x012C, r20
     }
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,270,iCr/40,iCr/8.7),iCr/40,iCr/8);
    249e:	00 91 d1 02 	lds	r16, 0x02D1
    24a2:	10 91 d2 02 	lds	r17, 0x02D2
    24a6:	c8 01       	movw	r24, r16
    24a8:	68 e2       	ldi	r22, 0x28	; 40
    24aa:	70 e0       	ldi	r23, 0x00	; 0
    24ac:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <__divmodhi4>
    24b0:	6b 01       	movw	r12, r22
    24b2:	ee 24       	eor	r14, r14
    24b4:	d7 fc       	sbrc	r13, 7
    24b6:	e0 94       	com	r14
    24b8:	fe 2c       	mov	r15, r14
    24ba:	b8 01       	movw	r22, r16
    24bc:	88 27       	eor	r24, r24
    24be:	77 fd       	sbrc	r23, 7
    24c0:	80 95       	com	r24
    24c2:	98 2f       	mov	r25, r24
    24c4:	0e 94 31 14 	call	0x2862	; 0x2862 <__floatsisf>
    24c8:	23 e3       	ldi	r18, 0x33	; 51
    24ca:	33 e3       	ldi	r19, 0x33	; 51
    24cc:	4b e0       	ldi	r20, 0x0B	; 11
    24ce:	51 e4       	ldi	r21, 0x41	; 65
    24d0:	0e 94 96 13 	call	0x272c	; 0x272c <__divsf3>
    24d4:	0e 94 fe 13 	call	0x27fc	; 0x27fc <__fixsfsi>
        break; 
    }   
  }
  long mapAngle(long x, long in_min, long in_max, long out_min, long out_max)
  {
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    24d8:	6c 19       	sub	r22, r12
    24da:	7d 09       	sbc	r23, r13
    24dc:	8e 09       	sbc	r24, r14
    24de:	9f 09       	sbc	r25, r15
	swerve4.write(angle+correction[3]);	
    24e0:	40 91 bc 02 	lds	r20, 0x02BC
    24e4:	50 91 bd 02 	lds	r21, 0x02BD
    24e8:	20 91 ba 02 	lds	r18, 0x02BA
    24ec:	30 91 bb 02 	lds	r19, 0x02BB
    24f0:	24 0f       	add	r18, r20
    24f2:	35 1f       	adc	r19, r21
     }
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,270,iCr/40,iCr/8.7),iCr/40,iCr/8);
    24f4:	44 27       	eor	r20, r20
    24f6:	37 fd       	sbrc	r19, 7
    24f8:	40 95       	com	r20
    24fa:	54 2f       	mov	r21, r20
        break; 
    }   
  }
  long mapAngle(long x, long in_min, long in_max, long out_min, long out_max)
  {
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    24fc:	0e 94 20 15 	call	0x2a40	; 0x2a40 <__mulsi3>
    2500:	2e e0       	ldi	r18, 0x0E	; 14
    2502:	31 e0       	ldi	r19, 0x01	; 1
    2504:	40 e0       	ldi	r20, 0x00	; 0
    2506:	50 e0       	ldi	r21, 0x00	; 0
    2508:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <__divmodsi4>
    250c:	2c 0d       	add	r18, r12
    250e:	3d 1d       	adc	r19, r13
    2510:	4e 1d       	adc	r20, r14
    2512:	5f 1d       	adc	r21, r15
     }
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,270,iCr/40,iCr/8.7),iCr/40,iCr/8);
    2514:	c8 01       	movw	r24, r16
    2516:	99 23       	and	r25, r25
    2518:	0c f4       	brge	.+2      	; 0x251c <__stack+0x31d>
    251a:	07 96       	adiw	r24, 0x07	; 7
    251c:	95 95       	asr	r25
    251e:	87 95       	ror	r24
    2520:	95 95       	asr	r25
    2522:	87 95       	ror	r24
    2524:	95 95       	asr	r25
    2526:	87 95       	ror	r24
    2528:	aa 27       	eor	r26, r26
    252a:	97 fd       	sbrc	r25, 7
    252c:	a0 95       	com	r26
    252e:	ba 2f       	mov	r27, r26
  {
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  }
  long constraint(long nUm,long lOwer,long uPper)
  {
    if(nUm>uPper){
    2530:	82 17       	cp	r24, r18
    2532:	93 07       	cpc	r25, r19
    2534:	a4 07       	cpc	r26, r20
    2536:	b5 07       	cpc	r27, r21
    2538:	4c f0       	brlt	.+18     	; 0x254c <__stack+0x34d>
    253a:	da 01       	movw	r26, r20
    253c:	c9 01       	movw	r24, r18
    253e:	2c 15       	cp	r18, r12
    2540:	3d 05       	cpc	r19, r13
    2542:	4e 05       	cpc	r20, r14
    2544:	5f 05       	cpc	r21, r15
    2546:	14 f4       	brge	.+4      	; 0x254c <__stack+0x34d>
    2548:	d7 01       	movw	r26, r14
    254a:	c6 01       	movw	r24, r12
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,270,iCr/40,iCr/8.7),iCr/40,iCr/8);
    switch(pIn)
    254c:	20 91 d3 02 	lds	r18, 0x02D3
    2550:	28 30       	cpi	r18, 0x08	; 8
    2552:	09 f4       	brne	.+2      	; 0x2556 <__stack+0x357>
    2554:	7a c0       	rjmp	.+244    	; 0x264a <__stack+0x44b>
    2556:	29 30       	cpi	r18, 0x09	; 9
    2558:	90 f4       	brcc	.+36     	; 0x257e <__stack+0x37f>
    255a:	25 30       	cpi	r18, 0x05	; 5
    255c:	d1 f1       	breq	.+116    	; 0x25d2 <__stack+0x3d3>
    255e:	26 30       	cpi	r18, 0x06	; 6
    2560:	38 f4       	brcc	.+14     	; 0x2570 <__stack+0x371>
    2562:	22 30       	cpi	r18, 0x02	; 2
    2564:	09 f4       	brne	.+2      	; 0x2568 <__stack+0x369>
    2566:	41 c0       	rjmp	.+130    	; 0x25ea <__stack+0x3eb>
    2568:	23 30       	cpi	r18, 0x03	; 3
    256a:	09 f0       	breq	.+2      	; 0x256e <__stack+0x36f>
    256c:	9d c0       	rjmp	.+314    	; 0x26a8 <__stack+0x4a9>
    256e:	49 c0       	rjmp	.+146    	; 0x2602 <__stack+0x403>
    2570:	26 30       	cpi	r18, 0x06	; 6
    2572:	09 f4       	brne	.+2      	; 0x2576 <__stack+0x377>
    2574:	52 c0       	rjmp	.+164    	; 0x261a <__stack+0x41b>
    2576:	27 30       	cpi	r18, 0x07	; 7
    2578:	09 f0       	breq	.+2      	; 0x257c <__stack+0x37d>
    257a:	96 c0       	rjmp	.+300    	; 0x26a8 <__stack+0x4a9>
    257c:	5a c0       	rjmp	.+180    	; 0x2632 <__stack+0x433>
    257e:	2c 32       	cpi	r18, 0x2C	; 44
    2580:	09 f4       	brne	.+2      	; 0x2584 <__stack+0x385>
    2582:	87 c0       	rjmp	.+270    	; 0x2692 <__stack+0x493>
    2584:	2d 32       	cpi	r18, 0x2D	; 45
    2586:	30 f4       	brcc	.+12     	; 0x2594 <__stack+0x395>
    2588:	2b 30       	cpi	r18, 0x0B	; 11
    258a:	59 f0       	breq	.+22     	; 0x25a2 <__stack+0x3a3>
    258c:	2c 30       	cpi	r18, 0x0C	; 12
    258e:	09 f0       	breq	.+2      	; 0x2592 <__stack+0x393>
    2590:	8b c0       	rjmp	.+278    	; 0x26a8 <__stack+0x4a9>
    2592:	13 c0       	rjmp	.+38     	; 0x25ba <__stack+0x3bb>
    2594:	2d 32       	cpi	r18, 0x2D	; 45
    2596:	09 f4       	brne	.+2      	; 0x259a <__stack+0x39b>
    2598:	70 c0       	rjmp	.+224    	; 0x267a <__stack+0x47b>
    259a:	2e 32       	cpi	r18, 0x2E	; 46
    259c:	09 f0       	breq	.+2      	; 0x25a0 <__stack+0x3a1>
    259e:	84 c0       	rjmp	.+264    	; 0x26a8 <__stack+0x4a9>
    25a0:	60 c0       	rjmp	.+192    	; 0x2662 <__stack+0x463>
    {
     case 11:
        OCR1A=ICR1-vAl;
    25a2:	20 91 86 00 	lds	r18, 0x0086
    25a6:	30 91 87 00 	lds	r19, 0x0087
    25aa:	f9 01       	movw	r30, r18
    25ac:	e8 1b       	sub	r30, r24
    25ae:	f9 0b       	sbc	r31, r25
    25b0:	f0 93 89 00 	sts	0x0089, r31
    25b4:	e0 93 88 00 	sts	0x0088, r30
    25b8:	77 c0       	rjmp	.+238    	; 0x26a8 <__stack+0x4a9>
        break;
      case 12:
        OCR1B=ICR1-vAl;
    25ba:	20 91 86 00 	lds	r18, 0x0086
    25be:	30 91 87 00 	lds	r19, 0x0087
    25c2:	a9 01       	movw	r20, r18
    25c4:	48 1b       	sub	r20, r24
    25c6:	59 0b       	sbc	r21, r25
    25c8:	50 93 8b 00 	sts	0x008B, r21
    25cc:	40 93 8a 00 	sts	0x008A, r20
    25d0:	6b c0       	rjmp	.+214    	; 0x26a8 <__stack+0x4a9>
        break;
      case 5:
        OCR3A=ICR3-vAl;
    25d2:	20 91 96 00 	lds	r18, 0x0096
    25d6:	30 91 97 00 	lds	r19, 0x0097
    25da:	f9 01       	movw	r30, r18
    25dc:	e8 1b       	sub	r30, r24
    25de:	f9 0b       	sbc	r31, r25
    25e0:	f0 93 99 00 	sts	0x0099, r31
    25e4:	e0 93 98 00 	sts	0x0098, r30
    25e8:	5f c0       	rjmp	.+190    	; 0x26a8 <__stack+0x4a9>
        break;
      case 2:
        OCR3B=ICR3-vAl;
    25ea:	20 91 96 00 	lds	r18, 0x0096
    25ee:	30 91 97 00 	lds	r19, 0x0097
    25f2:	a9 01       	movw	r20, r18
    25f4:	48 1b       	sub	r20, r24
    25f6:	59 0b       	sbc	r21, r25
    25f8:	50 93 9b 00 	sts	0x009B, r21
    25fc:	40 93 9a 00 	sts	0x009A, r20
    2600:	53 c0       	rjmp	.+166    	; 0x26a8 <__stack+0x4a9>
        break;
      case 3:
        OCR3C=ICR3-vAl;
    2602:	20 91 96 00 	lds	r18, 0x0096
    2606:	30 91 97 00 	lds	r19, 0x0097
    260a:	f9 01       	movw	r30, r18
    260c:	e8 1b       	sub	r30, r24
    260e:	f9 0b       	sbc	r31, r25
    2610:	f0 93 9d 00 	sts	0x009D, r31
    2614:	e0 93 9c 00 	sts	0x009C, r30
    2618:	47 c0       	rjmp	.+142    	; 0x26a8 <__stack+0x4a9>
        break;
      case 6:
        OCR4A=ICR4-vAl;
    261a:	20 91 a6 00 	lds	r18, 0x00A6
    261e:	30 91 a7 00 	lds	r19, 0x00A7
    2622:	a9 01       	movw	r20, r18
    2624:	48 1b       	sub	r20, r24
    2626:	59 0b       	sbc	r21, r25
    2628:	50 93 a9 00 	sts	0x00A9, r21
    262c:	40 93 a8 00 	sts	0x00A8, r20
    2630:	3b c0       	rjmp	.+118    	; 0x26a8 <__stack+0x4a9>
        break;
      case 7:
        OCR4B=ICR4-vAl;
    2632:	20 91 a6 00 	lds	r18, 0x00A6
    2636:	30 91 a7 00 	lds	r19, 0x00A7
    263a:	f9 01       	movw	r30, r18
    263c:	e8 1b       	sub	r30, r24
    263e:	f9 0b       	sbc	r31, r25
    2640:	f0 93 ab 00 	sts	0x00AB, r31
    2644:	e0 93 aa 00 	sts	0x00AA, r30
    2648:	2f c0       	rjmp	.+94     	; 0x26a8 <__stack+0x4a9>
        break; 
      case 8:
        OCR4C=ICR4-vAl;
    264a:	20 91 a6 00 	lds	r18, 0x00A6
    264e:	30 91 a7 00 	lds	r19, 0x00A7
    2652:	a9 01       	movw	r20, r18
    2654:	48 1b       	sub	r20, r24
    2656:	59 0b       	sbc	r21, r25
    2658:	50 93 ad 00 	sts	0x00AD, r21
    265c:	40 93 ac 00 	sts	0x00AC, r20
    2660:	23 c0       	rjmp	.+70     	; 0x26a8 <__stack+0x4a9>
        break;
      case 46:
        OCR5A=ICR5-vAl;
    2662:	20 91 26 01 	lds	r18, 0x0126
    2666:	30 91 27 01 	lds	r19, 0x0127
    266a:	f9 01       	movw	r30, r18
    266c:	e8 1b       	sub	r30, r24
    266e:	f9 0b       	sbc	r31, r25
    2670:	f0 93 29 01 	sts	0x0129, r31
    2674:	e0 93 28 01 	sts	0x0128, r30
    2678:	17 c0       	rjmp	.+46     	; 0x26a8 <__stack+0x4a9>
        break;
      case 45:
        OCR5B=ICR5-vAl;
    267a:	20 91 26 01 	lds	r18, 0x0126
    267e:	30 91 27 01 	lds	r19, 0x0127
    2682:	a9 01       	movw	r20, r18
    2684:	48 1b       	sub	r20, r24
    2686:	59 0b       	sbc	r21, r25
    2688:	50 93 2b 01 	sts	0x012B, r21
    268c:	40 93 2a 01 	sts	0x012A, r20
    2690:	0b c0       	rjmp	.+22     	; 0x26a8 <__stack+0x4a9>
        break;
      case 44:
        OCR5C=ICR5-vAl;
    2692:	20 91 26 01 	lds	r18, 0x0126
    2696:	30 91 27 01 	lds	r19, 0x0127
    269a:	f9 01       	movw	r30, r18
    269c:	e8 1b       	sub	r30, r24
    269e:	f9 0b       	sbc	r31, r25
    26a0:	f0 93 2d 01 	sts	0x012D, r31
    26a4:	e0 93 2c 01 	sts	0x012C, r30
	delay(5000);
    26a8:	68 e8       	ldi	r22, 0x88	; 136
    26aa:	73 e1       	ldi	r23, 0x13	; 19
    26ac:	80 e0       	ldi	r24, 0x00	; 0
    26ae:	90 e0       	ldi	r25, 0x00	; 0
    26b0:	0e 94 4a 05 	call	0xa94	; 0xa94 <_Z5delaym>
    26b4:	60 96       	adiw	r28, 0x10	; 16
    26b6:	0f b6       	in	r0, 0x3f	; 63
    26b8:	f8 94       	cli
    26ba:	de bf       	out	0x3e, r29	; 62
    26bc:	0f be       	out	0x3f, r0	; 63
    26be:	cd bf       	out	0x3d, r28	; 61
    26c0:	cf 91       	pop	r28
    26c2:	df 91       	pop	r29
    26c4:	1f 91       	pop	r17
    26c6:	0f 91       	pop	r16
    26c8:	ff 90       	pop	r15
    26ca:	ef 90       	pop	r14
    26cc:	df 90       	pop	r13
    26ce:	cf 90       	pop	r12
    26d0:	bf 90       	pop	r11
    26d2:	af 90       	pop	r10
    26d4:	9f 90       	pop	r9
    26d6:	8f 90       	pop	r8
    26d8:	7f 90       	pop	r7
    26da:	6f 90       	pop	r6
    26dc:	5f 90       	pop	r5
    26de:	4f 90       	pop	r4
    26e0:	3f 90       	pop	r3
    26e2:	2f 90       	pop	r2
    26e4:	08 95       	ret

000026e6 <main>:
{
	uSerfun();
}*/
int main(){
	//tinit();
	setup();
    26e6:	0e 94 69 08 	call	0x10d2	; 0x10d2 <_Z5setupv>
	while(1){
		loop();
    26ea:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <_Z4loopv>
    26ee:	fd cf       	rjmp	.-6      	; 0x26ea <main+0x4>

000026f0 <_GLOBAL__I_tImer2_millis>:
		step2=5;
		step3=5;
		interval=10;
  	}
  	Cytron(uint8_t getdIrpin, uint8_t getpWmpin, uint8_t getdIrpin1, uint8_t getpWmpin1, uint8_t getdIrpin2, uint8_t getpWmpin2, uint8_t getdIrpin3, uint8_t getpWmpin3){     //constructor function takes direction and pwm pins for cytron
	    pWmpin=getpWmpin;
    26f0:	84 e0       	ldi	r24, 0x04	; 4
    26f2:	80 93 d5 02 	sts	0x02D5, r24
	    dIrpin=getdIrpin;
    26f6:	e5 ed       	ldi	r30, 0xD5	; 213
    26f8:	f2 e0       	ldi	r31, 0x02	; 2
    26fa:	8e e1       	ldi	r24, 0x1E	; 30
    26fc:	82 93       	st	-Z, r24
	    pWmpin1=getpWmpin1;
    26fe:	8d e0       	ldi	r24, 0x0D	; 13
    2700:	86 83       	std	Z+6, r24	; 0x06
	    dIrpin1=getdIrpin1;
    2702:	8f e1       	ldi	r24, 0x1F	; 31
    2704:	85 83       	std	Z+5, r24	; 0x05
	    pWmpin2=getpWmpin2;
    2706:	9a e0       	ldi	r25, 0x0A	; 10
    2708:	92 87       	std	Z+10, r25	; 0x0a
	    dIrpin2=getdIrpin2;
    270a:	80 e2       	ldi	r24, 0x20	; 32
    270c:	81 87       	std	Z+9, r24	; 0x09
	    pWmpin3=getpWmpin3;
    270e:	89 e0       	ldi	r24, 0x09	; 9
    2710:	86 87       	std	Z+14, r24	; 0x0e
	    dIrpin3=getdIrpin3;
    2712:	81 e2       	ldi	r24, 0x21	; 33
    2714:	85 87       	std	Z+13, r24	; 0x0d
	    lAstpwm=0;
    2716:	12 82       	std	Z+2, r1	; 0x02
		lAstpwm1=0;
    2718:	17 82       	std	Z+7, r1	; 0x07
		lAstpwm2=0;
    271a:	13 86       	std	Z+11, r1	; 0x0b
		lAstpwm3=0;
    271c:	17 86       	std	Z+15, r1	; 0x0f
		step1=5;
    271e:	85 e0       	ldi	r24, 0x05	; 5
    2720:	83 83       	std	Z+3, r24	; 0x03
		step2=5;
    2722:	80 87       	std	Z+8, r24	; 0x08
		step3=5;
    2724:	84 87       	std	Z+12, r24	; 0x0c
		step4=5;
    2726:	80 8b       	std	Z+16, r24	; 0x10
		interval=10;
    2728:	94 83       	std	Z+4, r25	; 0x04
    272a:	08 95       	ret

0000272c <__divsf3>:
    272c:	0c d0       	rcall	.+24     	; 0x2746 <__divsf3x>
    272e:	eb c0       	rjmp	.+470    	; 0x2906 <__fp_round>
    2730:	e3 d0       	rcall	.+454    	; 0x28f8 <__fp_pscB>
    2732:	40 f0       	brcs	.+16     	; 0x2744 <__divsf3+0x18>
    2734:	da d0       	rcall	.+436    	; 0x28ea <__fp_pscA>
    2736:	30 f0       	brcs	.+12     	; 0x2744 <__divsf3+0x18>
    2738:	21 f4       	brne	.+8      	; 0x2742 <__divsf3+0x16>
    273a:	5f 3f       	cpi	r21, 0xFF	; 255
    273c:	19 f0       	breq	.+6      	; 0x2744 <__divsf3+0x18>
    273e:	cc c0       	rjmp	.+408    	; 0x28d8 <__fp_inf>
    2740:	51 11       	cpse	r21, r1
    2742:	15 c1       	rjmp	.+554    	; 0x296e <__fp_szero>
    2744:	cf c0       	rjmp	.+414    	; 0x28e4 <__fp_nan>

00002746 <__divsf3x>:
    2746:	f0 d0       	rcall	.+480    	; 0x2928 <__fp_split3>
    2748:	98 f3       	brcs	.-26     	; 0x2730 <__divsf3+0x4>

0000274a <__divsf3_pse>:
    274a:	99 23       	and	r25, r25
    274c:	c9 f3       	breq	.-14     	; 0x2740 <__divsf3+0x14>
    274e:	55 23       	and	r21, r21
    2750:	b1 f3       	breq	.-20     	; 0x273e <__divsf3+0x12>
    2752:	95 1b       	sub	r25, r21
    2754:	55 0b       	sbc	r21, r21
    2756:	bb 27       	eor	r27, r27
    2758:	aa 27       	eor	r26, r26
    275a:	62 17       	cp	r22, r18
    275c:	73 07       	cpc	r23, r19
    275e:	84 07       	cpc	r24, r20
    2760:	38 f0       	brcs	.+14     	; 0x2770 <__divsf3_pse+0x26>
    2762:	9f 5f       	subi	r25, 0xFF	; 255
    2764:	5f 4f       	sbci	r21, 0xFF	; 255
    2766:	22 0f       	add	r18, r18
    2768:	33 1f       	adc	r19, r19
    276a:	44 1f       	adc	r20, r20
    276c:	aa 1f       	adc	r26, r26
    276e:	a9 f3       	breq	.-22     	; 0x275a <__divsf3_pse+0x10>
    2770:	33 d0       	rcall	.+102    	; 0x27d8 <__divsf3_pse+0x8e>
    2772:	0e 2e       	mov	r0, r30
    2774:	3a f0       	brmi	.+14     	; 0x2784 <__divsf3_pse+0x3a>
    2776:	e0 e8       	ldi	r30, 0x80	; 128
    2778:	30 d0       	rcall	.+96     	; 0x27da <__divsf3_pse+0x90>
    277a:	91 50       	subi	r25, 0x01	; 1
    277c:	50 40       	sbci	r21, 0x00	; 0
    277e:	e6 95       	lsr	r30
    2780:	00 1c       	adc	r0, r0
    2782:	ca f7       	brpl	.-14     	; 0x2776 <__divsf3_pse+0x2c>
    2784:	29 d0       	rcall	.+82     	; 0x27d8 <__divsf3_pse+0x8e>
    2786:	fe 2f       	mov	r31, r30
    2788:	27 d0       	rcall	.+78     	; 0x27d8 <__divsf3_pse+0x8e>
    278a:	66 0f       	add	r22, r22
    278c:	77 1f       	adc	r23, r23
    278e:	88 1f       	adc	r24, r24
    2790:	bb 1f       	adc	r27, r27
    2792:	26 17       	cp	r18, r22
    2794:	37 07       	cpc	r19, r23
    2796:	48 07       	cpc	r20, r24
    2798:	ab 07       	cpc	r26, r27
    279a:	b0 e8       	ldi	r27, 0x80	; 128
    279c:	09 f0       	breq	.+2      	; 0x27a0 <__divsf3_pse+0x56>
    279e:	bb 0b       	sbc	r27, r27
    27a0:	80 2d       	mov	r24, r0
    27a2:	bf 01       	movw	r22, r30
    27a4:	ff 27       	eor	r31, r31
    27a6:	93 58       	subi	r25, 0x83	; 131
    27a8:	5f 4f       	sbci	r21, 0xFF	; 255
    27aa:	2a f0       	brmi	.+10     	; 0x27b6 <__divsf3_pse+0x6c>
    27ac:	9e 3f       	cpi	r25, 0xFE	; 254
    27ae:	51 05       	cpc	r21, r1
    27b0:	68 f0       	brcs	.+26     	; 0x27cc <__divsf3_pse+0x82>
    27b2:	92 c0       	rjmp	.+292    	; 0x28d8 <__fp_inf>
    27b4:	dc c0       	rjmp	.+440    	; 0x296e <__fp_szero>
    27b6:	5f 3f       	cpi	r21, 0xFF	; 255
    27b8:	ec f3       	brlt	.-6      	; 0x27b4 <__divsf3_pse+0x6a>
    27ba:	98 3e       	cpi	r25, 0xE8	; 232
    27bc:	dc f3       	brlt	.-10     	; 0x27b4 <__divsf3_pse+0x6a>
    27be:	86 95       	lsr	r24
    27c0:	77 95       	ror	r23
    27c2:	67 95       	ror	r22
    27c4:	b7 95       	ror	r27
    27c6:	f7 95       	ror	r31
    27c8:	9f 5f       	subi	r25, 0xFF	; 255
    27ca:	c9 f7       	brne	.-14     	; 0x27be <__divsf3_pse+0x74>
    27cc:	88 0f       	add	r24, r24
    27ce:	91 1d       	adc	r25, r1
    27d0:	96 95       	lsr	r25
    27d2:	87 95       	ror	r24
    27d4:	97 f9       	bld	r25, 7
    27d6:	08 95       	ret
    27d8:	e1 e0       	ldi	r30, 0x01	; 1
    27da:	66 0f       	add	r22, r22
    27dc:	77 1f       	adc	r23, r23
    27de:	88 1f       	adc	r24, r24
    27e0:	bb 1f       	adc	r27, r27
    27e2:	62 17       	cp	r22, r18
    27e4:	73 07       	cpc	r23, r19
    27e6:	84 07       	cpc	r24, r20
    27e8:	ba 07       	cpc	r27, r26
    27ea:	20 f0       	brcs	.+8      	; 0x27f4 <__divsf3_pse+0xaa>
    27ec:	62 1b       	sub	r22, r18
    27ee:	73 0b       	sbc	r23, r19
    27f0:	84 0b       	sbc	r24, r20
    27f2:	ba 0b       	sbc	r27, r26
    27f4:	ee 1f       	adc	r30, r30
    27f6:	88 f7       	brcc	.-30     	; 0x27da <__divsf3_pse+0x90>
    27f8:	e0 95       	com	r30
    27fa:	08 95       	ret

000027fc <__fixsfsi>:
    27fc:	04 d0       	rcall	.+8      	; 0x2806 <__fixunssfsi>
    27fe:	68 94       	set
    2800:	b1 11       	cpse	r27, r1
    2802:	b5 c0       	rjmp	.+362    	; 0x296e <__fp_szero>
    2804:	08 95       	ret

00002806 <__fixunssfsi>:
    2806:	98 d0       	rcall	.+304    	; 0x2938 <__fp_splitA>
    2808:	88 f0       	brcs	.+34     	; 0x282c <__fixunssfsi+0x26>
    280a:	9f 57       	subi	r25, 0x7F	; 127
    280c:	90 f0       	brcs	.+36     	; 0x2832 <__fixunssfsi+0x2c>
    280e:	b9 2f       	mov	r27, r25
    2810:	99 27       	eor	r25, r25
    2812:	b7 51       	subi	r27, 0x17	; 23
    2814:	a0 f0       	brcs	.+40     	; 0x283e <__fixunssfsi+0x38>
    2816:	d1 f0       	breq	.+52     	; 0x284c <__fixunssfsi+0x46>
    2818:	66 0f       	add	r22, r22
    281a:	77 1f       	adc	r23, r23
    281c:	88 1f       	adc	r24, r24
    281e:	99 1f       	adc	r25, r25
    2820:	1a f0       	brmi	.+6      	; 0x2828 <__fixunssfsi+0x22>
    2822:	ba 95       	dec	r27
    2824:	c9 f7       	brne	.-14     	; 0x2818 <__fixunssfsi+0x12>
    2826:	12 c0       	rjmp	.+36     	; 0x284c <__fixunssfsi+0x46>
    2828:	b1 30       	cpi	r27, 0x01	; 1
    282a:	81 f0       	breq	.+32     	; 0x284c <__fixunssfsi+0x46>
    282c:	9f d0       	rcall	.+318    	; 0x296c <__fp_zero>
    282e:	b1 e0       	ldi	r27, 0x01	; 1
    2830:	08 95       	ret
    2832:	9c c0       	rjmp	.+312    	; 0x296c <__fp_zero>
    2834:	67 2f       	mov	r22, r23
    2836:	78 2f       	mov	r23, r24
    2838:	88 27       	eor	r24, r24
    283a:	b8 5f       	subi	r27, 0xF8	; 248
    283c:	39 f0       	breq	.+14     	; 0x284c <__fixunssfsi+0x46>
    283e:	b9 3f       	cpi	r27, 0xF9	; 249
    2840:	cc f3       	brlt	.-14     	; 0x2834 <__fixunssfsi+0x2e>
    2842:	86 95       	lsr	r24
    2844:	77 95       	ror	r23
    2846:	67 95       	ror	r22
    2848:	b3 95       	inc	r27
    284a:	d9 f7       	brne	.-10     	; 0x2842 <__fixunssfsi+0x3c>
    284c:	3e f4       	brtc	.+14     	; 0x285c <__fixunssfsi+0x56>
    284e:	90 95       	com	r25
    2850:	80 95       	com	r24
    2852:	70 95       	com	r23
    2854:	61 95       	neg	r22
    2856:	7f 4f       	sbci	r23, 0xFF	; 255
    2858:	8f 4f       	sbci	r24, 0xFF	; 255
    285a:	9f 4f       	sbci	r25, 0xFF	; 255
    285c:	08 95       	ret

0000285e <__floatunsisf>:
    285e:	e8 94       	clt
    2860:	09 c0       	rjmp	.+18     	; 0x2874 <__floatsisf+0x12>

00002862 <__floatsisf>:
    2862:	97 fb       	bst	r25, 7
    2864:	3e f4       	brtc	.+14     	; 0x2874 <__floatsisf+0x12>
    2866:	90 95       	com	r25
    2868:	80 95       	com	r24
    286a:	70 95       	com	r23
    286c:	61 95       	neg	r22
    286e:	7f 4f       	sbci	r23, 0xFF	; 255
    2870:	8f 4f       	sbci	r24, 0xFF	; 255
    2872:	9f 4f       	sbci	r25, 0xFF	; 255
    2874:	99 23       	and	r25, r25
    2876:	a9 f0       	breq	.+42     	; 0x28a2 <__floatsisf+0x40>
    2878:	f9 2f       	mov	r31, r25
    287a:	96 e9       	ldi	r25, 0x96	; 150
    287c:	bb 27       	eor	r27, r27
    287e:	93 95       	inc	r25
    2880:	f6 95       	lsr	r31
    2882:	87 95       	ror	r24
    2884:	77 95       	ror	r23
    2886:	67 95       	ror	r22
    2888:	b7 95       	ror	r27
    288a:	f1 11       	cpse	r31, r1
    288c:	f8 cf       	rjmp	.-16     	; 0x287e <__floatsisf+0x1c>
    288e:	fa f4       	brpl	.+62     	; 0x28ce <__floatsisf+0x6c>
    2890:	bb 0f       	add	r27, r27
    2892:	11 f4       	brne	.+4      	; 0x2898 <__floatsisf+0x36>
    2894:	60 ff       	sbrs	r22, 0
    2896:	1b c0       	rjmp	.+54     	; 0x28ce <__floatsisf+0x6c>
    2898:	6f 5f       	subi	r22, 0xFF	; 255
    289a:	7f 4f       	sbci	r23, 0xFF	; 255
    289c:	8f 4f       	sbci	r24, 0xFF	; 255
    289e:	9f 4f       	sbci	r25, 0xFF	; 255
    28a0:	16 c0       	rjmp	.+44     	; 0x28ce <__floatsisf+0x6c>
    28a2:	88 23       	and	r24, r24
    28a4:	11 f0       	breq	.+4      	; 0x28aa <__floatsisf+0x48>
    28a6:	96 e9       	ldi	r25, 0x96	; 150
    28a8:	11 c0       	rjmp	.+34     	; 0x28cc <__floatsisf+0x6a>
    28aa:	77 23       	and	r23, r23
    28ac:	21 f0       	breq	.+8      	; 0x28b6 <__floatsisf+0x54>
    28ae:	9e e8       	ldi	r25, 0x8E	; 142
    28b0:	87 2f       	mov	r24, r23
    28b2:	76 2f       	mov	r23, r22
    28b4:	05 c0       	rjmp	.+10     	; 0x28c0 <__floatsisf+0x5e>
    28b6:	66 23       	and	r22, r22
    28b8:	71 f0       	breq	.+28     	; 0x28d6 <__floatsisf+0x74>
    28ba:	96 e8       	ldi	r25, 0x86	; 134
    28bc:	86 2f       	mov	r24, r22
    28be:	70 e0       	ldi	r23, 0x00	; 0
    28c0:	60 e0       	ldi	r22, 0x00	; 0
    28c2:	2a f0       	brmi	.+10     	; 0x28ce <__floatsisf+0x6c>
    28c4:	9a 95       	dec	r25
    28c6:	66 0f       	add	r22, r22
    28c8:	77 1f       	adc	r23, r23
    28ca:	88 1f       	adc	r24, r24
    28cc:	da f7       	brpl	.-10     	; 0x28c4 <__floatsisf+0x62>
    28ce:	88 0f       	add	r24, r24
    28d0:	96 95       	lsr	r25
    28d2:	87 95       	ror	r24
    28d4:	97 f9       	bld	r25, 7
    28d6:	08 95       	ret

000028d8 <__fp_inf>:
    28d8:	97 f9       	bld	r25, 7
    28da:	9f 67       	ori	r25, 0x7F	; 127
    28dc:	80 e8       	ldi	r24, 0x80	; 128
    28de:	70 e0       	ldi	r23, 0x00	; 0
    28e0:	60 e0       	ldi	r22, 0x00	; 0
    28e2:	08 95       	ret

000028e4 <__fp_nan>:
    28e4:	9f ef       	ldi	r25, 0xFF	; 255
    28e6:	80 ec       	ldi	r24, 0xC0	; 192
    28e8:	08 95       	ret

000028ea <__fp_pscA>:
    28ea:	00 24       	eor	r0, r0
    28ec:	0a 94       	dec	r0
    28ee:	16 16       	cp	r1, r22
    28f0:	17 06       	cpc	r1, r23
    28f2:	18 06       	cpc	r1, r24
    28f4:	09 06       	cpc	r0, r25
    28f6:	08 95       	ret

000028f8 <__fp_pscB>:
    28f8:	00 24       	eor	r0, r0
    28fa:	0a 94       	dec	r0
    28fc:	12 16       	cp	r1, r18
    28fe:	13 06       	cpc	r1, r19
    2900:	14 06       	cpc	r1, r20
    2902:	05 06       	cpc	r0, r21
    2904:	08 95       	ret

00002906 <__fp_round>:
    2906:	09 2e       	mov	r0, r25
    2908:	03 94       	inc	r0
    290a:	00 0c       	add	r0, r0
    290c:	11 f4       	brne	.+4      	; 0x2912 <__fp_round+0xc>
    290e:	88 23       	and	r24, r24
    2910:	52 f0       	brmi	.+20     	; 0x2926 <__fp_round+0x20>
    2912:	bb 0f       	add	r27, r27
    2914:	40 f4       	brcc	.+16     	; 0x2926 <__fp_round+0x20>
    2916:	bf 2b       	or	r27, r31
    2918:	11 f4       	brne	.+4      	; 0x291e <__fp_round+0x18>
    291a:	60 ff       	sbrs	r22, 0
    291c:	04 c0       	rjmp	.+8      	; 0x2926 <__fp_round+0x20>
    291e:	6f 5f       	subi	r22, 0xFF	; 255
    2920:	7f 4f       	sbci	r23, 0xFF	; 255
    2922:	8f 4f       	sbci	r24, 0xFF	; 255
    2924:	9f 4f       	sbci	r25, 0xFF	; 255
    2926:	08 95       	ret

00002928 <__fp_split3>:
    2928:	57 fd       	sbrc	r21, 7
    292a:	90 58       	subi	r25, 0x80	; 128
    292c:	44 0f       	add	r20, r20
    292e:	55 1f       	adc	r21, r21
    2930:	59 f0       	breq	.+22     	; 0x2948 <__fp_splitA+0x10>
    2932:	5f 3f       	cpi	r21, 0xFF	; 255
    2934:	71 f0       	breq	.+28     	; 0x2952 <__fp_splitA+0x1a>
    2936:	47 95       	ror	r20

00002938 <__fp_splitA>:
    2938:	88 0f       	add	r24, r24
    293a:	97 fb       	bst	r25, 7
    293c:	99 1f       	adc	r25, r25
    293e:	61 f0       	breq	.+24     	; 0x2958 <__fp_splitA+0x20>
    2940:	9f 3f       	cpi	r25, 0xFF	; 255
    2942:	79 f0       	breq	.+30     	; 0x2962 <__fp_splitA+0x2a>
    2944:	87 95       	ror	r24
    2946:	08 95       	ret
    2948:	12 16       	cp	r1, r18
    294a:	13 06       	cpc	r1, r19
    294c:	14 06       	cpc	r1, r20
    294e:	55 1f       	adc	r21, r21
    2950:	f2 cf       	rjmp	.-28     	; 0x2936 <__fp_split3+0xe>
    2952:	46 95       	lsr	r20
    2954:	f1 df       	rcall	.-30     	; 0x2938 <__fp_splitA>
    2956:	08 c0       	rjmp	.+16     	; 0x2968 <__fp_splitA+0x30>
    2958:	16 16       	cp	r1, r22
    295a:	17 06       	cpc	r1, r23
    295c:	18 06       	cpc	r1, r24
    295e:	99 1f       	adc	r25, r25
    2960:	f1 cf       	rjmp	.-30     	; 0x2944 <__fp_splitA+0xc>
    2962:	86 95       	lsr	r24
    2964:	71 05       	cpc	r23, r1
    2966:	61 05       	cpc	r22, r1
    2968:	08 94       	sec
    296a:	08 95       	ret

0000296c <__fp_zero>:
    296c:	e8 94       	clt

0000296e <__fp_szero>:
    296e:	bb 27       	eor	r27, r27
    2970:	66 27       	eor	r22, r22
    2972:	77 27       	eor	r23, r23
    2974:	cb 01       	movw	r24, r22
    2976:	97 f9       	bld	r25, 7
    2978:	08 95       	ret

0000297a <__mulsf3>:
    297a:	0b d0       	rcall	.+22     	; 0x2992 <__mulsf3x>
    297c:	c4 cf       	rjmp	.-120    	; 0x2906 <__fp_round>
    297e:	b5 df       	rcall	.-150    	; 0x28ea <__fp_pscA>
    2980:	28 f0       	brcs	.+10     	; 0x298c <__mulsf3+0x12>
    2982:	ba df       	rcall	.-140    	; 0x28f8 <__fp_pscB>
    2984:	18 f0       	brcs	.+6      	; 0x298c <__mulsf3+0x12>
    2986:	95 23       	and	r25, r21
    2988:	09 f0       	breq	.+2      	; 0x298c <__mulsf3+0x12>
    298a:	a6 cf       	rjmp	.-180    	; 0x28d8 <__fp_inf>
    298c:	ab cf       	rjmp	.-170    	; 0x28e4 <__fp_nan>
    298e:	11 24       	eor	r1, r1
    2990:	ee cf       	rjmp	.-36     	; 0x296e <__fp_szero>

00002992 <__mulsf3x>:
    2992:	ca df       	rcall	.-108    	; 0x2928 <__fp_split3>
    2994:	a0 f3       	brcs	.-24     	; 0x297e <__mulsf3+0x4>

00002996 <__mulsf3_pse>:
    2996:	95 9f       	mul	r25, r21
    2998:	d1 f3       	breq	.-12     	; 0x298e <__mulsf3+0x14>
    299a:	95 0f       	add	r25, r21
    299c:	50 e0       	ldi	r21, 0x00	; 0
    299e:	55 1f       	adc	r21, r21
    29a0:	62 9f       	mul	r22, r18
    29a2:	f0 01       	movw	r30, r0
    29a4:	72 9f       	mul	r23, r18
    29a6:	bb 27       	eor	r27, r27
    29a8:	f0 0d       	add	r31, r0
    29aa:	b1 1d       	adc	r27, r1
    29ac:	63 9f       	mul	r22, r19
    29ae:	aa 27       	eor	r26, r26
    29b0:	f0 0d       	add	r31, r0
    29b2:	b1 1d       	adc	r27, r1
    29b4:	aa 1f       	adc	r26, r26
    29b6:	64 9f       	mul	r22, r20
    29b8:	66 27       	eor	r22, r22
    29ba:	b0 0d       	add	r27, r0
    29bc:	a1 1d       	adc	r26, r1
    29be:	66 1f       	adc	r22, r22
    29c0:	82 9f       	mul	r24, r18
    29c2:	22 27       	eor	r18, r18
    29c4:	b0 0d       	add	r27, r0
    29c6:	a1 1d       	adc	r26, r1
    29c8:	62 1f       	adc	r22, r18
    29ca:	73 9f       	mul	r23, r19
    29cc:	b0 0d       	add	r27, r0
    29ce:	a1 1d       	adc	r26, r1
    29d0:	62 1f       	adc	r22, r18
    29d2:	83 9f       	mul	r24, r19
    29d4:	a0 0d       	add	r26, r0
    29d6:	61 1d       	adc	r22, r1
    29d8:	22 1f       	adc	r18, r18
    29da:	74 9f       	mul	r23, r20
    29dc:	33 27       	eor	r19, r19
    29de:	a0 0d       	add	r26, r0
    29e0:	61 1d       	adc	r22, r1
    29e2:	23 1f       	adc	r18, r19
    29e4:	84 9f       	mul	r24, r20
    29e6:	60 0d       	add	r22, r0
    29e8:	21 1d       	adc	r18, r1
    29ea:	82 2f       	mov	r24, r18
    29ec:	76 2f       	mov	r23, r22
    29ee:	6a 2f       	mov	r22, r26
    29f0:	11 24       	eor	r1, r1
    29f2:	9f 57       	subi	r25, 0x7F	; 127
    29f4:	50 40       	sbci	r21, 0x00	; 0
    29f6:	8a f0       	brmi	.+34     	; 0x2a1a <__mulsf3_pse+0x84>
    29f8:	e1 f0       	breq	.+56     	; 0x2a32 <__mulsf3_pse+0x9c>
    29fa:	88 23       	and	r24, r24
    29fc:	4a f0       	brmi	.+18     	; 0x2a10 <__mulsf3_pse+0x7a>
    29fe:	ee 0f       	add	r30, r30
    2a00:	ff 1f       	adc	r31, r31
    2a02:	bb 1f       	adc	r27, r27
    2a04:	66 1f       	adc	r22, r22
    2a06:	77 1f       	adc	r23, r23
    2a08:	88 1f       	adc	r24, r24
    2a0a:	91 50       	subi	r25, 0x01	; 1
    2a0c:	50 40       	sbci	r21, 0x00	; 0
    2a0e:	a9 f7       	brne	.-22     	; 0x29fa <__mulsf3_pse+0x64>
    2a10:	9e 3f       	cpi	r25, 0xFE	; 254
    2a12:	51 05       	cpc	r21, r1
    2a14:	70 f0       	brcs	.+28     	; 0x2a32 <__mulsf3_pse+0x9c>
    2a16:	60 cf       	rjmp	.-320    	; 0x28d8 <__fp_inf>
    2a18:	aa cf       	rjmp	.-172    	; 0x296e <__fp_szero>
    2a1a:	5f 3f       	cpi	r21, 0xFF	; 255
    2a1c:	ec f3       	brlt	.-6      	; 0x2a18 <__mulsf3_pse+0x82>
    2a1e:	98 3e       	cpi	r25, 0xE8	; 232
    2a20:	dc f3       	brlt	.-10     	; 0x2a18 <__mulsf3_pse+0x82>
    2a22:	86 95       	lsr	r24
    2a24:	77 95       	ror	r23
    2a26:	67 95       	ror	r22
    2a28:	b7 95       	ror	r27
    2a2a:	f7 95       	ror	r31
    2a2c:	e7 95       	ror	r30
    2a2e:	9f 5f       	subi	r25, 0xFF	; 255
    2a30:	c1 f7       	brne	.-16     	; 0x2a22 <__mulsf3_pse+0x8c>
    2a32:	fe 2b       	or	r31, r30
    2a34:	88 0f       	add	r24, r24
    2a36:	91 1d       	adc	r25, r1
    2a38:	96 95       	lsr	r25
    2a3a:	87 95       	ror	r24
    2a3c:	97 f9       	bld	r25, 7
    2a3e:	08 95       	ret

00002a40 <__mulsi3>:
    2a40:	62 9f       	mul	r22, r18
    2a42:	d0 01       	movw	r26, r0
    2a44:	73 9f       	mul	r23, r19
    2a46:	f0 01       	movw	r30, r0
    2a48:	82 9f       	mul	r24, r18
    2a4a:	e0 0d       	add	r30, r0
    2a4c:	f1 1d       	adc	r31, r1
    2a4e:	64 9f       	mul	r22, r20
    2a50:	e0 0d       	add	r30, r0
    2a52:	f1 1d       	adc	r31, r1
    2a54:	92 9f       	mul	r25, r18
    2a56:	f0 0d       	add	r31, r0
    2a58:	83 9f       	mul	r24, r19
    2a5a:	f0 0d       	add	r31, r0
    2a5c:	74 9f       	mul	r23, r20
    2a5e:	f0 0d       	add	r31, r0
    2a60:	65 9f       	mul	r22, r21
    2a62:	f0 0d       	add	r31, r0
    2a64:	99 27       	eor	r25, r25
    2a66:	72 9f       	mul	r23, r18
    2a68:	b0 0d       	add	r27, r0
    2a6a:	e1 1d       	adc	r30, r1
    2a6c:	f9 1f       	adc	r31, r25
    2a6e:	63 9f       	mul	r22, r19
    2a70:	b0 0d       	add	r27, r0
    2a72:	e1 1d       	adc	r30, r1
    2a74:	f9 1f       	adc	r31, r25
    2a76:	bd 01       	movw	r22, r26
    2a78:	cf 01       	movw	r24, r30
    2a7a:	11 24       	eor	r1, r1
    2a7c:	08 95       	ret

00002a7e <__divmodhi4>:
    2a7e:	97 fb       	bst	r25, 7
    2a80:	09 2e       	mov	r0, r25
    2a82:	07 26       	eor	r0, r23
    2a84:	0a d0       	rcall	.+20     	; 0x2a9a <__divmodhi4_neg1>
    2a86:	77 fd       	sbrc	r23, 7
    2a88:	04 d0       	rcall	.+8      	; 0x2a92 <__divmodhi4_neg2>
    2a8a:	27 d0       	rcall	.+78     	; 0x2ada <__udivmodhi4>
    2a8c:	06 d0       	rcall	.+12     	; 0x2a9a <__divmodhi4_neg1>
    2a8e:	00 20       	and	r0, r0
    2a90:	1a f4       	brpl	.+6      	; 0x2a98 <__divmodhi4_exit>

00002a92 <__divmodhi4_neg2>:
    2a92:	70 95       	com	r23
    2a94:	61 95       	neg	r22
    2a96:	7f 4f       	sbci	r23, 0xFF	; 255

00002a98 <__divmodhi4_exit>:
    2a98:	08 95       	ret

00002a9a <__divmodhi4_neg1>:
    2a9a:	f6 f7       	brtc	.-4      	; 0x2a98 <__divmodhi4_exit>
    2a9c:	90 95       	com	r25
    2a9e:	81 95       	neg	r24
    2aa0:	9f 4f       	sbci	r25, 0xFF	; 255
    2aa2:	08 95       	ret

00002aa4 <__divmodsi4>:
    2aa4:	97 fb       	bst	r25, 7
    2aa6:	09 2e       	mov	r0, r25
    2aa8:	05 26       	eor	r0, r21
    2aaa:	0e d0       	rcall	.+28     	; 0x2ac8 <__divmodsi4_neg1>
    2aac:	57 fd       	sbrc	r21, 7
    2aae:	04 d0       	rcall	.+8      	; 0x2ab8 <__divmodsi4_neg2>
    2ab0:	28 d0       	rcall	.+80     	; 0x2b02 <__udivmodsi4>
    2ab2:	0a d0       	rcall	.+20     	; 0x2ac8 <__divmodsi4_neg1>
    2ab4:	00 1c       	adc	r0, r0
    2ab6:	38 f4       	brcc	.+14     	; 0x2ac6 <__divmodsi4_exit>

00002ab8 <__divmodsi4_neg2>:
    2ab8:	50 95       	com	r21
    2aba:	40 95       	com	r20
    2abc:	30 95       	com	r19
    2abe:	21 95       	neg	r18
    2ac0:	3f 4f       	sbci	r19, 0xFF	; 255
    2ac2:	4f 4f       	sbci	r20, 0xFF	; 255
    2ac4:	5f 4f       	sbci	r21, 0xFF	; 255

00002ac6 <__divmodsi4_exit>:
    2ac6:	08 95       	ret

00002ac8 <__divmodsi4_neg1>:
    2ac8:	f6 f7       	brtc	.-4      	; 0x2ac6 <__divmodsi4_exit>
    2aca:	90 95       	com	r25
    2acc:	80 95       	com	r24
    2ace:	70 95       	com	r23
    2ad0:	61 95       	neg	r22
    2ad2:	7f 4f       	sbci	r23, 0xFF	; 255
    2ad4:	8f 4f       	sbci	r24, 0xFF	; 255
    2ad6:	9f 4f       	sbci	r25, 0xFF	; 255
    2ad8:	08 95       	ret

00002ada <__udivmodhi4>:
    2ada:	aa 1b       	sub	r26, r26
    2adc:	bb 1b       	sub	r27, r27
    2ade:	51 e1       	ldi	r21, 0x11	; 17
    2ae0:	07 c0       	rjmp	.+14     	; 0x2af0 <__udivmodhi4_ep>

00002ae2 <__udivmodhi4_loop>:
    2ae2:	aa 1f       	adc	r26, r26
    2ae4:	bb 1f       	adc	r27, r27
    2ae6:	a6 17       	cp	r26, r22
    2ae8:	b7 07       	cpc	r27, r23
    2aea:	10 f0       	brcs	.+4      	; 0x2af0 <__udivmodhi4_ep>
    2aec:	a6 1b       	sub	r26, r22
    2aee:	b7 0b       	sbc	r27, r23

00002af0 <__udivmodhi4_ep>:
    2af0:	88 1f       	adc	r24, r24
    2af2:	99 1f       	adc	r25, r25
    2af4:	5a 95       	dec	r21
    2af6:	a9 f7       	brne	.-22     	; 0x2ae2 <__udivmodhi4_loop>
    2af8:	80 95       	com	r24
    2afa:	90 95       	com	r25
    2afc:	bc 01       	movw	r22, r24
    2afe:	cd 01       	movw	r24, r26
    2b00:	08 95       	ret

00002b02 <__udivmodsi4>:
    2b02:	a1 e2       	ldi	r26, 0x21	; 33
    2b04:	1a 2e       	mov	r1, r26
    2b06:	aa 1b       	sub	r26, r26
    2b08:	bb 1b       	sub	r27, r27
    2b0a:	fd 01       	movw	r30, r26
    2b0c:	0d c0       	rjmp	.+26     	; 0x2b28 <__udivmodsi4_ep>

00002b0e <__udivmodsi4_loop>:
    2b0e:	aa 1f       	adc	r26, r26
    2b10:	bb 1f       	adc	r27, r27
    2b12:	ee 1f       	adc	r30, r30
    2b14:	ff 1f       	adc	r31, r31
    2b16:	a2 17       	cp	r26, r18
    2b18:	b3 07       	cpc	r27, r19
    2b1a:	e4 07       	cpc	r30, r20
    2b1c:	f5 07       	cpc	r31, r21
    2b1e:	20 f0       	brcs	.+8      	; 0x2b28 <__udivmodsi4_ep>
    2b20:	a2 1b       	sub	r26, r18
    2b22:	b3 0b       	sbc	r27, r19
    2b24:	e4 0b       	sbc	r30, r20
    2b26:	f5 0b       	sbc	r31, r21

00002b28 <__udivmodsi4_ep>:
    2b28:	66 1f       	adc	r22, r22
    2b2a:	77 1f       	adc	r23, r23
    2b2c:	88 1f       	adc	r24, r24
    2b2e:	99 1f       	adc	r25, r25
    2b30:	1a 94       	dec	r1
    2b32:	69 f7       	brne	.-38     	; 0x2b0e <__udivmodsi4_loop>
    2b34:	60 95       	com	r22
    2b36:	70 95       	com	r23
    2b38:	80 95       	com	r24
    2b3a:	90 95       	com	r25
    2b3c:	9b 01       	movw	r18, r22
    2b3e:	ac 01       	movw	r20, r24
    2b40:	bd 01       	movw	r22, r26
    2b42:	cf 01       	movw	r24, r30
    2b44:	08 95       	ret

00002b46 <__tablejump_elpm__>:
    2b46:	07 90       	elpm	r0, Z+
    2b48:	f6 91       	elpm	r31, Z+
    2b4a:	e0 2d       	mov	r30, r0
    2b4c:	19 94       	eijmp

00002b4e <_exit>:
    2b4e:	f8 94       	cli

00002b50 <__stop_program>:
    2b50:	ff cf       	rjmp	.-2      	; 0x2b50 <__stop_program>
