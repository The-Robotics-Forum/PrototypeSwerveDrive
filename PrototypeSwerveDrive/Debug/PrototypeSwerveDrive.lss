
PrototypeSwerveDrive.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b4  00800200  00002a04  00002a98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002a04  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  008002b4  008002b4  00002b4c  2**0
                  ALLOC
  3 .stab         00002460  00000000  00000000  00002b4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000008a6  00000000  00000000  00004fac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  00005852  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001fd  00000000  00000000  00005872  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000008c8  00000000  00000000  00005a6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000002ca  00000000  00000000  00006337  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000174a  00000000  00000000  00006601  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000200  00000000  00000000  00007d4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000004ad  00000000  00000000  00007f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000010ad  00000000  00000000  000083f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000038  00000000  00000000  000094a6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 78 0a 	jmp	0x14f0	; 0x14f0 <__vector_1>
       8:	0c 94 a3 0a 	jmp	0x1546	; 0x1546 <__vector_2>
       c:	0c 94 ce 0a 	jmp	0x159c	; 0x159c <__vector_3>
      10:	0c 94 f9 0a 	jmp	0x15f2	; 0x15f2 <__vector_4>
      14:	0c 94 24 0b 	jmp	0x1648	; 0x1648 <__vector_5>
      18:	0c 94 4f 0b 	jmp	0x169e	; 0x169e <__vector_6>
      1c:	0c 94 7a 0b 	jmp	0x16f4	; 0x16f4 <__vector_7>
      20:	0c 94 a5 0b 	jmp	0x174a	; 0x174a <__vector_8>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 31 08 	jmp	0x1062	; 0x1062 <__vector_23>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e4 e0       	ldi	r30, 0x04	; 4
      fc:	fa e2       	ldi	r31, 0x2A	; 42
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a4 3b       	cpi	r26, 0xB4	; 180
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	12 e0       	ldi	r17, 0x02	; 2
     110:	a4 eb       	ldi	r26, 0xB4	; 180
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	aa 3b       	cpi	r26, 0xBA	; 186
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 b9 12 	call	0x2572	; 0x2572 <main>
     122:	0c 94 00 15 	jmp	0x2a00	; 0x2a00 <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <_Z7pinModehh>:
//Functions:

void pinMode(uint8_t pInno,uint8_t mOde)
{
	int l;
  	if(mOde==0)
     12a:	66 23       	and	r22, r22
     12c:	09 f0       	breq	.+2      	; 0x130 <_Z7pinModehh+0x6>
     12e:	b8 c0       	rjmp	.+368    	; 0x2a0 <_Z7pinModehh+0x176>
    { 
    	switch(d[pInno]){
     130:	90 e0       	ldi	r25, 0x00	; 0
     132:	fc 01       	movw	r30, r24
     134:	e8 58       	subi	r30, 0x88	; 136
     136:	fd 4f       	sbci	r31, 0xFD	; 253
     138:	20 81       	ld	r18, Z
     13a:	25 36       	cpi	r18, 0x65	; 101
     13c:	09 f4       	brne	.+2      	; 0x140 <_Z7pinModehh+0x16>
     13e:	50 c0       	rjmp	.+160    	; 0x1e0 <_Z7pinModehh+0xb6>
     140:	26 36       	cpi	r18, 0x66	; 102
     142:	40 f4       	brcc	.+16     	; 0x154 <_Z7pinModehh+0x2a>
     144:	23 36       	cpi	r18, 0x63	; 99
     146:	41 f1       	breq	.+80     	; 0x198 <_Z7pinModehh+0x6e>
     148:	24 36       	cpi	r18, 0x64	; 100
     14a:	c0 f5       	brcc	.+112    	; 0x1bc <_Z7pinModehh+0x92>
     14c:	22 36       	cpi	r18, 0x62	; 98
     14e:	09 f0       	breq	.+2      	; 0x152 <_Z7pinModehh+0x28>
     150:	5e c1       	rjmp	.+700    	; 0x40e <_Z7pinModehh+0x2e4>
     152:	10 c0       	rjmp	.+32     	; 0x174 <_Z7pinModehh+0x4a>
     154:	28 36       	cpi	r18, 0x68	; 104
     156:	09 f4       	brne	.+2      	; 0x15a <_Z7pinModehh+0x30>
     158:	67 c0       	rjmp	.+206    	; 0x228 <_Z7pinModehh+0xfe>
     15a:	29 36       	cpi	r18, 0x69	; 105
     15c:	20 f4       	brcc	.+8      	; 0x166 <_Z7pinModehh+0x3c>
     15e:	27 36       	cpi	r18, 0x67	; 103
     160:	09 f0       	breq	.+2      	; 0x164 <_Z7pinModehh+0x3a>
     162:	55 c1       	rjmp	.+682    	; 0x40e <_Z7pinModehh+0x2e4>
     164:	4f c0       	rjmp	.+158    	; 0x204 <_Z7pinModehh+0xda>
     166:	2a 36       	cpi	r18, 0x6A	; 106
     168:	09 f4       	brne	.+2      	; 0x16c <_Z7pinModehh+0x42>
     16a:	72 c0       	rjmp	.+228    	; 0x250 <_Z7pinModehh+0x126>
     16c:	2c 36       	cpi	r18, 0x6C	; 108
     16e:	09 f0       	breq	.+2      	; 0x172 <_Z7pinModehh+0x48>
     170:	4e c1       	rjmp	.+668    	; 0x40e <_Z7pinModehh+0x2e4>
     172:	82 c0       	rjmp	.+260    	; 0x278 <_Z7pinModehh+0x14e>
 
          	case'b':
                  DDRB&=~(1<<c[pInno]);
     174:	24 b1       	in	r18, 0x04	; 4
     176:	fc 01       	movw	r30, r24
     178:	ee 0f       	add	r30, r30
     17a:	ff 1f       	adc	r31, r31
     17c:	e0 50       	subi	r30, 0x00	; 0
     17e:	fe 4f       	sbci	r31, 0xFE	; 254
     180:	81 e0       	ldi	r24, 0x01	; 1
     182:	90 e0       	ldi	r25, 0x00	; 0
     184:	00 80       	ld	r0, Z
     186:	02 c0       	rjmp	.+4      	; 0x18c <_Z7pinModehh+0x62>
     188:	88 0f       	add	r24, r24
     18a:	99 1f       	adc	r25, r25
     18c:	0a 94       	dec	r0
     18e:	e2 f7       	brpl	.-8      	; 0x188 <_Z7pinModehh+0x5e>
     190:	80 95       	com	r24
     192:	82 23       	and	r24, r18
     194:	84 b9       	out	0x04, r24	; 4
		           break;
     196:	08 95       	ret
          	case'c':
                 DDRC&=~(1<<c[pInno]);
     198:	27 b1       	in	r18, 0x07	; 7
     19a:	fc 01       	movw	r30, r24
     19c:	ee 0f       	add	r30, r30
     19e:	ff 1f       	adc	r31, r31
     1a0:	e0 50       	subi	r30, 0x00	; 0
     1a2:	fe 4f       	sbci	r31, 0xFE	; 254
     1a4:	81 e0       	ldi	r24, 0x01	; 1
     1a6:	90 e0       	ldi	r25, 0x00	; 0
     1a8:	00 80       	ld	r0, Z
     1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <_Z7pinModehh+0x86>
     1ac:	88 0f       	add	r24, r24
     1ae:	99 1f       	adc	r25, r25
     1b0:	0a 94       	dec	r0
     1b2:	e2 f7       	brpl	.-8      	; 0x1ac <_Z7pinModehh+0x82>
     1b4:	80 95       	com	r24
     1b6:	82 23       	and	r24, r18
     1b8:	87 b9       	out	0x07, r24	; 7
		          break;
     1ba:	08 95       	ret
          	case'd':
                 DDRD&=~(1<<c[pInno]);
     1bc:	2a b1       	in	r18, 0x0a	; 10
     1be:	fc 01       	movw	r30, r24
     1c0:	ee 0f       	add	r30, r30
     1c2:	ff 1f       	adc	r31, r31
     1c4:	e0 50       	subi	r30, 0x00	; 0
     1c6:	fe 4f       	sbci	r31, 0xFE	; 254
     1c8:	81 e0       	ldi	r24, 0x01	; 1
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	00 80       	ld	r0, Z
     1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <_Z7pinModehh+0xaa>
     1d0:	88 0f       	add	r24, r24
     1d2:	99 1f       	adc	r25, r25
     1d4:	0a 94       	dec	r0
     1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <_Z7pinModehh+0xa6>
     1d8:	80 95       	com	r24
     1da:	82 23       	and	r24, r18
     1dc:	8a b9       	out	0x0a, r24	; 10
		          break;
     1de:	08 95       	ret
	      	case'e':
                  DDRE&=~(1<<c[pInno]);
     1e0:	2d b1       	in	r18, 0x0d	; 13
     1e2:	fc 01       	movw	r30, r24
     1e4:	ee 0f       	add	r30, r30
     1e6:	ff 1f       	adc	r31, r31
     1e8:	e0 50       	subi	r30, 0x00	; 0
     1ea:	fe 4f       	sbci	r31, 0xFE	; 254
     1ec:	81 e0       	ldi	r24, 0x01	; 1
     1ee:	90 e0       	ldi	r25, 0x00	; 0
     1f0:	00 80       	ld	r0, Z
     1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <_Z7pinModehh+0xce>
     1f4:	88 0f       	add	r24, r24
     1f6:	99 1f       	adc	r25, r25
     1f8:	0a 94       	dec	r0
     1fa:	e2 f7       	brpl	.-8      	; 0x1f4 <_Z7pinModehh+0xca>
     1fc:	80 95       	com	r24
     1fe:	82 23       	and	r24, r18
     200:	8d b9       	out	0x0d, r24	; 13
		           break;
     202:	08 95       	ret
		    case'g':
                  DDRG&=~(1<<c[pInno]);
     204:	23 b3       	in	r18, 0x13	; 19
     206:	fc 01       	movw	r30, r24
     208:	ee 0f       	add	r30, r30
     20a:	ff 1f       	adc	r31, r31
     20c:	e0 50       	subi	r30, 0x00	; 0
     20e:	fe 4f       	sbci	r31, 0xFE	; 254
     210:	81 e0       	ldi	r24, 0x01	; 1
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	00 80       	ld	r0, Z
     216:	02 c0       	rjmp	.+4      	; 0x21c <_Z7pinModehh+0xf2>
     218:	88 0f       	add	r24, r24
     21a:	99 1f       	adc	r25, r25
     21c:	0a 94       	dec	r0
     21e:	e2 f7       	brpl	.-8      	; 0x218 <_Z7pinModehh+0xee>
     220:	80 95       	com	r24
     222:	82 23       	and	r24, r18
     224:	83 bb       	out	0x13, r24	; 19
		           break;
     226:	08 95       	ret
			case'h':
                  DDRH&=~(1<<c[pInno]);
     228:	e1 e0       	ldi	r30, 0x01	; 1
     22a:	f1 e0       	ldi	r31, 0x01	; 1
     22c:	20 81       	ld	r18, Z
     22e:	dc 01       	movw	r26, r24
     230:	aa 0f       	add	r26, r26
     232:	bb 1f       	adc	r27, r27
     234:	a0 50       	subi	r26, 0x00	; 0
     236:	be 4f       	sbci	r27, 0xFE	; 254
     238:	81 e0       	ldi	r24, 0x01	; 1
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	0c 90       	ld	r0, X
     23e:	02 c0       	rjmp	.+4      	; 0x244 <_Z7pinModehh+0x11a>
     240:	88 0f       	add	r24, r24
     242:	99 1f       	adc	r25, r25
     244:	0a 94       	dec	r0
     246:	e2 f7       	brpl	.-8      	; 0x240 <_Z7pinModehh+0x116>
     248:	80 95       	com	r24
     24a:	82 23       	and	r24, r18
     24c:	80 83       	st	Z, r24
				  break;
     24e:	08 95       	ret
		    case'j':
                  DDRJ&=~(1<<c[pInno]);
     250:	e4 e0       	ldi	r30, 0x04	; 4
     252:	f1 e0       	ldi	r31, 0x01	; 1
     254:	20 81       	ld	r18, Z
     256:	dc 01       	movw	r26, r24
     258:	aa 0f       	add	r26, r26
     25a:	bb 1f       	adc	r27, r27
     25c:	a0 50       	subi	r26, 0x00	; 0
     25e:	be 4f       	sbci	r27, 0xFE	; 254
     260:	81 e0       	ldi	r24, 0x01	; 1
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	0c 90       	ld	r0, X
     266:	02 c0       	rjmp	.+4      	; 0x26c <_Z7pinModehh+0x142>
     268:	88 0f       	add	r24, r24
     26a:	99 1f       	adc	r25, r25
     26c:	0a 94       	dec	r0
     26e:	e2 f7       	brpl	.-8      	; 0x268 <_Z7pinModehh+0x13e>
     270:	80 95       	com	r24
     272:	82 23       	and	r24, r18
     274:	80 83       	st	Z, r24
		          break;
     276:	08 95       	ret
			case'l':
                  DDRL&=~(1<<c[pInno]);
     278:	ea e0       	ldi	r30, 0x0A	; 10
     27a:	f1 e0       	ldi	r31, 0x01	; 1
     27c:	20 81       	ld	r18, Z
     27e:	dc 01       	movw	r26, r24
     280:	aa 0f       	add	r26, r26
     282:	bb 1f       	adc	r27, r27
     284:	a0 50       	subi	r26, 0x00	; 0
     286:	be 4f       	sbci	r27, 0xFE	; 254
     288:	81 e0       	ldi	r24, 0x01	; 1
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	0c 90       	ld	r0, X
     28e:	02 c0       	rjmp	.+4      	; 0x294 <_Z7pinModehh+0x16a>
     290:	88 0f       	add	r24, r24
     292:	99 1f       	adc	r25, r25
     294:	0a 94       	dec	r0
     296:	e2 f7       	brpl	.-8      	; 0x290 <_Z7pinModehh+0x166>
     298:	80 95       	com	r24
     29a:	82 23       	and	r24, r18
     29c:	80 83       	st	Z, r24
		          break;	        		   		   	  	  		 		 			 
     29e:	08 95       	ret
     	}  
	}
	else{          
			switch(d[pInno])
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	fc 01       	movw	r30, r24
     2a4:	e8 58       	subi	r30, 0x88	; 136
     2a6:	fd 4f       	sbci	r31, 0xFD	; 253
     2a8:	20 81       	ld	r18, Z
     2aa:	25 36       	cpi	r18, 0x65	; 101
     2ac:	09 f4       	brne	.+2      	; 0x2b0 <_Z7pinModehh+0x186>
     2ae:	50 c0       	rjmp	.+160    	; 0x350 <_Z7pinModehh+0x226>
     2b0:	26 36       	cpi	r18, 0x66	; 102
     2b2:	40 f4       	brcc	.+16     	; 0x2c4 <_Z7pinModehh+0x19a>
     2b4:	23 36       	cpi	r18, 0x63	; 99
     2b6:	41 f1       	breq	.+80     	; 0x308 <_Z7pinModehh+0x1de>
     2b8:	24 36       	cpi	r18, 0x64	; 100
     2ba:	c0 f5       	brcc	.+112    	; 0x32c <_Z7pinModehh+0x202>
     2bc:	22 36       	cpi	r18, 0x62	; 98
     2be:	09 f0       	breq	.+2      	; 0x2c2 <_Z7pinModehh+0x198>
     2c0:	a6 c0       	rjmp	.+332    	; 0x40e <_Z7pinModehh+0x2e4>
     2c2:	10 c0       	rjmp	.+32     	; 0x2e4 <_Z7pinModehh+0x1ba>
     2c4:	28 36       	cpi	r18, 0x68	; 104
     2c6:	09 f4       	brne	.+2      	; 0x2ca <_Z7pinModehh+0x1a0>
     2c8:	67 c0       	rjmp	.+206    	; 0x398 <_Z7pinModehh+0x26e>
     2ca:	29 36       	cpi	r18, 0x69	; 105
     2cc:	20 f4       	brcc	.+8      	; 0x2d6 <_Z7pinModehh+0x1ac>
     2ce:	27 36       	cpi	r18, 0x67	; 103
     2d0:	09 f0       	breq	.+2      	; 0x2d4 <_Z7pinModehh+0x1aa>
     2d2:	9d c0       	rjmp	.+314    	; 0x40e <_Z7pinModehh+0x2e4>
     2d4:	4f c0       	rjmp	.+158    	; 0x374 <_Z7pinModehh+0x24a>
     2d6:	2a 36       	cpi	r18, 0x6A	; 106
     2d8:	09 f4       	brne	.+2      	; 0x2dc <_Z7pinModehh+0x1b2>
     2da:	72 c0       	rjmp	.+228    	; 0x3c0 <_Z7pinModehh+0x296>
     2dc:	2c 36       	cpi	r18, 0x6C	; 108
     2de:	09 f0       	breq	.+2      	; 0x2e2 <_Z7pinModehh+0x1b8>
     2e0:	96 c0       	rjmp	.+300    	; 0x40e <_Z7pinModehh+0x2e4>
     2e2:	82 c0       	rjmp	.+260    	; 0x3e8 <_Z7pinModehh+0x2be>
         	{
	 
	        	case'b':
	            	DDRB|=(1<<c[pInno]);
     2e4:	44 b1       	in	r20, 0x04	; 4
     2e6:	fc 01       	movw	r30, r24
     2e8:	ee 0f       	add	r30, r30
     2ea:	ff 1f       	adc	r31, r31
     2ec:	e0 50       	subi	r30, 0x00	; 0
     2ee:	fe 4f       	sbci	r31, 0xFE	; 254
     2f0:	21 e0       	ldi	r18, 0x01	; 1
     2f2:	30 e0       	ldi	r19, 0x00	; 0
     2f4:	c9 01       	movw	r24, r18
     2f6:	00 80       	ld	r0, Z
     2f8:	02 c0       	rjmp	.+4      	; 0x2fe <_Z7pinModehh+0x1d4>
     2fa:	88 0f       	add	r24, r24
     2fc:	99 1f       	adc	r25, r25
     2fe:	0a 94       	dec	r0
     300:	e2 f7       	brpl	.-8      	; 0x2fa <_Z7pinModehh+0x1d0>
     302:	84 2b       	or	r24, r20
     304:	84 b9       	out	0x04, r24	; 4
			    	break;
     306:	08 95       	ret
	          	case'c':
	                DDRC|=(1<<c[pInno]);
     308:	47 b1       	in	r20, 0x07	; 7
     30a:	fc 01       	movw	r30, r24
     30c:	ee 0f       	add	r30, r30
     30e:	ff 1f       	adc	r31, r31
     310:	e0 50       	subi	r30, 0x00	; 0
     312:	fe 4f       	sbci	r31, 0xFE	; 254
     314:	21 e0       	ldi	r18, 0x01	; 1
     316:	30 e0       	ldi	r19, 0x00	; 0
     318:	c9 01       	movw	r24, r18
     31a:	00 80       	ld	r0, Z
     31c:	02 c0       	rjmp	.+4      	; 0x322 <_Z7pinModehh+0x1f8>
     31e:	88 0f       	add	r24, r24
     320:	99 1f       	adc	r25, r25
     322:	0a 94       	dec	r0
     324:	e2 f7       	brpl	.-8      	; 0x31e <_Z7pinModehh+0x1f4>
     326:	84 2b       	or	r24, r20
     328:	87 b9       	out	0x07, r24	; 7
			        break;
     32a:	08 95       	ret
	          	case'd':
	                DDRD|=(1<<c[pInno]);
     32c:	4a b1       	in	r20, 0x0a	; 10
     32e:	fc 01       	movw	r30, r24
     330:	ee 0f       	add	r30, r30
     332:	ff 1f       	adc	r31, r31
     334:	e0 50       	subi	r30, 0x00	; 0
     336:	fe 4f       	sbci	r31, 0xFE	; 254
     338:	21 e0       	ldi	r18, 0x01	; 1
     33a:	30 e0       	ldi	r19, 0x00	; 0
     33c:	c9 01       	movw	r24, r18
     33e:	00 80       	ld	r0, Z
     340:	02 c0       	rjmp	.+4      	; 0x346 <_Z7pinModehh+0x21c>
     342:	88 0f       	add	r24, r24
     344:	99 1f       	adc	r25, r25
     346:	0a 94       	dec	r0
     348:	e2 f7       	brpl	.-8      	; 0x342 <_Z7pinModehh+0x218>
     34a:	84 2b       	or	r24, r20
     34c:	8a b9       	out	0x0a, r24	; 10
			        break;
     34e:	08 95       	ret
		      	case'e':
	                DDRE|=(1<<c[pInno]);
     350:	4d b1       	in	r20, 0x0d	; 13
     352:	fc 01       	movw	r30, r24
     354:	ee 0f       	add	r30, r30
     356:	ff 1f       	adc	r31, r31
     358:	e0 50       	subi	r30, 0x00	; 0
     35a:	fe 4f       	sbci	r31, 0xFE	; 254
     35c:	21 e0       	ldi	r18, 0x01	; 1
     35e:	30 e0       	ldi	r19, 0x00	; 0
     360:	c9 01       	movw	r24, r18
     362:	00 80       	ld	r0, Z
     364:	02 c0       	rjmp	.+4      	; 0x36a <_Z7pinModehh+0x240>
     366:	88 0f       	add	r24, r24
     368:	99 1f       	adc	r25, r25
     36a:	0a 94       	dec	r0
     36c:	e2 f7       	brpl	.-8      	; 0x366 <_Z7pinModehh+0x23c>
     36e:	84 2b       	or	r24, r20
     370:	8d b9       	out	0x0d, r24	; 13
			        break;
     372:	08 95       	ret
			    case'g':
	                DDRG|=(1<<c[pInno]);
     374:	43 b3       	in	r20, 0x13	; 19
     376:	fc 01       	movw	r30, r24
     378:	ee 0f       	add	r30, r30
     37a:	ff 1f       	adc	r31, r31
     37c:	e0 50       	subi	r30, 0x00	; 0
     37e:	fe 4f       	sbci	r31, 0xFE	; 254
     380:	21 e0       	ldi	r18, 0x01	; 1
     382:	30 e0       	ldi	r19, 0x00	; 0
     384:	c9 01       	movw	r24, r18
     386:	00 80       	ld	r0, Z
     388:	02 c0       	rjmp	.+4      	; 0x38e <_Z7pinModehh+0x264>
     38a:	88 0f       	add	r24, r24
     38c:	99 1f       	adc	r25, r25
     38e:	0a 94       	dec	r0
     390:	e2 f7       	brpl	.-8      	; 0x38a <_Z7pinModehh+0x260>
     392:	84 2b       	or	r24, r20
     394:	83 bb       	out	0x13, r24	; 19
			        break;
     396:	08 95       	ret
			 	case'h':
	                DDRH|=(1<<c[pInno]);
     398:	e1 e0       	ldi	r30, 0x01	; 1
     39a:	f1 e0       	ldi	r31, 0x01	; 1
     39c:	40 81       	ld	r20, Z
     39e:	dc 01       	movw	r26, r24
     3a0:	aa 0f       	add	r26, r26
     3a2:	bb 1f       	adc	r27, r27
     3a4:	a0 50       	subi	r26, 0x00	; 0
     3a6:	be 4f       	sbci	r27, 0xFE	; 254
     3a8:	21 e0       	ldi	r18, 0x01	; 1
     3aa:	30 e0       	ldi	r19, 0x00	; 0
     3ac:	c9 01       	movw	r24, r18
     3ae:	0c 90       	ld	r0, X
     3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <_Z7pinModehh+0x28c>
     3b2:	88 0f       	add	r24, r24
     3b4:	99 1f       	adc	r25, r25
     3b6:	0a 94       	dec	r0
     3b8:	e2 f7       	brpl	.-8      	; 0x3b2 <_Z7pinModehh+0x288>
     3ba:	84 2b       	or	r24, r20
     3bc:	80 83       	st	Z, r24
			        break;
     3be:	08 95       	ret
			    case'j':
	                DDRJ|=(1<<c[pInno]);
     3c0:	e4 e0       	ldi	r30, 0x04	; 4
     3c2:	f1 e0       	ldi	r31, 0x01	; 1
     3c4:	40 81       	ld	r20, Z
     3c6:	dc 01       	movw	r26, r24
     3c8:	aa 0f       	add	r26, r26
     3ca:	bb 1f       	adc	r27, r27
     3cc:	a0 50       	subi	r26, 0x00	; 0
     3ce:	be 4f       	sbci	r27, 0xFE	; 254
     3d0:	21 e0       	ldi	r18, 0x01	; 1
     3d2:	30 e0       	ldi	r19, 0x00	; 0
     3d4:	c9 01       	movw	r24, r18
     3d6:	0c 90       	ld	r0, X
     3d8:	02 c0       	rjmp	.+4      	; 0x3de <_Z7pinModehh+0x2b4>
     3da:	88 0f       	add	r24, r24
     3dc:	99 1f       	adc	r25, r25
     3de:	0a 94       	dec	r0
     3e0:	e2 f7       	brpl	.-8      	; 0x3da <_Z7pinModehh+0x2b0>
     3e2:	84 2b       	or	r24, r20
     3e4:	80 83       	st	Z, r24
			        break;
     3e6:	08 95       	ret
				case'l':
	                DDRL|=(1<<c[pInno]);
     3e8:	ea e0       	ldi	r30, 0x0A	; 10
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	40 81       	ld	r20, Z
     3ee:	dc 01       	movw	r26, r24
     3f0:	aa 0f       	add	r26, r26
     3f2:	bb 1f       	adc	r27, r27
     3f4:	a0 50       	subi	r26, 0x00	; 0
     3f6:	be 4f       	sbci	r27, 0xFE	; 254
     3f8:	21 e0       	ldi	r18, 0x01	; 1
     3fa:	30 e0       	ldi	r19, 0x00	; 0
     3fc:	c9 01       	movw	r24, r18
     3fe:	0c 90       	ld	r0, X
     400:	02 c0       	rjmp	.+4      	; 0x406 <_Z7pinModehh+0x2dc>
     402:	88 0f       	add	r24, r24
     404:	99 1f       	adc	r25, r25
     406:	0a 94       	dec	r0
     408:	e2 f7       	brpl	.-8      	; 0x402 <_Z7pinModehh+0x2d8>
     40a:	84 2b       	or	r24, r20
     40c:	80 83       	st	Z, r24
     40e:	08 95       	ret

00000410 <_Z12digitalWritehh>:
	}
}

void digitalWrite (uint8_t pInno ,uint8_t mOde)		 
{
   if(mOde==0)
     410:	66 23       	and	r22, r22
     412:	09 f0       	breq	.+2      	; 0x416 <_Z12digitalWritehh+0x6>
     414:	b8 c0       	rjmp	.+368    	; 0x586 <_Z12digitalWritehh+0x176>
        { switch(d[pInno])
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	fc 01       	movw	r30, r24
     41a:	e8 58       	subi	r30, 0x88	; 136
     41c:	fd 4f       	sbci	r31, 0xFD	; 253
     41e:	20 81       	ld	r18, Z
     420:	25 36       	cpi	r18, 0x65	; 101
     422:	09 f4       	brne	.+2      	; 0x426 <_Z12digitalWritehh+0x16>
     424:	50 c0       	rjmp	.+160    	; 0x4c6 <_Z12digitalWritehh+0xb6>
     426:	26 36       	cpi	r18, 0x66	; 102
     428:	40 f4       	brcc	.+16     	; 0x43a <_Z12digitalWritehh+0x2a>
     42a:	23 36       	cpi	r18, 0x63	; 99
     42c:	41 f1       	breq	.+80     	; 0x47e <_Z12digitalWritehh+0x6e>
     42e:	24 36       	cpi	r18, 0x64	; 100
     430:	c0 f5       	brcc	.+112    	; 0x4a2 <_Z12digitalWritehh+0x92>
     432:	22 36       	cpi	r18, 0x62	; 98
     434:	09 f0       	breq	.+2      	; 0x438 <_Z12digitalWritehh+0x28>
     436:	5e c1       	rjmp	.+700    	; 0x6f4 <_Z12digitalWritehh+0x2e4>
     438:	10 c0       	rjmp	.+32     	; 0x45a <_Z12digitalWritehh+0x4a>
     43a:	28 36       	cpi	r18, 0x68	; 104
     43c:	09 f4       	brne	.+2      	; 0x440 <_Z12digitalWritehh+0x30>
     43e:	67 c0       	rjmp	.+206    	; 0x50e <_Z12digitalWritehh+0xfe>
     440:	29 36       	cpi	r18, 0x69	; 105
     442:	20 f4       	brcc	.+8      	; 0x44c <_Z12digitalWritehh+0x3c>
     444:	27 36       	cpi	r18, 0x67	; 103
     446:	09 f0       	breq	.+2      	; 0x44a <_Z12digitalWritehh+0x3a>
     448:	55 c1       	rjmp	.+682    	; 0x6f4 <_Z12digitalWritehh+0x2e4>
     44a:	4f c0       	rjmp	.+158    	; 0x4ea <_Z12digitalWritehh+0xda>
     44c:	2a 36       	cpi	r18, 0x6A	; 106
     44e:	09 f4       	brne	.+2      	; 0x452 <_Z12digitalWritehh+0x42>
     450:	72 c0       	rjmp	.+228    	; 0x536 <_Z12digitalWritehh+0x126>
     452:	2c 36       	cpi	r18, 0x6C	; 108
     454:	09 f0       	breq	.+2      	; 0x458 <_Z12digitalWritehh+0x48>
     456:	4e c1       	rjmp	.+668    	; 0x6f4 <_Z12digitalWritehh+0x2e4>
     458:	82 c0       	rjmp	.+260    	; 0x55e <_Z12digitalWritehh+0x14e>
         {
	 
	          case'b':
	                  PORTB&=~(1<<c[pInno]);
     45a:	25 b1       	in	r18, 0x05	; 5
     45c:	fc 01       	movw	r30, r24
     45e:	ee 0f       	add	r30, r30
     460:	ff 1f       	adc	r31, r31
     462:	e0 50       	subi	r30, 0x00	; 0
     464:	fe 4f       	sbci	r31, 0xFE	; 254
     466:	81 e0       	ldi	r24, 0x01	; 1
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	00 80       	ld	r0, Z
     46c:	02 c0       	rjmp	.+4      	; 0x472 <_Z12digitalWritehh+0x62>
     46e:	88 0f       	add	r24, r24
     470:	99 1f       	adc	r25, r25
     472:	0a 94       	dec	r0
     474:	e2 f7       	brpl	.-8      	; 0x46e <_Z12digitalWritehh+0x5e>
     476:	80 95       	com	r24
     478:	82 23       	and	r24, r18
     47a:	85 b9       	out	0x05, r24	; 5
			           break;
     47c:	08 95       	ret
	          case'c':
	                 PORTB&=~(1<<c[pInno]);
     47e:	25 b1       	in	r18, 0x05	; 5
     480:	fc 01       	movw	r30, r24
     482:	ee 0f       	add	r30, r30
     484:	ff 1f       	adc	r31, r31
     486:	e0 50       	subi	r30, 0x00	; 0
     488:	fe 4f       	sbci	r31, 0xFE	; 254
     48a:	81 e0       	ldi	r24, 0x01	; 1
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	00 80       	ld	r0, Z
     490:	02 c0       	rjmp	.+4      	; 0x496 <_Z12digitalWritehh+0x86>
     492:	88 0f       	add	r24, r24
     494:	99 1f       	adc	r25, r25
     496:	0a 94       	dec	r0
     498:	e2 f7       	brpl	.-8      	; 0x492 <_Z12digitalWritehh+0x82>
     49a:	80 95       	com	r24
     49c:	82 23       	and	r24, r18
     49e:	85 b9       	out	0x05, r24	; 5
			          break;
     4a0:	08 95       	ret
	          case'd':
	                 PORTD&=~(1<<c[pInno]);
     4a2:	2b b1       	in	r18, 0x0b	; 11
     4a4:	fc 01       	movw	r30, r24
     4a6:	ee 0f       	add	r30, r30
     4a8:	ff 1f       	adc	r31, r31
     4aa:	e0 50       	subi	r30, 0x00	; 0
     4ac:	fe 4f       	sbci	r31, 0xFE	; 254
     4ae:	81 e0       	ldi	r24, 0x01	; 1
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	00 80       	ld	r0, Z
     4b4:	02 c0       	rjmp	.+4      	; 0x4ba <_Z12digitalWritehh+0xaa>
     4b6:	88 0f       	add	r24, r24
     4b8:	99 1f       	adc	r25, r25
     4ba:	0a 94       	dec	r0
     4bc:	e2 f7       	brpl	.-8      	; 0x4b6 <_Z12digitalWritehh+0xa6>
     4be:	80 95       	com	r24
     4c0:	82 23       	and	r24, r18
     4c2:	8b b9       	out	0x0b, r24	; 11
			          break;
     4c4:	08 95       	ret
				
		      case'e':
	                  PORTE&=~(1<<c[pInno]);
     4c6:	2e b1       	in	r18, 0x0e	; 14
     4c8:	fc 01       	movw	r30, r24
     4ca:	ee 0f       	add	r30, r30
     4cc:	ff 1f       	adc	r31, r31
     4ce:	e0 50       	subi	r30, 0x00	; 0
     4d0:	fe 4f       	sbci	r31, 0xFE	; 254
     4d2:	81 e0       	ldi	r24, 0x01	; 1
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	00 80       	ld	r0, Z
     4d8:	02 c0       	rjmp	.+4      	; 0x4de <_Z12digitalWritehh+0xce>
     4da:	88 0f       	add	r24, r24
     4dc:	99 1f       	adc	r25, r25
     4de:	0a 94       	dec	r0
     4e0:	e2 f7       	brpl	.-8      	; 0x4da <_Z12digitalWritehh+0xca>
     4e2:	80 95       	com	r24
     4e4:	82 23       	and	r24, r18
     4e6:	8e b9       	out	0x0e, r24	; 14
			           break;
     4e8:	08 95       	ret

			     case'g':
	                  PORTG&=~(1<<c[pInno]);
     4ea:	24 b3       	in	r18, 0x14	; 20
     4ec:	fc 01       	movw	r30, r24
     4ee:	ee 0f       	add	r30, r30
     4f0:	ff 1f       	adc	r31, r31
     4f2:	e0 50       	subi	r30, 0x00	; 0
     4f4:	fe 4f       	sbci	r31, 0xFE	; 254
     4f6:	81 e0       	ldi	r24, 0x01	; 1
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	00 80       	ld	r0, Z
     4fc:	02 c0       	rjmp	.+4      	; 0x502 <_Z12digitalWritehh+0xf2>
     4fe:	88 0f       	add	r24, r24
     500:	99 1f       	adc	r25, r25
     502:	0a 94       	dec	r0
     504:	e2 f7       	brpl	.-8      	; 0x4fe <_Z12digitalWritehh+0xee>
     506:	80 95       	com	r24
     508:	82 23       	and	r24, r18
     50a:	84 bb       	out	0x14, r24	; 20
			           break;
     50c:	08 95       	ret
			 case'h':
	                  PORTH&=~(1<<c[pInno]);
     50e:	e2 e0       	ldi	r30, 0x02	; 2
     510:	f1 e0       	ldi	r31, 0x01	; 1
     512:	20 81       	ld	r18, Z
     514:	dc 01       	movw	r26, r24
     516:	aa 0f       	add	r26, r26
     518:	bb 1f       	adc	r27, r27
     51a:	a0 50       	subi	r26, 0x00	; 0
     51c:	be 4f       	sbci	r27, 0xFE	; 254
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	0c 90       	ld	r0, X
     524:	02 c0       	rjmp	.+4      	; 0x52a <_Z12digitalWritehh+0x11a>
     526:	88 0f       	add	r24, r24
     528:	99 1f       	adc	r25, r25
     52a:	0a 94       	dec	r0
     52c:	e2 f7       	brpl	.-8      	; 0x526 <_Z12digitalWritehh+0x116>
     52e:	80 95       	com	r24
     530:	82 23       	and	r24, r18
     532:	80 83       	st	Z, r24
			           break;
     534:	08 95       	ret
		     
			     case'j':
	                  PORTJ&=~(1<<c[pInno]);
     536:	e5 e0       	ldi	r30, 0x05	; 5
     538:	f1 e0       	ldi	r31, 0x01	; 1
     53a:	20 81       	ld	r18, Z
     53c:	dc 01       	movw	r26, r24
     53e:	aa 0f       	add	r26, r26
     540:	bb 1f       	adc	r27, r27
     542:	a0 50       	subi	r26, 0x00	; 0
     544:	be 4f       	sbci	r27, 0xFE	; 254
     546:	81 e0       	ldi	r24, 0x01	; 1
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	0c 90       	ld	r0, X
     54c:	02 c0       	rjmp	.+4      	; 0x552 <_Z12digitalWritehh+0x142>
     54e:	88 0f       	add	r24, r24
     550:	99 1f       	adc	r25, r25
     552:	0a 94       	dec	r0
     554:	e2 f7       	brpl	.-8      	; 0x54e <_Z12digitalWritehh+0x13e>
     556:	80 95       	com	r24
     558:	82 23       	and	r24, r18
     55a:	80 83       	st	Z, r24
			           break;
     55c:	08 95       	ret
				     case'l':
	                  PORTL&=~(1<<c[pInno]);
     55e:	eb e0       	ldi	r30, 0x0B	; 11
     560:	f1 e0       	ldi	r31, 0x01	; 1
     562:	20 81       	ld	r18, Z
     564:	dc 01       	movw	r26, r24
     566:	aa 0f       	add	r26, r26
     568:	bb 1f       	adc	r27, r27
     56a:	a0 50       	subi	r26, 0x00	; 0
     56c:	be 4f       	sbci	r27, 0xFE	; 254
     56e:	81 e0       	ldi	r24, 0x01	; 1
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	0c 90       	ld	r0, X
     574:	02 c0       	rjmp	.+4      	; 0x57a <_Z12digitalWritehh+0x16a>
     576:	88 0f       	add	r24, r24
     578:	99 1f       	adc	r25, r25
     57a:	0a 94       	dec	r0
     57c:	e2 f7       	brpl	.-8      	; 0x576 <_Z12digitalWritehh+0x166>
     57e:	80 95       	com	r24
     580:	82 23       	and	r24, r18
     582:	80 83       	st	Z, r24
			           break;	        		   		   	  	  		 		 			 
     584:	08 95       	ret
	     }  }
	else{          switch(d[pInno])
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	fc 01       	movw	r30, r24
     58a:	e8 58       	subi	r30, 0x88	; 136
     58c:	fd 4f       	sbci	r31, 0xFD	; 253
     58e:	20 81       	ld	r18, Z
     590:	25 36       	cpi	r18, 0x65	; 101
     592:	09 f4       	brne	.+2      	; 0x596 <_Z12digitalWritehh+0x186>
     594:	50 c0       	rjmp	.+160    	; 0x636 <_Z12digitalWritehh+0x226>
     596:	26 36       	cpi	r18, 0x66	; 102
     598:	40 f4       	brcc	.+16     	; 0x5aa <_Z12digitalWritehh+0x19a>
     59a:	23 36       	cpi	r18, 0x63	; 99
     59c:	41 f1       	breq	.+80     	; 0x5ee <_Z12digitalWritehh+0x1de>
     59e:	24 36       	cpi	r18, 0x64	; 100
     5a0:	c0 f5       	brcc	.+112    	; 0x612 <_Z12digitalWritehh+0x202>
     5a2:	22 36       	cpi	r18, 0x62	; 98
     5a4:	09 f0       	breq	.+2      	; 0x5a8 <_Z12digitalWritehh+0x198>
     5a6:	a6 c0       	rjmp	.+332    	; 0x6f4 <_Z12digitalWritehh+0x2e4>
     5a8:	10 c0       	rjmp	.+32     	; 0x5ca <_Z12digitalWritehh+0x1ba>
     5aa:	28 36       	cpi	r18, 0x68	; 104
     5ac:	09 f4       	brne	.+2      	; 0x5b0 <_Z12digitalWritehh+0x1a0>
     5ae:	67 c0       	rjmp	.+206    	; 0x67e <_Z12digitalWritehh+0x26e>
     5b0:	29 36       	cpi	r18, 0x69	; 105
     5b2:	20 f4       	brcc	.+8      	; 0x5bc <_Z12digitalWritehh+0x1ac>
     5b4:	27 36       	cpi	r18, 0x67	; 103
     5b6:	09 f0       	breq	.+2      	; 0x5ba <_Z12digitalWritehh+0x1aa>
     5b8:	9d c0       	rjmp	.+314    	; 0x6f4 <_Z12digitalWritehh+0x2e4>
     5ba:	4f c0       	rjmp	.+158    	; 0x65a <_Z12digitalWritehh+0x24a>
     5bc:	2a 36       	cpi	r18, 0x6A	; 106
     5be:	09 f4       	brne	.+2      	; 0x5c2 <_Z12digitalWritehh+0x1b2>
     5c0:	72 c0       	rjmp	.+228    	; 0x6a6 <_Z12digitalWritehh+0x296>
     5c2:	2c 36       	cpi	r18, 0x6C	; 108
     5c4:	09 f0       	breq	.+2      	; 0x5c8 <_Z12digitalWritehh+0x1b8>
     5c6:	96 c0       	rjmp	.+300    	; 0x6f4 <_Z12digitalWritehh+0x2e4>
     5c8:	82 c0       	rjmp	.+260    	; 0x6ce <_Z12digitalWritehh+0x2be>
         {
	 
	          case'b':
	                 PORTB|=(1<<c[pInno]);
     5ca:	45 b1       	in	r20, 0x05	; 5
     5cc:	fc 01       	movw	r30, r24
     5ce:	ee 0f       	add	r30, r30
     5d0:	ff 1f       	adc	r31, r31
     5d2:	e0 50       	subi	r30, 0x00	; 0
     5d4:	fe 4f       	sbci	r31, 0xFE	; 254
     5d6:	21 e0       	ldi	r18, 0x01	; 1
     5d8:	30 e0       	ldi	r19, 0x00	; 0
     5da:	c9 01       	movw	r24, r18
     5dc:	00 80       	ld	r0, Z
     5de:	02 c0       	rjmp	.+4      	; 0x5e4 <_Z12digitalWritehh+0x1d4>
     5e0:	88 0f       	add	r24, r24
     5e2:	99 1f       	adc	r25, r25
     5e4:	0a 94       	dec	r0
     5e6:	e2 f7       	brpl	.-8      	; 0x5e0 <_Z12digitalWritehh+0x1d0>
     5e8:	84 2b       	or	r24, r20
     5ea:	85 b9       	out	0x05, r24	; 5
			           break;
     5ec:	08 95       	ret
	          case'c':
	                 PORTC|=(1<<c[pInno]);
     5ee:	48 b1       	in	r20, 0x08	; 8
     5f0:	fc 01       	movw	r30, r24
     5f2:	ee 0f       	add	r30, r30
     5f4:	ff 1f       	adc	r31, r31
     5f6:	e0 50       	subi	r30, 0x00	; 0
     5f8:	fe 4f       	sbci	r31, 0xFE	; 254
     5fa:	21 e0       	ldi	r18, 0x01	; 1
     5fc:	30 e0       	ldi	r19, 0x00	; 0
     5fe:	c9 01       	movw	r24, r18
     600:	00 80       	ld	r0, Z
     602:	02 c0       	rjmp	.+4      	; 0x608 <_Z12digitalWritehh+0x1f8>
     604:	88 0f       	add	r24, r24
     606:	99 1f       	adc	r25, r25
     608:	0a 94       	dec	r0
     60a:	e2 f7       	brpl	.-8      	; 0x604 <_Z12digitalWritehh+0x1f4>
     60c:	84 2b       	or	r24, r20
     60e:	88 b9       	out	0x08, r24	; 8
			          break;
     610:	08 95       	ret
	          case'd':
	                 PORTD|=(1<<c[pInno]);
     612:	4b b1       	in	r20, 0x0b	; 11
     614:	fc 01       	movw	r30, r24
     616:	ee 0f       	add	r30, r30
     618:	ff 1f       	adc	r31, r31
     61a:	e0 50       	subi	r30, 0x00	; 0
     61c:	fe 4f       	sbci	r31, 0xFE	; 254
     61e:	21 e0       	ldi	r18, 0x01	; 1
     620:	30 e0       	ldi	r19, 0x00	; 0
     622:	c9 01       	movw	r24, r18
     624:	00 80       	ld	r0, Z
     626:	02 c0       	rjmp	.+4      	; 0x62c <_Z12digitalWritehh+0x21c>
     628:	88 0f       	add	r24, r24
     62a:	99 1f       	adc	r25, r25
     62c:	0a 94       	dec	r0
     62e:	e2 f7       	brpl	.-8      	; 0x628 <_Z12digitalWritehh+0x218>
     630:	84 2b       	or	r24, r20
     632:	8b b9       	out	0x0b, r24	; 11
			          break;
     634:	08 95       	ret
				    
		      case'e':
	                  PORTE|=(1<<c[pInno]);
     636:	4e b1       	in	r20, 0x0e	; 14
     638:	fc 01       	movw	r30, r24
     63a:	ee 0f       	add	r30, r30
     63c:	ff 1f       	adc	r31, r31
     63e:	e0 50       	subi	r30, 0x00	; 0
     640:	fe 4f       	sbci	r31, 0xFE	; 254
     642:	21 e0       	ldi	r18, 0x01	; 1
     644:	30 e0       	ldi	r19, 0x00	; 0
     646:	c9 01       	movw	r24, r18
     648:	00 80       	ld	r0, Z
     64a:	02 c0       	rjmp	.+4      	; 0x650 <_Z12digitalWritehh+0x240>
     64c:	88 0f       	add	r24, r24
     64e:	99 1f       	adc	r25, r25
     650:	0a 94       	dec	r0
     652:	e2 f7       	brpl	.-8      	; 0x64c <_Z12digitalWritehh+0x23c>
     654:	84 2b       	or	r24, r20
     656:	8e b9       	out	0x0e, r24	; 14
			           break;
     658:	08 95       	ret

			     case'g':
	                  PORTG|=(1<<c[pInno]);
     65a:	44 b3       	in	r20, 0x14	; 20
     65c:	fc 01       	movw	r30, r24
     65e:	ee 0f       	add	r30, r30
     660:	ff 1f       	adc	r31, r31
     662:	e0 50       	subi	r30, 0x00	; 0
     664:	fe 4f       	sbci	r31, 0xFE	; 254
     666:	21 e0       	ldi	r18, 0x01	; 1
     668:	30 e0       	ldi	r19, 0x00	; 0
     66a:	c9 01       	movw	r24, r18
     66c:	00 80       	ld	r0, Z
     66e:	02 c0       	rjmp	.+4      	; 0x674 <_Z12digitalWritehh+0x264>
     670:	88 0f       	add	r24, r24
     672:	99 1f       	adc	r25, r25
     674:	0a 94       	dec	r0
     676:	e2 f7       	brpl	.-8      	; 0x670 <_Z12digitalWritehh+0x260>
     678:	84 2b       	or	r24, r20
     67a:	84 bb       	out	0x14, r24	; 20
			           break;
     67c:	08 95       	ret
			 case'h':
	                  PORTH|=(1<<c[pInno]);
     67e:	e2 e0       	ldi	r30, 0x02	; 2
     680:	f1 e0       	ldi	r31, 0x01	; 1
     682:	40 81       	ld	r20, Z
     684:	dc 01       	movw	r26, r24
     686:	aa 0f       	add	r26, r26
     688:	bb 1f       	adc	r27, r27
     68a:	a0 50       	subi	r26, 0x00	; 0
     68c:	be 4f       	sbci	r27, 0xFE	; 254
     68e:	21 e0       	ldi	r18, 0x01	; 1
     690:	30 e0       	ldi	r19, 0x00	; 0
     692:	c9 01       	movw	r24, r18
     694:	0c 90       	ld	r0, X
     696:	02 c0       	rjmp	.+4      	; 0x69c <_Z12digitalWritehh+0x28c>
     698:	88 0f       	add	r24, r24
     69a:	99 1f       	adc	r25, r25
     69c:	0a 94       	dec	r0
     69e:	e2 f7       	brpl	.-8      	; 0x698 <_Z12digitalWritehh+0x288>
     6a0:	84 2b       	or	r24, r20
     6a2:	80 83       	st	Z, r24
			           break;
     6a4:	08 95       	ret
		     /*case'i':
	                  PORTI|=(1<<c[pInno]);
			           break;*/
			     case'j':
	                  PORTJ|=(1<<c[pInno]);
     6a6:	e5 e0       	ldi	r30, 0x05	; 5
     6a8:	f1 e0       	ldi	r31, 0x01	; 1
     6aa:	40 81       	ld	r20, Z
     6ac:	dc 01       	movw	r26, r24
     6ae:	aa 0f       	add	r26, r26
     6b0:	bb 1f       	adc	r27, r27
     6b2:	a0 50       	subi	r26, 0x00	; 0
     6b4:	be 4f       	sbci	r27, 0xFE	; 254
     6b6:	21 e0       	ldi	r18, 0x01	; 1
     6b8:	30 e0       	ldi	r19, 0x00	; 0
     6ba:	c9 01       	movw	r24, r18
     6bc:	0c 90       	ld	r0, X
     6be:	02 c0       	rjmp	.+4      	; 0x6c4 <_Z12digitalWritehh+0x2b4>
     6c0:	88 0f       	add	r24, r24
     6c2:	99 1f       	adc	r25, r25
     6c4:	0a 94       	dec	r0
     6c6:	e2 f7       	brpl	.-8      	; 0x6c0 <_Z12digitalWritehh+0x2b0>
     6c8:	84 2b       	or	r24, r20
     6ca:	80 83       	st	Z, r24
			           break;
     6cc:	08 95       	ret
				     case'l':
	                  PORTL|=(1<<c[pInno]);
     6ce:	eb e0       	ldi	r30, 0x0B	; 11
     6d0:	f1 e0       	ldi	r31, 0x01	; 1
     6d2:	40 81       	ld	r20, Z
     6d4:	dc 01       	movw	r26, r24
     6d6:	aa 0f       	add	r26, r26
     6d8:	bb 1f       	adc	r27, r27
     6da:	a0 50       	subi	r26, 0x00	; 0
     6dc:	be 4f       	sbci	r27, 0xFE	; 254
     6de:	21 e0       	ldi	r18, 0x01	; 1
     6e0:	30 e0       	ldi	r19, 0x00	; 0
     6e2:	c9 01       	movw	r24, r18
     6e4:	0c 90       	ld	r0, X
     6e6:	02 c0       	rjmp	.+4      	; 0x6ec <_Z12digitalWritehh+0x2dc>
     6e8:	88 0f       	add	r24, r24
     6ea:	99 1f       	adc	r25, r25
     6ec:	0a 94       	dec	r0
     6ee:	e2 f7       	brpl	.-8      	; 0x6e8 <_Z12digitalWritehh+0x2d8>
     6f0:	84 2b       	or	r24, r20
     6f2:	80 83       	st	Z, r24
     6f4:	08 95       	ret

000006f6 <_Z11digitalReadi>:

uint8_t digitalRead(int pInno)
{  
	uint8_t z;				//not a good practice
	uint8_t x;				//not a good practice
   switch(d[pInno])
     6f6:	fc 01       	movw	r30, r24
     6f8:	e8 58       	subi	r30, 0x88	; 136
     6fa:	fd 4f       	sbci	r31, 0xFD	; 253
     6fc:	80 81       	ld	r24, Z
     6fe:	85 36       	cpi	r24, 0x65	; 101
     700:	d9 f0       	breq	.+54     	; 0x738 <_Z11digitalReadi+0x42>
     702:	86 36       	cpi	r24, 0x66	; 102
     704:	38 f4       	brcc	.+14     	; 0x714 <_Z11digitalReadi+0x1e>
     706:	83 36       	cpi	r24, 0x63	; 99
     708:	99 f0       	breq	.+38     	; 0x730 <_Z11digitalReadi+0x3a>
     70a:	84 36       	cpi	r24, 0x64	; 100
     70c:	98 f4       	brcc	.+38     	; 0x734 <_Z11digitalReadi+0x3e>
     70e:	82 36       	cpi	r24, 0x62	; 98
     710:	f9 f4       	brne	.+62     	; 0x750 <_Z11digitalReadi+0x5a>
     712:	0c c0       	rjmp	.+24     	; 0x72c <_Z11digitalReadi+0x36>
     714:	88 36       	cpi	r24, 0x68	; 104
     716:	a1 f0       	breq	.+40     	; 0x740 <_Z11digitalReadi+0x4a>
     718:	89 36       	cpi	r24, 0x69	; 105
     71a:	18 f4       	brcc	.+6      	; 0x722 <_Z11digitalReadi+0x2c>
     71c:	87 36       	cpi	r24, 0x67	; 103
     71e:	c1 f4       	brne	.+48     	; 0x750 <_Z11digitalReadi+0x5a>
     720:	0d c0       	rjmp	.+26     	; 0x73c <_Z11digitalReadi+0x46>
     722:	8a 36       	cpi	r24, 0x6A	; 106
     724:	81 f0       	breq	.+32     	; 0x746 <_Z11digitalReadi+0x50>
     726:	8c 36       	cpi	r24, 0x6C	; 108
     728:	99 f4       	brne	.+38     	; 0x750 <_Z11digitalReadi+0x5a>
     72a:	10 c0       	rjmp	.+32     	; 0x74c <_Z11digitalReadi+0x56>
         {
	 
	          case'b':
	                  z=PINB&(1<<c[pInno]);
     72c:	83 b1       	in	r24, 0x03	; 3
			           break;
     72e:	08 95       	ret
	          case'c':
	                  z=PINC&(1<<c[pInno]);
     730:	86 b1       	in	r24, 0x06	; 6
			          break;
     732:	08 95       	ret
	          case'd':
	                  z=PIND&(1<<c[pInno]);
     734:	89 b1       	in	r24, 0x09	; 9
			          break;
     736:	08 95       	ret
				
		      case'e':
	                   z=PINE&(1<<c[pInno]);
     738:	8c b1       	in	r24, 0x0c	; 12
			           break;
     73a:	08 95       	ret

			     case'g':
	                   z=PING&(1<<c[pInno]);
     73c:	82 b3       	in	r24, 0x12	; 18
			           break;
     73e:	08 95       	ret
			 case'h':
	                  z=PINH&(1<<c[pInno]);
     740:	80 91 00 01 	lds	r24, 0x0100
			           break;
     744:	08 95       	ret
		     
			     case'j':
	                   z=PINJ&(1<<c[pInno]);
     746:	80 91 03 01 	lds	r24, 0x0103
			           break;
     74a:	08 95       	ret
				     case'l':
	                   z=PINL&(1<<c[pInno]);
     74c:	80 91 09 01 	lds	r24, 0x0109
			           break;
					   return z;	        		   		   	  	  		 		 			 
	     }  
}
     750:	08 95       	ret

00000752 <_Z20microsecondsToInchesm>:
{
  // According to Parallax's datasheet for the PING))), there are 73.746
  // microseconds per inch (i.e. sound travels at 1130 feet per second).
  // This gives the distance travelled by the ping, outbound and return,
  // so we divide by 2 to get the distance of the obstacle.
  return (mIcroseconds*0.00669/ 2);
     752:	0e 94 c0 13 	call	0x2780	; 0x2780 <__floatunsisf>
     756:	2a ec       	ldi	r18, 0xCA	; 202
     758:	37 e3       	ldi	r19, 0x37	; 55
     75a:	4b ed       	ldi	r20, 0xDB	; 219
     75c:	5b e3       	ldi	r21, 0x3B	; 59
     75e:	0e 94 76 14 	call	0x28ec	; 0x28ec <__mulsf3>
     762:	20 e0       	ldi	r18, 0x00	; 0
     764:	30 e0       	ldi	r19, 0x00	; 0
     766:	40 e0       	ldi	r20, 0x00	; 0
     768:	5f e3       	ldi	r21, 0x3F	; 63
     76a:	0e 94 76 14 	call	0x28ec	; 0x28ec <__mulsf3>
     76e:	0e 94 94 13 	call	0x2728	; 0x2728 <__fixunssfsi>
}
     772:	08 95       	ret

00000774 <_Z25microsecondsToCentimetersm>:
long unsigned int microsecondsToCentimeters(long unsigned int microseconds) 
{
  // The speed of sound is 340 m/s or 29 microseconds per centimeter.
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
     774:	0e 94 c0 13 	call	0x2780	; 0x2780 <__floatunsisf>
     778:	2b e7       	ldi	r18, 0x7B	; 123
     77a:	34 e1       	ldi	r19, 0x14	; 20
     77c:	4e e2       	ldi	r20, 0x2E	; 46
     77e:	5e e3       	ldi	r21, 0x3E	; 62
     780:	0e 94 76 14 	call	0x28ec	; 0x28ec <__mulsf3>
     784:	20 e0       	ldi	r18, 0x00	; 0
     786:	30 e0       	ldi	r19, 0x00	; 0
     788:	40 e0       	ldi	r20, 0x00	; 0
     78a:	5f e3       	ldi	r21, 0x3F	; 63
     78c:	0e 94 76 14 	call	0x28ec	; 0x28ec <__mulsf3>
     790:	0e 94 94 13 	call	0x2728	; 0x2728 <__fixunssfsi>
}
     794:	08 95       	ret

00000796 <_Z7pulseInhh>:

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
{ 
     796:	8f 92       	push	r8
     798:	9f 92       	push	r9
     79a:	af 92       	push	r10
     79c:	bf 92       	push	r11
     79e:	cf 92       	push	r12
     7a0:	df 92       	push	r13
     7a2:	ef 92       	push	r14
     7a4:	ff 92       	push	r15
     7a6:	0f 93       	push	r16
     7a8:	1f 93       	push	r17
     7aa:	df 93       	push	r29
     7ac:	cf 93       	push	r28
     7ae:	0f 92       	push	r0
     7b0:	cd b7       	in	r28, 0x3d	; 61
     7b2:	de b7       	in	r29, 0x3e	; 62
     7b4:	89 83       	std	Y+1, r24	; 0x01
	char x;
  TCCR2A = (1 << WGM21) | (1 << COM2A1) | (1 << FOC2A) | (0 << COM2A0) | (0 << WGM20); //initializing in CTC mode
     7b6:	e0 eb       	ldi	r30, 0xB0	; 176
     7b8:	f0 e0       	ldi	r31, 0x00	; 0
     7ba:	82 e8       	ldi	r24, 0x82	; 130
     7bc:	80 83       	st	Z, r24
  TCCR2A = (1 << CS20);
     7be:	81 e0       	ldi	r24, 0x01	; 1
     7c0:	80 83       	st	Z, r24
  unsigned long mAxloops = 500000;
  unsigned long wIdth = 0;
  // wait for any previous pulse to end
  switch(d[pInno]){
     7c2:	89 81       	ldd	r24, Y+1	; 0x01
     7c4:	e8 e7       	ldi	r30, 0x78	; 120
     7c6:	f2 e0       	ldi	r31, 0x02	; 2
     7c8:	e8 0f       	add	r30, r24
     7ca:	f1 1d       	adc	r31, r1
     7cc:	80 81       	ld	r24, Z
     7ce:	85 36       	cpi	r24, 0x65	; 101
     7d0:	09 f4       	brne	.+2      	; 0x7d4 <_Z7pulseInhh+0x3e>
     7d2:	6e c1       	rjmp	.+732    	; 0xab0 <_Z7pulseInhh+0x31a>
     7d4:	86 36       	cpi	r24, 0x66	; 102
     7d6:	50 f4       	brcc	.+20     	; 0x7ec <_Z7pulseInhh+0x56>
     7d8:	83 36       	cpi	r24, 0x63	; 99
     7da:	09 f4       	brne	.+2      	; 0x7de <_Z7pulseInhh+0x48>
     7dc:	87 c0       	rjmp	.+270    	; 0x8ec <_Z7pulseInhh+0x156>
     7de:	84 36       	cpi	r24, 0x64	; 100
     7e0:	08 f0       	brcs	.+2      	; 0x7e4 <_Z7pulseInhh+0x4e>
     7e2:	f5 c0       	rjmp	.+490    	; 0x9ce <_Z7pulseInhh+0x238>
     7e4:	82 36       	cpi	r24, 0x62	; 98
     7e6:	09 f0       	breq	.+2      	; 0x7ea <_Z7pulseInhh+0x54>
     7e8:	4f c3       	rjmp	.+1694   	; 0xe88 <_Z7pulseInhh+0x6f2>
     7ea:	0f c0       	rjmp	.+30     	; 0x80a <_Z7pulseInhh+0x74>
     7ec:	8a 36       	cpi	r24, 0x6A	; 106
     7ee:	09 f4       	brne	.+2      	; 0x7f2 <_Z7pulseInhh+0x5c>
     7f0:	50 c2       	rjmp	.+1184   	; 0xc92 <_Z7pulseInhh+0x4fc>
     7f2:	8c 36       	cpi	r24, 0x6C	; 108
     7f4:	09 f4       	brne	.+2      	; 0x7f8 <_Z7pulseInhh+0x62>
     7f6:	cd c2       	rjmp	.+1434   	; 0xd92 <_Z7pulseInhh+0x5fc>
     7f8:	88 36       	cpi	r24, 0x68	; 104
     7fa:	09 f0       	breq	.+2      	; 0x7fe <_Z7pulseInhh+0x68>
     7fc:	45 c3       	rjmp	.+1674   	; 0xe88 <_Z7pulseInhh+0x6f2>
     7fe:	c9 c1       	rjmp	.+914    	; 0xb92 <_Z7pulseInhh+0x3fc>
            case'b':
	               { while (((PINB) && ((c[pInno]))) == vAlue)
	              {
		          if (--mAxloops == 0)
     800:	01 97       	sbiw	r24, 0x01	; 1
     802:	a1 09       	sbc	r26, r1
     804:	b1 09       	sbc	r27, r1
     806:	51 f4       	brne	.+20     	; 0x81c <_Z7pulseInhh+0x86>
     808:	40 c3       	rjmp	.+1664   	; 0xe8a <_Z7pulseInhh+0x6f4>
  TCCR2A = (1 << WGM21) | (1 << COM2A1) | (1 << FOC2A) | (0 << COM2A0) | (0 << WGM20); //initializing in CTC mode
  TCCR2A = (1 << CS20);
  unsigned long mAxloops = 500000;
  unsigned long wIdth = 0;
  // wait for any previous pulse to end
  switch(d[pInno]){
     80a:	80 e2       	ldi	r24, 0x20	; 32
     80c:	91 ea       	ldi	r25, 0xA1	; 161
     80e:	a7 e0       	ldi	r26, 0x07	; 7
     810:	b0 e0       	ldi	r27, 0x00	; 0
            case'b':
	               { while (((PINB) && ((c[pInno]))) == vAlue)
     812:	00 e0       	ldi	r16, 0x00	; 0
     814:	40 e0       	ldi	r20, 0x00	; 0
     816:	52 e0       	ldi	r21, 0x02	; 2
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     818:	11 e0       	ldi	r17, 0x01	; 1
  unsigned long mAxloops = 500000;
  unsigned long wIdth = 0;
  // wait for any previous pulse to end
  switch(d[pInno]){
            case'b':
	               { while (((PINB) && ((c[pInno]))) == vAlue)
     81a:	70 e0       	ldi	r23, 0x00	; 0
     81c:	23 b1       	in	r18, 0x03	; 3
     81e:	22 23       	and	r18, r18
     820:	71 f0       	breq	.+28     	; 0x83e <_Z7pulseInhh+0xa8>
     822:	e9 81       	ldd	r30, Y+1	; 0x01
     824:	f0 e0       	ldi	r31, 0x00	; 0
     826:	ee 0f       	add	r30, r30
     828:	ff 1f       	adc	r31, r31
     82a:	e4 0f       	add	r30, r20
     82c:	f5 1f       	adc	r31, r21
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     82e:	21 2f       	mov	r18, r17
     830:	01 90       	ld	r0, Z+
     832:	f0 81       	ld	r31, Z
     834:	e0 2d       	mov	r30, r0
     836:	30 97       	sbiw	r30, 0x00	; 0
     838:	19 f4       	brne	.+6      	; 0x840 <_Z7pulseInhh+0xaa>
     83a:	20 2f       	mov	r18, r16
     83c:	01 c0       	rjmp	.+2      	; 0x840 <_Z7pulseInhh+0xaa>
  unsigned long mAxloops = 500000;
  unsigned long wIdth = 0;
  // wait for any previous pulse to end
  switch(d[pInno]){
            case'b':
	               { while (((PINB) && ((c[pInno]))) == vAlue)
     83e:	20 2f       	mov	r18, r16
     840:	4b 01       	movw	r8, r22
     842:	30 e0       	ldi	r19, 0x00	; 0
     844:	26 17       	cp	r18, r22
     846:	37 07       	cpc	r19, r23
     848:	d9 f2       	breq	.-74     	; 0x800 <_Z7pulseInhh+0x6a>
     84a:	05 c0       	rjmp	.+10     	; 0x856 <_Z7pulseInhh+0xc0>
		            return 0;
	                }
             // wait for the pulse to start  
              while (((PINB) && (c[pInno])) != vAlue)
	              {
		     if (--mAxloops == 0) 
     84c:	01 97       	sbiw	r24, 0x01	; 1
     84e:	a1 09       	sbc	r26, r1
     850:	b1 09       	sbc	r27, r1
     852:	29 f4       	brne	.+10     	; 0x85e <_Z7pulseInhh+0xc8>
     854:	1e c3       	rjmp	.+1596   	; 0xe92 <_Z7pulseInhh+0x6fc>
	              {
		          if (--mAxloops == 0)
		            return 0;
	                }
             // wait for the pulse to start  
              while (((PINB) && (c[pInno])) != vAlue)
     856:	60 e0       	ldi	r22, 0x00	; 0
     858:	72 e0       	ldi	r23, 0x02	; 2
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     85a:	01 e0       	ldi	r16, 0x01	; 1
     85c:	10 e0       	ldi	r17, 0x00	; 0
	              {
		          if (--mAxloops == 0)
		            return 0;
	                }
             // wait for the pulse to start  
              while (((PINB) && (c[pInno])) != vAlue)
     85e:	23 b1       	in	r18, 0x03	; 3
     860:	22 23       	and	r18, r18
     862:	79 f0       	breq	.+30     	; 0x882 <_Z7pulseInhh+0xec>
     864:	49 81       	ldd	r20, Y+1	; 0x01
     866:	50 e0       	ldi	r21, 0x00	; 0
     868:	44 0f       	add	r20, r20
     86a:	55 1f       	adc	r21, r21
     86c:	46 0f       	add	r20, r22
     86e:	57 1f       	adc	r21, r23
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     870:	20 2f       	mov	r18, r16
     872:	fa 01       	movw	r30, r20
     874:	40 81       	ld	r20, Z
     876:	51 81       	ldd	r21, Z+1	; 0x01
     878:	41 15       	cp	r20, r1
     87a:	51 05       	cpc	r21, r1
     87c:	19 f4       	brne	.+6      	; 0x884 <_Z7pulseInhh+0xee>
     87e:	21 2f       	mov	r18, r17
     880:	01 c0       	rjmp	.+2      	; 0x884 <_Z7pulseInhh+0xee>
	              {
		          if (--mAxloops == 0)
		            return 0;
	                }
             // wait for the pulse to start  
              while (((PINB) && (c[pInno])) != vAlue)
     882:	21 2f       	mov	r18, r17
     884:	30 e0       	ldi	r19, 0x00	; 0
     886:	82 16       	cp	r8, r18
     888:	93 06       	cpc	r9, r19
     88a:	01 f7       	brne	.-64     	; 0x84c <_Z7pulseInhh+0xb6>
     88c:	20 e0       	ldi	r18, 0x00	; 0
     88e:	30 e0       	ldi	r19, 0x00	; 0
     890:	a9 01       	movw	r20, r18
	              {
		     if (--mAxloops == 0) 
		          return 0;
	           }
            // wait for the pulse to stop
             while (((PINB) && (c[pInno])) == vAlue)
     892:	cc 24       	eor	r12, r12
     894:	00 e0       	ldi	r16, 0x00	; 0
     896:	12 e0       	ldi	r17, 0x02	; 2
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     898:	bb 24       	eor	r11, r11
     89a:	b3 94       	inc	r11
     89c:	0a c0       	rjmp	.+20     	; 0x8b2 <_Z7pulseInhh+0x11c>
		          return 0;
	           }
            // wait for the pulse to stop
             while (((PINB) && (c[pInno])) == vAlue)
	                   {
	               	if (++wIdth == mAxloops)
     89e:	2f 5f       	subi	r18, 0xFF	; 255
     8a0:	3f 4f       	sbci	r19, 0xFF	; 255
     8a2:	4f 4f       	sbci	r20, 0xFF	; 255
     8a4:	5f 4f       	sbci	r21, 0xFF	; 255
     8a6:	82 17       	cp	r24, r18
     8a8:	93 07       	cpc	r25, r19
     8aa:	a4 07       	cpc	r26, r20
     8ac:	b5 07       	cpc	r27, r21
     8ae:	09 f4       	brne	.+2      	; 0x8b2 <_Z7pulseInhh+0x11c>
     8b0:	f4 c2       	rjmp	.+1512   	; 0xe9a <_Z7pulseInhh+0x704>
	              {
		     if (--mAxloops == 0) 
		          return 0;
	           }
            // wait for the pulse to stop
             while (((PINB) && (c[pInno])) == vAlue)
     8b2:	63 b1       	in	r22, 0x03	; 3
     8b4:	66 23       	and	r22, r22
     8b6:	79 f0       	breq	.+30     	; 0x8d6 <_Z7pulseInhh+0x140>
     8b8:	e9 80       	ldd	r14, Y+1	; 0x01
     8ba:	ff 24       	eor	r15, r15
     8bc:	ee 0c       	add	r14, r14
     8be:	ff 1c       	adc	r15, r15
     8c0:	e0 0e       	add	r14, r16
     8c2:	f1 1e       	adc	r15, r17
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     8c4:	6b 2d       	mov	r22, r11
     8c6:	f7 01       	movw	r30, r14
     8c8:	e0 80       	ld	r14, Z
     8ca:	f1 80       	ldd	r15, Z+1	; 0x01
     8cc:	e1 14       	cp	r14, r1
     8ce:	f1 04       	cpc	r15, r1
     8d0:	19 f4       	brne	.+6      	; 0x8d8 <_Z7pulseInhh+0x142>
     8d2:	6c 2d       	mov	r22, r12
     8d4:	01 c0       	rjmp	.+2      	; 0x8d8 <_Z7pulseInhh+0x142>
	              {
		     if (--mAxloops == 0) 
		          return 0;
	           }
            // wait for the pulse to stop
             while (((PINB) && (c[pInno])) == vAlue)
     8d6:	6c 2d       	mov	r22, r12
     8d8:	70 e0       	ldi	r23, 0x00	; 0
     8da:	86 16       	cp	r8, r22
     8dc:	97 06       	cpc	r9, r23
     8de:	f9 f2       	breq	.-66     	; 0x89e <_Z7pulseInhh+0x108>
     8e0:	27 c3       	rjmp	.+1614   	; 0xf30 <_Z7pulseInhh+0x79a>
              return wIdth;
                    }  break;
 case'c':
	                 { while (((PINC) && (c[pInno])) == vAlue)
	                {
		              if (--mAxloops == 0)
     8e2:	01 97       	sbiw	r24, 0x01	; 1
     8e4:	a1 09       	sbc	r26, r1
     8e6:	b1 09       	sbc	r27, r1
     8e8:	51 f4       	brne	.+20     	; 0x8fe <_Z7pulseInhh+0x168>
     8ea:	db c2       	rjmp	.+1462   	; 0xea2 <_Z7pulseInhh+0x70c>
  TCCR2A = (1 << WGM21) | (1 << COM2A1) | (1 << FOC2A) | (0 << COM2A0) | (0 << WGM20); //initializing in CTC mode
  TCCR2A = (1 << CS20);
  unsigned long mAxloops = 500000;
  unsigned long wIdth = 0;
  // wait for any previous pulse to end
  switch(d[pInno]){
     8ec:	80 e2       	ldi	r24, 0x20	; 32
     8ee:	91 ea       	ldi	r25, 0xA1	; 161
     8f0:	a7 e0       	ldi	r26, 0x07	; 7
     8f2:	b0 e0       	ldi	r27, 0x00	; 0
		          return 0;
	                      }
              return wIdth;
                    }  break;
 case'c':
	                 { while (((PINC) && (c[pInno])) == vAlue)
     8f4:	00 e0       	ldi	r16, 0x00	; 0
     8f6:	40 e0       	ldi	r20, 0x00	; 0
     8f8:	52 e0       	ldi	r21, 0x02	; 2
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     8fa:	11 e0       	ldi	r17, 0x01	; 1
		          return 0;
	                      }
              return wIdth;
                    }  break;
 case'c':
	                 { while (((PINC) && (c[pInno])) == vAlue)
     8fc:	70 e0       	ldi	r23, 0x00	; 0
     8fe:	26 b1       	in	r18, 0x06	; 6
     900:	22 23       	and	r18, r18
     902:	71 f0       	breq	.+28     	; 0x920 <_Z7pulseInhh+0x18a>
     904:	e9 81       	ldd	r30, Y+1	; 0x01
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	ee 0f       	add	r30, r30
     90a:	ff 1f       	adc	r31, r31
     90c:	e4 0f       	add	r30, r20
     90e:	f5 1f       	adc	r31, r21
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     910:	21 2f       	mov	r18, r17
     912:	01 90       	ld	r0, Z+
     914:	f0 81       	ld	r31, Z
     916:	e0 2d       	mov	r30, r0
     918:	30 97       	sbiw	r30, 0x00	; 0
     91a:	19 f4       	brne	.+6      	; 0x922 <_Z7pulseInhh+0x18c>
     91c:	20 2f       	mov	r18, r16
     91e:	01 c0       	rjmp	.+2      	; 0x922 <_Z7pulseInhh+0x18c>
		          return 0;
	                      }
              return wIdth;
                    }  break;
 case'c':
	                 { while (((PINC) && (c[pInno])) == vAlue)
     920:	20 2f       	mov	r18, r16
     922:	4b 01       	movw	r8, r22
     924:	30 e0       	ldi	r19, 0x00	; 0
     926:	26 17       	cp	r18, r22
     928:	37 07       	cpc	r19, r23
     92a:	d9 f2       	breq	.-74     	; 0x8e2 <_Z7pulseInhh+0x14c>
     92c:	05 c0       	rjmp	.+10     	; 0x938 <_Z7pulseInhh+0x1a2>
		               return 0;
	                   }
  // wait for the pulse to start  
                  while (((PINC) && (c[pInno])) != vAlue)
	                  {
		              if (--mAxloops == 0)
     92e:	01 97       	sbiw	r24, 0x01	; 1
     930:	a1 09       	sbc	r26, r1
     932:	b1 09       	sbc	r27, r1
     934:	29 f4       	brne	.+10     	; 0x940 <_Z7pulseInhh+0x1aa>
     936:	b9 c2       	rjmp	.+1394   	; 0xeaa <_Z7pulseInhh+0x714>
	                {
		              if (--mAxloops == 0)
		               return 0;
	                   }
  // wait for the pulse to start  
                  while (((PINC) && (c[pInno])) != vAlue)
     938:	60 e0       	ldi	r22, 0x00	; 0
     93a:	72 e0       	ldi	r23, 0x02	; 2
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     93c:	01 e0       	ldi	r16, 0x01	; 1
     93e:	10 e0       	ldi	r17, 0x00	; 0
	                {
		              if (--mAxloops == 0)
		               return 0;
	                   }
  // wait for the pulse to start  
                  while (((PINC) && (c[pInno])) != vAlue)
     940:	26 b1       	in	r18, 0x06	; 6
     942:	22 23       	and	r18, r18
     944:	79 f0       	breq	.+30     	; 0x964 <_Z7pulseInhh+0x1ce>
     946:	49 81       	ldd	r20, Y+1	; 0x01
     948:	50 e0       	ldi	r21, 0x00	; 0
     94a:	44 0f       	add	r20, r20
     94c:	55 1f       	adc	r21, r21
     94e:	46 0f       	add	r20, r22
     950:	57 1f       	adc	r21, r23
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     952:	20 2f       	mov	r18, r16
     954:	fa 01       	movw	r30, r20
     956:	40 81       	ld	r20, Z
     958:	51 81       	ldd	r21, Z+1	; 0x01
     95a:	41 15       	cp	r20, r1
     95c:	51 05       	cpc	r21, r1
     95e:	19 f4       	brne	.+6      	; 0x966 <_Z7pulseInhh+0x1d0>
     960:	21 2f       	mov	r18, r17
     962:	01 c0       	rjmp	.+2      	; 0x966 <_Z7pulseInhh+0x1d0>
	                {
		              if (--mAxloops == 0)
		               return 0;
	                   }
  // wait for the pulse to start  
                  while (((PINC) && (c[pInno])) != vAlue)
     964:	21 2f       	mov	r18, r17
     966:	30 e0       	ldi	r19, 0x00	; 0
     968:	82 16       	cp	r8, r18
     96a:	93 06       	cpc	r9, r19
     96c:	01 f7       	brne	.-64     	; 0x92e <_Z7pulseInhh+0x198>
     96e:	20 e0       	ldi	r18, 0x00	; 0
     970:	30 e0       	ldi	r19, 0x00	; 0
     972:	a9 01       	movw	r20, r18
	                  {
		              if (--mAxloops == 0)
		                 return 0;
	                      }
  // wait for the pulse to stop
                while (((PINC) && (c[pInno])) == vAlue)
     974:	cc 24       	eor	r12, r12
     976:	00 e0       	ldi	r16, 0x00	; 0
     978:	12 e0       	ldi	r17, 0x02	; 2
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     97a:	bb 24       	eor	r11, r11
     97c:	b3 94       	inc	r11
     97e:	0a c0       	rjmp	.+20     	; 0x994 <_Z7pulseInhh+0x1fe>
		                 return 0;
	                      }
  // wait for the pulse to stop
                while (((PINC) && (c[pInno])) == vAlue)
	                 {
                 		if (++wIdth == mAxloops)
     980:	2f 5f       	subi	r18, 0xFF	; 255
     982:	3f 4f       	sbci	r19, 0xFF	; 255
     984:	4f 4f       	sbci	r20, 0xFF	; 255
     986:	5f 4f       	sbci	r21, 0xFF	; 255
     988:	82 17       	cp	r24, r18
     98a:	93 07       	cpc	r25, r19
     98c:	a4 07       	cpc	r26, r20
     98e:	b5 07       	cpc	r27, r21
     990:	09 f4       	brne	.+2      	; 0x994 <_Z7pulseInhh+0x1fe>
     992:	8f c2       	rjmp	.+1310   	; 0xeb2 <_Z7pulseInhh+0x71c>
	                  {
		              if (--mAxloops == 0)
		                 return 0;
	                      }
  // wait for the pulse to stop
                while (((PINC) && (c[pInno])) == vAlue)
     994:	66 b1       	in	r22, 0x06	; 6
     996:	66 23       	and	r22, r22
     998:	79 f0       	breq	.+30     	; 0x9b8 <_Z7pulseInhh+0x222>
     99a:	e9 80       	ldd	r14, Y+1	; 0x01
     99c:	ff 24       	eor	r15, r15
     99e:	ee 0c       	add	r14, r14
     9a0:	ff 1c       	adc	r15, r15
     9a2:	e0 0e       	add	r14, r16
     9a4:	f1 1e       	adc	r15, r17
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     9a6:	6b 2d       	mov	r22, r11
     9a8:	f7 01       	movw	r30, r14
     9aa:	e0 80       	ld	r14, Z
     9ac:	f1 80       	ldd	r15, Z+1	; 0x01
     9ae:	e1 14       	cp	r14, r1
     9b0:	f1 04       	cpc	r15, r1
     9b2:	19 f4       	brne	.+6      	; 0x9ba <_Z7pulseInhh+0x224>
     9b4:	6c 2d       	mov	r22, r12
     9b6:	01 c0       	rjmp	.+2      	; 0x9ba <_Z7pulseInhh+0x224>
	                  {
		              if (--mAxloops == 0)
		                 return 0;
	                      }
  // wait for the pulse to stop
                while (((PINC) && (c[pInno])) == vAlue)
     9b8:	6c 2d       	mov	r22, r12
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	86 16       	cp	r8, r22
     9be:	97 06       	cpc	r9, r23
     9c0:	f9 f2       	breq	.-66     	; 0x980 <_Z7pulseInhh+0x1ea>
     9c2:	b6 c2       	rjmp	.+1388   	; 0xf30 <_Z7pulseInhh+0x79a>
						 
	 case'd':
	     
	                 { while (((PIND) && (c[pInno])) == vAlue)
	                {
		              if (--mAxloops == 0)
     9c4:	01 97       	sbiw	r24, 0x01	; 1
     9c6:	a1 09       	sbc	r26, r1
     9c8:	b1 09       	sbc	r27, r1
     9ca:	51 f4       	brne	.+20     	; 0x9e0 <_Z7pulseInhh+0x24a>
     9cc:	76 c2       	rjmp	.+1260   	; 0xeba <_Z7pulseInhh+0x724>
  TCCR2A = (1 << WGM21) | (1 << COM2A1) | (1 << FOC2A) | (0 << COM2A0) | (0 << WGM20); //initializing in CTC mode
  TCCR2A = (1 << CS20);
  unsigned long mAxloops = 500000;
  unsigned long wIdth = 0;
  // wait for any previous pulse to end
  switch(d[pInno]){
     9ce:	80 e2       	ldi	r24, 0x20	; 32
     9d0:	91 ea       	ldi	r25, 0xA1	; 161
     9d2:	a7 e0       	ldi	r26, 0x07	; 7
     9d4:	b0 e0       	ldi	r27, 0x00	; 0
                     return wIdth;
                         }break;
						 
	 case'd':
	     
	                 { while (((PIND) && (c[pInno])) == vAlue)
     9d6:	00 e0       	ldi	r16, 0x00	; 0
     9d8:	40 e0       	ldi	r20, 0x00	; 0
     9da:	52 e0       	ldi	r21, 0x02	; 2
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     9dc:	11 e0       	ldi	r17, 0x01	; 1
                     return wIdth;
                         }break;
						 
	 case'd':
	     
	                 { while (((PIND) && (c[pInno])) == vAlue)
     9de:	70 e0       	ldi	r23, 0x00	; 0
     9e0:	29 b1       	in	r18, 0x09	; 9
     9e2:	22 23       	and	r18, r18
     9e4:	71 f0       	breq	.+28     	; 0xa02 <_Z7pulseInhh+0x26c>
     9e6:	e9 81       	ldd	r30, Y+1	; 0x01
     9e8:	f0 e0       	ldi	r31, 0x00	; 0
     9ea:	ee 0f       	add	r30, r30
     9ec:	ff 1f       	adc	r31, r31
     9ee:	e4 0f       	add	r30, r20
     9f0:	f5 1f       	adc	r31, r21
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     9f2:	21 2f       	mov	r18, r17
     9f4:	01 90       	ld	r0, Z+
     9f6:	f0 81       	ld	r31, Z
     9f8:	e0 2d       	mov	r30, r0
     9fa:	30 97       	sbiw	r30, 0x00	; 0
     9fc:	19 f4       	brne	.+6      	; 0xa04 <_Z7pulseInhh+0x26e>
     9fe:	20 2f       	mov	r18, r16
     a00:	01 c0       	rjmp	.+2      	; 0xa04 <_Z7pulseInhh+0x26e>
                     return wIdth;
                         }break;
						 
	 case'd':
	     
	                 { while (((PIND) && (c[pInno])) == vAlue)
     a02:	20 2f       	mov	r18, r16
     a04:	4b 01       	movw	r8, r22
     a06:	30 e0       	ldi	r19, 0x00	; 0
     a08:	26 17       	cp	r18, r22
     a0a:	37 07       	cpc	r19, r23
     a0c:	d9 f2       	breq	.-74     	; 0x9c4 <_Z7pulseInhh+0x22e>
     a0e:	05 c0       	rjmp	.+10     	; 0xa1a <_Z7pulseInhh+0x284>
		               return 0;
	                   }
  // wait for the pulse to start  
                  while (((PIND) && (c[pInno])) != vAlue)
	                  {
		              if (--mAxloops == 0)
     a10:	01 97       	sbiw	r24, 0x01	; 1
     a12:	a1 09       	sbc	r26, r1
     a14:	b1 09       	sbc	r27, r1
     a16:	29 f4       	brne	.+10     	; 0xa22 <_Z7pulseInhh+0x28c>
     a18:	54 c2       	rjmp	.+1192   	; 0xec2 <_Z7pulseInhh+0x72c>
	                {
		              if (--mAxloops == 0)
		               return 0;
	                   }
  // wait for the pulse to start  
                  while (((PIND) && (c[pInno])) != vAlue)
     a1a:	60 e0       	ldi	r22, 0x00	; 0
     a1c:	72 e0       	ldi	r23, 0x02	; 2
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     a1e:	01 e0       	ldi	r16, 0x01	; 1
     a20:	10 e0       	ldi	r17, 0x00	; 0
	                {
		              if (--mAxloops == 0)
		               return 0;
	                   }
  // wait for the pulse to start  
                  while (((PIND) && (c[pInno])) != vAlue)
     a22:	29 b1       	in	r18, 0x09	; 9
     a24:	22 23       	and	r18, r18
     a26:	79 f0       	breq	.+30     	; 0xa46 <_Z7pulseInhh+0x2b0>
     a28:	49 81       	ldd	r20, Y+1	; 0x01
     a2a:	50 e0       	ldi	r21, 0x00	; 0
     a2c:	44 0f       	add	r20, r20
     a2e:	55 1f       	adc	r21, r21
     a30:	46 0f       	add	r20, r22
     a32:	57 1f       	adc	r21, r23
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     a34:	20 2f       	mov	r18, r16
     a36:	fa 01       	movw	r30, r20
     a38:	40 81       	ld	r20, Z
     a3a:	51 81       	ldd	r21, Z+1	; 0x01
     a3c:	41 15       	cp	r20, r1
     a3e:	51 05       	cpc	r21, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <_Z7pulseInhh+0x2b2>
     a42:	21 2f       	mov	r18, r17
     a44:	01 c0       	rjmp	.+2      	; 0xa48 <_Z7pulseInhh+0x2b2>
	                {
		              if (--mAxloops == 0)
		               return 0;
	                   }
  // wait for the pulse to start  
                  while (((PIND) && (c[pInno])) != vAlue)
     a46:	21 2f       	mov	r18, r17
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	82 16       	cp	r8, r18
     a4c:	93 06       	cpc	r9, r19
     a4e:	01 f7       	brne	.-64     	; 0xa10 <_Z7pulseInhh+0x27a>
     a50:	20 e0       	ldi	r18, 0x00	; 0
     a52:	30 e0       	ldi	r19, 0x00	; 0
     a54:	a9 01       	movw	r20, r18
	                  {
		              if (--mAxloops == 0)
		                 return 0;
	                      }
  // wait for the pulse to stop
                while (((PIND) && (c[pInno])) == vAlue)
     a56:	cc 24       	eor	r12, r12
     a58:	00 e0       	ldi	r16, 0x00	; 0
     a5a:	12 e0       	ldi	r17, 0x02	; 2
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     a5c:	bb 24       	eor	r11, r11
     a5e:	b3 94       	inc	r11
     a60:	0a c0       	rjmp	.+20     	; 0xa76 <_Z7pulseInhh+0x2e0>
		                 return 0;
	                      }
  // wait for the pulse to stop
                while (((PIND) && (c[pInno])) == vAlue)
	                 {
                 		if (++wIdth == mAxloops)
     a62:	2f 5f       	subi	r18, 0xFF	; 255
     a64:	3f 4f       	sbci	r19, 0xFF	; 255
     a66:	4f 4f       	sbci	r20, 0xFF	; 255
     a68:	5f 4f       	sbci	r21, 0xFF	; 255
     a6a:	82 17       	cp	r24, r18
     a6c:	93 07       	cpc	r25, r19
     a6e:	a4 07       	cpc	r26, r20
     a70:	b5 07       	cpc	r27, r21
     a72:	09 f4       	brne	.+2      	; 0xa76 <_Z7pulseInhh+0x2e0>
     a74:	2a c2       	rjmp	.+1108   	; 0xeca <_Z7pulseInhh+0x734>
	                  {
		              if (--mAxloops == 0)
		                 return 0;
	                      }
  // wait for the pulse to stop
                while (((PIND) && (c[pInno])) == vAlue)
     a76:	69 b1       	in	r22, 0x09	; 9
     a78:	66 23       	and	r22, r22
     a7a:	79 f0       	breq	.+30     	; 0xa9a <_Z7pulseInhh+0x304>
     a7c:	e9 80       	ldd	r14, Y+1	; 0x01
     a7e:	ff 24       	eor	r15, r15
     a80:	ee 0c       	add	r14, r14
     a82:	ff 1c       	adc	r15, r15
     a84:	e0 0e       	add	r14, r16
     a86:	f1 1e       	adc	r15, r17
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     a88:	6b 2d       	mov	r22, r11
     a8a:	f7 01       	movw	r30, r14
     a8c:	e0 80       	ld	r14, Z
     a8e:	f1 80       	ldd	r15, Z+1	; 0x01
     a90:	e1 14       	cp	r14, r1
     a92:	f1 04       	cpc	r15, r1
     a94:	19 f4       	brne	.+6      	; 0xa9c <_Z7pulseInhh+0x306>
     a96:	6c 2d       	mov	r22, r12
     a98:	01 c0       	rjmp	.+2      	; 0xa9c <_Z7pulseInhh+0x306>
	                  {
		              if (--mAxloops == 0)
		                 return 0;
	                      }
  // wait for the pulse to stop
                while (((PIND) && (c[pInno])) == vAlue)
     a9a:	6c 2d       	mov	r22, r12
     a9c:	70 e0       	ldi	r23, 0x00	; 0
     a9e:	86 16       	cp	r8, r22
     aa0:	97 06       	cpc	r9, r23
     aa2:	f9 f2       	breq	.-66     	; 0xa62 <_Z7pulseInhh+0x2cc>
     aa4:	45 c2       	rjmp	.+1162   	; 0xf30 <_Z7pulseInhh+0x79a>
				  //  DDRH|(0<<c[pInno]);
	case'e':
	                  
	                 { while (((PINE) && (c[pInno])) == vAlue)
	                {
		              if (--mAxloops == 0)
     aa6:	01 97       	sbiw	r24, 0x01	; 1
     aa8:	a1 09       	sbc	r26, r1
     aaa:	b1 09       	sbc	r27, r1
     aac:	51 f4       	brne	.+20     	; 0xac2 <_Z7pulseInhh+0x32c>
     aae:	11 c2       	rjmp	.+1058   	; 0xed2 <_Z7pulseInhh+0x73c>
  TCCR2A = (1 << WGM21) | (1 << COM2A1) | (1 << FOC2A) | (0 << COM2A0) | (0 << WGM20); //initializing in CTC mode
  TCCR2A = (1 << CS20);
  unsigned long mAxloops = 500000;
  unsigned long wIdth = 0;
  // wait for any previous pulse to end
  switch(d[pInno]){
     ab0:	80 e2       	ldi	r24, 0x20	; 32
     ab2:	91 ea       	ldi	r25, 0xA1	; 161
     ab4:	a7 e0       	ldi	r26, 0x07	; 7
     ab6:	b0 e0       	ldi	r27, 0x00	; 0
                     return wIdth;
                         } break; 		//case'h':
				  //  DDRH|(0<<c[pInno]);
	case'e':
	                  
	                 { while (((PINE) && (c[pInno])) == vAlue)
     ab8:	00 e0       	ldi	r16, 0x00	; 0
     aba:	40 e0       	ldi	r20, 0x00	; 0
     abc:	52 e0       	ldi	r21, 0x02	; 2
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     abe:	11 e0       	ldi	r17, 0x01	; 1
                     return wIdth;
                         } break; 		//case'h':
				  //  DDRH|(0<<c[pInno]);
	case'e':
	                  
	                 { while (((PINE) && (c[pInno])) == vAlue)
     ac0:	70 e0       	ldi	r23, 0x00	; 0
     ac2:	2c b1       	in	r18, 0x0c	; 12
     ac4:	22 23       	and	r18, r18
     ac6:	71 f0       	breq	.+28     	; 0xae4 <_Z7pulseInhh+0x34e>
     ac8:	e9 81       	ldd	r30, Y+1	; 0x01
     aca:	f0 e0       	ldi	r31, 0x00	; 0
     acc:	ee 0f       	add	r30, r30
     ace:	ff 1f       	adc	r31, r31
     ad0:	e4 0f       	add	r30, r20
     ad2:	f5 1f       	adc	r31, r21
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     ad4:	21 2f       	mov	r18, r17
     ad6:	01 90       	ld	r0, Z+
     ad8:	f0 81       	ld	r31, Z
     ada:	e0 2d       	mov	r30, r0
     adc:	30 97       	sbiw	r30, 0x00	; 0
     ade:	19 f4       	brne	.+6      	; 0xae6 <_Z7pulseInhh+0x350>
     ae0:	20 2f       	mov	r18, r16
     ae2:	01 c0       	rjmp	.+2      	; 0xae6 <_Z7pulseInhh+0x350>
                     return wIdth;
                         } break; 		//case'h':
				  //  DDRH|(0<<c[pInno]);
	case'e':
	                  
	                 { while (((PINE) && (c[pInno])) == vAlue)
     ae4:	20 2f       	mov	r18, r16
     ae6:	4b 01       	movw	r8, r22
     ae8:	30 e0       	ldi	r19, 0x00	; 0
     aea:	26 17       	cp	r18, r22
     aec:	37 07       	cpc	r19, r23
     aee:	d9 f2       	breq	.-74     	; 0xaa6 <_Z7pulseInhh+0x310>
     af0:	05 c0       	rjmp	.+10     	; 0xafc <_Z7pulseInhh+0x366>
		               return 0;
	                   }
  // wait for the pulse to start  
                  while (((PINE) && (c[pInno])) != vAlue)
	                  {
		              if (--mAxloops == 0)
     af2:	01 97       	sbiw	r24, 0x01	; 1
     af4:	a1 09       	sbc	r26, r1
     af6:	b1 09       	sbc	r27, r1
     af8:	29 f4       	brne	.+10     	; 0xb04 <_Z7pulseInhh+0x36e>
     afa:	ef c1       	rjmp	.+990    	; 0xeda <_Z7pulseInhh+0x744>
	                {
		              if (--mAxloops == 0)
		               return 0;
	                   }
  // wait for the pulse to start  
                  while (((PINE) && (c[pInno])) != vAlue)
     afc:	60 e0       	ldi	r22, 0x00	; 0
     afe:	72 e0       	ldi	r23, 0x02	; 2
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     b00:	01 e0       	ldi	r16, 0x01	; 1
     b02:	10 e0       	ldi	r17, 0x00	; 0
	                {
		              if (--mAxloops == 0)
		               return 0;
	                   }
  // wait for the pulse to start  
                  while (((PINE) && (c[pInno])) != vAlue)
     b04:	2c b1       	in	r18, 0x0c	; 12
     b06:	22 23       	and	r18, r18
     b08:	79 f0       	breq	.+30     	; 0xb28 <_Z7pulseInhh+0x392>
     b0a:	49 81       	ldd	r20, Y+1	; 0x01
     b0c:	50 e0       	ldi	r21, 0x00	; 0
     b0e:	44 0f       	add	r20, r20
     b10:	55 1f       	adc	r21, r21
     b12:	46 0f       	add	r20, r22
     b14:	57 1f       	adc	r21, r23
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     b16:	20 2f       	mov	r18, r16
     b18:	fa 01       	movw	r30, r20
     b1a:	40 81       	ld	r20, Z
     b1c:	51 81       	ldd	r21, Z+1	; 0x01
     b1e:	41 15       	cp	r20, r1
     b20:	51 05       	cpc	r21, r1
     b22:	19 f4       	brne	.+6      	; 0xb2a <_Z7pulseInhh+0x394>
     b24:	21 2f       	mov	r18, r17
     b26:	01 c0       	rjmp	.+2      	; 0xb2a <_Z7pulseInhh+0x394>
	                {
		              if (--mAxloops == 0)
		               return 0;
	                   }
  // wait for the pulse to start  
                  while (((PINE) && (c[pInno])) != vAlue)
     b28:	21 2f       	mov	r18, r17
     b2a:	30 e0       	ldi	r19, 0x00	; 0
     b2c:	82 16       	cp	r8, r18
     b2e:	93 06       	cpc	r9, r19
     b30:	01 f7       	brne	.-64     	; 0xaf2 <_Z7pulseInhh+0x35c>
     b32:	20 e0       	ldi	r18, 0x00	; 0
     b34:	30 e0       	ldi	r19, 0x00	; 0
     b36:	a9 01       	movw	r20, r18
	                  {
		              if (--mAxloops == 0)
		                 return 0;
	                      }
  // wait for the pulse to stop
                while (((PINE) && (c[pInno])) == vAlue)
     b38:	cc 24       	eor	r12, r12
     b3a:	00 e0       	ldi	r16, 0x00	; 0
     b3c:	12 e0       	ldi	r17, 0x02	; 2
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     b3e:	bb 24       	eor	r11, r11
     b40:	b3 94       	inc	r11
     b42:	0a c0       	rjmp	.+20     	; 0xb58 <_Z7pulseInhh+0x3c2>
		                 return 0;
	                      }
  // wait for the pulse to stop
                while (((PINE) && (c[pInno])) == vAlue)
	                 {
                 		if (++wIdth == mAxloops)
     b44:	2f 5f       	subi	r18, 0xFF	; 255
     b46:	3f 4f       	sbci	r19, 0xFF	; 255
     b48:	4f 4f       	sbci	r20, 0xFF	; 255
     b4a:	5f 4f       	sbci	r21, 0xFF	; 255
     b4c:	82 17       	cp	r24, r18
     b4e:	93 07       	cpc	r25, r19
     b50:	a4 07       	cpc	r26, r20
     b52:	b5 07       	cpc	r27, r21
     b54:	09 f4       	brne	.+2      	; 0xb58 <_Z7pulseInhh+0x3c2>
     b56:	c5 c1       	rjmp	.+906    	; 0xee2 <_Z7pulseInhh+0x74c>
	                  {
		              if (--mAxloops == 0)
		                 return 0;
	                      }
  // wait for the pulse to stop
                while (((PINE) && (c[pInno])) == vAlue)
     b58:	6c b1       	in	r22, 0x0c	; 12
     b5a:	66 23       	and	r22, r22
     b5c:	79 f0       	breq	.+30     	; 0xb7c <_Z7pulseInhh+0x3e6>
     b5e:	e9 80       	ldd	r14, Y+1	; 0x01
     b60:	ff 24       	eor	r15, r15
     b62:	ee 0c       	add	r14, r14
     b64:	ff 1c       	adc	r15, r15
     b66:	e0 0e       	add	r14, r16
     b68:	f1 1e       	adc	r15, r17
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     b6a:	6b 2d       	mov	r22, r11
     b6c:	f7 01       	movw	r30, r14
     b6e:	e0 80       	ld	r14, Z
     b70:	f1 80       	ldd	r15, Z+1	; 0x01
     b72:	e1 14       	cp	r14, r1
     b74:	f1 04       	cpc	r15, r1
     b76:	19 f4       	brne	.+6      	; 0xb7e <_Z7pulseInhh+0x3e8>
     b78:	6c 2d       	mov	r22, r12
     b7a:	01 c0       	rjmp	.+2      	; 0xb7e <_Z7pulseInhh+0x3e8>
	                  {
		              if (--mAxloops == 0)
		                 return 0;
	                      }
  // wait for the pulse to stop
                while (((PINE) && (c[pInno])) == vAlue)
     b7c:	6c 2d       	mov	r22, r12
     b7e:	70 e0       	ldi	r23, 0x00	; 0
     b80:	86 16       	cp	r8, r22
     b82:	97 06       	cpc	r9, r23
     b84:	f9 f2       	breq	.-66     	; 0xb44 <_Z7pulseInhh+0x3ae>
     b86:	d4 c1       	rjmp	.+936    	; 0xf30 <_Z7pulseInhh+0x79a>
	                  
case'h':
	                 
	                 { while (((PINH) &&(c[pInno])) == vAlue)
	                {
		              if (--mAxloops == 0)
     b88:	01 97       	sbiw	r24, 0x01	; 1
     b8a:	a1 09       	sbc	r26, r1
     b8c:	b1 09       	sbc	r27, r1
     b8e:	69 f4       	brne	.+26     	; 0xbaa <_Z7pulseInhh+0x414>
     b90:	ac c1       	rjmp	.+856    	; 0xeea <_Z7pulseInhh+0x754>
  TCCR2A = (1 << WGM21) | (1 << COM2A1) | (1 << FOC2A) | (0 << COM2A0) | (0 << WGM20); //initializing in CTC mode
  TCCR2A = (1 << CS20);
  unsigned long mAxloops = 500000;
  unsigned long wIdth = 0;
  // wait for any previous pulse to end
  switch(d[pInno]){
     b92:	80 e2       	ldi	r24, 0x20	; 32
     b94:	91 ea       	ldi	r25, 0xA1	; 161
     b96:	a7 e0       	ldi	r26, 0x07	; 7
     b98:	b0 e0       	ldi	r27, 0x00	; 0
                     return wIdth;
                         } break; 			    
	                  
case'h':
	                 
	                 { while (((PINH) &&(c[pInno])) == vAlue)
     b9a:	20 e0       	ldi	r18, 0x00	; 0
     b9c:	31 e0       	ldi	r19, 0x01	; 1
     b9e:	ee 24       	eor	r14, r14
     ba0:	40 e0       	ldi	r20, 0x00	; 0
     ba2:	52 e0       	ldi	r21, 0x02	; 2
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     ba4:	cc 24       	eor	r12, r12
     ba6:	c3 94       	inc	r12
                     return wIdth;
                         } break; 			    
	                  
case'h':
	                 
	                 { while (((PINH) &&(c[pInno])) == vAlue)
     ba8:	70 e0       	ldi	r23, 0x00	; 0
     baa:	f9 01       	movw	r30, r18
     bac:	10 81       	ld	r17, Z
     bae:	11 23       	and	r17, r17
     bb0:	71 f0       	breq	.+28     	; 0xbce <_Z7pulseInhh+0x438>
     bb2:	e9 81       	ldd	r30, Y+1	; 0x01
     bb4:	f0 e0       	ldi	r31, 0x00	; 0
     bb6:	ee 0f       	add	r30, r30
     bb8:	ff 1f       	adc	r31, r31
     bba:	e4 0f       	add	r30, r20
     bbc:	f5 1f       	adc	r31, r21
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     bbe:	0c 2d       	mov	r16, r12
     bc0:	01 90       	ld	r0, Z+
     bc2:	f0 81       	ld	r31, Z
     bc4:	e0 2d       	mov	r30, r0
     bc6:	30 97       	sbiw	r30, 0x00	; 0
     bc8:	19 f4       	brne	.+6      	; 0xbd0 <_Z7pulseInhh+0x43a>
     bca:	0e 2d       	mov	r16, r14
     bcc:	01 c0       	rjmp	.+2      	; 0xbd0 <_Z7pulseInhh+0x43a>
                     return wIdth;
                         } break; 			    
	                  
case'h':
	                 
	                 { while (((PINH) &&(c[pInno])) == vAlue)
     bce:	0e 2d       	mov	r16, r14
     bd0:	4b 01       	movw	r8, r22
     bd2:	10 e0       	ldi	r17, 0x00	; 0
     bd4:	06 17       	cp	r16, r22
     bd6:	17 07       	cpc	r17, r23
     bd8:	b9 f2       	breq	.-82     	; 0xb88 <_Z7pulseInhh+0x3f2>
     bda:	05 c0       	rjmp	.+10     	; 0xbe6 <_Z7pulseInhh+0x450>
		               return 0;
	                   }
  // wait for the pulse to start  
                  while (((PINH) && (c[pInno])) != vAlue)
	                  {
		              if (--mAxloops == 0)
     bdc:	01 97       	sbiw	r24, 0x01	; 1
     bde:	a1 09       	sbc	r26, r1
     be0:	b1 09       	sbc	r27, r1
     be2:	41 f4       	brne	.+16     	; 0xbf4 <_Z7pulseInhh+0x45e>
     be4:	86 c1       	rjmp	.+780    	; 0xef2 <_Z7pulseInhh+0x75c>
	                {
		              if (--mAxloops == 0)
		               return 0;
	                   }
  // wait for the pulse to start  
                  while (((PINH) && (c[pInno])) != vAlue)
     be6:	40 e0       	ldi	r20, 0x00	; 0
     be8:	51 e0       	ldi	r21, 0x01	; 1
     bea:	00 e0       	ldi	r16, 0x00	; 0
     bec:	12 e0       	ldi	r17, 0x02	; 2
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     bee:	cc 24       	eor	r12, r12
     bf0:	c3 94       	inc	r12
     bf2:	ee 24       	eor	r14, r14
	                {
		              if (--mAxloops == 0)
		               return 0;
	                   }
  // wait for the pulse to start  
                  while (((PINH) && (c[pInno])) != vAlue)
     bf4:	fa 01       	movw	r30, r20
     bf6:	20 81       	ld	r18, Z
     bf8:	22 23       	and	r18, r18
     bfa:	79 f0       	breq	.+30     	; 0xc1a <_Z7pulseInhh+0x484>
     bfc:	69 81       	ldd	r22, Y+1	; 0x01
     bfe:	70 e0       	ldi	r23, 0x00	; 0
     c00:	66 0f       	add	r22, r22
     c02:	77 1f       	adc	r23, r23
     c04:	60 0f       	add	r22, r16
     c06:	71 1f       	adc	r23, r17
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     c08:	2c 2d       	mov	r18, r12
     c0a:	fb 01       	movw	r30, r22
     c0c:	60 81       	ld	r22, Z
     c0e:	71 81       	ldd	r23, Z+1	; 0x01
     c10:	61 15       	cp	r22, r1
     c12:	71 05       	cpc	r23, r1
     c14:	19 f4       	brne	.+6      	; 0xc1c <_Z7pulseInhh+0x486>
     c16:	2e 2d       	mov	r18, r14
     c18:	01 c0       	rjmp	.+2      	; 0xc1c <_Z7pulseInhh+0x486>
	                {
		              if (--mAxloops == 0)
		               return 0;
	                   }
  // wait for the pulse to start  
                  while (((PINH) && (c[pInno])) != vAlue)
     c1a:	2e 2d       	mov	r18, r14
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	82 16       	cp	r8, r18
     c20:	93 06       	cpc	r9, r19
     c22:	e1 f6       	brne	.-72     	; 0xbdc <_Z7pulseInhh+0x446>
     c24:	20 e0       	ldi	r18, 0x00	; 0
     c26:	30 e0       	ldi	r19, 0x00	; 0
     c28:	a9 01       	movw	r20, r18
	                  {
		              if (--mAxloops == 0)
		                 return 0;
	                      }
  // wait for the pulse to stop
                while (((PINH) && ((c[pInno]))) == vAlue)
     c2a:	00 e0       	ldi	r16, 0x00	; 0
     c2c:	11 e0       	ldi	r17, 0x01	; 1
     c2e:	bb 24       	eor	r11, r11
     c30:	0f 2e       	mov	r0, r31
     c32:	f0 e0       	ldi	r31, 0x00	; 0
     c34:	cf 2e       	mov	r12, r31
     c36:	f2 e0       	ldi	r31, 0x02	; 2
     c38:	df 2e       	mov	r13, r31
     c3a:	f0 2d       	mov	r31, r0
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     c3c:	aa 24       	eor	r10, r10
     c3e:	a3 94       	inc	r10
     c40:	0a c0       	rjmp	.+20     	; 0xc56 <_Z7pulseInhh+0x4c0>
		                 return 0;
	                      }
  // wait for the pulse to stop
                while (((PINH) && ((c[pInno]))) == vAlue)
	                 {
                 		if (++wIdth == mAxloops)
     c42:	2f 5f       	subi	r18, 0xFF	; 255
     c44:	3f 4f       	sbci	r19, 0xFF	; 255
     c46:	4f 4f       	sbci	r20, 0xFF	; 255
     c48:	5f 4f       	sbci	r21, 0xFF	; 255
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	a4 07       	cpc	r26, r20
     c50:	b5 07       	cpc	r27, r21
     c52:	09 f4       	brne	.+2      	; 0xc56 <_Z7pulseInhh+0x4c0>
     c54:	52 c1       	rjmp	.+676    	; 0xefa <_Z7pulseInhh+0x764>
	                  {
		              if (--mAxloops == 0)
		                 return 0;
	                      }
  // wait for the pulse to stop
                while (((PINH) && ((c[pInno]))) == vAlue)
     c56:	f8 01       	movw	r30, r16
     c58:	60 81       	ld	r22, Z
     c5a:	66 23       	and	r22, r22
     c5c:	79 f0       	breq	.+30     	; 0xc7c <_Z7pulseInhh+0x4e6>
     c5e:	e9 80       	ldd	r14, Y+1	; 0x01
     c60:	ff 24       	eor	r15, r15
     c62:	ee 0c       	add	r14, r14
     c64:	ff 1c       	adc	r15, r15
     c66:	ec 0c       	add	r14, r12
     c68:	fd 1c       	adc	r15, r13
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     c6a:	6a 2d       	mov	r22, r10
     c6c:	f7 01       	movw	r30, r14
     c6e:	e0 80       	ld	r14, Z
     c70:	f1 80       	ldd	r15, Z+1	; 0x01
     c72:	e1 14       	cp	r14, r1
     c74:	f1 04       	cpc	r15, r1
     c76:	19 f4       	brne	.+6      	; 0xc7e <_Z7pulseInhh+0x4e8>
     c78:	6b 2d       	mov	r22, r11
     c7a:	01 c0       	rjmp	.+2      	; 0xc7e <_Z7pulseInhh+0x4e8>
	                  {
		              if (--mAxloops == 0)
		                 return 0;
	                      }
  // wait for the pulse to stop
                while (((PINH) && ((c[pInno]))) == vAlue)
     c7c:	6b 2d       	mov	r22, r11
     c7e:	70 e0       	ldi	r23, 0x00	; 0
     c80:	86 16       	cp	r8, r22
     c82:	97 06       	cpc	r9, r23
     c84:	f1 f2       	breq	.-68     	; 0xc42 <_Z7pulseInhh+0x4ac>
     c86:	54 c1       	rjmp	.+680    	; 0xf30 <_Z7pulseInhh+0x79a>
                         } break;  
case'j':
	                  
	                 { while (((PINJ) && (c[pInno])) == vAlue)
	                {
		              if (--mAxloops == 0)
     c88:	01 97       	sbiw	r24, 0x01	; 1
     c8a:	a1 09       	sbc	r26, r1
     c8c:	b1 09       	sbc	r27, r1
     c8e:	69 f4       	brne	.+26     	; 0xcaa <_Z7pulseInhh+0x514>
     c90:	38 c1       	rjmp	.+624    	; 0xf02 <_Z7pulseInhh+0x76c>
  TCCR2A = (1 << WGM21) | (1 << COM2A1) | (1 << FOC2A) | (0 << COM2A0) | (0 << WGM20); //initializing in CTC mode
  TCCR2A = (1 << CS20);
  unsigned long mAxloops = 500000;
  unsigned long wIdth = 0;
  // wait for any previous pulse to end
  switch(d[pInno]){
     c92:	80 e2       	ldi	r24, 0x20	; 32
     c94:	91 ea       	ldi	r25, 0xA1	; 161
     c96:	a7 e0       	ldi	r26, 0x07	; 7
     c98:	b0 e0       	ldi	r27, 0x00	; 0
                     	    }
                     return wIdth;
                         } break;  
case'j':
	                  
	                 { while (((PINJ) && (c[pInno])) == vAlue)
     c9a:	23 e0       	ldi	r18, 0x03	; 3
     c9c:	31 e0       	ldi	r19, 0x01	; 1
     c9e:	ee 24       	eor	r14, r14
     ca0:	40 e0       	ldi	r20, 0x00	; 0
     ca2:	52 e0       	ldi	r21, 0x02	; 2
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     ca4:	cc 24       	eor	r12, r12
     ca6:	c3 94       	inc	r12
                     	    }
                     return wIdth;
                         } break;  
case'j':
	                  
	                 { while (((PINJ) && (c[pInno])) == vAlue)
     ca8:	70 e0       	ldi	r23, 0x00	; 0
     caa:	f9 01       	movw	r30, r18
     cac:	10 81       	ld	r17, Z
     cae:	11 23       	and	r17, r17
     cb0:	71 f0       	breq	.+28     	; 0xcce <_Z7pulseInhh+0x538>
     cb2:	e9 81       	ldd	r30, Y+1	; 0x01
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	ee 0f       	add	r30, r30
     cb8:	ff 1f       	adc	r31, r31
     cba:	e4 0f       	add	r30, r20
     cbc:	f5 1f       	adc	r31, r21
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     cbe:	0c 2d       	mov	r16, r12
     cc0:	01 90       	ld	r0, Z+
     cc2:	f0 81       	ld	r31, Z
     cc4:	e0 2d       	mov	r30, r0
     cc6:	30 97       	sbiw	r30, 0x00	; 0
     cc8:	19 f4       	brne	.+6      	; 0xcd0 <_Z7pulseInhh+0x53a>
     cca:	0e 2d       	mov	r16, r14
     ccc:	01 c0       	rjmp	.+2      	; 0xcd0 <_Z7pulseInhh+0x53a>
                     	    }
                     return wIdth;
                         } break;  
case'j':
	                  
	                 { while (((PINJ) && (c[pInno])) == vAlue)
     cce:	0e 2d       	mov	r16, r14
     cd0:	4b 01       	movw	r8, r22
     cd2:	10 e0       	ldi	r17, 0x00	; 0
     cd4:	06 17       	cp	r16, r22
     cd6:	17 07       	cpc	r17, r23
     cd8:	b9 f2       	breq	.-82     	; 0xc88 <_Z7pulseInhh+0x4f2>
     cda:	05 c0       	rjmp	.+10     	; 0xce6 <_Z7pulseInhh+0x550>
		               return 0;
	                   }
  // wait for the pulse to start  
                  while (((PINJ) && (c[pInno])) != vAlue)
	                  {
		              if (--mAxloops == 0)
     cdc:	01 97       	sbiw	r24, 0x01	; 1
     cde:	a1 09       	sbc	r26, r1
     ce0:	b1 09       	sbc	r27, r1
     ce2:	41 f4       	brne	.+16     	; 0xcf4 <_Z7pulseInhh+0x55e>
     ce4:	12 c1       	rjmp	.+548    	; 0xf0a <_Z7pulseInhh+0x774>
	                {
		              if (--mAxloops == 0)
		               return 0;
	                   }
  // wait for the pulse to start  
                  while (((PINJ) && (c[pInno])) != vAlue)
     ce6:	43 e0       	ldi	r20, 0x03	; 3
     ce8:	51 e0       	ldi	r21, 0x01	; 1
     cea:	00 e0       	ldi	r16, 0x00	; 0
     cec:	12 e0       	ldi	r17, 0x02	; 2
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     cee:	cc 24       	eor	r12, r12
     cf0:	c3 94       	inc	r12
     cf2:	ee 24       	eor	r14, r14
	                {
		              if (--mAxloops == 0)
		               return 0;
	                   }
  // wait for the pulse to start  
                  while (((PINJ) && (c[pInno])) != vAlue)
     cf4:	fa 01       	movw	r30, r20
     cf6:	20 81       	ld	r18, Z
     cf8:	22 23       	and	r18, r18
     cfa:	79 f0       	breq	.+30     	; 0xd1a <_Z7pulseInhh+0x584>
     cfc:	69 81       	ldd	r22, Y+1	; 0x01
     cfe:	70 e0       	ldi	r23, 0x00	; 0
     d00:	66 0f       	add	r22, r22
     d02:	77 1f       	adc	r23, r23
     d04:	60 0f       	add	r22, r16
     d06:	71 1f       	adc	r23, r17
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     d08:	2c 2d       	mov	r18, r12
     d0a:	fb 01       	movw	r30, r22
     d0c:	60 81       	ld	r22, Z
     d0e:	71 81       	ldd	r23, Z+1	; 0x01
     d10:	61 15       	cp	r22, r1
     d12:	71 05       	cpc	r23, r1
     d14:	19 f4       	brne	.+6      	; 0xd1c <_Z7pulseInhh+0x586>
     d16:	2e 2d       	mov	r18, r14
     d18:	01 c0       	rjmp	.+2      	; 0xd1c <_Z7pulseInhh+0x586>
	                {
		              if (--mAxloops == 0)
		               return 0;
	                   }
  // wait for the pulse to start  
                  while (((PINJ) && (c[pInno])) != vAlue)
     d1a:	2e 2d       	mov	r18, r14
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	82 16       	cp	r8, r18
     d20:	93 06       	cpc	r9, r19
     d22:	e1 f6       	brne	.-72     	; 0xcdc <_Z7pulseInhh+0x546>
     d24:	20 e0       	ldi	r18, 0x00	; 0
     d26:	30 e0       	ldi	r19, 0x00	; 0
     d28:	a9 01       	movw	r20, r18
	                  {
		              if (--mAxloops == 0)
		                 return 0;
	                      }
  // wait for the pulse to stop
                while (((PINJ) && (c[pInno])) == vAlue)
     d2a:	03 e0       	ldi	r16, 0x03	; 3
     d2c:	11 e0       	ldi	r17, 0x01	; 1
     d2e:	bb 24       	eor	r11, r11
     d30:	0f 2e       	mov	r0, r31
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	cf 2e       	mov	r12, r31
     d36:	f2 e0       	ldi	r31, 0x02	; 2
     d38:	df 2e       	mov	r13, r31
     d3a:	f0 2d       	mov	r31, r0
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     d3c:	aa 24       	eor	r10, r10
     d3e:	a3 94       	inc	r10
     d40:	0a c0       	rjmp	.+20     	; 0xd56 <_Z7pulseInhh+0x5c0>
		                 return 0;
	                      }
  // wait for the pulse to stop
                while (((PINJ) && (c[pInno])) == vAlue)
	                 {
                 		if (++wIdth == mAxloops)
     d42:	2f 5f       	subi	r18, 0xFF	; 255
     d44:	3f 4f       	sbci	r19, 0xFF	; 255
     d46:	4f 4f       	sbci	r20, 0xFF	; 255
     d48:	5f 4f       	sbci	r21, 0xFF	; 255
     d4a:	82 17       	cp	r24, r18
     d4c:	93 07       	cpc	r25, r19
     d4e:	a4 07       	cpc	r26, r20
     d50:	b5 07       	cpc	r27, r21
     d52:	09 f4       	brne	.+2      	; 0xd56 <_Z7pulseInhh+0x5c0>
     d54:	de c0       	rjmp	.+444    	; 0xf12 <_Z7pulseInhh+0x77c>
	                  {
		              if (--mAxloops == 0)
		                 return 0;
	                      }
  // wait for the pulse to stop
                while (((PINJ) && (c[pInno])) == vAlue)
     d56:	f8 01       	movw	r30, r16
     d58:	60 81       	ld	r22, Z
     d5a:	66 23       	and	r22, r22
     d5c:	79 f0       	breq	.+30     	; 0xd7c <_Z7pulseInhh+0x5e6>
     d5e:	e9 80       	ldd	r14, Y+1	; 0x01
     d60:	ff 24       	eor	r15, r15
     d62:	ee 0c       	add	r14, r14
     d64:	ff 1c       	adc	r15, r15
     d66:	ec 0c       	add	r14, r12
     d68:	fd 1c       	adc	r15, r13
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     d6a:	6a 2d       	mov	r22, r10
     d6c:	f7 01       	movw	r30, r14
     d6e:	e0 80       	ld	r14, Z
     d70:	f1 80       	ldd	r15, Z+1	; 0x01
     d72:	e1 14       	cp	r14, r1
     d74:	f1 04       	cpc	r15, r1
     d76:	19 f4       	brne	.+6      	; 0xd7e <_Z7pulseInhh+0x5e8>
     d78:	6b 2d       	mov	r22, r11
     d7a:	01 c0       	rjmp	.+2      	; 0xd7e <_Z7pulseInhh+0x5e8>
	                  {
		              if (--mAxloops == 0)
		                 return 0;
	                      }
  // wait for the pulse to stop
                while (((PINJ) && (c[pInno])) == vAlue)
     d7c:	6b 2d       	mov	r22, r11
     d7e:	70 e0       	ldi	r23, 0x00	; 0
     d80:	86 16       	cp	r8, r22
     d82:	97 06       	cpc	r9, r23
     d84:	f1 f2       	breq	.-68     	; 0xd42 <_Z7pulseInhh+0x5ac>
     d86:	d4 c0       	rjmp	.+424    	; 0xf30 <_Z7pulseInhh+0x79a>
			           break;
case 'l':
	                  
	                 { while (((PINL) && (c[pInno])) == vAlue)
	                {
		              if (--mAxloops == 0)
     d88:	01 97       	sbiw	r24, 0x01	; 1
     d8a:	a1 09       	sbc	r26, r1
     d8c:	b1 09       	sbc	r27, r1
     d8e:	69 f4       	brne	.+26     	; 0xdaa <_Z7pulseInhh+0x614>
     d90:	c4 c0       	rjmp	.+392    	; 0xf1a <_Z7pulseInhh+0x784>
  TCCR2A = (1 << WGM21) | (1 << COM2A1) | (1 << FOC2A) | (0 << COM2A0) | (0 << WGM20); //initializing in CTC mode
  TCCR2A = (1 << CS20);
  unsigned long mAxloops = 500000;
  unsigned long wIdth = 0;
  // wait for any previous pulse to end
  switch(d[pInno]){
     d92:	80 e2       	ldi	r24, 0x20	; 32
     d94:	91 ea       	ldi	r25, 0xA1	; 161
     d96:	a7 e0       	ldi	r26, 0x07	; 7
     d98:	b0 e0       	ldi	r27, 0x00	; 0
                     return wIdth;
                         }  
			           break;
case 'l':
	                  
	                 { while (((PINL) && (c[pInno])) == vAlue)
     d9a:	29 e0       	ldi	r18, 0x09	; 9
     d9c:	31 e0       	ldi	r19, 0x01	; 1
     d9e:	ee 24       	eor	r14, r14
     da0:	40 e0       	ldi	r20, 0x00	; 0
     da2:	52 e0       	ldi	r21, 0x02	; 2
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     da4:	cc 24       	eor	r12, r12
     da6:	c3 94       	inc	r12
                     return wIdth;
                         }  
			           break;
case 'l':
	                  
	                 { while (((PINL) && (c[pInno])) == vAlue)
     da8:	70 e0       	ldi	r23, 0x00	; 0
     daa:	f9 01       	movw	r30, r18
     dac:	10 81       	ld	r17, Z
     dae:	11 23       	and	r17, r17
     db0:	71 f0       	breq	.+28     	; 0xdce <_Z7pulseInhh+0x638>
     db2:	e9 81       	ldd	r30, Y+1	; 0x01
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	ee 0f       	add	r30, r30
     db8:	ff 1f       	adc	r31, r31
     dba:	e4 0f       	add	r30, r20
     dbc:	f5 1f       	adc	r31, r21
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     dbe:	0c 2d       	mov	r16, r12
     dc0:	01 90       	ld	r0, Z+
     dc2:	f0 81       	ld	r31, Z
     dc4:	e0 2d       	mov	r30, r0
     dc6:	30 97       	sbiw	r30, 0x00	; 0
     dc8:	19 f4       	brne	.+6      	; 0xdd0 <_Z7pulseInhh+0x63a>
     dca:	0e 2d       	mov	r16, r14
     dcc:	01 c0       	rjmp	.+2      	; 0xdd0 <_Z7pulseInhh+0x63a>
                     return wIdth;
                         }  
			           break;
case 'l':
	                  
	                 { while (((PINL) && (c[pInno])) == vAlue)
     dce:	0e 2d       	mov	r16, r14
     dd0:	4b 01       	movw	r8, r22
     dd2:	10 e0       	ldi	r17, 0x00	; 0
     dd4:	06 17       	cp	r16, r22
     dd6:	17 07       	cpc	r17, r23
     dd8:	b9 f2       	breq	.-82     	; 0xd88 <_Z7pulseInhh+0x5f2>
     dda:	05 c0       	rjmp	.+10     	; 0xde6 <_Z7pulseInhh+0x650>
		               return 0;
	                   }
  // wait for the pulse to start  
                  while (((PINL) && (c[pInno])) != vAlue)
	                  {
		              if (--mAxloops == 0)
     ddc:	01 97       	sbiw	r24, 0x01	; 1
     dde:	a1 09       	sbc	r26, r1
     de0:	b1 09       	sbc	r27, r1
     de2:	41 f4       	brne	.+16     	; 0xdf4 <_Z7pulseInhh+0x65e>
     de4:	9e c0       	rjmp	.+316    	; 0xf22 <_Z7pulseInhh+0x78c>
	                {
		              if (--mAxloops == 0)
		               return 0;
	                   }
  // wait for the pulse to start  
                  while (((PINL) && (c[pInno])) != vAlue)
     de6:	49 e0       	ldi	r20, 0x09	; 9
     de8:	51 e0       	ldi	r21, 0x01	; 1
     dea:	00 e0       	ldi	r16, 0x00	; 0
     dec:	12 e0       	ldi	r17, 0x02	; 2
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     dee:	cc 24       	eor	r12, r12
     df0:	c3 94       	inc	r12
     df2:	ee 24       	eor	r14, r14
	                {
		              if (--mAxloops == 0)
		               return 0;
	                   }
  // wait for the pulse to start  
                  while (((PINL) && (c[pInno])) != vAlue)
     df4:	fa 01       	movw	r30, r20
     df6:	20 81       	ld	r18, Z
     df8:	22 23       	and	r18, r18
     dfa:	79 f0       	breq	.+30     	; 0xe1a <_Z7pulseInhh+0x684>
     dfc:	69 81       	ldd	r22, Y+1	; 0x01
     dfe:	70 e0       	ldi	r23, 0x00	; 0
     e00:	66 0f       	add	r22, r22
     e02:	77 1f       	adc	r23, r23
     e04:	60 0f       	add	r22, r16
     e06:	71 1f       	adc	r23, r17
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     e08:	2c 2d       	mov	r18, r12
     e0a:	fb 01       	movw	r30, r22
     e0c:	60 81       	ld	r22, Z
     e0e:	71 81       	ldd	r23, Z+1	; 0x01
     e10:	61 15       	cp	r22, r1
     e12:	71 05       	cpc	r23, r1
     e14:	19 f4       	brne	.+6      	; 0xe1c <_Z7pulseInhh+0x686>
     e16:	2e 2d       	mov	r18, r14
     e18:	01 c0       	rjmp	.+2      	; 0xe1c <_Z7pulseInhh+0x686>
	                {
		              if (--mAxloops == 0)
		               return 0;
	                   }
  // wait for the pulse to start  
                  while (((PINL) && (c[pInno])) != vAlue)
     e1a:	2e 2d       	mov	r18, r14
     e1c:	30 e0       	ldi	r19, 0x00	; 0
     e1e:	82 16       	cp	r8, r18
     e20:	93 06       	cpc	r9, r19
     e22:	e1 f6       	brne	.-72     	; 0xddc <_Z7pulseInhh+0x646>
     e24:	20 e0       	ldi	r18, 0x00	; 0
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	a9 01       	movw	r20, r18
	                  {
		              if (--mAxloops == 0)
		                 return 0;
	                      }
  // wait for the pulse to stop
                while (((PINL) && (c[pInno])) == vAlue)
     e2a:	09 e0       	ldi	r16, 0x09	; 9
     e2c:	11 e0       	ldi	r17, 0x01	; 1
     e2e:	bb 24       	eor	r11, r11
     e30:	0f 2e       	mov	r0, r31
     e32:	f0 e0       	ldi	r31, 0x00	; 0
     e34:	cf 2e       	mov	r12, r31
     e36:	f2 e0       	ldi	r31, 0x02	; 2
     e38:	df 2e       	mov	r13, r31
     e3a:	f0 2d       	mov	r31, r0
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     e3c:	aa 24       	eor	r10, r10
     e3e:	a3 94       	inc	r10
     e40:	0a c0       	rjmp	.+20     	; 0xe56 <_Z7pulseInhh+0x6c0>
		                 return 0;
	                      }
  // wait for the pulse to stop
                while (((PINL) && (c[pInno])) == vAlue)
	                 {
                 		if (++wIdth == mAxloops)
     e42:	2f 5f       	subi	r18, 0xFF	; 255
     e44:	3f 4f       	sbci	r19, 0xFF	; 255
     e46:	4f 4f       	sbci	r20, 0xFF	; 255
     e48:	5f 4f       	sbci	r21, 0xFF	; 255
     e4a:	82 17       	cp	r24, r18
     e4c:	93 07       	cpc	r25, r19
     e4e:	a4 07       	cpc	r26, r20
     e50:	b5 07       	cpc	r27, r21
     e52:	09 f4       	brne	.+2      	; 0xe56 <_Z7pulseInhh+0x6c0>
     e54:	6a c0       	rjmp	.+212    	; 0xf2a <_Z7pulseInhh+0x794>
	                  {
		              if (--mAxloops == 0)
		                 return 0;
	                      }
  // wait for the pulse to stop
                while (((PINL) && (c[pInno])) == vAlue)
     e56:	f8 01       	movw	r30, r16
     e58:	60 81       	ld	r22, Z
     e5a:	66 23       	and	r22, r22
     e5c:	79 f0       	breq	.+30     	; 0xe7c <_Z7pulseInhh+0x6e6>
     e5e:	e9 80       	ldd	r14, Y+1	; 0x01
     e60:	ff 24       	eor	r15, r15
     e62:	ee 0c       	add	r14, r14
     e64:	ff 1c       	adc	r15, r15
     e66:	ec 0c       	add	r14, r12
     e68:	fd 1c       	adc	r15, r13
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     e6a:	6a 2d       	mov	r22, r10
     e6c:	f7 01       	movw	r30, r14
     e6e:	e0 80       	ld	r14, Z
     e70:	f1 80       	ldd	r15, Z+1	; 0x01
     e72:	e1 14       	cp	r14, r1
     e74:	f1 04       	cpc	r15, r1
     e76:	19 f4       	brne	.+6      	; 0xe7e <_Z7pulseInhh+0x6e8>
     e78:	6b 2d       	mov	r22, r11
     e7a:	01 c0       	rjmp	.+2      	; 0xe7e <_Z7pulseInhh+0x6e8>
	                  {
		              if (--mAxloops == 0)
		                 return 0;
	                      }
  // wait for the pulse to stop
                while (((PINL) && (c[pInno])) == vAlue)
     e7c:	6b 2d       	mov	r22, r11
     e7e:	70 e0       	ldi	r23, 0x00	; 0
     e80:	86 16       	cp	r8, r22
     e82:	97 06       	cpc	r9, r23
     e84:	f1 f2       	breq	.-68     	; 0xe42 <_Z7pulseInhh+0x6ac>
     e86:	54 c0       	rjmp	.+168    	; 0xf30 <_Z7pulseInhh+0x79a>
     e88:	57 c0       	rjmp	.+174    	; 0xf38 <_Z7pulseInhh+0x7a2>
  switch(d[pInno]){
            case'b':
	               { while (((PINB) && ((c[pInno]))) == vAlue)
	              {
		          if (--mAxloops == 0)
		            return 0;
     e8a:	20 e0       	ldi	r18, 0x00	; 0
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	a9 01       	movw	r20, r18
     e90:	4f c0       	rjmp	.+158    	; 0xf30 <_Z7pulseInhh+0x79a>
	                }
             // wait for the pulse to start  
              while (((PINB) && (c[pInno])) != vAlue)
	              {
		     if (--mAxloops == 0) 
		          return 0;
     e92:	20 e0       	ldi	r18, 0x00	; 0
     e94:	30 e0       	ldi	r19, 0x00	; 0
     e96:	a9 01       	movw	r20, r18
     e98:	4b c0       	rjmp	.+150    	; 0xf30 <_Z7pulseInhh+0x79a>
	           }
            // wait for the pulse to stop
             while (((PINB) && (c[pInno])) == vAlue)
	                   {
	               	if (++wIdth == mAxloops)
		          return 0;
     e9a:	20 e0       	ldi	r18, 0x00	; 0
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	a9 01       	movw	r20, r18
     ea0:	47 c0       	rjmp	.+142    	; 0xf30 <_Z7pulseInhh+0x79a>
                    }  break;
 case'c':
	                 { while (((PINC) && (c[pInno])) == vAlue)
	                {
		              if (--mAxloops == 0)
		               return 0;
     ea2:	20 e0       	ldi	r18, 0x00	; 0
     ea4:	30 e0       	ldi	r19, 0x00	; 0
     ea6:	a9 01       	movw	r20, r18
     ea8:	43 c0       	rjmp	.+134    	; 0xf30 <_Z7pulseInhh+0x79a>
	                   }
  // wait for the pulse to start  
                  while (((PINC) && (c[pInno])) != vAlue)
	                  {
		              if (--mAxloops == 0)
		                 return 0;
     eaa:	20 e0       	ldi	r18, 0x00	; 0
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	a9 01       	movw	r20, r18
     eb0:	3f c0       	rjmp	.+126    	; 0xf30 <_Z7pulseInhh+0x79a>
	                      }
  // wait for the pulse to stop
                while (((PINC) && (c[pInno])) == vAlue)
	                 {
                 		if (++wIdth == mAxloops)
                  		return 0;
     eb2:	20 e0       	ldi	r18, 0x00	; 0
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	a9 01       	movw	r20, r18
     eb8:	3b c0       	rjmp	.+118    	; 0xf30 <_Z7pulseInhh+0x79a>
	 case'd':
	     
	                 { while (((PIND) && (c[pInno])) == vAlue)
	                {
		              if (--mAxloops == 0)
		               return 0;
     eba:	20 e0       	ldi	r18, 0x00	; 0
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	a9 01       	movw	r20, r18
     ec0:	37 c0       	rjmp	.+110    	; 0xf30 <_Z7pulseInhh+0x79a>
	                   }
  // wait for the pulse to start  
                  while (((PIND) && (c[pInno])) != vAlue)
	                  {
		              if (--mAxloops == 0)
		                 return 0;
     ec2:	20 e0       	ldi	r18, 0x00	; 0
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	a9 01       	movw	r20, r18
     ec8:	33 c0       	rjmp	.+102    	; 0xf30 <_Z7pulseInhh+0x79a>
	                      }
  // wait for the pulse to stop
                while (((PIND) && (c[pInno])) == vAlue)
	                 {
                 		if (++wIdth == mAxloops)
                  		return 0;
     eca:	20 e0       	ldi	r18, 0x00	; 0
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	a9 01       	movw	r20, r18
     ed0:	2f c0       	rjmp	.+94     	; 0xf30 <_Z7pulseInhh+0x79a>
	case'e':
	                  
	                 { while (((PINE) && (c[pInno])) == vAlue)
	                {
		              if (--mAxloops == 0)
		               return 0;
     ed2:	20 e0       	ldi	r18, 0x00	; 0
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	a9 01       	movw	r20, r18
     ed8:	2b c0       	rjmp	.+86     	; 0xf30 <_Z7pulseInhh+0x79a>
	                   }
  // wait for the pulse to start  
                  while (((PINE) && (c[pInno])) != vAlue)
	                  {
		              if (--mAxloops == 0)
		                 return 0;
     eda:	20 e0       	ldi	r18, 0x00	; 0
     edc:	30 e0       	ldi	r19, 0x00	; 0
     ede:	a9 01       	movw	r20, r18
     ee0:	27 c0       	rjmp	.+78     	; 0xf30 <_Z7pulseInhh+0x79a>
	                      }
  // wait for the pulse to stop
                while (((PINE) && (c[pInno])) == vAlue)
	                 {
                 		if (++wIdth == mAxloops)
                  		return 0;
     ee2:	20 e0       	ldi	r18, 0x00	; 0
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	a9 01       	movw	r20, r18
     ee8:	23 c0       	rjmp	.+70     	; 0xf30 <_Z7pulseInhh+0x79a>
case'h':
	                 
	                 { while (((PINH) &&(c[pInno])) == vAlue)
	                {
		              if (--mAxloops == 0)
		               return 0;
     eea:	20 e0       	ldi	r18, 0x00	; 0
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	a9 01       	movw	r20, r18
     ef0:	1f c0       	rjmp	.+62     	; 0xf30 <_Z7pulseInhh+0x79a>
	                   }
  // wait for the pulse to start  
                  while (((PINH) && (c[pInno])) != vAlue)
	                  {
		              if (--mAxloops == 0)
		                 return 0;
     ef2:	20 e0       	ldi	r18, 0x00	; 0
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	a9 01       	movw	r20, r18
     ef8:	1b c0       	rjmp	.+54     	; 0xf30 <_Z7pulseInhh+0x79a>
	                      }
  // wait for the pulse to stop
                while (((PINH) && ((c[pInno]))) == vAlue)
	                 {
                 		if (++wIdth == mAxloops)
                  		return 0;
     efa:	20 e0       	ldi	r18, 0x00	; 0
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	a9 01       	movw	r20, r18
     f00:	17 c0       	rjmp	.+46     	; 0xf30 <_Z7pulseInhh+0x79a>
case'j':
	                  
	                 { while (((PINJ) && (c[pInno])) == vAlue)
	                {
		              if (--mAxloops == 0)
		               return 0;
     f02:	20 e0       	ldi	r18, 0x00	; 0
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	a9 01       	movw	r20, r18
     f08:	13 c0       	rjmp	.+38     	; 0xf30 <_Z7pulseInhh+0x79a>
	                   }
  // wait for the pulse to start  
                  while (((PINJ) && (c[pInno])) != vAlue)
	                  {
		              if (--mAxloops == 0)
		                 return 0;
     f0a:	20 e0       	ldi	r18, 0x00	; 0
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	a9 01       	movw	r20, r18
     f10:	0f c0       	rjmp	.+30     	; 0xf30 <_Z7pulseInhh+0x79a>
	                      }
  // wait for the pulse to stop
                while (((PINJ) && (c[pInno])) == vAlue)
	                 {
                 		if (++wIdth == mAxloops)
                  		return 0;
     f12:	20 e0       	ldi	r18, 0x00	; 0
     f14:	30 e0       	ldi	r19, 0x00	; 0
     f16:	a9 01       	movw	r20, r18
     f18:	0b c0       	rjmp	.+22     	; 0xf30 <_Z7pulseInhh+0x79a>
case 'l':
	                  
	                 { while (((PINL) && (c[pInno])) == vAlue)
	                {
		              if (--mAxloops == 0)
		               return 0;
     f1a:	20 e0       	ldi	r18, 0x00	; 0
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	a9 01       	movw	r20, r18
     f20:	07 c0       	rjmp	.+14     	; 0xf30 <_Z7pulseInhh+0x79a>
	                   }
  // wait for the pulse to start  
                  while (((PINL) && (c[pInno])) != vAlue)
	                  {
		              if (--mAxloops == 0)
		                 return 0;
     f22:	20 e0       	ldi	r18, 0x00	; 0
     f24:	30 e0       	ldi	r19, 0x00	; 0
     f26:	a9 01       	movw	r20, r18
     f28:	03 c0       	rjmp	.+6      	; 0xf30 <_Z7pulseInhh+0x79a>
	                      }
  // wait for the pulse to stop
                while (((PINL) && (c[pInno])) == vAlue)
	                 {
                 		if (++wIdth == mAxloops)
                  		return 0;
     f2a:	20 e0       	ldi	r18, 0x00	; 0
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	a9 01       	movw	r20, r18
                     	    }
                     return wIdth;
                         }  
			           break;	        		   		   	  	  		 		 			 
	     }  
					 }					 	
     f30:	62 2f       	mov	r22, r18
     f32:	73 2f       	mov	r23, r19
     f34:	84 2f       	mov	r24, r20
     f36:	95 2f       	mov	r25, r21
     f38:	0f 90       	pop	r0
     f3a:	cf 91       	pop	r28
     f3c:	df 91       	pop	r29
     f3e:	1f 91       	pop	r17
     f40:	0f 91       	pop	r16
     f42:	ff 90       	pop	r15
     f44:	ef 90       	pop	r14
     f46:	df 90       	pop	r13
     f48:	cf 90       	pop	r12
     f4a:	bf 90       	pop	r11
     f4c:	af 90       	pop	r10
     f4e:	9f 90       	pop	r9
     f50:	8f 90       	pop	r8
     f52:	08 95       	ret

00000f54 <_Z7initADCv>:
	}

};
void initADC()
{
	ADMUX=(1<<REFS0);				//Aref=AVcc
     f54:	80 e4       	ldi	r24, 0x40	; 64
     f56:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1);		//ADC enabled, Prescaler 64
     f5a:	86 e8       	ldi	r24, 0x86	; 134
     f5c:	80 93 7a 00 	sts	0x007A, r24
}
     f60:	08 95       	ret

00000f62 <_Z10analogReadi>:

int analogRead(int (pInno))
{
     f62:	cf 93       	push	r28
     f64:	df 93       	push	r29
        //prescalar set to default
  	ADMUX=(1<<REFS0)|(0<<REFS1);
     f66:	cc e7       	ldi	r28, 0x7C	; 124
     f68:	d0 e0       	ldi	r29, 0x00	; 0
     f6a:	20 e4       	ldi	r18, 0x40	; 64
     f6c:	28 83       	st	Y, r18
  	ADCSRA|=(1<<ADEN);
     f6e:	ea e7       	ldi	r30, 0x7A	; 122
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	20 81       	ld	r18, Z
     f74:	20 68       	ori	r18, 0x80	; 128
     f76:	20 83       	st	Z, r18
        ADMUX|=(pInno%8);//chose value from 0 to 7 to chose adc pin accordingly
     f78:	28 81       	ld	r18, Y
     f7a:	68 e0       	ldi	r22, 0x08	; 8
     f7c:	70 e0       	ldi	r23, 0x00	; 0
     f7e:	0e 94 ed 14 	call	0x29da	; 0x29da <__divmodhi4>
     f82:	28 2b       	or	r18, r24
     f84:	28 83       	st	Y, r18
        ADCSRA|=(1<<ADEN);
     f86:	80 81       	ld	r24, Z
     f88:	80 68       	ori	r24, 0x80	; 128
     f8a:	80 83       	st	Z, r24
        ADCSRA|=(1<<ADSC);
     f8c:	80 81       	ld	r24, Z
     f8e:	80 64       	ori	r24, 0x40	; 64
     f90:	80 83       	st	Z, r24
	while(ADCSRA&(1<<ADSC));
     f92:	80 81       	ld	r24, Z
     f94:	86 fd       	sbrc	r24, 6
     f96:	fd cf       	rjmp	.-6      	; 0xf92 <_Z10analogReadi+0x30>
	return (ADC);
     f98:	20 91 78 00 	lds	r18, 0x0078
     f9c:	30 91 79 00 	lds	r19, 0x0079
}
     fa0:	82 2f       	mov	r24, r18
     fa2:	93 2f       	mov	r25, r19
     fa4:	df 91       	pop	r29
     fa6:	cf 91       	pop	r28
     fa8:	08 95       	ret

00000faa <_Z11analogWritehh>:

void analogWrite(uint8_t pInno,uint8_t dUtycY)
{
  TCCR1B=(1<<CS11)|(1<<CS10);
     faa:	93 e0       	ldi	r25, 0x03	; 3
     fac:	90 93 81 00 	sts	0x0081, r25
  TCCR1A=(1<<WGM10)|(1<<WGM12)|(1<<COM1A1)|(1<<COM1B1);
     fb0:	99 ea       	ldi	r25, 0xA9	; 169
     fb2:	90 93 80 00 	sts	0x0080, r25
	if((pInno%8)==1)
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	87 70       	andi	r24, 0x07	; 7
     fba:	90 70       	andi	r25, 0x00	; 0
     fbc:	81 30       	cpi	r24, 0x01	; 1
     fbe:	91 05       	cpc	r25, r1
     fc0:	31 f4       	brne	.+12     	; 0xfce <_Z11analogWritehh+0x24>
	{
	  OCR1A=dUtycY;
     fc2:	70 e0       	ldi	r23, 0x00	; 0
     fc4:	70 93 89 00 	sts	0x0089, r23
     fc8:	60 93 88 00 	sts	0x0088, r22
     fcc:	08 95       	ret
	}
	if((pInno%8)==2)
     fce:	82 30       	cpi	r24, 0x02	; 2
     fd0:	91 05       	cpc	r25, r1
     fd2:	29 f4       	brne	.+10     	; 0xfde <_Z11analogWritehh+0x34>
	{
          OCR1B=dUtycY;
     fd4:	70 e0       	ldi	r23, 0x00	; 0
     fd6:	70 93 8b 00 	sts	0x008B, r23
     fda:	60 93 8a 00 	sts	0x008A, r22
     fde:	08 95       	ret

00000fe0 <_Z6millisv>:
	}
}

float x=0;
int millis()
{
     fe0:	cf 92       	push	r12
     fe2:	df 92       	push	r13
     fe4:	ef 92       	push	r14
     fe6:	ff 92       	push	r15
     fe8:	1f 93       	push	r17
	float l;
	l=x*0.16+0.00000625*TCNT0;
     fea:	16 b5       	in	r17, 0x26	; 38
     fec:	60 91 b6 02 	lds	r22, 0x02B6
     ff0:	70 91 b7 02 	lds	r23, 0x02B7
     ff4:	80 91 b8 02 	lds	r24, 0x02B8
     ff8:	90 91 b9 02 	lds	r25, 0x02B9
     ffc:	2a e0       	ldi	r18, 0x0A	; 10
     ffe:	37 ed       	ldi	r19, 0xD7	; 215
    1000:	43 e2       	ldi	r20, 0x23	; 35
    1002:	5e e3       	ldi	r21, 0x3E	; 62
    1004:	0e 94 76 14 	call	0x28ec	; 0x28ec <__mulsf3>
    1008:	6b 01       	movw	r12, r22
    100a:	7c 01       	movw	r14, r24
    100c:	61 2f       	mov	r22, r17
    100e:	70 e0       	ldi	r23, 0x00	; 0
    1010:	88 27       	eor	r24, r24
    1012:	77 fd       	sbrc	r23, 7
    1014:	80 95       	com	r24
    1016:	98 2f       	mov	r25, r24
    1018:	0e 94 c2 13 	call	0x2784	; 0x2784 <__floatsisf>
    101c:	27 e1       	ldi	r18, 0x17	; 23
    101e:	37 eb       	ldi	r19, 0xB7	; 183
    1020:	41 ed       	ldi	r20, 0xD1	; 209
    1022:	56 e3       	ldi	r21, 0x36	; 54
    1024:	0e 94 76 14 	call	0x28ec	; 0x28ec <__mulsf3>
    1028:	9b 01       	movw	r18, r22
    102a:	ac 01       	movw	r20, r24
    102c:	c7 01       	movw	r24, r14
    102e:	b6 01       	movw	r22, r12
    1030:	0e 94 bf 12 	call	0x257e	; 0x257e <__addsf3>
        return l;
    1034:	0e 94 8f 13 	call	0x271e	; 0x271e <__fixsfsi>
}
    1038:	86 2f       	mov	r24, r22
    103a:	97 2f       	mov	r25, r23
    103c:	1f 91       	pop	r17
    103e:	ff 90       	pop	r15
    1040:	ef 90       	pop	r14
    1042:	df 90       	pop	r13
    1044:	cf 90       	pop	r12
    1046:	08 95       	ret

00001048 <_Z5tinitv>:

void tinit(void)
{ 
	TCCR0A|=(1<<WGM01);
    1048:	84 b5       	in	r24, 0x24	; 36
    104a:	82 60       	ori	r24, 0x02	; 2
    104c:	84 bd       	out	0x24, r24	; 36
        TCCR0A|=(1<<CS00);
    104e:	84 b5       	in	r24, 0x24	; 36
    1050:	81 60       	ori	r24, 0x01	; 1
    1052:	84 bd       	out	0x24, r24	; 36
	TIMSK0|=(1<<TOV0);
    1054:	ee e6       	ldi	r30, 0x6E	; 110
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	81 60       	ori	r24, 0x01	; 1
    105c:	80 83       	st	Z, r24
        TCNT0=0;
    105e:	16 bc       	out	0x26, r1	; 38
}
    1060:	08 95       	ret

00001062 <__vector_23>:


ISR(TIMER0_OVF_vect)
{
    1062:	1f 92       	push	r1
    1064:	0f 92       	push	r0
    1066:	0f b6       	in	r0, 0x3f	; 63
    1068:	0f 92       	push	r0
    106a:	0b b6       	in	r0, 0x3b	; 59
    106c:	0f 92       	push	r0
    106e:	11 24       	eor	r1, r1
    1070:	2f 93       	push	r18
    1072:	3f 93       	push	r19
    1074:	4f 93       	push	r20
    1076:	5f 93       	push	r21
    1078:	6f 93       	push	r22
    107a:	7f 93       	push	r23
    107c:	8f 93       	push	r24
    107e:	9f 93       	push	r25
    1080:	af 93       	push	r26
    1082:	bf 93       	push	r27
    1084:	ef 93       	push	r30
    1086:	ff 93       	push	r31
	x++;	
    1088:	60 91 b6 02 	lds	r22, 0x02B6
    108c:	70 91 b7 02 	lds	r23, 0x02B7
    1090:	80 91 b8 02 	lds	r24, 0x02B8
    1094:	90 91 b9 02 	lds	r25, 0x02B9
    1098:	20 e0       	ldi	r18, 0x00	; 0
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	40 e8       	ldi	r20, 0x80	; 128
    109e:	5f e3       	ldi	r21, 0x3F	; 63
    10a0:	0e 94 bf 12 	call	0x257e	; 0x257e <__addsf3>
    10a4:	60 93 b6 02 	sts	0x02B6, r22
    10a8:	70 93 b7 02 	sts	0x02B7, r23
    10ac:	80 93 b8 02 	sts	0x02B8, r24
    10b0:	90 93 b9 02 	sts	0x02B9, r25
}	
    10b4:	ff 91       	pop	r31
    10b6:	ef 91       	pop	r30
    10b8:	bf 91       	pop	r27
    10ba:	af 91       	pop	r26
    10bc:	9f 91       	pop	r25
    10be:	8f 91       	pop	r24
    10c0:	7f 91       	pop	r23
    10c2:	6f 91       	pop	r22
    10c4:	5f 91       	pop	r21
    10c6:	4f 91       	pop	r20
    10c8:	3f 91       	pop	r19
    10ca:	2f 91       	pop	r18
    10cc:	0f 90       	pop	r0
    10ce:	0b be       	out	0x3b, r0	; 59
    10d0:	0f 90       	pop	r0
    10d2:	0f be       	out	0x3f, r0	; 63
    10d4:	0f 90       	pop	r0
    10d6:	1f 90       	pop	r1
    10d8:	18 95       	reti

000010da <_Z5delaym>:

void delay(unsigned long mIllisec)
{
    10da:	9b 01       	movw	r18, r22
    10dc:	ac 01       	movw	r20, r24
	int i;
	for(i=0;i<mIllisec;i++)
    10de:	61 15       	cp	r22, r1
    10e0:	71 05       	cpc	r23, r1
    10e2:	81 05       	cpc	r24, r1
    10e4:	91 05       	cpc	r25, r1
    10e6:	a1 f0       	breq	.+40     	; 0x1110 <_Z5delaym+0x36>
    10e8:	60 e0       	ldi	r22, 0x00	; 0
    10ea:	70 e0       	ldi	r23, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    10ec:	8f e9       	ldi	r24, 0x9F	; 159
    10ee:	9f e0       	ldi	r25, 0x0F	; 15
    10f0:	01 97       	sbiw	r24, 0x01	; 1
    10f2:	f1 f7       	brne	.-4      	; 0x10f0 <_Z5delaym+0x16>
    10f4:	00 c0       	rjmp	.+0      	; 0x10f6 <_Z5delaym+0x1c>
    10f6:	00 00       	nop
    10f8:	6f 5f       	subi	r22, 0xFF	; 255
    10fa:	7f 4f       	sbci	r23, 0xFF	; 255
    10fc:	cb 01       	movw	r24, r22
    10fe:	aa 27       	eor	r26, r26
    1100:	97 fd       	sbrc	r25, 7
    1102:	a0 95       	com	r26
    1104:	ba 2f       	mov	r27, r26
    1106:	82 17       	cp	r24, r18
    1108:	93 07       	cpc	r25, r19
    110a:	a4 07       	cpc	r26, r20
    110c:	b5 07       	cpc	r27, r21
    110e:	70 f3       	brcs	.-36     	; 0x10ec <_Z5delaym+0x12>
    1110:	08 95       	ret

00001112 <_Z17delayMicrosecondsm>:
	}
	return;
}

void delayMicroseconds(unsigned long mIcrosec)
{
    1112:	9b 01       	movw	r18, r22
    1114:	ac 01       	movw	r20, r24
	int i;
	for(i=0;i<mIcrosec;i++)
    1116:	61 15       	cp	r22, r1
    1118:	71 05       	cpc	r23, r1
    111a:	81 05       	cpc	r24, r1
    111c:	91 05       	cpc	r25, r1
    111e:	91 f0       	breq	.+36     	; 0x1144 <_Z17delayMicrosecondsm+0x32>
    1120:	60 e0       	ldi	r22, 0x00	; 0
    1122:	70 e0       	ldi	r23, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1124:	85 e0       	ldi	r24, 0x05	; 5
    1126:	8a 95       	dec	r24
    1128:	f1 f7       	brne	.-4      	; 0x1126 <_Z17delayMicrosecondsm+0x14>
    112a:	00 00       	nop
    112c:	6f 5f       	subi	r22, 0xFF	; 255
    112e:	7f 4f       	sbci	r23, 0xFF	; 255
    1130:	cb 01       	movw	r24, r22
    1132:	aa 27       	eor	r26, r26
    1134:	97 fd       	sbrc	r25, 7
    1136:	a0 95       	com	r26
    1138:	ba 2f       	mov	r27, r26
    113a:	82 17       	cp	r24, r18
    113c:	93 07       	cpc	r25, r19
    113e:	a4 07       	cpc	r26, r20
    1140:	b5 07       	cpc	r27, r21
    1142:	80 f3       	brcs	.-32     	; 0x1124 <_Z17delayMicrosecondsm+0x12>
    1144:	08 95       	ret

00001146 <_Z3mapddddd>:
	}
	return;
}

double map(double vAlue, double fromLow, double fromHigh, double toLow, double toHigh)
{
    1146:	2f 92       	push	r2
    1148:	3f 92       	push	r3
    114a:	4f 92       	push	r4
    114c:	5f 92       	push	r5
    114e:	6f 92       	push	r6
    1150:	7f 92       	push	r7
    1152:	8f 92       	push	r8
    1154:	9f 92       	push	r9
    1156:	af 92       	push	r10
    1158:	bf 92       	push	r11
    115a:	cf 92       	push	r12
    115c:	df 92       	push	r13
    115e:	ef 92       	push	r14
    1160:	ff 92       	push	r15
    1162:	0f 93       	push	r16
    1164:	1f 93       	push	r17
    1166:	df 93       	push	r29
    1168:	cf 93       	push	r28
    116a:	cd b7       	in	r28, 0x3d	; 61
    116c:	de b7       	in	r29, 0x3e	; 62
    116e:	39 01       	movw	r6, r18
    1170:	4a 01       	movw	r8, r20
    1172:	17 01       	movw	r2, r14
    1174:	28 01       	movw	r4, r16
	return ((vAlue-fromLow)/abs(fromHigh-fromLow)*abs(toHigh+toLow));
    1176:	0e 94 be 12 	call	0x257c	; 0x257c <__subsf3>
    117a:	7b 01       	movw	r14, r22
    117c:	8c 01       	movw	r16, r24
    117e:	c2 01       	movw	r24, r4
    1180:	b1 01       	movw	r22, r2
    1182:	a4 01       	movw	r20, r8
    1184:	93 01       	movw	r18, r6
    1186:	0e 94 be 12 	call	0x257c	; 0x257c <__subsf3>
    118a:	0e 94 8f 13 	call	0x271e	; 0x271e <__fixsfsi>
    118e:	86 2f       	mov	r24, r22
    1190:	97 2f       	mov	r25, r23
    1192:	bc 01       	movw	r22, r24
    1194:	77 23       	and	r23, r23
    1196:	24 f4       	brge	.+8      	; 0x11a0 <_Z3mapddddd+0x5a>
    1198:	66 27       	eor	r22, r22
    119a:	77 27       	eor	r23, r23
    119c:	68 1b       	sub	r22, r24
    119e:	79 0b       	sbc	r23, r25
    11a0:	88 27       	eor	r24, r24
    11a2:	77 fd       	sbrc	r23, 7
    11a4:	80 95       	com	r24
    11a6:	98 2f       	mov	r25, r24
    11a8:	0e 94 c2 13 	call	0x2784	; 0x2784 <__floatsisf>
    11ac:	9b 01       	movw	r18, r22
    11ae:	ac 01       	movw	r20, r24
    11b0:	c8 01       	movw	r24, r16
    11b2:	b7 01       	movw	r22, r14
    11b4:	0e 94 27 13 	call	0x264e	; 0x264e <__divsf3>
    11b8:	3b 01       	movw	r6, r22
    11ba:	4c 01       	movw	r8, r24
    11bc:	6e 89       	ldd	r22, Y+22	; 0x16
    11be:	7f 89       	ldd	r23, Y+23	; 0x17
    11c0:	88 8d       	ldd	r24, Y+24	; 0x18
    11c2:	99 8d       	ldd	r25, Y+25	; 0x19
    11c4:	a6 01       	movw	r20, r12
    11c6:	95 01       	movw	r18, r10
    11c8:	0e 94 bf 12 	call	0x257e	; 0x257e <__addsf3>
    11cc:	0e 94 8f 13 	call	0x271e	; 0x271e <__fixsfsi>
    11d0:	86 2f       	mov	r24, r22
    11d2:	97 2f       	mov	r25, r23
    11d4:	bc 01       	movw	r22, r24
    11d6:	77 23       	and	r23, r23
    11d8:	24 f4       	brge	.+8      	; 0x11e2 <_Z3mapddddd+0x9c>
    11da:	66 27       	eor	r22, r22
    11dc:	77 27       	eor	r23, r23
    11de:	68 1b       	sub	r22, r24
    11e0:	79 0b       	sbc	r23, r25
    11e2:	88 27       	eor	r24, r24
    11e4:	77 fd       	sbrc	r23, 7
    11e6:	80 95       	com	r24
    11e8:	98 2f       	mov	r25, r24
    11ea:	0e 94 c2 13 	call	0x2784	; 0x2784 <__floatsisf>
    11ee:	9b 01       	movw	r18, r22
    11f0:	ac 01       	movw	r20, r24
    11f2:	c4 01       	movw	r24, r8
    11f4:	b3 01       	movw	r22, r6
    11f6:	0e 94 76 14 	call	0x28ec	; 0x28ec <__mulsf3>
}
    11fa:	cf 91       	pop	r28
    11fc:	df 91       	pop	r29
    11fe:	1f 91       	pop	r17
    1200:	0f 91       	pop	r16
    1202:	ff 90       	pop	r15
    1204:	ef 90       	pop	r14
    1206:	df 90       	pop	r13
    1208:	cf 90       	pop	r12
    120a:	bf 90       	pop	r11
    120c:	af 90       	pop	r10
    120e:	9f 90       	pop	r9
    1210:	8f 90       	pop	r8
    1212:	7f 90       	pop	r7
    1214:	6f 90       	pop	r6
    1216:	5f 90       	pop	r5
    1218:	4f 90       	pop	r4
    121a:	3f 90       	pop	r3
    121c:	2f 90       	pop	r2
    121e:	08 95       	ret

00001220 <_Z9constrainddd>:

double constrain(double nUm,double uPper,double lOwer)
{
    1220:	6f 92       	push	r6
    1222:	7f 92       	push	r7
    1224:	8f 92       	push	r8
    1226:	9f 92       	push	r9
    1228:	af 92       	push	r10
    122a:	bf 92       	push	r11
    122c:	cf 92       	push	r12
    122e:	df 92       	push	r13
    1230:	ef 92       	push	r14
    1232:	ff 92       	push	r15
    1234:	0f 93       	push	r16
    1236:	1f 93       	push	r17
    1238:	96 2e       	mov	r9, r22
    123a:	87 2e       	mov	r8, r23
    123c:	78 2e       	mov	r7, r24
    123e:	69 2e       	mov	r6, r25
    1240:	d2 2e       	mov	r13, r18
    1242:	c3 2e       	mov	r12, r19
    1244:	b4 2e       	mov	r11, r20
    1246:	a5 2e       	mov	r10, r21
	if(nUm<uPper){
    1248:	2d 2d       	mov	r18, r13
    124a:	3c 2d       	mov	r19, r12
    124c:	4b 2d       	mov	r20, r11
    124e:	5a 2d       	mov	r21, r10
    1250:	0e 94 23 13 	call	0x2646	; 0x2646 <__cmpsf2>
    1254:	88 23       	and	r24, r24
    1256:	ac f0       	brlt	.+42     	; 0x1282 <_Z9constrainddd+0x62>
		return uPper;}
	else if(nUm>lOwer){
    1258:	69 2d       	mov	r22, r9
    125a:	78 2d       	mov	r23, r8
    125c:	87 2d       	mov	r24, r7
    125e:	96 2d       	mov	r25, r6
    1260:	2e 2d       	mov	r18, r14
    1262:	3f 2d       	mov	r19, r15
    1264:	40 2f       	mov	r20, r16
    1266:	51 2f       	mov	r21, r17
    1268:	0e 94 72 14 	call	0x28e4	; 0x28e4 <__gesf2>
    126c:	18 16       	cp	r1, r24
    126e:	2c f4       	brge	.+10     	; 0x127a <_Z9constrainddd+0x5a>
		return lOwer;}
    1270:	de 2c       	mov	r13, r14
    1272:	cf 2c       	mov	r12, r15
    1274:	b0 2e       	mov	r11, r16
    1276:	a1 2e       	mov	r10, r17
    1278:	04 c0       	rjmp	.+8      	; 0x1282 <_Z9constrainddd+0x62>
	else 
	return nUm;	
    127a:	d9 2c       	mov	r13, r9
    127c:	c8 2c       	mov	r12, r8
    127e:	b7 2c       	mov	r11, r7
    1280:	a6 2c       	mov	r10, r6
}
    1282:	6d 2d       	mov	r22, r13
    1284:	7c 2d       	mov	r23, r12
    1286:	8b 2d       	mov	r24, r11
    1288:	9a 2d       	mov	r25, r10
    128a:	1f 91       	pop	r17
    128c:	0f 91       	pop	r16
    128e:	ff 90       	pop	r15
    1290:	ef 90       	pop	r14
    1292:	df 90       	pop	r13
    1294:	cf 90       	pop	r12
    1296:	bf 90       	pop	r11
    1298:	af 90       	pop	r10
    129a:	9f 90       	pop	r9
    129c:	8f 90       	pop	r8
    129e:	7f 90       	pop	r7
    12a0:	6f 90       	pop	r6
    12a2:	08 95       	ret

000012a4 <_Z15attachIntteruptiPFvvEi>:
void attachIntterupt(int pIn, void (*iSrfunc)(void), int cOmpare)		//cOmpare:LOW=0,HIGH1,RISING=2,FALLING=3
{
	sei();
    12a4:	78 94       	sei
	cAllisr=iSrfunc;
    12a6:	70 93 b5 02 	sts	0x02B5, r23
    12aa:	60 93 b4 02 	sts	0x02B4, r22
	switch(pIn)	  //enabling interrupt pin
    12ae:	83 30       	cpi	r24, 0x03	; 3
    12b0:	91 05       	cpc	r25, r1
    12b2:	09 f4       	brne	.+2      	; 0x12b6 <_Z15attachIntteruptiPFvvEi+0x12>
    12b4:	7d c0       	rjmp	.+250    	; 0x13b0 <_Z15attachIntteruptiPFvvEi+0x10c>
    12b6:	84 30       	cpi	r24, 0x04	; 4
    12b8:	91 05       	cpc	r25, r1
    12ba:	54 f4       	brge	.+20     	; 0x12d0 <_Z15attachIntteruptiPFvvEi+0x2c>
    12bc:	81 30       	cpi	r24, 0x01	; 1
    12be:	91 05       	cpc	r25, r1
    12c0:	c9 f1       	breq	.+114    	; 0x1334 <_Z15attachIntteruptiPFvvEi+0x90>
    12c2:	82 30       	cpi	r24, 0x02	; 2
    12c4:	91 05       	cpc	r25, r1
    12c6:	0c f0       	brlt	.+2      	; 0x12ca <_Z15attachIntteruptiPFvvEi+0x26>
    12c8:	54 c0       	rjmp	.+168    	; 0x1372 <_Z15attachIntteruptiPFvvEi+0xce>
    12ca:	00 97       	sbiw	r24, 0x00	; 0
    12cc:	91 f0       	breq	.+36     	; 0x12f2 <_Z15attachIntteruptiPFvvEi+0x4e>
    12ce:	0b c1       	rjmp	.+534    	; 0x14e6 <_Z15attachIntteruptiPFvvEi+0x242>
    12d0:	85 30       	cpi	r24, 0x05	; 5
    12d2:	91 05       	cpc	r25, r1
    12d4:	09 f4       	brne	.+2      	; 0x12d8 <_Z15attachIntteruptiPFvvEi+0x34>
    12d6:	aa c0       	rjmp	.+340    	; 0x142c <_Z15attachIntteruptiPFvvEi+0x188>
    12d8:	85 30       	cpi	r24, 0x05	; 5
    12da:	91 05       	cpc	r25, r1
    12dc:	0c f4       	brge	.+2      	; 0x12e0 <_Z15attachIntteruptiPFvvEi+0x3c>
    12de:	87 c0       	rjmp	.+270    	; 0x13ee <_Z15attachIntteruptiPFvvEi+0x14a>
    12e0:	86 30       	cpi	r24, 0x06	; 6
    12e2:	91 05       	cpc	r25, r1
    12e4:	09 f4       	brne	.+2      	; 0x12e8 <_Z15attachIntteruptiPFvvEi+0x44>
    12e6:	c1 c0       	rjmp	.+386    	; 0x146a <_Z15attachIntteruptiPFvvEi+0x1c6>
    12e8:	87 30       	cpi	r24, 0x07	; 7
    12ea:	91 05       	cpc	r25, r1
    12ec:	09 f0       	breq	.+2      	; 0x12f0 <_Z15attachIntteruptiPFvvEi+0x4c>
    12ee:	fb c0       	rjmp	.+502    	; 0x14e6 <_Z15attachIntteruptiPFvvEi+0x242>
    12f0:	db c0       	rjmp	.+438    	; 0x14a8 <_Z15attachIntteruptiPFvvEi+0x204>
	{
		case 0:
		EIMSK|=1<<INT0;
    12f2:	e8 9a       	sbi	0x1d, 0	; 29
		switch(cOmpare){
    12f4:	43 30       	cpi	r20, 0x03	; 3
    12f6:	51 05       	cpc	r21, r1
    12f8:	61 f0       	breq	.+24     	; 0x1312 <_Z15attachIntteruptiPFvvEi+0x6e>
    12fa:	44 30       	cpi	r20, 0x04	; 4
    12fc:	51 05       	cpc	r21, r1
    12fe:	79 f0       	breq	.+30     	; 0x131e <_Z15attachIntteruptiPFvvEi+0x7a>
    1300:	42 30       	cpi	r20, 0x02	; 2
    1302:	51 05       	cpc	r21, r1
    1304:	91 f4       	brne	.+36     	; 0x132a <_Z15attachIntteruptiPFvvEi+0x86>
			case 2:
			EICRA|=(1<<ISC00)|(1<<ISC01);
    1306:	e9 e6       	ldi	r30, 0x69	; 105
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	80 81       	ld	r24, Z
    130c:	83 60       	ori	r24, 0x03	; 3
    130e:	80 83       	st	Z, r24
			break;
    1310:	08 95       	ret
			case 3:
			EICRA|=(0<<ISC00)|(1<<ISC01);
    1312:	e9 e6       	ldi	r30, 0x69	; 105
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	80 81       	ld	r24, Z
    1318:	82 60       	ori	r24, 0x02	; 2
    131a:	80 83       	st	Z, r24
			break;
    131c:	08 95       	ret
			case 4:
			EICRA|=(1<<ISC00)|(0<<ISC01);
    131e:	e9 e6       	ldi	r30, 0x69	; 105
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	80 81       	ld	r24, Z
    1324:	81 60       	ori	r24, 0x01	; 1
    1326:	80 83       	st	Z, r24
			break;
    1328:	08 95       	ret
			default:
			EICRA|=(0<<ISC00)|(0<<ISC01);
    132a:	e9 e6       	ldi	r30, 0x69	; 105
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	80 81       	ld	r24, Z
    1330:	80 83       	st	Z, r24
    1332:	08 95       	ret
		}
		break;

		case 1:
		EIMSK|=1<<INT1;
    1334:	e9 9a       	sbi	0x1d, 1	; 29
                switch(cOmpare)
    1336:	43 30       	cpi	r20, 0x03	; 3
    1338:	51 05       	cpc	r21, r1
    133a:	61 f0       	breq	.+24     	; 0x1354 <_Z15attachIntteruptiPFvvEi+0xb0>
    133c:	44 30       	cpi	r20, 0x04	; 4
    133e:	51 05       	cpc	r21, r1
    1340:	69 f0       	breq	.+26     	; 0x135c <_Z15attachIntteruptiPFvvEi+0xb8>
    1342:	42 30       	cpi	r20, 0x02	; 2
    1344:	51 05       	cpc	r21, r1
    1346:	81 f4       	brne	.+32     	; 0x1368 <_Z15attachIntteruptiPFvvEi+0xc4>
		{
			case 2:
			EICRA|=(1<<ISC10)|(1<<ISC11);
    1348:	e9 e6       	ldi	r30, 0x69	; 105
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	80 81       	ld	r24, Z
    134e:	8c 60       	ori	r24, 0x0C	; 12
    1350:	80 83       	st	Z, r24
			break;
    1352:	08 95       	ret
			case 3:
			EICRA=(0<<ISC10)|(1<<ISC11);
    1354:	88 e0       	ldi	r24, 0x08	; 8
    1356:	80 93 69 00 	sts	0x0069, r24
			break;
    135a:	08 95       	ret
			case 4:
			EICRA|=(1<<ISC10)|(0<<ISC11);
    135c:	e9 e6       	ldi	r30, 0x69	; 105
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	80 81       	ld	r24, Z
    1362:	84 60       	ori	r24, 0x04	; 4
    1364:	80 83       	st	Z, r24
			break;
    1366:	08 95       	ret
			default:
			EICRA|=(0<<ISC10)|(0<<ISC11);
    1368:	e9 e6       	ldi	r30, 0x69	; 105
    136a:	f0 e0       	ldi	r31, 0x00	; 0
    136c:	80 81       	ld	r24, Z
    136e:	80 83       	st	Z, r24
    1370:	08 95       	ret
		}
		break;
		
		case 2:
		EIMSK|=1<<INT2;
    1372:	ea 9a       	sbi	0x1d, 2	; 29
		switch(cOmpare)
    1374:	43 30       	cpi	r20, 0x03	; 3
    1376:	51 05       	cpc	r21, r1
    1378:	61 f0       	breq	.+24     	; 0x1392 <_Z15attachIntteruptiPFvvEi+0xee>
    137a:	44 30       	cpi	r20, 0x04	; 4
    137c:	51 05       	cpc	r21, r1
    137e:	69 f0       	breq	.+26     	; 0x139a <_Z15attachIntteruptiPFvvEi+0xf6>
    1380:	42 30       	cpi	r20, 0x02	; 2
    1382:	51 05       	cpc	r21, r1
    1384:	81 f4       	brne	.+32     	; 0x13a6 <_Z15attachIntteruptiPFvvEi+0x102>
		{
			case 2:
			EICRA|=(1<<ISC20)|(1<<ISC21);
    1386:	e9 e6       	ldi	r30, 0x69	; 105
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	80 81       	ld	r24, Z
    138c:	80 63       	ori	r24, 0x30	; 48
    138e:	80 83       	st	Z, r24
			break;
    1390:	08 95       	ret
			case 3:
			EICRA=(0<<ISC20)|(1<<ISC21);
    1392:	80 e2       	ldi	r24, 0x20	; 32
    1394:	80 93 69 00 	sts	0x0069, r24
			break;
    1398:	08 95       	ret
			case 4:
			EICRA|=(1<<ISC20)|(0<<ISC21);
    139a:	e9 e6       	ldi	r30, 0x69	; 105
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	80 81       	ld	r24, Z
    13a0:	80 61       	ori	r24, 0x10	; 16
    13a2:	80 83       	st	Z, r24
			break;
    13a4:	08 95       	ret
			default:
			EICRA|=(0<<ISC20)|(0<<ISC21);
    13a6:	e9 e6       	ldi	r30, 0x69	; 105
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	80 81       	ld	r24, Z
    13ac:	80 83       	st	Z, r24
    13ae:	08 95       	ret
		}
		break;
		
		case 3:
		EIMSK|=1<<INT3;
    13b0:	eb 9a       	sbi	0x1d, 3	; 29
		switch(cOmpare)
    13b2:	43 30       	cpi	r20, 0x03	; 3
    13b4:	51 05       	cpc	r21, r1
    13b6:	61 f0       	breq	.+24     	; 0x13d0 <_Z15attachIntteruptiPFvvEi+0x12c>
    13b8:	44 30       	cpi	r20, 0x04	; 4
    13ba:	51 05       	cpc	r21, r1
    13bc:	69 f0       	breq	.+26     	; 0x13d8 <_Z15attachIntteruptiPFvvEi+0x134>
    13be:	42 30       	cpi	r20, 0x02	; 2
    13c0:	51 05       	cpc	r21, r1
    13c2:	81 f4       	brne	.+32     	; 0x13e4 <_Z15attachIntteruptiPFvvEi+0x140>
		{
			case 2:
			EICRA|=(1<<ISC30)|(1<<ISC31);
    13c4:	e9 e6       	ldi	r30, 0x69	; 105
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	80 81       	ld	r24, Z
    13ca:	80 6c       	ori	r24, 0xC0	; 192
    13cc:	80 83       	st	Z, r24
			break;
    13ce:	08 95       	ret
			case 3:
			EICRA=(0<<ISC30)|(1<<ISC31);
    13d0:	80 e8       	ldi	r24, 0x80	; 128
    13d2:	80 93 69 00 	sts	0x0069, r24
			break;
    13d6:	08 95       	ret
			case 4:
			EICRA|=(1<<ISC30)|(0<<ISC31);
    13d8:	e9 e6       	ldi	r30, 0x69	; 105
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	80 81       	ld	r24, Z
    13de:	80 64       	ori	r24, 0x40	; 64
    13e0:	80 83       	st	Z, r24
			break;
    13e2:	08 95       	ret
			default:
			EICRA|=(0<<ISC30)|(0<<ISC31);
    13e4:	e9 e6       	ldi	r30, 0x69	; 105
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	80 81       	ld	r24, Z
    13ea:	80 83       	st	Z, r24
    13ec:	08 95       	ret
		}
		break;
		
		case 4:
		EIMSK|=1<<INT4;
    13ee:	ec 9a       	sbi	0x1d, 4	; 29
                switch(cOmpare)
    13f0:	43 30       	cpi	r20, 0x03	; 3
    13f2:	51 05       	cpc	r21, r1
    13f4:	61 f0       	breq	.+24     	; 0x140e <_Z15attachIntteruptiPFvvEi+0x16a>
    13f6:	44 30       	cpi	r20, 0x04	; 4
    13f8:	51 05       	cpc	r21, r1
    13fa:	69 f0       	breq	.+26     	; 0x1416 <_Z15attachIntteruptiPFvvEi+0x172>
    13fc:	42 30       	cpi	r20, 0x02	; 2
    13fe:	51 05       	cpc	r21, r1
    1400:	81 f4       	brne	.+32     	; 0x1422 <_Z15attachIntteruptiPFvvEi+0x17e>
		{
			case 2:
			EICRB|=(1<<ISC40)|(1<<ISC41);
    1402:	ea e6       	ldi	r30, 0x6A	; 106
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	80 81       	ld	r24, Z
    1408:	83 60       	ori	r24, 0x03	; 3
    140a:	80 83       	st	Z, r24
			break;
    140c:	08 95       	ret
			case 3:
			EICRB=(0<<ISC40)|(1<<ISC41);
    140e:	82 e0       	ldi	r24, 0x02	; 2
    1410:	80 93 6a 00 	sts	0x006A, r24
			break;
    1414:	08 95       	ret
			case 4:
			EICRB|=(1<<ISC40)|(0<<ISC41);
    1416:	ea e6       	ldi	r30, 0x6A	; 106
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	80 81       	ld	r24, Z
    141c:	81 60       	ori	r24, 0x01	; 1
    141e:	80 83       	st	Z, r24
			break;
    1420:	08 95       	ret
			default:
			EICRB|=(0<<ISC40)|(0<<ISC41);
    1422:	ea e6       	ldi	r30, 0x6A	; 106
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	80 81       	ld	r24, Z
    1428:	80 83       	st	Z, r24
    142a:	08 95       	ret
		}
		break;
		
		case 5:
		EIMSK|=1<<INT5;
    142c:	ed 9a       	sbi	0x1d, 5	; 29
		switch(cOmpare)
    142e:	43 30       	cpi	r20, 0x03	; 3
    1430:	51 05       	cpc	r21, r1
    1432:	61 f0       	breq	.+24     	; 0x144c <_Z15attachIntteruptiPFvvEi+0x1a8>
    1434:	44 30       	cpi	r20, 0x04	; 4
    1436:	51 05       	cpc	r21, r1
    1438:	69 f0       	breq	.+26     	; 0x1454 <_Z15attachIntteruptiPFvvEi+0x1b0>
    143a:	42 30       	cpi	r20, 0x02	; 2
    143c:	51 05       	cpc	r21, r1
    143e:	81 f4       	brne	.+32     	; 0x1460 <_Z15attachIntteruptiPFvvEi+0x1bc>
		{
			case 2:
			EICRB|=(1<<ISC50)|(1<<ISC51);
    1440:	ea e6       	ldi	r30, 0x6A	; 106
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	80 81       	ld	r24, Z
    1446:	8c 60       	ori	r24, 0x0C	; 12
    1448:	80 83       	st	Z, r24
			break;
    144a:	08 95       	ret
			case 3:
			EICRB=(0<<ISC50)|(1<<ISC51);
    144c:	88 e0       	ldi	r24, 0x08	; 8
    144e:	80 93 6a 00 	sts	0x006A, r24
			break;
    1452:	08 95       	ret
			case 4:
			EICRB|=(1<<ISC50)|(0<<ISC51);
    1454:	ea e6       	ldi	r30, 0x6A	; 106
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	80 81       	ld	r24, Z
    145a:	84 60       	ori	r24, 0x04	; 4
    145c:	80 83       	st	Z, r24
			break;
    145e:	08 95       	ret
			default:
                 	EICRB|=(0<<ISC40)|(0<<ISC41);
    1460:	ea e6       	ldi	r30, 0x6A	; 106
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	80 81       	ld	r24, Z
    1466:	80 83       	st	Z, r24
    1468:	08 95       	ret
			
		}
		break;
		
		case 6:
		EIMSK|=1<<INT6;
    146a:	ee 9a       	sbi	0x1d, 6	; 29
	        switch(cOmpare)
    146c:	43 30       	cpi	r20, 0x03	; 3
    146e:	51 05       	cpc	r21, r1
    1470:	61 f0       	breq	.+24     	; 0x148a <_Z15attachIntteruptiPFvvEi+0x1e6>
    1472:	44 30       	cpi	r20, 0x04	; 4
    1474:	51 05       	cpc	r21, r1
    1476:	69 f0       	breq	.+26     	; 0x1492 <_Z15attachIntteruptiPFvvEi+0x1ee>
    1478:	42 30       	cpi	r20, 0x02	; 2
    147a:	51 05       	cpc	r21, r1
    147c:	81 f4       	brne	.+32     	; 0x149e <_Z15attachIntteruptiPFvvEi+0x1fa>
		{
			case 2:
			EICRB|=(1<<ISC60)|(1<<ISC61);
    147e:	ea e6       	ldi	r30, 0x6A	; 106
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	80 81       	ld	r24, Z
    1484:	80 63       	ori	r24, 0x30	; 48
    1486:	80 83       	st	Z, r24
			break;
    1488:	08 95       	ret
			case 3:
			EICRB=(0<<ISC60)|(1<<ISC61);
    148a:	80 e2       	ldi	r24, 0x20	; 32
    148c:	80 93 6a 00 	sts	0x006A, r24
			break;
    1490:	08 95       	ret
			case 4:
			EICRB|=(1<<ISC60)|(0<<ISC61);
    1492:	ea e6       	ldi	r30, 0x6A	; 106
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	80 81       	ld	r24, Z
    1498:	80 61       	ori	r24, 0x10	; 16
    149a:	80 83       	st	Z, r24
			break;
    149c:	08 95       	ret
			default:
			EICRB|=(0<<ISC60)|(0<<ISC61);
    149e:	ea e6       	ldi	r30, 0x6A	; 106
    14a0:	f0 e0       	ldi	r31, 0x00	; 0
    14a2:	80 81       	ld	r24, Z
    14a4:	80 83       	st	Z, r24
    14a6:	08 95       	ret
			
		}
		break;
		
		case 7:
		EIMSK|=1<<INT7;
    14a8:	ef 9a       	sbi	0x1d, 7	; 29
		switch(cOmpare)
    14aa:	43 30       	cpi	r20, 0x03	; 3
    14ac:	51 05       	cpc	r21, r1
    14ae:	61 f0       	breq	.+24     	; 0x14c8 <_Z15attachIntteruptiPFvvEi+0x224>
    14b0:	44 30       	cpi	r20, 0x04	; 4
    14b2:	51 05       	cpc	r21, r1
    14b4:	69 f0       	breq	.+26     	; 0x14d0 <_Z15attachIntteruptiPFvvEi+0x22c>
    14b6:	42 30       	cpi	r20, 0x02	; 2
    14b8:	51 05       	cpc	r21, r1
    14ba:	81 f4       	brne	.+32     	; 0x14dc <_Z15attachIntteruptiPFvvEi+0x238>
		{
			case 2:
			EICRB|=(1<<ISC70)|(1<<ISC71);
    14bc:	ea e6       	ldi	r30, 0x6A	; 106
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	80 81       	ld	r24, Z
    14c2:	80 6c       	ori	r24, 0xC0	; 192
    14c4:	80 83       	st	Z, r24
			break;
    14c6:	08 95       	ret
			case 3:
			EICRB=(0<<ISC70)|(1<<ISC71);
    14c8:	80 e8       	ldi	r24, 0x80	; 128
    14ca:	80 93 6a 00 	sts	0x006A, r24
			break;
    14ce:	08 95       	ret
			case 4:
			EICRB|=(1<<ISC70)|(0<<ISC71);
    14d0:	ea e6       	ldi	r30, 0x6A	; 106
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	80 81       	ld	r24, Z
    14d6:	80 64       	ori	r24, 0x40	; 64
    14d8:	80 83       	st	Z, r24
			break;
    14da:	08 95       	ret
			default:
			EICRB|=(0<<ISC70)|(0<<ISC71);
    14dc:	ea e6       	ldi	r30, 0x6A	; 106
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 81       	ld	r24, Z
    14e2:	80 83       	st	Z, r24
    14e4:	08 95       	ret
		}
		break;
		
	        default:EICRA|=(0<<ISC01)|(0<<ISC00);
    14e6:	e9 e6       	ldi	r30, 0x69	; 105
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	80 81       	ld	r24, Z
    14ec:	80 83       	st	Z, r24
    14ee:	08 95       	ret

000014f0 <__vector_1>:
	}
}
ISR(INT0_vect)
{
    14f0:	1f 92       	push	r1
    14f2:	0f 92       	push	r0
    14f4:	0f b6       	in	r0, 0x3f	; 63
    14f6:	0f 92       	push	r0
    14f8:	0b b6       	in	r0, 0x3b	; 59
    14fa:	0f 92       	push	r0
    14fc:	11 24       	eor	r1, r1
    14fe:	2f 93       	push	r18
    1500:	3f 93       	push	r19
    1502:	4f 93       	push	r20
    1504:	5f 93       	push	r21
    1506:	6f 93       	push	r22
    1508:	7f 93       	push	r23
    150a:	8f 93       	push	r24
    150c:	9f 93       	push	r25
    150e:	af 93       	push	r26
    1510:	bf 93       	push	r27
    1512:	ef 93       	push	r30
    1514:	ff 93       	push	r31
   cAllisr();
    1516:	e0 91 b4 02 	lds	r30, 0x02B4
    151a:	f0 91 b5 02 	lds	r31, 0x02B5
    151e:	19 95       	eicall
}
    1520:	ff 91       	pop	r31
    1522:	ef 91       	pop	r30
    1524:	bf 91       	pop	r27
    1526:	af 91       	pop	r26
    1528:	9f 91       	pop	r25
    152a:	8f 91       	pop	r24
    152c:	7f 91       	pop	r23
    152e:	6f 91       	pop	r22
    1530:	5f 91       	pop	r21
    1532:	4f 91       	pop	r20
    1534:	3f 91       	pop	r19
    1536:	2f 91       	pop	r18
    1538:	0f 90       	pop	r0
    153a:	0b be       	out	0x3b, r0	; 59
    153c:	0f 90       	pop	r0
    153e:	0f be       	out	0x3f, r0	; 63
    1540:	0f 90       	pop	r0
    1542:	1f 90       	pop	r1
    1544:	18 95       	reti

00001546 <__vector_2>:
ISR(INT1_vect)
{
    1546:	1f 92       	push	r1
    1548:	0f 92       	push	r0
    154a:	0f b6       	in	r0, 0x3f	; 63
    154c:	0f 92       	push	r0
    154e:	0b b6       	in	r0, 0x3b	; 59
    1550:	0f 92       	push	r0
    1552:	11 24       	eor	r1, r1
    1554:	2f 93       	push	r18
    1556:	3f 93       	push	r19
    1558:	4f 93       	push	r20
    155a:	5f 93       	push	r21
    155c:	6f 93       	push	r22
    155e:	7f 93       	push	r23
    1560:	8f 93       	push	r24
    1562:	9f 93       	push	r25
    1564:	af 93       	push	r26
    1566:	bf 93       	push	r27
    1568:	ef 93       	push	r30
    156a:	ff 93       	push	r31
   cAllisr();
    156c:	e0 91 b4 02 	lds	r30, 0x02B4
    1570:	f0 91 b5 02 	lds	r31, 0x02B5
    1574:	19 95       	eicall
}
    1576:	ff 91       	pop	r31
    1578:	ef 91       	pop	r30
    157a:	bf 91       	pop	r27
    157c:	af 91       	pop	r26
    157e:	9f 91       	pop	r25
    1580:	8f 91       	pop	r24
    1582:	7f 91       	pop	r23
    1584:	6f 91       	pop	r22
    1586:	5f 91       	pop	r21
    1588:	4f 91       	pop	r20
    158a:	3f 91       	pop	r19
    158c:	2f 91       	pop	r18
    158e:	0f 90       	pop	r0
    1590:	0b be       	out	0x3b, r0	; 59
    1592:	0f 90       	pop	r0
    1594:	0f be       	out	0x3f, r0	; 63
    1596:	0f 90       	pop	r0
    1598:	1f 90       	pop	r1
    159a:	18 95       	reti

0000159c <__vector_3>:
ISR(INT2_vect)
{
    159c:	1f 92       	push	r1
    159e:	0f 92       	push	r0
    15a0:	0f b6       	in	r0, 0x3f	; 63
    15a2:	0f 92       	push	r0
    15a4:	0b b6       	in	r0, 0x3b	; 59
    15a6:	0f 92       	push	r0
    15a8:	11 24       	eor	r1, r1
    15aa:	2f 93       	push	r18
    15ac:	3f 93       	push	r19
    15ae:	4f 93       	push	r20
    15b0:	5f 93       	push	r21
    15b2:	6f 93       	push	r22
    15b4:	7f 93       	push	r23
    15b6:	8f 93       	push	r24
    15b8:	9f 93       	push	r25
    15ba:	af 93       	push	r26
    15bc:	bf 93       	push	r27
    15be:	ef 93       	push	r30
    15c0:	ff 93       	push	r31
   cAllisr();
    15c2:	e0 91 b4 02 	lds	r30, 0x02B4
    15c6:	f0 91 b5 02 	lds	r31, 0x02B5
    15ca:	19 95       	eicall
}
    15cc:	ff 91       	pop	r31
    15ce:	ef 91       	pop	r30
    15d0:	bf 91       	pop	r27
    15d2:	af 91       	pop	r26
    15d4:	9f 91       	pop	r25
    15d6:	8f 91       	pop	r24
    15d8:	7f 91       	pop	r23
    15da:	6f 91       	pop	r22
    15dc:	5f 91       	pop	r21
    15de:	4f 91       	pop	r20
    15e0:	3f 91       	pop	r19
    15e2:	2f 91       	pop	r18
    15e4:	0f 90       	pop	r0
    15e6:	0b be       	out	0x3b, r0	; 59
    15e8:	0f 90       	pop	r0
    15ea:	0f be       	out	0x3f, r0	; 63
    15ec:	0f 90       	pop	r0
    15ee:	1f 90       	pop	r1
    15f0:	18 95       	reti

000015f2 <__vector_4>:
ISR(INT3_vect)
{
    15f2:	1f 92       	push	r1
    15f4:	0f 92       	push	r0
    15f6:	0f b6       	in	r0, 0x3f	; 63
    15f8:	0f 92       	push	r0
    15fa:	0b b6       	in	r0, 0x3b	; 59
    15fc:	0f 92       	push	r0
    15fe:	11 24       	eor	r1, r1
    1600:	2f 93       	push	r18
    1602:	3f 93       	push	r19
    1604:	4f 93       	push	r20
    1606:	5f 93       	push	r21
    1608:	6f 93       	push	r22
    160a:	7f 93       	push	r23
    160c:	8f 93       	push	r24
    160e:	9f 93       	push	r25
    1610:	af 93       	push	r26
    1612:	bf 93       	push	r27
    1614:	ef 93       	push	r30
    1616:	ff 93       	push	r31
   cAllisr();
    1618:	e0 91 b4 02 	lds	r30, 0x02B4
    161c:	f0 91 b5 02 	lds	r31, 0x02B5
    1620:	19 95       	eicall
}
    1622:	ff 91       	pop	r31
    1624:	ef 91       	pop	r30
    1626:	bf 91       	pop	r27
    1628:	af 91       	pop	r26
    162a:	9f 91       	pop	r25
    162c:	8f 91       	pop	r24
    162e:	7f 91       	pop	r23
    1630:	6f 91       	pop	r22
    1632:	5f 91       	pop	r21
    1634:	4f 91       	pop	r20
    1636:	3f 91       	pop	r19
    1638:	2f 91       	pop	r18
    163a:	0f 90       	pop	r0
    163c:	0b be       	out	0x3b, r0	; 59
    163e:	0f 90       	pop	r0
    1640:	0f be       	out	0x3f, r0	; 63
    1642:	0f 90       	pop	r0
    1644:	1f 90       	pop	r1
    1646:	18 95       	reti

00001648 <__vector_5>:
ISR(INT4_vect)
{
    1648:	1f 92       	push	r1
    164a:	0f 92       	push	r0
    164c:	0f b6       	in	r0, 0x3f	; 63
    164e:	0f 92       	push	r0
    1650:	0b b6       	in	r0, 0x3b	; 59
    1652:	0f 92       	push	r0
    1654:	11 24       	eor	r1, r1
    1656:	2f 93       	push	r18
    1658:	3f 93       	push	r19
    165a:	4f 93       	push	r20
    165c:	5f 93       	push	r21
    165e:	6f 93       	push	r22
    1660:	7f 93       	push	r23
    1662:	8f 93       	push	r24
    1664:	9f 93       	push	r25
    1666:	af 93       	push	r26
    1668:	bf 93       	push	r27
    166a:	ef 93       	push	r30
    166c:	ff 93       	push	r31
    cAllisr();
    166e:	e0 91 b4 02 	lds	r30, 0x02B4
    1672:	f0 91 b5 02 	lds	r31, 0x02B5
    1676:	19 95       	eicall
}
    1678:	ff 91       	pop	r31
    167a:	ef 91       	pop	r30
    167c:	bf 91       	pop	r27
    167e:	af 91       	pop	r26
    1680:	9f 91       	pop	r25
    1682:	8f 91       	pop	r24
    1684:	7f 91       	pop	r23
    1686:	6f 91       	pop	r22
    1688:	5f 91       	pop	r21
    168a:	4f 91       	pop	r20
    168c:	3f 91       	pop	r19
    168e:	2f 91       	pop	r18
    1690:	0f 90       	pop	r0
    1692:	0b be       	out	0x3b, r0	; 59
    1694:	0f 90       	pop	r0
    1696:	0f be       	out	0x3f, r0	; 63
    1698:	0f 90       	pop	r0
    169a:	1f 90       	pop	r1
    169c:	18 95       	reti

0000169e <__vector_6>:
ISR(INT5_vect)
{
    169e:	1f 92       	push	r1
    16a0:	0f 92       	push	r0
    16a2:	0f b6       	in	r0, 0x3f	; 63
    16a4:	0f 92       	push	r0
    16a6:	0b b6       	in	r0, 0x3b	; 59
    16a8:	0f 92       	push	r0
    16aa:	11 24       	eor	r1, r1
    16ac:	2f 93       	push	r18
    16ae:	3f 93       	push	r19
    16b0:	4f 93       	push	r20
    16b2:	5f 93       	push	r21
    16b4:	6f 93       	push	r22
    16b6:	7f 93       	push	r23
    16b8:	8f 93       	push	r24
    16ba:	9f 93       	push	r25
    16bc:	af 93       	push	r26
    16be:	bf 93       	push	r27
    16c0:	ef 93       	push	r30
    16c2:	ff 93       	push	r31
    cAllisr();
    16c4:	e0 91 b4 02 	lds	r30, 0x02B4
    16c8:	f0 91 b5 02 	lds	r31, 0x02B5
    16cc:	19 95       	eicall
}
    16ce:	ff 91       	pop	r31
    16d0:	ef 91       	pop	r30
    16d2:	bf 91       	pop	r27
    16d4:	af 91       	pop	r26
    16d6:	9f 91       	pop	r25
    16d8:	8f 91       	pop	r24
    16da:	7f 91       	pop	r23
    16dc:	6f 91       	pop	r22
    16de:	5f 91       	pop	r21
    16e0:	4f 91       	pop	r20
    16e2:	3f 91       	pop	r19
    16e4:	2f 91       	pop	r18
    16e6:	0f 90       	pop	r0
    16e8:	0b be       	out	0x3b, r0	; 59
    16ea:	0f 90       	pop	r0
    16ec:	0f be       	out	0x3f, r0	; 63
    16ee:	0f 90       	pop	r0
    16f0:	1f 90       	pop	r1
    16f2:	18 95       	reti

000016f4 <__vector_7>:
ISR(INT6_vect)
{
    16f4:	1f 92       	push	r1
    16f6:	0f 92       	push	r0
    16f8:	0f b6       	in	r0, 0x3f	; 63
    16fa:	0f 92       	push	r0
    16fc:	0b b6       	in	r0, 0x3b	; 59
    16fe:	0f 92       	push	r0
    1700:	11 24       	eor	r1, r1
    1702:	2f 93       	push	r18
    1704:	3f 93       	push	r19
    1706:	4f 93       	push	r20
    1708:	5f 93       	push	r21
    170a:	6f 93       	push	r22
    170c:	7f 93       	push	r23
    170e:	8f 93       	push	r24
    1710:	9f 93       	push	r25
    1712:	af 93       	push	r26
    1714:	bf 93       	push	r27
    1716:	ef 93       	push	r30
    1718:	ff 93       	push	r31
    cAllisr();
    171a:	e0 91 b4 02 	lds	r30, 0x02B4
    171e:	f0 91 b5 02 	lds	r31, 0x02B5
    1722:	19 95       	eicall
}
    1724:	ff 91       	pop	r31
    1726:	ef 91       	pop	r30
    1728:	bf 91       	pop	r27
    172a:	af 91       	pop	r26
    172c:	9f 91       	pop	r25
    172e:	8f 91       	pop	r24
    1730:	7f 91       	pop	r23
    1732:	6f 91       	pop	r22
    1734:	5f 91       	pop	r21
    1736:	4f 91       	pop	r20
    1738:	3f 91       	pop	r19
    173a:	2f 91       	pop	r18
    173c:	0f 90       	pop	r0
    173e:	0b be       	out	0x3b, r0	; 59
    1740:	0f 90       	pop	r0
    1742:	0f be       	out	0x3f, r0	; 63
    1744:	0f 90       	pop	r0
    1746:	1f 90       	pop	r1
    1748:	18 95       	reti

0000174a <__vector_8>:
ISR(INT7_vect)
{ 
    174a:	1f 92       	push	r1
    174c:	0f 92       	push	r0
    174e:	0f b6       	in	r0, 0x3f	; 63
    1750:	0f 92       	push	r0
    1752:	0b b6       	in	r0, 0x3b	; 59
    1754:	0f 92       	push	r0
    1756:	11 24       	eor	r1, r1
    1758:	2f 93       	push	r18
    175a:	3f 93       	push	r19
    175c:	4f 93       	push	r20
    175e:	5f 93       	push	r21
    1760:	6f 93       	push	r22
    1762:	7f 93       	push	r23
    1764:	8f 93       	push	r24
    1766:	9f 93       	push	r25
    1768:	af 93       	push	r26
    176a:	bf 93       	push	r27
    176c:	ef 93       	push	r30
    176e:	ff 93       	push	r31
    cAllisr();
    1770:	e0 91 b4 02 	lds	r30, 0x02B4
    1774:	f0 91 b5 02 	lds	r31, 0x02B5
    1778:	19 95       	eicall
}
    177a:	ff 91       	pop	r31
    177c:	ef 91       	pop	r30
    177e:	bf 91       	pop	r27
    1780:	af 91       	pop	r26
    1782:	9f 91       	pop	r25
    1784:	8f 91       	pop	r24
    1786:	7f 91       	pop	r23
    1788:	6f 91       	pop	r22
    178a:	5f 91       	pop	r21
    178c:	4f 91       	pop	r20
    178e:	3f 91       	pop	r19
    1790:	2f 91       	pop	r18
    1792:	0f 90       	pop	r0
    1794:	0b be       	out	0x3b, r0	; 59
    1796:	0f 90       	pop	r0
    1798:	0f be       	out	0x3f, r0	; 63
    179a:	0f 90       	pop	r0
    179c:	1f 90       	pop	r1
    179e:	18 95       	reti

000017a0 <_Z11servoattachsi>:
#include<avr/io.h>
#include<math.h>
void servoattach(short int num,int value)       //value=clock frequency and num=pin no.to be attached
{
  switch(num)
    17a0:	88 30       	cpi	r24, 0x08	; 8
    17a2:	91 05       	cpc	r25, r1
    17a4:	09 f4       	brne	.+2      	; 0x17a8 <_Z11servoattachsi+0x8>
    17a6:	38 c1       	rjmp	.+624    	; 0x1a18 <_Z11servoattachsi+0x278>
    17a8:	89 30       	cpi	r24, 0x09	; 9
    17aa:	91 05       	cpc	r25, r1
    17ac:	cc f4       	brge	.+50     	; 0x17e0 <_Z11servoattachsi+0x40>
    17ae:	85 30       	cpi	r24, 0x05	; 5
    17b0:	91 05       	cpc	r25, r1
    17b2:	09 f4       	brne	.+2      	; 0x17b6 <_Z11servoattachsi+0x16>
    17b4:	75 c0       	rjmp	.+234    	; 0x18a0 <_Z11servoattachsi+0x100>
    17b6:	86 30       	cpi	r24, 0x06	; 6
    17b8:	91 05       	cpc	r25, r1
    17ba:	4c f4       	brge	.+18     	; 0x17ce <_Z11servoattachsi+0x2e>
    17bc:	82 30       	cpi	r24, 0x02	; 2
    17be:	91 05       	cpc	r25, r1
    17c0:	09 f4       	brne	.+2      	; 0x17c4 <_Z11servoattachsi+0x24>
    17c2:	92 c0       	rjmp	.+292    	; 0x18e8 <_Z11servoattachsi+0x148>
    17c4:	83 30       	cpi	r24, 0x03	; 3
    17c6:	91 05       	cpc	r25, r1
    17c8:	09 f0       	breq	.+2      	; 0x17cc <_Z11servoattachsi+0x2c>
    17ca:	c0 c1       	rjmp	.+896    	; 0x1b4c <_Z11servoattachsi+0x3ac>
    17cc:	b1 c0       	rjmp	.+354    	; 0x1930 <_Z11servoattachsi+0x190>
    17ce:	86 30       	cpi	r24, 0x06	; 6
    17d0:	91 05       	cpc	r25, r1
    17d2:	09 f4       	brne	.+2      	; 0x17d6 <_Z11servoattachsi+0x36>
    17d4:	d1 c0       	rjmp	.+418    	; 0x1978 <_Z11servoattachsi+0x1d8>
    17d6:	87 30       	cpi	r24, 0x07	; 7
    17d8:	91 05       	cpc	r25, r1
    17da:	09 f0       	breq	.+2      	; 0x17de <_Z11servoattachsi+0x3e>
    17dc:	b7 c1       	rjmp	.+878    	; 0x1b4c <_Z11servoattachsi+0x3ac>
    17de:	f4 c0       	rjmp	.+488    	; 0x19c8 <_Z11servoattachsi+0x228>
    17e0:	8c 32       	cpi	r24, 0x2C	; 44
    17e2:	91 05       	cpc	r25, r1
    17e4:	09 f4       	brne	.+2      	; 0x17e8 <_Z11servoattachsi+0x48>
    17e6:	8b c1       	rjmp	.+790    	; 0x1afe <_Z11servoattachsi+0x35e>
    17e8:	8d 32       	cpi	r24, 0x2D	; 45
    17ea:	91 05       	cpc	r25, r1
    17ec:	44 f4       	brge	.+16     	; 0x17fe <_Z11servoattachsi+0x5e>
    17ee:	8b 30       	cpi	r24, 0x0B	; 11
    17f0:	91 05       	cpc	r25, r1
    17f2:	71 f0       	breq	.+28     	; 0x1810 <_Z11servoattachsi+0x70>
    17f4:	8c 30       	cpi	r24, 0x0C	; 12
    17f6:	91 05       	cpc	r25, r1
    17f8:	09 f0       	breq	.+2      	; 0x17fc <_Z11servoattachsi+0x5c>
    17fa:	a8 c1       	rjmp	.+848    	; 0x1b4c <_Z11servoattachsi+0x3ac>
    17fc:	2d c0       	rjmp	.+90     	; 0x1858 <_Z11servoattachsi+0xb8>
    17fe:	8d 32       	cpi	r24, 0x2D	; 45
    1800:	91 05       	cpc	r25, r1
    1802:	09 f4       	brne	.+2      	; 0x1806 <_Z11servoattachsi+0x66>
    1804:	59 c1       	rjmp	.+690    	; 0x1ab8 <_Z11servoattachsi+0x318>
    1806:	8e 32       	cpi	r24, 0x2E	; 46
    1808:	91 05       	cpc	r25, r1
    180a:	09 f0       	breq	.+2      	; 0x180e <_Z11servoattachsi+0x6e>
    180c:	9f c1       	rjmp	.+830    	; 0x1b4c <_Z11servoattachsi+0x3ac>
    180e:	2c c1       	rjmp	.+600    	; 0x1a68 <_Z11servoattachsi+0x2c8>
  {
   case 11 :                            //OC1A
      DDRB|=(1<<PB5); // PORTB as OUTPUT
    1810:	25 9a       	sbi	0x04, 5	; 4
      TCCR1A|=(1<<WGM11)|(1<<COM1A1)|(1<<COM1A0);  //SETTING PRESCALAR AS 64 
    1812:	e0 e8       	ldi	r30, 0x80	; 128
    1814:	f0 e0       	ldi	r31, 0x00	; 0
    1816:	80 81       	ld	r24, Z
    1818:	82 6c       	ori	r24, 0xC2	; 194
    181a:	80 83       	st	Z, r24
      TCCR1B|=(1<<WGM12)|(1<<WGM13)|(1<<CS10)|(1<<CS11); //FAST PWM MODE
    181c:	e1 e8       	ldi	r30, 0x81	; 129
    181e:	f0 e0       	ldi	r31, 0x00	; 0
    1820:	80 81       	ld	r24, Z
    1822:	8b 61       	ori	r24, 0x1B	; 27
    1824:	80 83       	st	Z, r24
      ICR1=312.5*value-1;                    //generating 20msec pulse (pwm method)
    1826:	88 27       	eor	r24, r24
    1828:	77 fd       	sbrc	r23, 7
    182a:	80 95       	com	r24
    182c:	98 2f       	mov	r25, r24
    182e:	0e 94 c2 13 	call	0x2784	; 0x2784 <__floatsisf>
    1832:	20 e0       	ldi	r18, 0x00	; 0
    1834:	30 e4       	ldi	r19, 0x40	; 64
    1836:	4c e9       	ldi	r20, 0x9C	; 156
    1838:	53 e4       	ldi	r21, 0x43	; 67
    183a:	0e 94 76 14 	call	0x28ec	; 0x28ec <__mulsf3>
    183e:	20 e0       	ldi	r18, 0x00	; 0
    1840:	30 e0       	ldi	r19, 0x00	; 0
    1842:	40 e8       	ldi	r20, 0x80	; 128
    1844:	5f e3       	ldi	r21, 0x3F	; 63
    1846:	0e 94 be 12 	call	0x257c	; 0x257c <__subsf3>
    184a:	0e 94 94 13 	call	0x2728	; 0x2728 <__fixunssfsi>
    184e:	70 93 87 00 	sts	0x0087, r23
    1852:	60 93 86 00 	sts	0x0086, r22
      break; 
    1856:	08 95       	ret

   case 12 :                            //OC1B
      DDRB|=(1<<PB6); // PORTB as OUTPUT
    1858:	26 9a       	sbi	0x04, 6	; 4
      TCCR1A|=(1<<WGM11)|(1<<COM1B1)|(1<<COM1B0);  //SETTING PRESCALAR AS 64 
    185a:	e0 e8       	ldi	r30, 0x80	; 128
    185c:	f0 e0       	ldi	r31, 0x00	; 0
    185e:	80 81       	ld	r24, Z
    1860:	82 63       	ori	r24, 0x32	; 50
    1862:	80 83       	st	Z, r24
      TCCR1B|=(1<<WGM12)|(1<<WGM13)|(1<<CS10)|(1<<CS11); //FAST PWM MODE
    1864:	e1 e8       	ldi	r30, 0x81	; 129
    1866:	f0 e0       	ldi	r31, 0x00	; 0
    1868:	80 81       	ld	r24, Z
    186a:	8b 61       	ori	r24, 0x1B	; 27
    186c:	80 83       	st	Z, r24
      ICR1=312.5*value-1;                    //generating 20msec pulse (pwm method)
    186e:	88 27       	eor	r24, r24
    1870:	77 fd       	sbrc	r23, 7
    1872:	80 95       	com	r24
    1874:	98 2f       	mov	r25, r24
    1876:	0e 94 c2 13 	call	0x2784	; 0x2784 <__floatsisf>
    187a:	20 e0       	ldi	r18, 0x00	; 0
    187c:	30 e4       	ldi	r19, 0x40	; 64
    187e:	4c e9       	ldi	r20, 0x9C	; 156
    1880:	53 e4       	ldi	r21, 0x43	; 67
    1882:	0e 94 76 14 	call	0x28ec	; 0x28ec <__mulsf3>
    1886:	20 e0       	ldi	r18, 0x00	; 0
    1888:	30 e0       	ldi	r19, 0x00	; 0
    188a:	40 e8       	ldi	r20, 0x80	; 128
    188c:	5f e3       	ldi	r21, 0x3F	; 63
    188e:	0e 94 be 12 	call	0x257c	; 0x257c <__subsf3>
    1892:	0e 94 94 13 	call	0x2728	; 0x2728 <__fixunssfsi>
    1896:	70 93 87 00 	sts	0x0087, r23
    189a:	60 93 86 00 	sts	0x0086, r22
      break;
    189e:	08 95       	ret

    case 5 :                            //OC3A
      DDRE|=(1<<PE3); // PORTB as OUTPUT
    18a0:	6b 9a       	sbi	0x0d, 3	; 13
      TCCR3A|=(1<<WGM31)|(1<<COM3A1)|(1<<COM3A0);  //SETTING PRESCALAR AS 64 
    18a2:	e0 e9       	ldi	r30, 0x90	; 144
    18a4:	f0 e0       	ldi	r31, 0x00	; 0
    18a6:	80 81       	ld	r24, Z
    18a8:	82 6c       	ori	r24, 0xC2	; 194
    18aa:	80 83       	st	Z, r24
      TCCR3B|=(1<<WGM12)|(1<<WGM13)|(1<<CS30)|(1<<CS31); //FAST PWM MODE
    18ac:	e1 e9       	ldi	r30, 0x91	; 145
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	80 81       	ld	r24, Z
    18b2:	8b 61       	ori	r24, 0x1B	; 27
    18b4:	80 83       	st	Z, r24
      ICR3=312.5*value-1;                    //generating 20msec pulse (pwm method)
    18b6:	88 27       	eor	r24, r24
    18b8:	77 fd       	sbrc	r23, 7
    18ba:	80 95       	com	r24
    18bc:	98 2f       	mov	r25, r24
    18be:	0e 94 c2 13 	call	0x2784	; 0x2784 <__floatsisf>
    18c2:	20 e0       	ldi	r18, 0x00	; 0
    18c4:	30 e4       	ldi	r19, 0x40	; 64
    18c6:	4c e9       	ldi	r20, 0x9C	; 156
    18c8:	53 e4       	ldi	r21, 0x43	; 67
    18ca:	0e 94 76 14 	call	0x28ec	; 0x28ec <__mulsf3>
    18ce:	20 e0       	ldi	r18, 0x00	; 0
    18d0:	30 e0       	ldi	r19, 0x00	; 0
    18d2:	40 e8       	ldi	r20, 0x80	; 128
    18d4:	5f e3       	ldi	r21, 0x3F	; 63
    18d6:	0e 94 be 12 	call	0x257c	; 0x257c <__subsf3>
    18da:	0e 94 94 13 	call	0x2728	; 0x2728 <__fixunssfsi>
    18de:	70 93 97 00 	sts	0x0097, r23
    18e2:	60 93 96 00 	sts	0x0096, r22
      break;
    18e6:	08 95       	ret

    case 2 :                            //OC3B
      DDRE|=(1<<PE4); // PORTB as OUTPUT
    18e8:	6c 9a       	sbi	0x0d, 4	; 13
      TCCR3A|=(1<<WGM31)|(1<<COM3B1)|(1<<COM3B0);  //SETTING PRESCALAR AS 64 
    18ea:	e0 e9       	ldi	r30, 0x90	; 144
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	80 81       	ld	r24, Z
    18f0:	82 63       	ori	r24, 0x32	; 50
    18f2:	80 83       	st	Z, r24
      TCCR3B|=(1<<WGM32)|(1<<WGM33)|(1<<CS30)|(1<<CS31); //FAST PWM MODE
    18f4:	e1 e9       	ldi	r30, 0x91	; 145
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	80 81       	ld	r24, Z
    18fa:	8b 61       	ori	r24, 0x1B	; 27
    18fc:	80 83       	st	Z, r24
      ICR3=312.5*value-1;                    //generating 20msec pulse (pwm method)
    18fe:	88 27       	eor	r24, r24
    1900:	77 fd       	sbrc	r23, 7
    1902:	80 95       	com	r24
    1904:	98 2f       	mov	r25, r24
    1906:	0e 94 c2 13 	call	0x2784	; 0x2784 <__floatsisf>
    190a:	20 e0       	ldi	r18, 0x00	; 0
    190c:	30 e4       	ldi	r19, 0x40	; 64
    190e:	4c e9       	ldi	r20, 0x9C	; 156
    1910:	53 e4       	ldi	r21, 0x43	; 67
    1912:	0e 94 76 14 	call	0x28ec	; 0x28ec <__mulsf3>
    1916:	20 e0       	ldi	r18, 0x00	; 0
    1918:	30 e0       	ldi	r19, 0x00	; 0
    191a:	40 e8       	ldi	r20, 0x80	; 128
    191c:	5f e3       	ldi	r21, 0x3F	; 63
    191e:	0e 94 be 12 	call	0x257c	; 0x257c <__subsf3>
    1922:	0e 94 94 13 	call	0x2728	; 0x2728 <__fixunssfsi>
    1926:	70 93 97 00 	sts	0x0097, r23
    192a:	60 93 96 00 	sts	0x0096, r22
      break;
    192e:	08 95       	ret
   
    case 3 :                            //OC3C
      DDRE|=(1<<PE5); // PORTB as OUTPUT
    1930:	6d 9a       	sbi	0x0d, 5	; 13
      TCCR3A|=(1<<WGM31)|(1<<COM3C1)|(1<<COM3C0);  //SETTING PRESCALAR AS 64 
    1932:	e0 e9       	ldi	r30, 0x90	; 144
    1934:	f0 e0       	ldi	r31, 0x00	; 0
    1936:	80 81       	ld	r24, Z
    1938:	8e 60       	ori	r24, 0x0E	; 14
    193a:	80 83       	st	Z, r24
      TCCR3B|=(1<<WGM32)|(1<<WGM33)|(1<<CS30)|(1<<CS31); //FAST PWM MODE
    193c:	e1 e9       	ldi	r30, 0x91	; 145
    193e:	f0 e0       	ldi	r31, 0x00	; 0
    1940:	80 81       	ld	r24, Z
    1942:	8b 61       	ori	r24, 0x1B	; 27
    1944:	80 83       	st	Z, r24
      ICR3=312.5*value-1;                    //generating 20msec pulse (pwm method)
    1946:	88 27       	eor	r24, r24
    1948:	77 fd       	sbrc	r23, 7
    194a:	80 95       	com	r24
    194c:	98 2f       	mov	r25, r24
    194e:	0e 94 c2 13 	call	0x2784	; 0x2784 <__floatsisf>
    1952:	20 e0       	ldi	r18, 0x00	; 0
    1954:	30 e4       	ldi	r19, 0x40	; 64
    1956:	4c e9       	ldi	r20, 0x9C	; 156
    1958:	53 e4       	ldi	r21, 0x43	; 67
    195a:	0e 94 76 14 	call	0x28ec	; 0x28ec <__mulsf3>
    195e:	20 e0       	ldi	r18, 0x00	; 0
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	40 e8       	ldi	r20, 0x80	; 128
    1964:	5f e3       	ldi	r21, 0x3F	; 63
    1966:	0e 94 be 12 	call	0x257c	; 0x257c <__subsf3>
    196a:	0e 94 94 13 	call	0x2728	; 0x2728 <__fixunssfsi>
    196e:	70 93 97 00 	sts	0x0097, r23
    1972:	60 93 96 00 	sts	0x0096, r22
      break;
    1976:	08 95       	ret

    case 6 :                            //OC4A
      DDRH|=(1<<PH3); // PORTB as OUTPUT
    1978:	e1 e0       	ldi	r30, 0x01	; 1
    197a:	f1 e0       	ldi	r31, 0x01	; 1
    197c:	80 81       	ld	r24, Z
    197e:	88 60       	ori	r24, 0x08	; 8
    1980:	80 83       	st	Z, r24
      TCCR4A|=(1<<WGM41)|(1<<COM4A1)|(1<<COM4A0);  //SETTING PRESCALAR AS 64 
    1982:	e0 ea       	ldi	r30, 0xA0	; 160
    1984:	f0 e0       	ldi	r31, 0x00	; 0
    1986:	80 81       	ld	r24, Z
    1988:	82 6c       	ori	r24, 0xC2	; 194
    198a:	80 83       	st	Z, r24
      TCCR4B|=(1<<WGM42)|(1<<WGM43)|(1<<CS40)|(1<<CS41); //FAST PWM MODE
    198c:	e1 ea       	ldi	r30, 0xA1	; 161
    198e:	f0 e0       	ldi	r31, 0x00	; 0
    1990:	80 81       	ld	r24, Z
    1992:	8b 61       	ori	r24, 0x1B	; 27
    1994:	80 83       	st	Z, r24
      ICR4=312.5*value-1;                    //generating 20msec pulse (pwm method)
    1996:	88 27       	eor	r24, r24
    1998:	77 fd       	sbrc	r23, 7
    199a:	80 95       	com	r24
    199c:	98 2f       	mov	r25, r24
    199e:	0e 94 c2 13 	call	0x2784	; 0x2784 <__floatsisf>
    19a2:	20 e0       	ldi	r18, 0x00	; 0
    19a4:	30 e4       	ldi	r19, 0x40	; 64
    19a6:	4c e9       	ldi	r20, 0x9C	; 156
    19a8:	53 e4       	ldi	r21, 0x43	; 67
    19aa:	0e 94 76 14 	call	0x28ec	; 0x28ec <__mulsf3>
    19ae:	20 e0       	ldi	r18, 0x00	; 0
    19b0:	30 e0       	ldi	r19, 0x00	; 0
    19b2:	40 e8       	ldi	r20, 0x80	; 128
    19b4:	5f e3       	ldi	r21, 0x3F	; 63
    19b6:	0e 94 be 12 	call	0x257c	; 0x257c <__subsf3>
    19ba:	0e 94 94 13 	call	0x2728	; 0x2728 <__fixunssfsi>
    19be:	70 93 a7 00 	sts	0x00A7, r23
    19c2:	60 93 a6 00 	sts	0x00A6, r22
      break;
    19c6:	08 95       	ret

    case 7 :                            //OC4B
      DDRH|=(1<<PH4); // PORTB as OUTPUT
    19c8:	e1 e0       	ldi	r30, 0x01	; 1
    19ca:	f1 e0       	ldi	r31, 0x01	; 1
    19cc:	80 81       	ld	r24, Z
    19ce:	80 61       	ori	r24, 0x10	; 16
    19d0:	80 83       	st	Z, r24
      TCCR4A|=(1<<WGM41)|(1<<COM4B1)|(1<<COM4B0);  //SETTING PRESCALAR AS 64 
    19d2:	e0 ea       	ldi	r30, 0xA0	; 160
    19d4:	f0 e0       	ldi	r31, 0x00	; 0
    19d6:	80 81       	ld	r24, Z
    19d8:	82 63       	ori	r24, 0x32	; 50
    19da:	80 83       	st	Z, r24
      TCCR4B|=(1<<WGM42)|(1<<WGM43)|(1<<CS40)|(1<<CS41); //FAST PWM MODE
    19dc:	e1 ea       	ldi	r30, 0xA1	; 161
    19de:	f0 e0       	ldi	r31, 0x00	; 0
    19e0:	80 81       	ld	r24, Z
    19e2:	8b 61       	ori	r24, 0x1B	; 27
    19e4:	80 83       	st	Z, r24
      ICR4=312.5*value-1;                    //generating 20msec pulse (pwm method)
    19e6:	88 27       	eor	r24, r24
    19e8:	77 fd       	sbrc	r23, 7
    19ea:	80 95       	com	r24
    19ec:	98 2f       	mov	r25, r24
    19ee:	0e 94 c2 13 	call	0x2784	; 0x2784 <__floatsisf>
    19f2:	20 e0       	ldi	r18, 0x00	; 0
    19f4:	30 e4       	ldi	r19, 0x40	; 64
    19f6:	4c e9       	ldi	r20, 0x9C	; 156
    19f8:	53 e4       	ldi	r21, 0x43	; 67
    19fa:	0e 94 76 14 	call	0x28ec	; 0x28ec <__mulsf3>
    19fe:	20 e0       	ldi	r18, 0x00	; 0
    1a00:	30 e0       	ldi	r19, 0x00	; 0
    1a02:	40 e8       	ldi	r20, 0x80	; 128
    1a04:	5f e3       	ldi	r21, 0x3F	; 63
    1a06:	0e 94 be 12 	call	0x257c	; 0x257c <__subsf3>
    1a0a:	0e 94 94 13 	call	0x2728	; 0x2728 <__fixunssfsi>
    1a0e:	70 93 a7 00 	sts	0x00A7, r23
    1a12:	60 93 a6 00 	sts	0x00A6, r22
      break;
    1a16:	08 95       	ret

    case 8 :                            //OC4C
      DDRH|=(1<<PH5); // PORTB as OUTPUT
    1a18:	e1 e0       	ldi	r30, 0x01	; 1
    1a1a:	f1 e0       	ldi	r31, 0x01	; 1
    1a1c:	80 81       	ld	r24, Z
    1a1e:	80 62       	ori	r24, 0x20	; 32
    1a20:	80 83       	st	Z, r24
      TCCR4A|=(1<<WGM41)|(1<<COM4C1)|(1<<COM4C0);  //SETTING PRESCALAR AS 64 
    1a22:	e0 ea       	ldi	r30, 0xA0	; 160
    1a24:	f0 e0       	ldi	r31, 0x00	; 0
    1a26:	80 81       	ld	r24, Z
    1a28:	8e 60       	ori	r24, 0x0E	; 14
    1a2a:	80 83       	st	Z, r24
      TCCR4B|=(1<<WGM42)|(1<<WGM43)|(1<<CS40)|(1<<CS41); //FAST PWM MODE
    1a2c:	e1 ea       	ldi	r30, 0xA1	; 161
    1a2e:	f0 e0       	ldi	r31, 0x00	; 0
    1a30:	80 81       	ld	r24, Z
    1a32:	8b 61       	ori	r24, 0x1B	; 27
    1a34:	80 83       	st	Z, r24
      ICR4=312.5*value-1;                    //generating 20msec pulse (pwm method)
    1a36:	88 27       	eor	r24, r24
    1a38:	77 fd       	sbrc	r23, 7
    1a3a:	80 95       	com	r24
    1a3c:	98 2f       	mov	r25, r24
    1a3e:	0e 94 c2 13 	call	0x2784	; 0x2784 <__floatsisf>
    1a42:	20 e0       	ldi	r18, 0x00	; 0
    1a44:	30 e4       	ldi	r19, 0x40	; 64
    1a46:	4c e9       	ldi	r20, 0x9C	; 156
    1a48:	53 e4       	ldi	r21, 0x43	; 67
    1a4a:	0e 94 76 14 	call	0x28ec	; 0x28ec <__mulsf3>
    1a4e:	20 e0       	ldi	r18, 0x00	; 0
    1a50:	30 e0       	ldi	r19, 0x00	; 0
    1a52:	40 e8       	ldi	r20, 0x80	; 128
    1a54:	5f e3       	ldi	r21, 0x3F	; 63
    1a56:	0e 94 be 12 	call	0x257c	; 0x257c <__subsf3>
    1a5a:	0e 94 94 13 	call	0x2728	; 0x2728 <__fixunssfsi>
    1a5e:	70 93 a7 00 	sts	0x00A7, r23
    1a62:	60 93 a6 00 	sts	0x00A6, r22
      break;
    1a66:	08 95       	ret

    case 46 :                           //OC5A 
      DDRL|=(1<<PL3); // PORTB as OUTPUT
    1a68:	ea e0       	ldi	r30, 0x0A	; 10
    1a6a:	f1 e0       	ldi	r31, 0x01	; 1
    1a6c:	80 81       	ld	r24, Z
    1a6e:	88 60       	ori	r24, 0x08	; 8
    1a70:	80 83       	st	Z, r24
      TCCR5A|=(1<<WGM51)|(1<<COM5A1)|(1<<COM5A0);  //SETTING PRESCALAR AS 64 
    1a72:	e0 e2       	ldi	r30, 0x20	; 32
    1a74:	f1 e0       	ldi	r31, 0x01	; 1
    1a76:	80 81       	ld	r24, Z
    1a78:	82 6c       	ori	r24, 0xC2	; 194
    1a7a:	80 83       	st	Z, r24
      TCCR5B|=(1<<WGM52)|(1<<WGM53)|(1<<CS50)|(1<<CS51); //FAST PWM MODE
    1a7c:	e1 e2       	ldi	r30, 0x21	; 33
    1a7e:	f1 e0       	ldi	r31, 0x01	; 1
    1a80:	80 81       	ld	r24, Z
    1a82:	8b 61       	ori	r24, 0x1B	; 27
    1a84:	80 83       	st	Z, r24
      ICR5=312.5*value-1;                    //generating 20msec pulse (pwm method)
    1a86:	88 27       	eor	r24, r24
    1a88:	77 fd       	sbrc	r23, 7
    1a8a:	80 95       	com	r24
    1a8c:	98 2f       	mov	r25, r24
    1a8e:	0e 94 c2 13 	call	0x2784	; 0x2784 <__floatsisf>
    1a92:	20 e0       	ldi	r18, 0x00	; 0
    1a94:	30 e4       	ldi	r19, 0x40	; 64
    1a96:	4c e9       	ldi	r20, 0x9C	; 156
    1a98:	53 e4       	ldi	r21, 0x43	; 67
    1a9a:	0e 94 76 14 	call	0x28ec	; 0x28ec <__mulsf3>
    1a9e:	20 e0       	ldi	r18, 0x00	; 0
    1aa0:	30 e0       	ldi	r19, 0x00	; 0
    1aa2:	40 e8       	ldi	r20, 0x80	; 128
    1aa4:	5f e3       	ldi	r21, 0x3F	; 63
    1aa6:	0e 94 be 12 	call	0x257c	; 0x257c <__subsf3>
    1aaa:	0e 94 94 13 	call	0x2728	; 0x2728 <__fixunssfsi>
    1aae:	70 93 27 01 	sts	0x0127, r23
    1ab2:	60 93 26 01 	sts	0x0126, r22
      break;
    1ab6:	08 95       	ret

    case 45 :                           //OC5B      DDRL|=(1<<PL4); // PORTB as OUTPUT
      TCCR5A|=(1<<WGM51)|(1<<COM5B1)|(1<<COM5B0);  //SETTING PRESCALAR AS 64 
    1ab8:	e0 e2       	ldi	r30, 0x20	; 32
    1aba:	f1 e0       	ldi	r31, 0x01	; 1
    1abc:	80 81       	ld	r24, Z
    1abe:	82 63       	ori	r24, 0x32	; 50
    1ac0:	80 83       	st	Z, r24
      TCCR5B|=(1<<WGM52)|(1<<WGM53)|(1<<CS50)|(1<<CS51); //FAST PWM MODE
    1ac2:	e1 e2       	ldi	r30, 0x21	; 33
    1ac4:	f1 e0       	ldi	r31, 0x01	; 1
    1ac6:	80 81       	ld	r24, Z
    1ac8:	8b 61       	ori	r24, 0x1B	; 27
    1aca:	80 83       	st	Z, r24
      ICR5=312.5*value-1;                    //generating 20msec pulse (pwm met)
    1acc:	88 27       	eor	r24, r24
    1ace:	77 fd       	sbrc	r23, 7
    1ad0:	80 95       	com	r24
    1ad2:	98 2f       	mov	r25, r24
    1ad4:	0e 94 c2 13 	call	0x2784	; 0x2784 <__floatsisf>
    1ad8:	20 e0       	ldi	r18, 0x00	; 0
    1ada:	30 e4       	ldi	r19, 0x40	; 64
    1adc:	4c e9       	ldi	r20, 0x9C	; 156
    1ade:	53 e4       	ldi	r21, 0x43	; 67
    1ae0:	0e 94 76 14 	call	0x28ec	; 0x28ec <__mulsf3>
    1ae4:	20 e0       	ldi	r18, 0x00	; 0
    1ae6:	30 e0       	ldi	r19, 0x00	; 0
    1ae8:	40 e8       	ldi	r20, 0x80	; 128
    1aea:	5f e3       	ldi	r21, 0x3F	; 63
    1aec:	0e 94 be 12 	call	0x257c	; 0x257c <__subsf3>
    1af0:	0e 94 94 13 	call	0x2728	; 0x2728 <__fixunssfsi>
    1af4:	70 93 27 01 	sts	0x0127, r23
    1af8:	60 93 26 01 	sts	0x0126, r22
      break;
    1afc:	08 95       	ret

    case 44 :                           //OC5C
      DDRL|=(1<<PL5); // PORTB as OUTPUT
    1afe:	ea e0       	ldi	r30, 0x0A	; 10
    1b00:	f1 e0       	ldi	r31, 0x01	; 1
    1b02:	80 81       	ld	r24, Z
    1b04:	80 62       	ori	r24, 0x20	; 32
    1b06:	80 83       	st	Z, r24
      TCCR5A|=(1<<WGM51)|(1<<COM5C1)|(1<<COM5C0);  //SETTING PRESCALAR AS 64 
    1b08:	e0 e2       	ldi	r30, 0x20	; 32
    1b0a:	f1 e0       	ldi	r31, 0x01	; 1
    1b0c:	80 81       	ld	r24, Z
    1b0e:	8e 60       	ori	r24, 0x0E	; 14
    1b10:	80 83       	st	Z, r24
      TCCR5B|=(1<<WGM52)|(1<<WGM53)|(1<<CS50)|(1<<CS51); //FAST PWM MODE
    1b12:	e1 e2       	ldi	r30, 0x21	; 33
    1b14:	f1 e0       	ldi	r31, 0x01	; 1
    1b16:	80 81       	ld	r24, Z
    1b18:	8b 61       	ori	r24, 0x1B	; 27
    1b1a:	80 83       	st	Z, r24
      ICR5=312.5*value-1;                    //generating 20msec pulse (pwm method)
    1b1c:	88 27       	eor	r24, r24
    1b1e:	77 fd       	sbrc	r23, 7
    1b20:	80 95       	com	r24
    1b22:	98 2f       	mov	r25, r24
    1b24:	0e 94 c2 13 	call	0x2784	; 0x2784 <__floatsisf>
    1b28:	20 e0       	ldi	r18, 0x00	; 0
    1b2a:	30 e4       	ldi	r19, 0x40	; 64
    1b2c:	4c e9       	ldi	r20, 0x9C	; 156
    1b2e:	53 e4       	ldi	r21, 0x43	; 67
    1b30:	0e 94 76 14 	call	0x28ec	; 0x28ec <__mulsf3>
    1b34:	20 e0       	ldi	r18, 0x00	; 0
    1b36:	30 e0       	ldi	r19, 0x00	; 0
    1b38:	40 e8       	ldi	r20, 0x80	; 128
    1b3a:	5f e3       	ldi	r21, 0x3F	; 63
    1b3c:	0e 94 be 12 	call	0x257c	; 0x257c <__subsf3>
    1b40:	0e 94 94 13 	call	0x2728	; 0x2728 <__fixunssfsi>
    1b44:	70 93 27 01 	sts	0x0127, r23
    1b48:	60 93 26 01 	sts	0x0126, r22
    1b4c:	08 95       	ret

00001b4e <_Z13servoPSPwritesi>:
      break;
   }
}

void servoPSPwrite(short int pin,int val)           //PIN=servo pin no. on mega,val=angle value for the servo at pin
{
    1b4e:	4f 92       	push	r4
    1b50:	5f 92       	push	r5
    1b52:	6f 92       	push	r6
    1b54:	7f 92       	push	r7
    1b56:	8f 92       	push	r8
    1b58:	9f 92       	push	r9
    1b5a:	af 92       	push	r10
    1b5c:	bf 92       	push	r11
    1b5e:	cf 92       	push	r12
    1b60:	df 92       	push	r13
    1b62:	ef 92       	push	r14
    1b64:	ff 92       	push	r15
    1b66:	0f 93       	push	r16
    1b68:	1f 93       	push	r17
    1b6a:	cf 93       	push	r28
    1b6c:	df 93       	push	r29
  switch(pin)
    1b6e:	88 30       	cpi	r24, 0x08	; 8
    1b70:	91 05       	cpc	r25, r1
    1b72:	09 f4       	brne	.+2      	; 0x1b76 <_Z13servoPSPwritesi+0x28>
    1b74:	70 c2       	rjmp	.+1248   	; 0x2056 <_Z13servoPSPwritesi+0x508>
    1b76:	89 30       	cpi	r24, 0x09	; 9
    1b78:	91 05       	cpc	r25, r1
    1b7a:	cc f4       	brge	.+50     	; 0x1bae <_Z13servoPSPwritesi+0x60>
    1b7c:	85 30       	cpi	r24, 0x05	; 5
    1b7e:	91 05       	cpc	r25, r1
    1b80:	09 f4       	brne	.+2      	; 0x1b84 <_Z13servoPSPwritesi+0x36>
    1b82:	cf c0       	rjmp	.+414    	; 0x1d22 <_Z13servoPSPwritesi+0x1d4>
    1b84:	86 30       	cpi	r24, 0x06	; 6
    1b86:	91 05       	cpc	r25, r1
    1b88:	4c f4       	brge	.+18     	; 0x1b9c <_Z13servoPSPwritesi+0x4e>
    1b8a:	82 30       	cpi	r24, 0x02	; 2
    1b8c:	91 05       	cpc	r25, r1
    1b8e:	09 f4       	brne	.+2      	; 0x1b92 <_Z13servoPSPwritesi+0x44>
    1b90:	1a c1       	rjmp	.+564    	; 0x1dc6 <_Z13servoPSPwritesi+0x278>
    1b92:	83 30       	cpi	r24, 0x03	; 3
    1b94:	91 05       	cpc	r25, r1
    1b96:	09 f0       	breq	.+2      	; 0x1b9a <_Z13servoPSPwritesi+0x4c>
    1b98:	a5 c3       	rjmp	.+1866   	; 0x22e4 <__stack+0xe5>
    1b9a:	67 c1       	rjmp	.+718    	; 0x1e6a <_Z13servoPSPwritesi+0x31c>
    1b9c:	86 30       	cpi	r24, 0x06	; 6
    1b9e:	91 05       	cpc	r25, r1
    1ba0:	09 f4       	brne	.+2      	; 0x1ba4 <_Z13servoPSPwritesi+0x56>
    1ba2:	b5 c1       	rjmp	.+874    	; 0x1f0e <_Z13servoPSPwritesi+0x3c0>
    1ba4:	87 30       	cpi	r24, 0x07	; 7
    1ba6:	91 05       	cpc	r25, r1
    1ba8:	09 f0       	breq	.+2      	; 0x1bac <_Z13servoPSPwritesi+0x5e>
    1baa:	9c c3       	rjmp	.+1848   	; 0x22e4 <__stack+0xe5>
    1bac:	02 c2       	rjmp	.+1028   	; 0x1fb2 <_Z13servoPSPwritesi+0x464>
    1bae:	8c 32       	cpi	r24, 0x2C	; 44
    1bb0:	91 05       	cpc	r25, r1
    1bb2:	09 f4       	brne	.+2      	; 0x1bb6 <_Z13servoPSPwritesi+0x68>
    1bb4:	46 c3       	rjmp	.+1676   	; 0x2242 <__stack+0x43>
    1bb6:	8d 32       	cpi	r24, 0x2D	; 45
    1bb8:	91 05       	cpc	r25, r1
    1bba:	44 f4       	brge	.+16     	; 0x1bcc <_Z13servoPSPwritesi+0x7e>
    1bbc:	8b 30       	cpi	r24, 0x0B	; 11
    1bbe:	91 05       	cpc	r25, r1
    1bc0:	71 f0       	breq	.+28     	; 0x1bde <_Z13servoPSPwritesi+0x90>
    1bc2:	8c 30       	cpi	r24, 0x0C	; 12
    1bc4:	91 05       	cpc	r25, r1
    1bc6:	09 f0       	breq	.+2      	; 0x1bca <_Z13servoPSPwritesi+0x7c>
    1bc8:	8d c3       	rjmp	.+1818   	; 0x22e4 <__stack+0xe5>
    1bca:	5a c0       	rjmp	.+180    	; 0x1c80 <_Z13servoPSPwritesi+0x132>
    1bcc:	8d 32       	cpi	r24, 0x2D	; 45
    1bce:	91 05       	cpc	r25, r1
    1bd0:	09 f4       	brne	.+2      	; 0x1bd4 <_Z13servoPSPwritesi+0x86>
    1bd2:	e5 c2       	rjmp	.+1482   	; 0x219e <_Z13servoPSPwritesi+0x650>
    1bd4:	8e 32       	cpi	r24, 0x2E	; 46
    1bd6:	91 05       	cpc	r25, r1
    1bd8:	09 f0       	breq	.+2      	; 0x1bdc <_Z13servoPSPwritesi+0x8e>
    1bda:	84 c3       	rjmp	.+1800   	; 0x22e4 <__stack+0xe5>
    1bdc:	8e c2       	rjmp	.+1308   	; 0x20fa <_Z13servoPSPwritesi+0x5ac>
  {
   case 11:
      val=map(val,0,180,ICR1/40,ICR1/8);
    1bde:	c6 e8       	ldi	r28, 0x86	; 134
    1be0:	d0 e0       	ldi	r29, 0x00	; 0
    1be2:	a8 80       	ld	r10, Y
    1be4:	b9 80       	ldd	r11, Y+1	; 0x01
    1be6:	e8 80       	ld	r14, Y
    1be8:	f9 80       	ldd	r15, Y+1	; 0x01
    1bea:	00 d0       	rcall	.+0      	; 0x1bec <_Z13servoPSPwritesi+0x9e>
    1bec:	0f 92       	push	r0
    1bee:	4d b6       	in	r4, 0x3d	; 61
    1bf0:	5e b6       	in	r5, 0x3e	; 62
    1bf2:	08 94       	sec
    1bf4:	41 1c       	adc	r4, r1
    1bf6:	51 1c       	adc	r5, r1
    1bf8:	88 27       	eor	r24, r24
    1bfa:	77 fd       	sbrc	r23, 7
    1bfc:	80 95       	com	r24
    1bfe:	98 2f       	mov	r25, r24
    1c00:	0e 94 c2 13 	call	0x2784	; 0x2784 <__floatsisf>
    1c04:	3b 01       	movw	r6, r22
    1c06:	4c 01       	movw	r8, r24
    1c08:	c5 01       	movw	r24, r10
    1c0a:	68 e2       	ldi	r22, 0x28	; 40
    1c0c:	70 e0       	ldi	r23, 0x00	; 0
    1c0e:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <__udivmodhi4>
    1c12:	80 e0       	ldi	r24, 0x00	; 0
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	0e 94 c0 13 	call	0x2780	; 0x2780 <__floatunsisf>
    1c1a:	5b 01       	movw	r10, r22
    1c1c:	6c 01       	movw	r12, r24
    1c1e:	f6 94       	lsr	r15
    1c20:	e7 94       	ror	r14
    1c22:	f6 94       	lsr	r15
    1c24:	e7 94       	ror	r14
    1c26:	f6 94       	lsr	r15
    1c28:	e7 94       	ror	r14
    1c2a:	b7 01       	movw	r22, r14
    1c2c:	80 e0       	ldi	r24, 0x00	; 0
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	0e 94 c0 13 	call	0x2780	; 0x2780 <__floatunsisf>
    1c34:	f2 01       	movw	r30, r4
    1c36:	60 83       	st	Z, r22
    1c38:	71 83       	std	Z+1, r23	; 0x01
    1c3a:	82 83       	std	Z+2, r24	; 0x02
    1c3c:	93 83       	std	Z+3, r25	; 0x03
    1c3e:	c4 01       	movw	r24, r8
    1c40:	b3 01       	movw	r22, r6
    1c42:	20 e0       	ldi	r18, 0x00	; 0
    1c44:	30 e0       	ldi	r19, 0x00	; 0
    1c46:	a9 01       	movw	r20, r18
    1c48:	0f 2e       	mov	r0, r31
    1c4a:	f0 e0       	ldi	r31, 0x00	; 0
    1c4c:	ef 2e       	mov	r14, r31
    1c4e:	f0 e0       	ldi	r31, 0x00	; 0
    1c50:	ff 2e       	mov	r15, r31
    1c52:	f4 e3       	ldi	r31, 0x34	; 52
    1c54:	0f 2f       	mov	r16, r31
    1c56:	f3 e4       	ldi	r31, 0x43	; 67
    1c58:	1f 2f       	mov	r17, r31
    1c5a:	f0 2d       	mov	r31, r0
    1c5c:	0e 94 a3 08 	call	0x1146	; 0x1146 <_Z3mapddddd>
    1c60:	0f 90       	pop	r0
    1c62:	0f 90       	pop	r0
    1c64:	0f 90       	pop	r0
    1c66:	0f 90       	pop	r0
      OCR1A=ICR1-val;
    1c68:	09 90       	ld	r0, Y+
    1c6a:	d8 81       	ld	r29, Y
    1c6c:	c0 2d       	mov	r28, r0
void servoPSPwrite(short int pin,int val)           //PIN=servo pin no. on mega,val=angle value for the servo at pin
{
  switch(pin)
  {
   case 11:
      val=map(val,0,180,ICR1/40,ICR1/8);
    1c6e:	0e 94 8f 13 	call	0x271e	; 0x271e <__fixsfsi>
      OCR1A=ICR1-val;
    1c72:	c6 1b       	sub	r28, r22
    1c74:	d7 0b       	sbc	r29, r23
    1c76:	d0 93 89 00 	sts	0x0089, r29
    1c7a:	c0 93 88 00 	sts	0x0088, r28
      break;
    1c7e:	32 c3       	rjmp	.+1636   	; 0x22e4 <__stack+0xe5>
    case 12:
      val=map(val,0,180,ICR1/40,ICR1/8);
    1c80:	c6 e8       	ldi	r28, 0x86	; 134
    1c82:	d0 e0       	ldi	r29, 0x00	; 0
    1c84:	a8 80       	ld	r10, Y
    1c86:	b9 80       	ldd	r11, Y+1	; 0x01
    1c88:	e8 80       	ld	r14, Y
    1c8a:	f9 80       	ldd	r15, Y+1	; 0x01
    1c8c:	00 d0       	rcall	.+0      	; 0x1c8e <_Z13servoPSPwritesi+0x140>
    1c8e:	0f 92       	push	r0
    1c90:	4d b6       	in	r4, 0x3d	; 61
    1c92:	5e b6       	in	r5, 0x3e	; 62
    1c94:	08 94       	sec
    1c96:	41 1c       	adc	r4, r1
    1c98:	51 1c       	adc	r5, r1
    1c9a:	88 27       	eor	r24, r24
    1c9c:	77 fd       	sbrc	r23, 7
    1c9e:	80 95       	com	r24
    1ca0:	98 2f       	mov	r25, r24
    1ca2:	0e 94 c2 13 	call	0x2784	; 0x2784 <__floatsisf>
    1ca6:	3b 01       	movw	r6, r22
    1ca8:	4c 01       	movw	r8, r24
    1caa:	c5 01       	movw	r24, r10
    1cac:	68 e2       	ldi	r22, 0x28	; 40
    1cae:	70 e0       	ldi	r23, 0x00	; 0
    1cb0:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <__udivmodhi4>
    1cb4:	80 e0       	ldi	r24, 0x00	; 0
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	0e 94 c0 13 	call	0x2780	; 0x2780 <__floatunsisf>
    1cbc:	5b 01       	movw	r10, r22
    1cbe:	6c 01       	movw	r12, r24
    1cc0:	f6 94       	lsr	r15
    1cc2:	e7 94       	ror	r14
    1cc4:	f6 94       	lsr	r15
    1cc6:	e7 94       	ror	r14
    1cc8:	f6 94       	lsr	r15
    1cca:	e7 94       	ror	r14
    1ccc:	b7 01       	movw	r22, r14
    1cce:	80 e0       	ldi	r24, 0x00	; 0
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	0e 94 c0 13 	call	0x2780	; 0x2780 <__floatunsisf>
    1cd6:	f2 01       	movw	r30, r4
    1cd8:	60 83       	st	Z, r22
    1cda:	71 83       	std	Z+1, r23	; 0x01
    1cdc:	82 83       	std	Z+2, r24	; 0x02
    1cde:	93 83       	std	Z+3, r25	; 0x03
    1ce0:	c4 01       	movw	r24, r8
    1ce2:	b3 01       	movw	r22, r6
    1ce4:	20 e0       	ldi	r18, 0x00	; 0
    1ce6:	30 e0       	ldi	r19, 0x00	; 0
    1ce8:	a9 01       	movw	r20, r18
    1cea:	0f 2e       	mov	r0, r31
    1cec:	f0 e0       	ldi	r31, 0x00	; 0
    1cee:	ef 2e       	mov	r14, r31
    1cf0:	f0 e0       	ldi	r31, 0x00	; 0
    1cf2:	ff 2e       	mov	r15, r31
    1cf4:	f4 e3       	ldi	r31, 0x34	; 52
    1cf6:	0f 2f       	mov	r16, r31
    1cf8:	f3 e4       	ldi	r31, 0x43	; 67
    1cfa:	1f 2f       	mov	r17, r31
    1cfc:	f0 2d       	mov	r31, r0
    1cfe:	0e 94 a3 08 	call	0x1146	; 0x1146 <_Z3mapddddd>
    1d02:	0f 90       	pop	r0
    1d04:	0f 90       	pop	r0
    1d06:	0f 90       	pop	r0
    1d08:	0f 90       	pop	r0
      OCR1B=ICR1-val;
    1d0a:	09 90       	ld	r0, Y+
    1d0c:	d8 81       	ld	r29, Y
    1d0e:	c0 2d       	mov	r28, r0
   case 11:
      val=map(val,0,180,ICR1/40,ICR1/8);
      OCR1A=ICR1-val;
      break;
    case 12:
      val=map(val,0,180,ICR1/40,ICR1/8);
    1d10:	0e 94 8f 13 	call	0x271e	; 0x271e <__fixsfsi>
      OCR1B=ICR1-val;
    1d14:	c6 1b       	sub	r28, r22
    1d16:	d7 0b       	sbc	r29, r23
    1d18:	d0 93 8b 00 	sts	0x008B, r29
    1d1c:	c0 93 8a 00 	sts	0x008A, r28
      break;
    1d20:	e1 c2       	rjmp	.+1474   	; 0x22e4 <__stack+0xe5>
    case 5:
      val=map(val,0,180,ICR1/40,ICR1/8);
    1d22:	e6 e8       	ldi	r30, 0x86	; 134
    1d24:	f0 e0       	ldi	r31, 0x00	; 0
    1d26:	c0 81       	ld	r28, Z
    1d28:	d1 81       	ldd	r29, Z+1	; 0x01
    1d2a:	80 80       	ld	r8, Z
    1d2c:	91 80       	ldd	r9, Z+1	; 0x01
    1d2e:	00 d0       	rcall	.+0      	; 0x1d30 <_Z13servoPSPwritesi+0x1e2>
    1d30:	0f 92       	push	r0
    1d32:	6d b6       	in	r6, 0x3d	; 61
    1d34:	7e b6       	in	r7, 0x3e	; 62
    1d36:	08 94       	sec
    1d38:	61 1c       	adc	r6, r1
    1d3a:	71 1c       	adc	r7, r1
    1d3c:	88 27       	eor	r24, r24
    1d3e:	77 fd       	sbrc	r23, 7
    1d40:	80 95       	com	r24
    1d42:	98 2f       	mov	r25, r24
    1d44:	0e 94 c2 13 	call	0x2784	; 0x2784 <__floatsisf>
    1d48:	7b 01       	movw	r14, r22
    1d4a:	8c 01       	movw	r16, r24
    1d4c:	ce 01       	movw	r24, r28
    1d4e:	68 e2       	ldi	r22, 0x28	; 40
    1d50:	70 e0       	ldi	r23, 0x00	; 0
    1d52:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <__udivmodhi4>
    1d56:	80 e0       	ldi	r24, 0x00	; 0
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	0e 94 c0 13 	call	0x2780	; 0x2780 <__floatunsisf>
    1d5e:	5b 01       	movw	r10, r22
    1d60:	6c 01       	movw	r12, r24
    1d62:	96 94       	lsr	r9
    1d64:	87 94       	ror	r8
    1d66:	96 94       	lsr	r9
    1d68:	87 94       	ror	r8
    1d6a:	96 94       	lsr	r9
    1d6c:	87 94       	ror	r8
    1d6e:	b4 01       	movw	r22, r8
    1d70:	80 e0       	ldi	r24, 0x00	; 0
    1d72:	90 e0       	ldi	r25, 0x00	; 0
    1d74:	0e 94 c0 13 	call	0x2780	; 0x2780 <__floatunsisf>
    1d78:	f3 01       	movw	r30, r6
    1d7a:	60 83       	st	Z, r22
    1d7c:	71 83       	std	Z+1, r23	; 0x01
    1d7e:	82 83       	std	Z+2, r24	; 0x02
    1d80:	93 83       	std	Z+3, r25	; 0x03
    1d82:	c8 01       	movw	r24, r16
    1d84:	b7 01       	movw	r22, r14
    1d86:	20 e0       	ldi	r18, 0x00	; 0
    1d88:	30 e0       	ldi	r19, 0x00	; 0
    1d8a:	a9 01       	movw	r20, r18
    1d8c:	0f 2e       	mov	r0, r31
    1d8e:	f0 e0       	ldi	r31, 0x00	; 0
    1d90:	ef 2e       	mov	r14, r31
    1d92:	f0 e0       	ldi	r31, 0x00	; 0
    1d94:	ff 2e       	mov	r15, r31
    1d96:	f4 e3       	ldi	r31, 0x34	; 52
    1d98:	0f 2f       	mov	r16, r31
    1d9a:	f3 e4       	ldi	r31, 0x43	; 67
    1d9c:	1f 2f       	mov	r17, r31
    1d9e:	f0 2d       	mov	r31, r0
    1da0:	0e 94 a3 08 	call	0x1146	; 0x1146 <_Z3mapddddd>
    1da4:	0f 90       	pop	r0
    1da6:	0f 90       	pop	r0
    1da8:	0f 90       	pop	r0
    1daa:	0f 90       	pop	r0
      OCR3A=ICR3-val;
    1dac:	c0 91 96 00 	lds	r28, 0x0096
    1db0:	d0 91 97 00 	lds	r29, 0x0097
    case 12:
      val=map(val,0,180,ICR1/40,ICR1/8);
      OCR1B=ICR1-val;
      break;
    case 5:
      val=map(val,0,180,ICR1/40,ICR1/8);
    1db4:	0e 94 8f 13 	call	0x271e	; 0x271e <__fixsfsi>
      OCR3A=ICR3-val;
    1db8:	c6 1b       	sub	r28, r22
    1dba:	d7 0b       	sbc	r29, r23
    1dbc:	d0 93 99 00 	sts	0x0099, r29
    1dc0:	c0 93 98 00 	sts	0x0098, r28
      break;
    1dc4:	8f c2       	rjmp	.+1310   	; 0x22e4 <__stack+0xe5>
    case 2:
      val=map(val,0,180,ICR1/40,ICR1/8);
    1dc6:	e6 e8       	ldi	r30, 0x86	; 134
    1dc8:	f0 e0       	ldi	r31, 0x00	; 0
    1dca:	c0 81       	ld	r28, Z
    1dcc:	d1 81       	ldd	r29, Z+1	; 0x01
    1dce:	80 80       	ld	r8, Z
    1dd0:	91 80       	ldd	r9, Z+1	; 0x01
    1dd2:	00 d0       	rcall	.+0      	; 0x1dd4 <_Z13servoPSPwritesi+0x286>
    1dd4:	0f 92       	push	r0
    1dd6:	6d b6       	in	r6, 0x3d	; 61
    1dd8:	7e b6       	in	r7, 0x3e	; 62
    1dda:	08 94       	sec
    1ddc:	61 1c       	adc	r6, r1
    1dde:	71 1c       	adc	r7, r1
    1de0:	88 27       	eor	r24, r24
    1de2:	77 fd       	sbrc	r23, 7
    1de4:	80 95       	com	r24
    1de6:	98 2f       	mov	r25, r24
    1de8:	0e 94 c2 13 	call	0x2784	; 0x2784 <__floatsisf>
    1dec:	7b 01       	movw	r14, r22
    1dee:	8c 01       	movw	r16, r24
    1df0:	ce 01       	movw	r24, r28
    1df2:	68 e2       	ldi	r22, 0x28	; 40
    1df4:	70 e0       	ldi	r23, 0x00	; 0
    1df6:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <__udivmodhi4>
    1dfa:	80 e0       	ldi	r24, 0x00	; 0
    1dfc:	90 e0       	ldi	r25, 0x00	; 0
    1dfe:	0e 94 c0 13 	call	0x2780	; 0x2780 <__floatunsisf>
    1e02:	5b 01       	movw	r10, r22
    1e04:	6c 01       	movw	r12, r24
    1e06:	96 94       	lsr	r9
    1e08:	87 94       	ror	r8
    1e0a:	96 94       	lsr	r9
    1e0c:	87 94       	ror	r8
    1e0e:	96 94       	lsr	r9
    1e10:	87 94       	ror	r8
    1e12:	b4 01       	movw	r22, r8
    1e14:	80 e0       	ldi	r24, 0x00	; 0
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	0e 94 c0 13 	call	0x2780	; 0x2780 <__floatunsisf>
    1e1c:	f3 01       	movw	r30, r6
    1e1e:	60 83       	st	Z, r22
    1e20:	71 83       	std	Z+1, r23	; 0x01
    1e22:	82 83       	std	Z+2, r24	; 0x02
    1e24:	93 83       	std	Z+3, r25	; 0x03
    1e26:	c8 01       	movw	r24, r16
    1e28:	b7 01       	movw	r22, r14
    1e2a:	20 e0       	ldi	r18, 0x00	; 0
    1e2c:	30 e0       	ldi	r19, 0x00	; 0
    1e2e:	a9 01       	movw	r20, r18
    1e30:	0f 2e       	mov	r0, r31
    1e32:	f0 e0       	ldi	r31, 0x00	; 0
    1e34:	ef 2e       	mov	r14, r31
    1e36:	f0 e0       	ldi	r31, 0x00	; 0
    1e38:	ff 2e       	mov	r15, r31
    1e3a:	f4 e3       	ldi	r31, 0x34	; 52
    1e3c:	0f 2f       	mov	r16, r31
    1e3e:	f3 e4       	ldi	r31, 0x43	; 67
    1e40:	1f 2f       	mov	r17, r31
    1e42:	f0 2d       	mov	r31, r0
    1e44:	0e 94 a3 08 	call	0x1146	; 0x1146 <_Z3mapddddd>
    1e48:	0f 90       	pop	r0
    1e4a:	0f 90       	pop	r0
    1e4c:	0f 90       	pop	r0
    1e4e:	0f 90       	pop	r0
      OCR3B=ICR3-val;
    1e50:	c0 91 96 00 	lds	r28, 0x0096
    1e54:	d0 91 97 00 	lds	r29, 0x0097
    case 5:
      val=map(val,0,180,ICR1/40,ICR1/8);
      OCR3A=ICR3-val;
      break;
    case 2:
      val=map(val,0,180,ICR1/40,ICR1/8);
    1e58:	0e 94 8f 13 	call	0x271e	; 0x271e <__fixsfsi>
      OCR3B=ICR3-val;
    1e5c:	c6 1b       	sub	r28, r22
    1e5e:	d7 0b       	sbc	r29, r23
    1e60:	d0 93 9b 00 	sts	0x009B, r29
    1e64:	c0 93 9a 00 	sts	0x009A, r28
      break;
    1e68:	3d c2       	rjmp	.+1146   	; 0x22e4 <__stack+0xe5>
    case 3:
      val=map(val,0,180,ICR1/40,ICR1/8);
    1e6a:	e6 e8       	ldi	r30, 0x86	; 134
    1e6c:	f0 e0       	ldi	r31, 0x00	; 0
    1e6e:	c0 81       	ld	r28, Z
    1e70:	d1 81       	ldd	r29, Z+1	; 0x01
    1e72:	80 80       	ld	r8, Z
    1e74:	91 80       	ldd	r9, Z+1	; 0x01
    1e76:	00 d0       	rcall	.+0      	; 0x1e78 <_Z13servoPSPwritesi+0x32a>
    1e78:	0f 92       	push	r0
    1e7a:	6d b6       	in	r6, 0x3d	; 61
    1e7c:	7e b6       	in	r7, 0x3e	; 62
    1e7e:	08 94       	sec
    1e80:	61 1c       	adc	r6, r1
    1e82:	71 1c       	adc	r7, r1
    1e84:	88 27       	eor	r24, r24
    1e86:	77 fd       	sbrc	r23, 7
    1e88:	80 95       	com	r24
    1e8a:	98 2f       	mov	r25, r24
    1e8c:	0e 94 c2 13 	call	0x2784	; 0x2784 <__floatsisf>
    1e90:	7b 01       	movw	r14, r22
    1e92:	8c 01       	movw	r16, r24
    1e94:	ce 01       	movw	r24, r28
    1e96:	68 e2       	ldi	r22, 0x28	; 40
    1e98:	70 e0       	ldi	r23, 0x00	; 0
    1e9a:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <__udivmodhi4>
    1e9e:	80 e0       	ldi	r24, 0x00	; 0
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	0e 94 c0 13 	call	0x2780	; 0x2780 <__floatunsisf>
    1ea6:	5b 01       	movw	r10, r22
    1ea8:	6c 01       	movw	r12, r24
    1eaa:	96 94       	lsr	r9
    1eac:	87 94       	ror	r8
    1eae:	96 94       	lsr	r9
    1eb0:	87 94       	ror	r8
    1eb2:	96 94       	lsr	r9
    1eb4:	87 94       	ror	r8
    1eb6:	b4 01       	movw	r22, r8
    1eb8:	80 e0       	ldi	r24, 0x00	; 0
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	0e 94 c0 13 	call	0x2780	; 0x2780 <__floatunsisf>
    1ec0:	f3 01       	movw	r30, r6
    1ec2:	60 83       	st	Z, r22
    1ec4:	71 83       	std	Z+1, r23	; 0x01
    1ec6:	82 83       	std	Z+2, r24	; 0x02
    1ec8:	93 83       	std	Z+3, r25	; 0x03
    1eca:	c8 01       	movw	r24, r16
    1ecc:	b7 01       	movw	r22, r14
    1ece:	20 e0       	ldi	r18, 0x00	; 0
    1ed0:	30 e0       	ldi	r19, 0x00	; 0
    1ed2:	a9 01       	movw	r20, r18
    1ed4:	0f 2e       	mov	r0, r31
    1ed6:	f0 e0       	ldi	r31, 0x00	; 0
    1ed8:	ef 2e       	mov	r14, r31
    1eda:	f0 e0       	ldi	r31, 0x00	; 0
    1edc:	ff 2e       	mov	r15, r31
    1ede:	f4 e3       	ldi	r31, 0x34	; 52
    1ee0:	0f 2f       	mov	r16, r31
    1ee2:	f3 e4       	ldi	r31, 0x43	; 67
    1ee4:	1f 2f       	mov	r17, r31
    1ee6:	f0 2d       	mov	r31, r0
    1ee8:	0e 94 a3 08 	call	0x1146	; 0x1146 <_Z3mapddddd>
    1eec:	0f 90       	pop	r0
    1eee:	0f 90       	pop	r0
    1ef0:	0f 90       	pop	r0
    1ef2:	0f 90       	pop	r0
      OCR3C=ICR3-val;
    1ef4:	c0 91 96 00 	lds	r28, 0x0096
    1ef8:	d0 91 97 00 	lds	r29, 0x0097
    case 2:
      val=map(val,0,180,ICR1/40,ICR1/8);
      OCR3B=ICR3-val;
      break;
    case 3:
      val=map(val,0,180,ICR1/40,ICR1/8);
    1efc:	0e 94 8f 13 	call	0x271e	; 0x271e <__fixsfsi>
      OCR3C=ICR3-val;
    1f00:	c6 1b       	sub	r28, r22
    1f02:	d7 0b       	sbc	r29, r23
    1f04:	d0 93 9d 00 	sts	0x009D, r29
    1f08:	c0 93 9c 00 	sts	0x009C, r28
      break;
    1f0c:	eb c1       	rjmp	.+982    	; 0x22e4 <__stack+0xe5>
    case 6:
      val=map(val,0,180,ICR1/40,ICR1/8);
    1f0e:	e6 e8       	ldi	r30, 0x86	; 134
    1f10:	f0 e0       	ldi	r31, 0x00	; 0
    1f12:	c0 81       	ld	r28, Z
    1f14:	d1 81       	ldd	r29, Z+1	; 0x01
    1f16:	80 80       	ld	r8, Z
    1f18:	91 80       	ldd	r9, Z+1	; 0x01
    1f1a:	00 d0       	rcall	.+0      	; 0x1f1c <_Z13servoPSPwritesi+0x3ce>
    1f1c:	0f 92       	push	r0
    1f1e:	6d b6       	in	r6, 0x3d	; 61
    1f20:	7e b6       	in	r7, 0x3e	; 62
    1f22:	08 94       	sec
    1f24:	61 1c       	adc	r6, r1
    1f26:	71 1c       	adc	r7, r1
    1f28:	88 27       	eor	r24, r24
    1f2a:	77 fd       	sbrc	r23, 7
    1f2c:	80 95       	com	r24
    1f2e:	98 2f       	mov	r25, r24
    1f30:	0e 94 c2 13 	call	0x2784	; 0x2784 <__floatsisf>
    1f34:	7b 01       	movw	r14, r22
    1f36:	8c 01       	movw	r16, r24
    1f38:	ce 01       	movw	r24, r28
    1f3a:	68 e2       	ldi	r22, 0x28	; 40
    1f3c:	70 e0       	ldi	r23, 0x00	; 0
    1f3e:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <__udivmodhi4>
    1f42:	80 e0       	ldi	r24, 0x00	; 0
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	0e 94 c0 13 	call	0x2780	; 0x2780 <__floatunsisf>
    1f4a:	5b 01       	movw	r10, r22
    1f4c:	6c 01       	movw	r12, r24
    1f4e:	96 94       	lsr	r9
    1f50:	87 94       	ror	r8
    1f52:	96 94       	lsr	r9
    1f54:	87 94       	ror	r8
    1f56:	96 94       	lsr	r9
    1f58:	87 94       	ror	r8
    1f5a:	b4 01       	movw	r22, r8
    1f5c:	80 e0       	ldi	r24, 0x00	; 0
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	0e 94 c0 13 	call	0x2780	; 0x2780 <__floatunsisf>
    1f64:	f3 01       	movw	r30, r6
    1f66:	60 83       	st	Z, r22
    1f68:	71 83       	std	Z+1, r23	; 0x01
    1f6a:	82 83       	std	Z+2, r24	; 0x02
    1f6c:	93 83       	std	Z+3, r25	; 0x03
    1f6e:	c8 01       	movw	r24, r16
    1f70:	b7 01       	movw	r22, r14
    1f72:	20 e0       	ldi	r18, 0x00	; 0
    1f74:	30 e0       	ldi	r19, 0x00	; 0
    1f76:	a9 01       	movw	r20, r18
    1f78:	0f 2e       	mov	r0, r31
    1f7a:	f0 e0       	ldi	r31, 0x00	; 0
    1f7c:	ef 2e       	mov	r14, r31
    1f7e:	f0 e0       	ldi	r31, 0x00	; 0
    1f80:	ff 2e       	mov	r15, r31
    1f82:	f4 e3       	ldi	r31, 0x34	; 52
    1f84:	0f 2f       	mov	r16, r31
    1f86:	f3 e4       	ldi	r31, 0x43	; 67
    1f88:	1f 2f       	mov	r17, r31
    1f8a:	f0 2d       	mov	r31, r0
    1f8c:	0e 94 a3 08 	call	0x1146	; 0x1146 <_Z3mapddddd>
    1f90:	0f 90       	pop	r0
    1f92:	0f 90       	pop	r0
    1f94:	0f 90       	pop	r0
    1f96:	0f 90       	pop	r0
      OCR4A=ICR4-val;
    1f98:	c0 91 a6 00 	lds	r28, 0x00A6
    1f9c:	d0 91 a7 00 	lds	r29, 0x00A7
    case 3:
      val=map(val,0,180,ICR1/40,ICR1/8);
      OCR3C=ICR3-val;
      break;
    case 6:
      val=map(val,0,180,ICR1/40,ICR1/8);
    1fa0:	0e 94 8f 13 	call	0x271e	; 0x271e <__fixsfsi>
      OCR4A=ICR4-val;
    1fa4:	c6 1b       	sub	r28, r22
    1fa6:	d7 0b       	sbc	r29, r23
    1fa8:	d0 93 a9 00 	sts	0x00A9, r29
    1fac:	c0 93 a8 00 	sts	0x00A8, r28
      break;
    1fb0:	99 c1       	rjmp	.+818    	; 0x22e4 <__stack+0xe5>
    case 7:
      val=map(val,0,180,ICR1/40,ICR1/8);
    1fb2:	e6 e8       	ldi	r30, 0x86	; 134
    1fb4:	f0 e0       	ldi	r31, 0x00	; 0
    1fb6:	c0 81       	ld	r28, Z
    1fb8:	d1 81       	ldd	r29, Z+1	; 0x01
    1fba:	80 80       	ld	r8, Z
    1fbc:	91 80       	ldd	r9, Z+1	; 0x01
    1fbe:	00 d0       	rcall	.+0      	; 0x1fc0 <_Z13servoPSPwritesi+0x472>
    1fc0:	0f 92       	push	r0
    1fc2:	6d b6       	in	r6, 0x3d	; 61
    1fc4:	7e b6       	in	r7, 0x3e	; 62
    1fc6:	08 94       	sec
    1fc8:	61 1c       	adc	r6, r1
    1fca:	71 1c       	adc	r7, r1
    1fcc:	88 27       	eor	r24, r24
    1fce:	77 fd       	sbrc	r23, 7
    1fd0:	80 95       	com	r24
    1fd2:	98 2f       	mov	r25, r24
    1fd4:	0e 94 c2 13 	call	0x2784	; 0x2784 <__floatsisf>
    1fd8:	7b 01       	movw	r14, r22
    1fda:	8c 01       	movw	r16, r24
    1fdc:	ce 01       	movw	r24, r28
    1fde:	68 e2       	ldi	r22, 0x28	; 40
    1fe0:	70 e0       	ldi	r23, 0x00	; 0
    1fe2:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <__udivmodhi4>
    1fe6:	80 e0       	ldi	r24, 0x00	; 0
    1fe8:	90 e0       	ldi	r25, 0x00	; 0
    1fea:	0e 94 c0 13 	call	0x2780	; 0x2780 <__floatunsisf>
    1fee:	5b 01       	movw	r10, r22
    1ff0:	6c 01       	movw	r12, r24
    1ff2:	96 94       	lsr	r9
    1ff4:	87 94       	ror	r8
    1ff6:	96 94       	lsr	r9
    1ff8:	87 94       	ror	r8
    1ffa:	96 94       	lsr	r9
    1ffc:	87 94       	ror	r8
    1ffe:	b4 01       	movw	r22, r8
    2000:	80 e0       	ldi	r24, 0x00	; 0
    2002:	90 e0       	ldi	r25, 0x00	; 0
    2004:	0e 94 c0 13 	call	0x2780	; 0x2780 <__floatunsisf>
    2008:	f3 01       	movw	r30, r6
    200a:	60 83       	st	Z, r22
    200c:	71 83       	std	Z+1, r23	; 0x01
    200e:	82 83       	std	Z+2, r24	; 0x02
    2010:	93 83       	std	Z+3, r25	; 0x03
    2012:	c8 01       	movw	r24, r16
    2014:	b7 01       	movw	r22, r14
    2016:	20 e0       	ldi	r18, 0x00	; 0
    2018:	30 e0       	ldi	r19, 0x00	; 0
    201a:	a9 01       	movw	r20, r18
    201c:	0f 2e       	mov	r0, r31
    201e:	f0 e0       	ldi	r31, 0x00	; 0
    2020:	ef 2e       	mov	r14, r31
    2022:	f0 e0       	ldi	r31, 0x00	; 0
    2024:	ff 2e       	mov	r15, r31
    2026:	f4 e3       	ldi	r31, 0x34	; 52
    2028:	0f 2f       	mov	r16, r31
    202a:	f3 e4       	ldi	r31, 0x43	; 67
    202c:	1f 2f       	mov	r17, r31
    202e:	f0 2d       	mov	r31, r0
    2030:	0e 94 a3 08 	call	0x1146	; 0x1146 <_Z3mapddddd>
    2034:	0f 90       	pop	r0
    2036:	0f 90       	pop	r0
    2038:	0f 90       	pop	r0
    203a:	0f 90       	pop	r0
      OCR4B=ICR4-val;
    203c:	c0 91 a6 00 	lds	r28, 0x00A6
    2040:	d0 91 a7 00 	lds	r29, 0x00A7
    case 6:
      val=map(val,0,180,ICR1/40,ICR1/8);
      OCR4A=ICR4-val;
      break;
    case 7:
      val=map(val,0,180,ICR1/40,ICR1/8);
    2044:	0e 94 8f 13 	call	0x271e	; 0x271e <__fixsfsi>
      OCR4B=ICR4-val;
    2048:	c6 1b       	sub	r28, r22
    204a:	d7 0b       	sbc	r29, r23
    204c:	d0 93 ab 00 	sts	0x00AB, r29
    2050:	c0 93 aa 00 	sts	0x00AA, r28
      break; 
    2054:	47 c1       	rjmp	.+654    	; 0x22e4 <__stack+0xe5>
    case 8:
      val=map(val,0,180,ICR1/40,ICR1/8);
    2056:	e6 e8       	ldi	r30, 0x86	; 134
    2058:	f0 e0       	ldi	r31, 0x00	; 0
    205a:	c0 81       	ld	r28, Z
    205c:	d1 81       	ldd	r29, Z+1	; 0x01
    205e:	80 80       	ld	r8, Z
    2060:	91 80       	ldd	r9, Z+1	; 0x01
    2062:	00 d0       	rcall	.+0      	; 0x2064 <_Z13servoPSPwritesi+0x516>
    2064:	0f 92       	push	r0
    2066:	6d b6       	in	r6, 0x3d	; 61
    2068:	7e b6       	in	r7, 0x3e	; 62
    206a:	08 94       	sec
    206c:	61 1c       	adc	r6, r1
    206e:	71 1c       	adc	r7, r1
    2070:	88 27       	eor	r24, r24
    2072:	77 fd       	sbrc	r23, 7
    2074:	80 95       	com	r24
    2076:	98 2f       	mov	r25, r24
    2078:	0e 94 c2 13 	call	0x2784	; 0x2784 <__floatsisf>
    207c:	7b 01       	movw	r14, r22
    207e:	8c 01       	movw	r16, r24
    2080:	ce 01       	movw	r24, r28
    2082:	68 e2       	ldi	r22, 0x28	; 40
    2084:	70 e0       	ldi	r23, 0x00	; 0
    2086:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <__udivmodhi4>
    208a:	80 e0       	ldi	r24, 0x00	; 0
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	0e 94 c0 13 	call	0x2780	; 0x2780 <__floatunsisf>
    2092:	5b 01       	movw	r10, r22
    2094:	6c 01       	movw	r12, r24
    2096:	96 94       	lsr	r9
    2098:	87 94       	ror	r8
    209a:	96 94       	lsr	r9
    209c:	87 94       	ror	r8
    209e:	96 94       	lsr	r9
    20a0:	87 94       	ror	r8
    20a2:	b4 01       	movw	r22, r8
    20a4:	80 e0       	ldi	r24, 0x00	; 0
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	0e 94 c0 13 	call	0x2780	; 0x2780 <__floatunsisf>
    20ac:	f3 01       	movw	r30, r6
    20ae:	60 83       	st	Z, r22
    20b0:	71 83       	std	Z+1, r23	; 0x01
    20b2:	82 83       	std	Z+2, r24	; 0x02
    20b4:	93 83       	std	Z+3, r25	; 0x03
    20b6:	c8 01       	movw	r24, r16
    20b8:	b7 01       	movw	r22, r14
    20ba:	20 e0       	ldi	r18, 0x00	; 0
    20bc:	30 e0       	ldi	r19, 0x00	; 0
    20be:	a9 01       	movw	r20, r18
    20c0:	0f 2e       	mov	r0, r31
    20c2:	f0 e0       	ldi	r31, 0x00	; 0
    20c4:	ef 2e       	mov	r14, r31
    20c6:	f0 e0       	ldi	r31, 0x00	; 0
    20c8:	ff 2e       	mov	r15, r31
    20ca:	f4 e3       	ldi	r31, 0x34	; 52
    20cc:	0f 2f       	mov	r16, r31
    20ce:	f3 e4       	ldi	r31, 0x43	; 67
    20d0:	1f 2f       	mov	r17, r31
    20d2:	f0 2d       	mov	r31, r0
    20d4:	0e 94 a3 08 	call	0x1146	; 0x1146 <_Z3mapddddd>
    20d8:	0f 90       	pop	r0
    20da:	0f 90       	pop	r0
    20dc:	0f 90       	pop	r0
    20de:	0f 90       	pop	r0
      OCR4C=ICR4-val;
    20e0:	c0 91 a6 00 	lds	r28, 0x00A6
    20e4:	d0 91 a7 00 	lds	r29, 0x00A7
    case 7:
      val=map(val,0,180,ICR1/40,ICR1/8);
      OCR4B=ICR4-val;
      break; 
    case 8:
      val=map(val,0,180,ICR1/40,ICR1/8);
    20e8:	0e 94 8f 13 	call	0x271e	; 0x271e <__fixsfsi>
      OCR4C=ICR4-val;
    20ec:	c6 1b       	sub	r28, r22
    20ee:	d7 0b       	sbc	r29, r23
    20f0:	d0 93 ad 00 	sts	0x00AD, r29
    20f4:	c0 93 ac 00 	sts	0x00AC, r28
      break;
    20f8:	f5 c0       	rjmp	.+490    	; 0x22e4 <__stack+0xe5>
    case 46:
      val=map(val,0,180,ICR1/40,ICR1/8);
    20fa:	e6 e8       	ldi	r30, 0x86	; 134
    20fc:	f0 e0       	ldi	r31, 0x00	; 0
    20fe:	c0 81       	ld	r28, Z
    2100:	d1 81       	ldd	r29, Z+1	; 0x01
    2102:	80 80       	ld	r8, Z
    2104:	91 80       	ldd	r9, Z+1	; 0x01
    2106:	00 d0       	rcall	.+0      	; 0x2108 <_Z13servoPSPwritesi+0x5ba>
    2108:	0f 92       	push	r0
    210a:	6d b6       	in	r6, 0x3d	; 61
    210c:	7e b6       	in	r7, 0x3e	; 62
    210e:	08 94       	sec
    2110:	61 1c       	adc	r6, r1
    2112:	71 1c       	adc	r7, r1
    2114:	88 27       	eor	r24, r24
    2116:	77 fd       	sbrc	r23, 7
    2118:	80 95       	com	r24
    211a:	98 2f       	mov	r25, r24
    211c:	0e 94 c2 13 	call	0x2784	; 0x2784 <__floatsisf>
    2120:	7b 01       	movw	r14, r22
    2122:	8c 01       	movw	r16, r24
    2124:	ce 01       	movw	r24, r28
    2126:	68 e2       	ldi	r22, 0x28	; 40
    2128:	70 e0       	ldi	r23, 0x00	; 0
    212a:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <__udivmodhi4>
    212e:	80 e0       	ldi	r24, 0x00	; 0
    2130:	90 e0       	ldi	r25, 0x00	; 0
    2132:	0e 94 c0 13 	call	0x2780	; 0x2780 <__floatunsisf>
    2136:	5b 01       	movw	r10, r22
    2138:	6c 01       	movw	r12, r24
    213a:	96 94       	lsr	r9
    213c:	87 94       	ror	r8
    213e:	96 94       	lsr	r9
    2140:	87 94       	ror	r8
    2142:	96 94       	lsr	r9
    2144:	87 94       	ror	r8
    2146:	b4 01       	movw	r22, r8
    2148:	80 e0       	ldi	r24, 0x00	; 0
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	0e 94 c0 13 	call	0x2780	; 0x2780 <__floatunsisf>
    2150:	f3 01       	movw	r30, r6
    2152:	60 83       	st	Z, r22
    2154:	71 83       	std	Z+1, r23	; 0x01
    2156:	82 83       	std	Z+2, r24	; 0x02
    2158:	93 83       	std	Z+3, r25	; 0x03
    215a:	c8 01       	movw	r24, r16
    215c:	b7 01       	movw	r22, r14
    215e:	20 e0       	ldi	r18, 0x00	; 0
    2160:	30 e0       	ldi	r19, 0x00	; 0
    2162:	a9 01       	movw	r20, r18
    2164:	0f 2e       	mov	r0, r31
    2166:	f0 e0       	ldi	r31, 0x00	; 0
    2168:	ef 2e       	mov	r14, r31
    216a:	f0 e0       	ldi	r31, 0x00	; 0
    216c:	ff 2e       	mov	r15, r31
    216e:	f4 e3       	ldi	r31, 0x34	; 52
    2170:	0f 2f       	mov	r16, r31
    2172:	f3 e4       	ldi	r31, 0x43	; 67
    2174:	1f 2f       	mov	r17, r31
    2176:	f0 2d       	mov	r31, r0
    2178:	0e 94 a3 08 	call	0x1146	; 0x1146 <_Z3mapddddd>
    217c:	0f 90       	pop	r0
    217e:	0f 90       	pop	r0
    2180:	0f 90       	pop	r0
    2182:	0f 90       	pop	r0
      OCR5A=ICR5-val;
    2184:	c0 91 26 01 	lds	r28, 0x0126
    2188:	d0 91 27 01 	lds	r29, 0x0127
    case 8:
      val=map(val,0,180,ICR1/40,ICR1/8);
      OCR4C=ICR4-val;
      break;
    case 46:
      val=map(val,0,180,ICR1/40,ICR1/8);
    218c:	0e 94 8f 13 	call	0x271e	; 0x271e <__fixsfsi>
      OCR5A=ICR5-val;
    2190:	c6 1b       	sub	r28, r22
    2192:	d7 0b       	sbc	r29, r23
    2194:	d0 93 29 01 	sts	0x0129, r29
    2198:	c0 93 28 01 	sts	0x0128, r28
      break;
    219c:	a3 c0       	rjmp	.+326    	; 0x22e4 <__stack+0xe5>
    case 45:
      val=map(val,0,180,ICR1/40,ICR1/8);
    219e:	e6 e8       	ldi	r30, 0x86	; 134
    21a0:	f0 e0       	ldi	r31, 0x00	; 0
    21a2:	c0 81       	ld	r28, Z
    21a4:	d1 81       	ldd	r29, Z+1	; 0x01
    21a6:	80 80       	ld	r8, Z
    21a8:	91 80       	ldd	r9, Z+1	; 0x01
    21aa:	00 d0       	rcall	.+0      	; 0x21ac <_Z13servoPSPwritesi+0x65e>
    21ac:	0f 92       	push	r0
    21ae:	6d b6       	in	r6, 0x3d	; 61
    21b0:	7e b6       	in	r7, 0x3e	; 62
    21b2:	08 94       	sec
    21b4:	61 1c       	adc	r6, r1
    21b6:	71 1c       	adc	r7, r1
    21b8:	88 27       	eor	r24, r24
    21ba:	77 fd       	sbrc	r23, 7
    21bc:	80 95       	com	r24
    21be:	98 2f       	mov	r25, r24
    21c0:	0e 94 c2 13 	call	0x2784	; 0x2784 <__floatsisf>
    21c4:	7b 01       	movw	r14, r22
    21c6:	8c 01       	movw	r16, r24
    21c8:	ce 01       	movw	r24, r28
    21ca:	68 e2       	ldi	r22, 0x28	; 40
    21cc:	70 e0       	ldi	r23, 0x00	; 0
    21ce:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <__udivmodhi4>
    21d2:	80 e0       	ldi	r24, 0x00	; 0
    21d4:	90 e0       	ldi	r25, 0x00	; 0
    21d6:	0e 94 c0 13 	call	0x2780	; 0x2780 <__floatunsisf>
    21da:	5b 01       	movw	r10, r22
    21dc:	6c 01       	movw	r12, r24
    21de:	96 94       	lsr	r9
    21e0:	87 94       	ror	r8
    21e2:	96 94       	lsr	r9
    21e4:	87 94       	ror	r8
    21e6:	96 94       	lsr	r9
    21e8:	87 94       	ror	r8
    21ea:	b4 01       	movw	r22, r8
    21ec:	80 e0       	ldi	r24, 0x00	; 0
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	0e 94 c0 13 	call	0x2780	; 0x2780 <__floatunsisf>
    21f4:	f3 01       	movw	r30, r6
    21f6:	60 83       	st	Z, r22
    21f8:	71 83       	std	Z+1, r23	; 0x01
    21fa:	82 83       	std	Z+2, r24	; 0x02
    21fc:	93 83       	std	Z+3, r25	; 0x03
    21fe:	c8 01       	movw	r24, r16
    2200:	b7 01       	movw	r22, r14
    2202:	20 e0       	ldi	r18, 0x00	; 0
    2204:	30 e0       	ldi	r19, 0x00	; 0
    2206:	a9 01       	movw	r20, r18
    2208:	0f 2e       	mov	r0, r31
    220a:	f0 e0       	ldi	r31, 0x00	; 0
    220c:	ef 2e       	mov	r14, r31
    220e:	f0 e0       	ldi	r31, 0x00	; 0
    2210:	ff 2e       	mov	r15, r31
    2212:	f4 e3       	ldi	r31, 0x34	; 52
    2214:	0f 2f       	mov	r16, r31
    2216:	f3 e4       	ldi	r31, 0x43	; 67
    2218:	1f 2f       	mov	r17, r31
    221a:	f0 2d       	mov	r31, r0
    221c:	0e 94 a3 08 	call	0x1146	; 0x1146 <_Z3mapddddd>
    2220:	0f 90       	pop	r0
    2222:	0f 90       	pop	r0
    2224:	0f 90       	pop	r0
    2226:	0f 90       	pop	r0
      OCR5B=ICR5-val;
    2228:	c0 91 26 01 	lds	r28, 0x0126
    222c:	d0 91 27 01 	lds	r29, 0x0127
    case 46:
      val=map(val,0,180,ICR1/40,ICR1/8);
      OCR5A=ICR5-val;
      break;
    case 45:
      val=map(val,0,180,ICR1/40,ICR1/8);
    2230:	0e 94 8f 13 	call	0x271e	; 0x271e <__fixsfsi>
      OCR5B=ICR5-val;
    2234:	c6 1b       	sub	r28, r22
    2236:	d7 0b       	sbc	r29, r23
    2238:	d0 93 2b 01 	sts	0x012B, r29
    223c:	c0 93 2a 01 	sts	0x012A, r28
      break;
    2240:	51 c0       	rjmp	.+162    	; 0x22e4 <__stack+0xe5>
    case 44:
      val=map(val,0,180,ICR1/40,ICR1/8);
    2242:	e6 e8       	ldi	r30, 0x86	; 134
    2244:	f0 e0       	ldi	r31, 0x00	; 0
    2246:	c0 81       	ld	r28, Z
    2248:	d1 81       	ldd	r29, Z+1	; 0x01
    224a:	80 80       	ld	r8, Z
    224c:	91 80       	ldd	r9, Z+1	; 0x01
    224e:	00 d0       	rcall	.+0      	; 0x2250 <__stack+0x51>
    2250:	0f 92       	push	r0
    2252:	6d b6       	in	r6, 0x3d	; 61
    2254:	7e b6       	in	r7, 0x3e	; 62
    2256:	08 94       	sec
    2258:	61 1c       	adc	r6, r1
    225a:	71 1c       	adc	r7, r1
    225c:	88 27       	eor	r24, r24
    225e:	77 fd       	sbrc	r23, 7
    2260:	80 95       	com	r24
    2262:	98 2f       	mov	r25, r24
    2264:	0e 94 c2 13 	call	0x2784	; 0x2784 <__floatsisf>
    2268:	7b 01       	movw	r14, r22
    226a:	8c 01       	movw	r16, r24
    226c:	ce 01       	movw	r24, r28
    226e:	68 e2       	ldi	r22, 0x28	; 40
    2270:	70 e0       	ldi	r23, 0x00	; 0
    2272:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <__udivmodhi4>
    2276:	80 e0       	ldi	r24, 0x00	; 0
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	0e 94 c0 13 	call	0x2780	; 0x2780 <__floatunsisf>
    227e:	5b 01       	movw	r10, r22
    2280:	6c 01       	movw	r12, r24
    2282:	96 94       	lsr	r9
    2284:	87 94       	ror	r8
    2286:	96 94       	lsr	r9
    2288:	87 94       	ror	r8
    228a:	96 94       	lsr	r9
    228c:	87 94       	ror	r8
    228e:	b4 01       	movw	r22, r8
    2290:	80 e0       	ldi	r24, 0x00	; 0
    2292:	90 e0       	ldi	r25, 0x00	; 0
    2294:	0e 94 c0 13 	call	0x2780	; 0x2780 <__floatunsisf>
    2298:	f3 01       	movw	r30, r6
    229a:	60 83       	st	Z, r22
    229c:	71 83       	std	Z+1, r23	; 0x01
    229e:	82 83       	std	Z+2, r24	; 0x02
    22a0:	93 83       	std	Z+3, r25	; 0x03
    22a2:	c8 01       	movw	r24, r16
    22a4:	b7 01       	movw	r22, r14
    22a6:	20 e0       	ldi	r18, 0x00	; 0
    22a8:	30 e0       	ldi	r19, 0x00	; 0
    22aa:	a9 01       	movw	r20, r18
    22ac:	0f 2e       	mov	r0, r31
    22ae:	f0 e0       	ldi	r31, 0x00	; 0
    22b0:	ef 2e       	mov	r14, r31
    22b2:	f0 e0       	ldi	r31, 0x00	; 0
    22b4:	ff 2e       	mov	r15, r31
    22b6:	f4 e3       	ldi	r31, 0x34	; 52
    22b8:	0f 2f       	mov	r16, r31
    22ba:	f3 e4       	ldi	r31, 0x43	; 67
    22bc:	1f 2f       	mov	r17, r31
    22be:	f0 2d       	mov	r31, r0
    22c0:	0e 94 a3 08 	call	0x1146	; 0x1146 <_Z3mapddddd>
    22c4:	0f 90       	pop	r0
    22c6:	0f 90       	pop	r0
    22c8:	0f 90       	pop	r0
    22ca:	0f 90       	pop	r0
      OCR5C=ICR5-val;
    22cc:	c0 91 26 01 	lds	r28, 0x0126
    22d0:	d0 91 27 01 	lds	r29, 0x0127
    case 45:
      val=map(val,0,180,ICR1/40,ICR1/8);
      OCR5B=ICR5-val;
      break;
    case 44:
      val=map(val,0,180,ICR1/40,ICR1/8);
    22d4:	0e 94 8f 13 	call	0x271e	; 0x271e <__fixsfsi>
      OCR5C=ICR5-val;
    22d8:	c6 1b       	sub	r28, r22
    22da:	d7 0b       	sbc	r29, r23
    22dc:	d0 93 2d 01 	sts	0x012D, r29
    22e0:	c0 93 2c 01 	sts	0x012C, r28
      break;
  }
  //val = map(val,0,180,125,625);             //mapping one to one values
  //OCR1A= ICR1-val;                              //GENERATING PULSE IN INVERTED MODE
 //_delay_ms(500);                              //give delay in the main code
}
    22e4:	df 91       	pop	r29
    22e6:	cf 91       	pop	r28
    22e8:	1f 91       	pop	r17
    22ea:	0f 91       	pop	r16
    22ec:	ff 90       	pop	r15
    22ee:	ef 90       	pop	r14
    22f0:	df 90       	pop	r13
    22f2:	cf 90       	pop	r12
    22f4:	bf 90       	pop	r11
    22f6:	af 90       	pop	r10
    22f8:	9f 90       	pop	r9
    22fa:	8f 90       	pop	r8
    22fc:	7f 90       	pop	r7
    22fe:	6f 90       	pop	r6
    2300:	5f 90       	pop	r5
    2302:	4f 90       	pop	r4
    2304:	08 95       	ret

00002306 <_Z8deattachs>:

void deattach(short int pin1)                   //pin1=pin no. to be deattached
{
 switch(pin1)
    2306:	88 30       	cpi	r24, 0x08	; 8
    2308:	91 05       	cpc	r25, r1
    230a:	09 f4       	brne	.+2      	; 0x230e <_Z8deattachs+0x8>
    230c:	ba c0       	rjmp	.+372    	; 0x2482 <_Z8deattachs+0x17c>
    230e:	89 30       	cpi	r24, 0x09	; 9
    2310:	91 05       	cpc	r25, r1
    2312:	cc f4       	brge	.+50     	; 0x2346 <_Z8deattachs+0x40>
    2314:	85 30       	cpi	r24, 0x05	; 5
    2316:	91 05       	cpc	r25, r1
    2318:	09 f4       	brne	.+2      	; 0x231c <_Z8deattachs+0x16>
    231a:	51 c0       	rjmp	.+162    	; 0x23be <_Z8deattachs+0xb8>
    231c:	86 30       	cpi	r24, 0x06	; 6
    231e:	91 05       	cpc	r25, r1
    2320:	4c f4       	brge	.+18     	; 0x2334 <_Z8deattachs+0x2e>
    2322:	82 30       	cpi	r24, 0x02	; 2
    2324:	91 05       	cpc	r25, r1
    2326:	09 f4       	brne	.+2      	; 0x232a <_Z8deattachs+0x24>
    2328:	5c c0       	rjmp	.+184    	; 0x23e2 <_Z8deattachs+0xdc>
    232a:	83 30       	cpi	r24, 0x03	; 3
    232c:	91 05       	cpc	r25, r1
    232e:	09 f0       	breq	.+2      	; 0x2332 <_Z8deattachs+0x2c>
    2330:	ff c0       	rjmp	.+510    	; 0x2530 <_Z8deattachs+0x22a>
    2332:	69 c0       	rjmp	.+210    	; 0x2406 <_Z8deattachs+0x100>
    2334:	86 30       	cpi	r24, 0x06	; 6
    2336:	91 05       	cpc	r25, r1
    2338:	09 f4       	brne	.+2      	; 0x233c <_Z8deattachs+0x36>
    233a:	77 c0       	rjmp	.+238    	; 0x242a <_Z8deattachs+0x124>
    233c:	87 30       	cpi	r24, 0x07	; 7
    233e:	91 05       	cpc	r25, r1
    2340:	09 f0       	breq	.+2      	; 0x2344 <_Z8deattachs+0x3e>
    2342:	f6 c0       	rjmp	.+492    	; 0x2530 <_Z8deattachs+0x22a>
    2344:	88 c0       	rjmp	.+272    	; 0x2456 <_Z8deattachs+0x150>
    2346:	8c 32       	cpi	r24, 0x2C	; 44
    2348:	91 05       	cpc	r25, r1
    234a:	09 f4       	brne	.+2      	; 0x234e <_Z8deattachs+0x48>
    234c:	dc c0       	rjmp	.+440    	; 0x2506 <_Z8deattachs+0x200>
    234e:	8d 32       	cpi	r24, 0x2D	; 45
    2350:	91 05       	cpc	r25, r1
    2352:	44 f4       	brge	.+16     	; 0x2364 <_Z8deattachs+0x5e>
    2354:	8b 30       	cpi	r24, 0x0B	; 11
    2356:	91 05       	cpc	r25, r1
    2358:	71 f0       	breq	.+28     	; 0x2376 <_Z8deattachs+0x70>
    235a:	8c 30       	cpi	r24, 0x0C	; 12
    235c:	91 05       	cpc	r25, r1
    235e:	09 f0       	breq	.+2      	; 0x2362 <_Z8deattachs+0x5c>
    2360:	e7 c0       	rjmp	.+462    	; 0x2530 <_Z8deattachs+0x22a>
    2362:	1b c0       	rjmp	.+54     	; 0x239a <_Z8deattachs+0x94>
    2364:	8d 32       	cpi	r24, 0x2D	; 45
    2366:	91 05       	cpc	r25, r1
    2368:	09 f4       	brne	.+2      	; 0x236c <_Z8deattachs+0x66>
    236a:	b7 c0       	rjmp	.+366    	; 0x24da <_Z8deattachs+0x1d4>
    236c:	8e 32       	cpi	r24, 0x2E	; 46
    236e:	91 05       	cpc	r25, r1
    2370:	09 f0       	breq	.+2      	; 0x2374 <_Z8deattachs+0x6e>
    2372:	de c0       	rjmp	.+444    	; 0x2530 <_Z8deattachs+0x22a>
    2374:	9c c0       	rjmp	.+312    	; 0x24ae <_Z8deattachs+0x1a8>
  {
   case 11 :                            //OC1A
      DDRB|=(1<<PB5); // PORTB as OUTPUT
    2376:	25 9a       	sbi	0x04, 5	; 4
      TCCR1A|=(0<<WGM11)|(0<<COM1A1)|(0<<COM1A0);  //SETTING PRESCALAR AS 64 
    2378:	e0 e8       	ldi	r30, 0x80	; 128
    237a:	f0 e0       	ldi	r31, 0x00	; 0
    237c:	80 81       	ld	r24, Z
    237e:	80 83       	st	Z, r24
      TCCR1B|=(0<<WGM12)|(0<<WGM13)|(0<<CS10)|(0<<CS11); //FAST PWM MODE
    2380:	e1 e8       	ldi	r30, 0x81	; 129
    2382:	f0 e0       	ldi	r31, 0x00	; 0
    2384:	80 81       	ld	r24, Z
    2386:	80 83       	st	Z, r24
      ICR1=0;                    //generating 20msec pulse (pwm method)
    2388:	10 92 87 00 	sts	0x0087, r1
    238c:	10 92 86 00 	sts	0x0086, r1
      OCR1A=0;
    2390:	10 92 89 00 	sts	0x0089, r1
    2394:	10 92 88 00 	sts	0x0088, r1
      break; 
    2398:	08 95       	ret

   case 12 :                            //OC1B
      DDRB|=(1<<PB6); // PORTB as OUTPUT
    239a:	26 9a       	sbi	0x04, 6	; 4
      TCCR1A|=(0<<WGM11)|(0<<COM1B1)|(0<<COM1B0);  //SETTING PRESCALAR AS 64 
    239c:	e0 e8       	ldi	r30, 0x80	; 128
    239e:	f0 e0       	ldi	r31, 0x00	; 0
    23a0:	80 81       	ld	r24, Z
    23a2:	80 83       	st	Z, r24
      TCCR1B|=(0<<WGM12)|(0<<WGM13)|(0<<CS10)|(0<<CS11); //FAST PWM MODE
    23a4:	e1 e8       	ldi	r30, 0x81	; 129
    23a6:	f0 e0       	ldi	r31, 0x00	; 0
    23a8:	80 81       	ld	r24, Z
    23aa:	80 83       	st	Z, r24
      ICR1=0;                    //generating 20msec pulse (pwm method)
    23ac:	10 92 87 00 	sts	0x0087, r1
    23b0:	10 92 86 00 	sts	0x0086, r1
      OCR1B=0;
    23b4:	10 92 8b 00 	sts	0x008B, r1
    23b8:	10 92 8a 00 	sts	0x008A, r1
      break;
    23bc:	08 95       	ret

    case 5 :                            //OC3A
      DDRE|=(1<<PE3); // PORTB as OUTPUT
    23be:	6b 9a       	sbi	0x0d, 3	; 13
      TCCR3A|=(0<<WGM31)|(0<<COM3A1)|(0<<COM3A0);  //SETTING PRESCALAR AS 64 
    23c0:	e0 e9       	ldi	r30, 0x90	; 144
    23c2:	f0 e0       	ldi	r31, 0x00	; 0
    23c4:	80 81       	ld	r24, Z
    23c6:	80 83       	st	Z, r24
      TCCR3B|=(0<<WGM12)|(0<<WGM13)|(0<<CS30)|(0<<CS31); //FAST PWM MODE
    23c8:	e1 e9       	ldi	r30, 0x91	; 145
    23ca:	f0 e0       	ldi	r31, 0x00	; 0
    23cc:	80 81       	ld	r24, Z
    23ce:	80 83       	st	Z, r24
      ICR3=0;                    //generating 20msec pulse (pwm method)
    23d0:	10 92 97 00 	sts	0x0097, r1
    23d4:	10 92 96 00 	sts	0x0096, r1
      OCR3A=0;
    23d8:	10 92 99 00 	sts	0x0099, r1
    23dc:	10 92 98 00 	sts	0x0098, r1
      break;
    23e0:	08 95       	ret

    case 2 :                            //OC3B
      DDRE|=(1<<PE4); // PORTB as OUTPUT
    23e2:	6c 9a       	sbi	0x0d, 4	; 13
      TCCR3A|=(0<<WGM31)|(0<<COM3B1)|(0<<COM3B0);  //SETTING PRESCALAR AS 64 
    23e4:	e0 e9       	ldi	r30, 0x90	; 144
    23e6:	f0 e0       	ldi	r31, 0x00	; 0
    23e8:	80 81       	ld	r24, Z
    23ea:	80 83       	st	Z, r24
      TCCR3B|=(0<<WGM32)|(0<<WGM33)|(0<<CS30)|(0<<CS31); //FAST PWM MODE
    23ec:	e1 e9       	ldi	r30, 0x91	; 145
    23ee:	f0 e0       	ldi	r31, 0x00	; 0
    23f0:	80 81       	ld	r24, Z
    23f2:	80 83       	st	Z, r24
      ICR3=0;                    //generating 20msec pulse (pwm method)
    23f4:	10 92 97 00 	sts	0x0097, r1
    23f8:	10 92 96 00 	sts	0x0096, r1
      OCR3B=0;
    23fc:	10 92 9b 00 	sts	0x009B, r1
    2400:	10 92 9a 00 	sts	0x009A, r1
      break;
    2404:	08 95       	ret
   
    case 3 :                            //OC3C
      DDRE|=(1<<PE5); // PORTB as OUTPUT
    2406:	6d 9a       	sbi	0x0d, 5	; 13
      TCCR3A|=(0<<WGM31)|(0<<COM3C1)|(0<<COM3C0);  //SETTING PRESCALAR AS 64 
    2408:	e0 e9       	ldi	r30, 0x90	; 144
    240a:	f0 e0       	ldi	r31, 0x00	; 0
    240c:	80 81       	ld	r24, Z
    240e:	80 83       	st	Z, r24
      TCCR3B|=(0<<WGM32)|(0<<WGM33)|(0<<CS30)|(0<<CS31); //FAST PWM MODE
    2410:	e1 e9       	ldi	r30, 0x91	; 145
    2412:	f0 e0       	ldi	r31, 0x00	; 0
    2414:	80 81       	ld	r24, Z
    2416:	80 83       	st	Z, r24
      ICR3=0;                             //generating 20msec pulse (pwm method)
    2418:	10 92 97 00 	sts	0x0097, r1
    241c:	10 92 96 00 	sts	0x0096, r1
      OCR3C=0;
    2420:	10 92 9d 00 	sts	0x009D, r1
    2424:	10 92 9c 00 	sts	0x009C, r1
      break;
    2428:	08 95       	ret

    case 6 :                            //OC4A
      DDRH|=(1<<PH3); // PORTB as OUTPUT
    242a:	e1 e0       	ldi	r30, 0x01	; 1
    242c:	f1 e0       	ldi	r31, 0x01	; 1
    242e:	80 81       	ld	r24, Z
    2430:	88 60       	ori	r24, 0x08	; 8
    2432:	80 83       	st	Z, r24
      TCCR4A|=(0<<WGM41)|(0<<COM4A1)|(0<<COM4A0);  //SETTING PRESCALAR AS 64 
    2434:	e0 ea       	ldi	r30, 0xA0	; 160
    2436:	f0 e0       	ldi	r31, 0x00	; 0
    2438:	80 81       	ld	r24, Z
    243a:	80 83       	st	Z, r24
      TCCR4B|=(0<<WGM42)|(0<<WGM43)|(0<<CS40)|(0<<CS41); //FAST PWM MODE
    243c:	e1 ea       	ldi	r30, 0xA1	; 161
    243e:	f0 e0       	ldi	r31, 0x00	; 0
    2440:	80 81       	ld	r24, Z
    2442:	80 83       	st	Z, r24
      ICR4=0;                    //generating 20msec pulse (pwm method)
    2444:	10 92 a7 00 	sts	0x00A7, r1
    2448:	10 92 a6 00 	sts	0x00A6, r1
      OCR4A=0;
    244c:	10 92 a9 00 	sts	0x00A9, r1
    2450:	10 92 a8 00 	sts	0x00A8, r1
      break;
    2454:	08 95       	ret

    case 7 :                            //OC4B
      DDRH|=(1<<PH4); // PORTB as OUTPUT
    2456:	e1 e0       	ldi	r30, 0x01	; 1
    2458:	f1 e0       	ldi	r31, 0x01	; 1
    245a:	80 81       	ld	r24, Z
    245c:	80 61       	ori	r24, 0x10	; 16
    245e:	80 83       	st	Z, r24
      TCCR4A|=(0<<WGM41)|(0<<COM4B1)|(0<<COM4B0);  //SETTING PRESCALAR AS 64 
    2460:	e0 ea       	ldi	r30, 0xA0	; 160
    2462:	f0 e0       	ldi	r31, 0x00	; 0
    2464:	80 81       	ld	r24, Z
    2466:	80 83       	st	Z, r24
      TCCR4B|=(0<<WGM42)|(0<<WGM43)|(0<<CS40)|(0<<CS41); //FAST PWM MODE
    2468:	e1 ea       	ldi	r30, 0xA1	; 161
    246a:	f0 e0       	ldi	r31, 0x00	; 0
    246c:	80 81       	ld	r24, Z
    246e:	80 83       	st	Z, r24
      ICR4=0;                    //generating 20msec pulse (pwm method)
    2470:	10 92 a7 00 	sts	0x00A7, r1
    2474:	10 92 a6 00 	sts	0x00A6, r1
      OCR4B=0;
    2478:	10 92 ab 00 	sts	0x00AB, r1
    247c:	10 92 aa 00 	sts	0x00AA, r1
      break;
    2480:	08 95       	ret

    case 8 :                            //OC4C
      DDRH|=(1<<PH5); // PORTB as OUTPUT
    2482:	e1 e0       	ldi	r30, 0x01	; 1
    2484:	f1 e0       	ldi	r31, 0x01	; 1
    2486:	80 81       	ld	r24, Z
    2488:	80 62       	ori	r24, 0x20	; 32
    248a:	80 83       	st	Z, r24
      TCCR4A|=(0<<WGM41)|(0<<COM4C1)|(0<<COM4C0);  //SETTING PRESCALAR AS 64 
    248c:	e0 ea       	ldi	r30, 0xA0	; 160
    248e:	f0 e0       	ldi	r31, 0x00	; 0
    2490:	80 81       	ld	r24, Z
    2492:	80 83       	st	Z, r24
      TCCR4B|=(0<<WGM42)|(0<<WGM43)|(0<<CS40)|(0<<CS41); //FAST PWM MODE
    2494:	e1 ea       	ldi	r30, 0xA1	; 161
    2496:	f0 e0       	ldi	r31, 0x00	; 0
    2498:	80 81       	ld	r24, Z
    249a:	80 83       	st	Z, r24
      ICR4=0;                    //generating 20msec pulse (pwm method)
    249c:	10 92 a7 00 	sts	0x00A7, r1
    24a0:	10 92 a6 00 	sts	0x00A6, r1
      OCR4C=0;
    24a4:	10 92 ad 00 	sts	0x00AD, r1
    24a8:	10 92 ac 00 	sts	0x00AC, r1
      break;
    24ac:	08 95       	ret

    case 46 :                           //OC5A 
      DDRL|=(1<<PL3); // PORTB as OUTPUT
    24ae:	ea e0       	ldi	r30, 0x0A	; 10
    24b0:	f1 e0       	ldi	r31, 0x01	; 1
    24b2:	80 81       	ld	r24, Z
    24b4:	88 60       	ori	r24, 0x08	; 8
    24b6:	80 83       	st	Z, r24
      TCCR5A|=(0<<WGM51)|(0<<COM5A1)|(0<<COM5A0);  //SETTING PRESCALAR AS 64 
    24b8:	e0 e2       	ldi	r30, 0x20	; 32
    24ba:	f1 e0       	ldi	r31, 0x01	; 1
    24bc:	80 81       	ld	r24, Z
    24be:	80 83       	st	Z, r24
      TCCR5B|=(0<<WGM52)|(0<<WGM53)|(0<<CS50)|(0<<CS51); //FAST PWM MODE
    24c0:	e1 e2       	ldi	r30, 0x21	; 33
    24c2:	f1 e0       	ldi	r31, 0x01	; 1
    24c4:	80 81       	ld	r24, Z
    24c6:	80 83       	st	Z, r24
      ICR5=0;                    //generating 20msec pulse (pwm method)
    24c8:	10 92 27 01 	sts	0x0127, r1
    24cc:	10 92 26 01 	sts	0x0126, r1
      OCR5A=0;
    24d0:	10 92 29 01 	sts	0x0129, r1
    24d4:	10 92 28 01 	sts	0x0128, r1
      break;
    24d8:	08 95       	ret

    case 45 :                           //OC5B
      DDRL|=(1<<PL4); // PORTB as OUTPUT
    24da:	ea e0       	ldi	r30, 0x0A	; 10
    24dc:	f1 e0       	ldi	r31, 0x01	; 1
    24de:	80 81       	ld	r24, Z
    24e0:	80 61       	ori	r24, 0x10	; 16
    24e2:	80 83       	st	Z, r24
      TCCR5A|=(0<<WGM51)|(0<<COM5B1)|(0<<COM5B0);  //SETTING PRESCALAR AS 64 
    24e4:	e0 e2       	ldi	r30, 0x20	; 32
    24e6:	f1 e0       	ldi	r31, 0x01	; 1
    24e8:	80 81       	ld	r24, Z
    24ea:	80 83       	st	Z, r24
      TCCR5B|=(0<<WGM52)|(0<<WGM53)|(0<<CS50)|(0<<CS51); //FAST PWM MODE
    24ec:	e1 e2       	ldi	r30, 0x21	; 33
    24ee:	f1 e0       	ldi	r31, 0x01	; 1
    24f0:	80 81       	ld	r24, Z
    24f2:	80 83       	st	Z, r24
      ICR5=0;                    //generating 20msec pulse (pwm met)
    24f4:	10 92 27 01 	sts	0x0127, r1
    24f8:	10 92 26 01 	sts	0x0126, r1
      OCR5B=0;
    24fc:	10 92 2b 01 	sts	0x012B, r1
    2500:	10 92 2a 01 	sts	0x012A, r1
      break;
    2504:	08 95       	ret

    case 44 :                           //OC5C
      DDRL|=(1<<PL5); // PORTB as OUTPUT
    2506:	ea e0       	ldi	r30, 0x0A	; 10
    2508:	f1 e0       	ldi	r31, 0x01	; 1
    250a:	80 81       	ld	r24, Z
    250c:	80 62       	ori	r24, 0x20	; 32
    250e:	80 83       	st	Z, r24
      TCCR5A|=(0<<WGM51)|(0<<COM5C1)|(0<<COM5C0);  //SETTING PRESCALAR AS 64 
    2510:	e0 e2       	ldi	r30, 0x20	; 32
    2512:	f1 e0       	ldi	r31, 0x01	; 1
    2514:	80 81       	ld	r24, Z
    2516:	80 83       	st	Z, r24
      TCCR5B|=(0<<WGM52)|(0<<WGM53)|(0<<CS50)|(0<<CS51); //FAST PWM MODE
    2518:	e1 e2       	ldi	r30, 0x21	; 33
    251a:	f1 e0       	ldi	r31, 0x01	; 1
    251c:	80 81       	ld	r24, Z
    251e:	80 83       	st	Z, r24
      ICR5=0;                    //generating 20msec pulse (pwm method)
    2520:	10 92 27 01 	sts	0x0127, r1
    2524:	10 92 26 01 	sts	0x0126, r1
      OCR5C=0;
    2528:	10 92 2d 01 	sts	0x012D, r1
    252c:	10 92 2c 01 	sts	0x012C, r1
    2530:	08 95       	ret

00002532 <_Z5setupv>:

#include <m2560/io.h>
#include <m2560/Servo.h>
#include <ModularLibrary/Cytron.h>
void setup(){
	pinMode(13,OUTPUT);
    2532:	8d e0       	ldi	r24, 0x0D	; 13
    2534:	61 e0       	ldi	r22, 0x01	; 1
    2536:	0e 94 95 00 	call	0x12a	; 0x12a <_Z7pinModehh>
}	
    253a:	08 95       	ret

0000253c <_Z4loopv>:
void loop(){
		digitalWrite(13,HIGH);
    253c:	8d e0       	ldi	r24, 0x0D	; 13
    253e:	61 e0       	ldi	r22, 0x01	; 1
    2540:	0e 94 08 02 	call	0x410	; 0x410 <_Z12digitalWritehh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2544:	8f ef       	ldi	r24, 0xFF	; 255
    2546:	93 ed       	ldi	r25, 0xD3	; 211
    2548:	a0 e3       	ldi	r26, 0x30	; 48
    254a:	81 50       	subi	r24, 0x01	; 1
    254c:	90 40       	sbci	r25, 0x00	; 0
    254e:	a0 40       	sbci	r26, 0x00	; 0
    2550:	e1 f7       	brne	.-8      	; 0x254a <_Z4loopv+0xe>
    2552:	00 c0       	rjmp	.+0      	; 0x2554 <_Z4loopv+0x18>
    2554:	00 00       	nop
		_delay_ms(1000);
		digitalWrite(13,LOW);
    2556:	8d e0       	ldi	r24, 0x0D	; 13
    2558:	60 e0       	ldi	r22, 0x00	; 0
    255a:	0e 94 08 02 	call	0x410	; 0x410 <_Z12digitalWritehh>
    255e:	8f ef       	ldi	r24, 0xFF	; 255
    2560:	93 ed       	ldi	r25, 0xD3	; 211
    2562:	a0 e3       	ldi	r26, 0x30	; 48
    2564:	81 50       	subi	r24, 0x01	; 1
    2566:	90 40       	sbci	r25, 0x00	; 0
    2568:	a0 40       	sbci	r26, 0x00	; 0
    256a:	e1 f7       	brne	.-8      	; 0x2564 <_Z4loopv+0x28>
    256c:	00 c0       	rjmp	.+0      	; 0x256e <_Z4loopv+0x32>
    256e:	00 00       	nop
		_delay_ms(1000);
    2570:	08 95       	ret

00002572 <main>:
	uSerfun(); 
}
*/

int main(){
	setup();
    2572:	0e 94 99 12 	call	0x2532	; 0x2532 <_Z5setupv>
	while(1){
		loop();
    2576:	0e 94 9e 12 	call	0x253c	; 0x253c <_Z4loopv>
    257a:	fd cf       	rjmp	.-6      	; 0x2576 <main+0x4>

0000257c <__subsf3>:
    257c:	50 58       	subi	r21, 0x80	; 128

0000257e <__addsf3>:
    257e:	bb 27       	eor	r27, r27
    2580:	aa 27       	eor	r26, r26
    2582:	0e d0       	rcall	.+28     	; 0x25a0 <__addsf3x>
    2584:	75 c1       	rjmp	.+746    	; 0x2870 <__fp_round>
    2586:	66 d1       	rcall	.+716    	; 0x2854 <__fp_pscA>
    2588:	30 f0       	brcs	.+12     	; 0x2596 <__addsf3+0x18>
    258a:	6b d1       	rcall	.+726    	; 0x2862 <__fp_pscB>
    258c:	20 f0       	brcs	.+8      	; 0x2596 <__addsf3+0x18>
    258e:	31 f4       	brne	.+12     	; 0x259c <__addsf3+0x1e>
    2590:	9f 3f       	cpi	r25, 0xFF	; 255
    2592:	11 f4       	brne	.+4      	; 0x2598 <__addsf3+0x1a>
    2594:	1e f4       	brtc	.+6      	; 0x259c <__addsf3+0x1e>
    2596:	5b c1       	rjmp	.+694    	; 0x284e <__fp_nan>
    2598:	0e f4       	brtc	.+2      	; 0x259c <__addsf3+0x1e>
    259a:	e0 95       	com	r30
    259c:	e7 fb       	bst	r30, 7
    259e:	51 c1       	rjmp	.+674    	; 0x2842 <__fp_inf>

000025a0 <__addsf3x>:
    25a0:	e9 2f       	mov	r30, r25
    25a2:	77 d1       	rcall	.+750    	; 0x2892 <__fp_split3>
    25a4:	80 f3       	brcs	.-32     	; 0x2586 <__addsf3+0x8>
    25a6:	ba 17       	cp	r27, r26
    25a8:	62 07       	cpc	r22, r18
    25aa:	73 07       	cpc	r23, r19
    25ac:	84 07       	cpc	r24, r20
    25ae:	95 07       	cpc	r25, r21
    25b0:	18 f0       	brcs	.+6      	; 0x25b8 <__addsf3x+0x18>
    25b2:	71 f4       	brne	.+28     	; 0x25d0 <__addsf3x+0x30>
    25b4:	9e f5       	brtc	.+102    	; 0x261c <__addsf3x+0x7c>
    25b6:	8f c1       	rjmp	.+798    	; 0x28d6 <__fp_zero>
    25b8:	0e f4       	brtc	.+2      	; 0x25bc <__addsf3x+0x1c>
    25ba:	e0 95       	com	r30
    25bc:	0b 2e       	mov	r0, r27
    25be:	ba 2f       	mov	r27, r26
    25c0:	a0 2d       	mov	r26, r0
    25c2:	0b 01       	movw	r0, r22
    25c4:	b9 01       	movw	r22, r18
    25c6:	90 01       	movw	r18, r0
    25c8:	0c 01       	movw	r0, r24
    25ca:	ca 01       	movw	r24, r20
    25cc:	a0 01       	movw	r20, r0
    25ce:	11 24       	eor	r1, r1
    25d0:	ff 27       	eor	r31, r31
    25d2:	59 1b       	sub	r21, r25
    25d4:	99 f0       	breq	.+38     	; 0x25fc <__addsf3x+0x5c>
    25d6:	59 3f       	cpi	r21, 0xF9	; 249
    25d8:	50 f4       	brcc	.+20     	; 0x25ee <__addsf3x+0x4e>
    25da:	50 3e       	cpi	r21, 0xE0	; 224
    25dc:	68 f1       	brcs	.+90     	; 0x2638 <__addsf3x+0x98>
    25de:	1a 16       	cp	r1, r26
    25e0:	f0 40       	sbci	r31, 0x00	; 0
    25e2:	a2 2f       	mov	r26, r18
    25e4:	23 2f       	mov	r18, r19
    25e6:	34 2f       	mov	r19, r20
    25e8:	44 27       	eor	r20, r20
    25ea:	58 5f       	subi	r21, 0xF8	; 248
    25ec:	f3 cf       	rjmp	.-26     	; 0x25d4 <__addsf3x+0x34>
    25ee:	46 95       	lsr	r20
    25f0:	37 95       	ror	r19
    25f2:	27 95       	ror	r18
    25f4:	a7 95       	ror	r26
    25f6:	f0 40       	sbci	r31, 0x00	; 0
    25f8:	53 95       	inc	r21
    25fa:	c9 f7       	brne	.-14     	; 0x25ee <__addsf3x+0x4e>
    25fc:	7e f4       	brtc	.+30     	; 0x261c <__addsf3x+0x7c>
    25fe:	1f 16       	cp	r1, r31
    2600:	ba 0b       	sbc	r27, r26
    2602:	62 0b       	sbc	r22, r18
    2604:	73 0b       	sbc	r23, r19
    2606:	84 0b       	sbc	r24, r20
    2608:	ba f0       	brmi	.+46     	; 0x2638 <__addsf3x+0x98>
    260a:	91 50       	subi	r25, 0x01	; 1
    260c:	a1 f0       	breq	.+40     	; 0x2636 <__addsf3x+0x96>
    260e:	ff 0f       	add	r31, r31
    2610:	bb 1f       	adc	r27, r27
    2612:	66 1f       	adc	r22, r22
    2614:	77 1f       	adc	r23, r23
    2616:	88 1f       	adc	r24, r24
    2618:	c2 f7       	brpl	.-16     	; 0x260a <__addsf3x+0x6a>
    261a:	0e c0       	rjmp	.+28     	; 0x2638 <__addsf3x+0x98>
    261c:	ba 0f       	add	r27, r26
    261e:	62 1f       	adc	r22, r18
    2620:	73 1f       	adc	r23, r19
    2622:	84 1f       	adc	r24, r20
    2624:	48 f4       	brcc	.+18     	; 0x2638 <__addsf3x+0x98>
    2626:	87 95       	ror	r24
    2628:	77 95       	ror	r23
    262a:	67 95       	ror	r22
    262c:	b7 95       	ror	r27
    262e:	f7 95       	ror	r31
    2630:	9e 3f       	cpi	r25, 0xFE	; 254
    2632:	08 f0       	brcs	.+2      	; 0x2636 <__addsf3x+0x96>
    2634:	b3 cf       	rjmp	.-154    	; 0x259c <__addsf3+0x1e>
    2636:	93 95       	inc	r25
    2638:	88 0f       	add	r24, r24
    263a:	08 f0       	brcs	.+2      	; 0x263e <__addsf3x+0x9e>
    263c:	99 27       	eor	r25, r25
    263e:	ee 0f       	add	r30, r30
    2640:	97 95       	ror	r25
    2642:	87 95       	ror	r24
    2644:	08 95       	ret

00002646 <__cmpsf2>:
    2646:	d9 d0       	rcall	.+434    	; 0x27fa <__fp_cmp>
    2648:	08 f4       	brcc	.+2      	; 0x264c <__cmpsf2+0x6>
    264a:	81 e0       	ldi	r24, 0x01	; 1
    264c:	08 95       	ret

0000264e <__divsf3>:
    264e:	0c d0       	rcall	.+24     	; 0x2668 <__divsf3x>
    2650:	0f c1       	rjmp	.+542    	; 0x2870 <__fp_round>
    2652:	07 d1       	rcall	.+526    	; 0x2862 <__fp_pscB>
    2654:	40 f0       	brcs	.+16     	; 0x2666 <__divsf3+0x18>
    2656:	fe d0       	rcall	.+508    	; 0x2854 <__fp_pscA>
    2658:	30 f0       	brcs	.+12     	; 0x2666 <__divsf3+0x18>
    265a:	21 f4       	brne	.+8      	; 0x2664 <__divsf3+0x16>
    265c:	5f 3f       	cpi	r21, 0xFF	; 255
    265e:	19 f0       	breq	.+6      	; 0x2666 <__divsf3+0x18>
    2660:	f0 c0       	rjmp	.+480    	; 0x2842 <__fp_inf>
    2662:	51 11       	cpse	r21, r1
    2664:	39 c1       	rjmp	.+626    	; 0x28d8 <__fp_szero>
    2666:	f3 c0       	rjmp	.+486    	; 0x284e <__fp_nan>

00002668 <__divsf3x>:
    2668:	14 d1       	rcall	.+552    	; 0x2892 <__fp_split3>
    266a:	98 f3       	brcs	.-26     	; 0x2652 <__divsf3+0x4>

0000266c <__divsf3_pse>:
    266c:	99 23       	and	r25, r25
    266e:	c9 f3       	breq	.-14     	; 0x2662 <__divsf3+0x14>
    2670:	55 23       	and	r21, r21
    2672:	b1 f3       	breq	.-20     	; 0x2660 <__divsf3+0x12>
    2674:	95 1b       	sub	r25, r21
    2676:	55 0b       	sbc	r21, r21
    2678:	bb 27       	eor	r27, r27
    267a:	aa 27       	eor	r26, r26
    267c:	62 17       	cp	r22, r18
    267e:	73 07       	cpc	r23, r19
    2680:	84 07       	cpc	r24, r20
    2682:	38 f0       	brcs	.+14     	; 0x2692 <__divsf3_pse+0x26>
    2684:	9f 5f       	subi	r25, 0xFF	; 255
    2686:	5f 4f       	sbci	r21, 0xFF	; 255
    2688:	22 0f       	add	r18, r18
    268a:	33 1f       	adc	r19, r19
    268c:	44 1f       	adc	r20, r20
    268e:	aa 1f       	adc	r26, r26
    2690:	a9 f3       	breq	.-22     	; 0x267c <__divsf3_pse+0x10>
    2692:	33 d0       	rcall	.+102    	; 0x26fa <__divsf3_pse+0x8e>
    2694:	0e 2e       	mov	r0, r30
    2696:	3a f0       	brmi	.+14     	; 0x26a6 <__divsf3_pse+0x3a>
    2698:	e0 e8       	ldi	r30, 0x80	; 128
    269a:	30 d0       	rcall	.+96     	; 0x26fc <__divsf3_pse+0x90>
    269c:	91 50       	subi	r25, 0x01	; 1
    269e:	50 40       	sbci	r21, 0x00	; 0
    26a0:	e6 95       	lsr	r30
    26a2:	00 1c       	adc	r0, r0
    26a4:	ca f7       	brpl	.-14     	; 0x2698 <__divsf3_pse+0x2c>
    26a6:	29 d0       	rcall	.+82     	; 0x26fa <__divsf3_pse+0x8e>
    26a8:	fe 2f       	mov	r31, r30
    26aa:	27 d0       	rcall	.+78     	; 0x26fa <__divsf3_pse+0x8e>
    26ac:	66 0f       	add	r22, r22
    26ae:	77 1f       	adc	r23, r23
    26b0:	88 1f       	adc	r24, r24
    26b2:	bb 1f       	adc	r27, r27
    26b4:	26 17       	cp	r18, r22
    26b6:	37 07       	cpc	r19, r23
    26b8:	48 07       	cpc	r20, r24
    26ba:	ab 07       	cpc	r26, r27
    26bc:	b0 e8       	ldi	r27, 0x80	; 128
    26be:	09 f0       	breq	.+2      	; 0x26c2 <__divsf3_pse+0x56>
    26c0:	bb 0b       	sbc	r27, r27
    26c2:	80 2d       	mov	r24, r0
    26c4:	bf 01       	movw	r22, r30
    26c6:	ff 27       	eor	r31, r31
    26c8:	93 58       	subi	r25, 0x83	; 131
    26ca:	5f 4f       	sbci	r21, 0xFF	; 255
    26cc:	2a f0       	brmi	.+10     	; 0x26d8 <__divsf3_pse+0x6c>
    26ce:	9e 3f       	cpi	r25, 0xFE	; 254
    26d0:	51 05       	cpc	r21, r1
    26d2:	68 f0       	brcs	.+26     	; 0x26ee <__divsf3_pse+0x82>
    26d4:	b6 c0       	rjmp	.+364    	; 0x2842 <__fp_inf>
    26d6:	00 c1       	rjmp	.+512    	; 0x28d8 <__fp_szero>
    26d8:	5f 3f       	cpi	r21, 0xFF	; 255
    26da:	ec f3       	brlt	.-6      	; 0x26d6 <__divsf3_pse+0x6a>
    26dc:	98 3e       	cpi	r25, 0xE8	; 232
    26de:	dc f3       	brlt	.-10     	; 0x26d6 <__divsf3_pse+0x6a>
    26e0:	86 95       	lsr	r24
    26e2:	77 95       	ror	r23
    26e4:	67 95       	ror	r22
    26e6:	b7 95       	ror	r27
    26e8:	f7 95       	ror	r31
    26ea:	9f 5f       	subi	r25, 0xFF	; 255
    26ec:	c9 f7       	brne	.-14     	; 0x26e0 <__divsf3_pse+0x74>
    26ee:	88 0f       	add	r24, r24
    26f0:	91 1d       	adc	r25, r1
    26f2:	96 95       	lsr	r25
    26f4:	87 95       	ror	r24
    26f6:	97 f9       	bld	r25, 7
    26f8:	08 95       	ret
    26fa:	e1 e0       	ldi	r30, 0x01	; 1
    26fc:	66 0f       	add	r22, r22
    26fe:	77 1f       	adc	r23, r23
    2700:	88 1f       	adc	r24, r24
    2702:	bb 1f       	adc	r27, r27
    2704:	62 17       	cp	r22, r18
    2706:	73 07       	cpc	r23, r19
    2708:	84 07       	cpc	r24, r20
    270a:	ba 07       	cpc	r27, r26
    270c:	20 f0       	brcs	.+8      	; 0x2716 <__divsf3_pse+0xaa>
    270e:	62 1b       	sub	r22, r18
    2710:	73 0b       	sbc	r23, r19
    2712:	84 0b       	sbc	r24, r20
    2714:	ba 0b       	sbc	r27, r26
    2716:	ee 1f       	adc	r30, r30
    2718:	88 f7       	brcc	.-30     	; 0x26fc <__divsf3_pse+0x90>
    271a:	e0 95       	com	r30
    271c:	08 95       	ret

0000271e <__fixsfsi>:
    271e:	04 d0       	rcall	.+8      	; 0x2728 <__fixunssfsi>
    2720:	68 94       	set
    2722:	b1 11       	cpse	r27, r1
    2724:	d9 c0       	rjmp	.+434    	; 0x28d8 <__fp_szero>
    2726:	08 95       	ret

00002728 <__fixunssfsi>:
    2728:	bc d0       	rcall	.+376    	; 0x28a2 <__fp_splitA>
    272a:	88 f0       	brcs	.+34     	; 0x274e <__fixunssfsi+0x26>
    272c:	9f 57       	subi	r25, 0x7F	; 127
    272e:	90 f0       	brcs	.+36     	; 0x2754 <__fixunssfsi+0x2c>
    2730:	b9 2f       	mov	r27, r25
    2732:	99 27       	eor	r25, r25
    2734:	b7 51       	subi	r27, 0x17	; 23
    2736:	a0 f0       	brcs	.+40     	; 0x2760 <__fixunssfsi+0x38>
    2738:	d1 f0       	breq	.+52     	; 0x276e <__fixunssfsi+0x46>
    273a:	66 0f       	add	r22, r22
    273c:	77 1f       	adc	r23, r23
    273e:	88 1f       	adc	r24, r24
    2740:	99 1f       	adc	r25, r25
    2742:	1a f0       	brmi	.+6      	; 0x274a <__fixunssfsi+0x22>
    2744:	ba 95       	dec	r27
    2746:	c9 f7       	brne	.-14     	; 0x273a <__fixunssfsi+0x12>
    2748:	12 c0       	rjmp	.+36     	; 0x276e <__fixunssfsi+0x46>
    274a:	b1 30       	cpi	r27, 0x01	; 1
    274c:	81 f0       	breq	.+32     	; 0x276e <__fixunssfsi+0x46>
    274e:	c3 d0       	rcall	.+390    	; 0x28d6 <__fp_zero>
    2750:	b1 e0       	ldi	r27, 0x01	; 1
    2752:	08 95       	ret
    2754:	c0 c0       	rjmp	.+384    	; 0x28d6 <__fp_zero>
    2756:	67 2f       	mov	r22, r23
    2758:	78 2f       	mov	r23, r24
    275a:	88 27       	eor	r24, r24
    275c:	b8 5f       	subi	r27, 0xF8	; 248
    275e:	39 f0       	breq	.+14     	; 0x276e <__fixunssfsi+0x46>
    2760:	b9 3f       	cpi	r27, 0xF9	; 249
    2762:	cc f3       	brlt	.-14     	; 0x2756 <__fixunssfsi+0x2e>
    2764:	86 95       	lsr	r24
    2766:	77 95       	ror	r23
    2768:	67 95       	ror	r22
    276a:	b3 95       	inc	r27
    276c:	d9 f7       	brne	.-10     	; 0x2764 <__fixunssfsi+0x3c>
    276e:	3e f4       	brtc	.+14     	; 0x277e <__fixunssfsi+0x56>
    2770:	90 95       	com	r25
    2772:	80 95       	com	r24
    2774:	70 95       	com	r23
    2776:	61 95       	neg	r22
    2778:	7f 4f       	sbci	r23, 0xFF	; 255
    277a:	8f 4f       	sbci	r24, 0xFF	; 255
    277c:	9f 4f       	sbci	r25, 0xFF	; 255
    277e:	08 95       	ret

00002780 <__floatunsisf>:
    2780:	e8 94       	clt
    2782:	09 c0       	rjmp	.+18     	; 0x2796 <__floatsisf+0x12>

00002784 <__floatsisf>:
    2784:	97 fb       	bst	r25, 7
    2786:	3e f4       	brtc	.+14     	; 0x2796 <__floatsisf+0x12>
    2788:	90 95       	com	r25
    278a:	80 95       	com	r24
    278c:	70 95       	com	r23
    278e:	61 95       	neg	r22
    2790:	7f 4f       	sbci	r23, 0xFF	; 255
    2792:	8f 4f       	sbci	r24, 0xFF	; 255
    2794:	9f 4f       	sbci	r25, 0xFF	; 255
    2796:	99 23       	and	r25, r25
    2798:	a9 f0       	breq	.+42     	; 0x27c4 <__floatsisf+0x40>
    279a:	f9 2f       	mov	r31, r25
    279c:	96 e9       	ldi	r25, 0x96	; 150
    279e:	bb 27       	eor	r27, r27
    27a0:	93 95       	inc	r25
    27a2:	f6 95       	lsr	r31
    27a4:	87 95       	ror	r24
    27a6:	77 95       	ror	r23
    27a8:	67 95       	ror	r22
    27aa:	b7 95       	ror	r27
    27ac:	f1 11       	cpse	r31, r1
    27ae:	f8 cf       	rjmp	.-16     	; 0x27a0 <__floatsisf+0x1c>
    27b0:	fa f4       	brpl	.+62     	; 0x27f0 <__floatsisf+0x6c>
    27b2:	bb 0f       	add	r27, r27
    27b4:	11 f4       	brne	.+4      	; 0x27ba <__floatsisf+0x36>
    27b6:	60 ff       	sbrs	r22, 0
    27b8:	1b c0       	rjmp	.+54     	; 0x27f0 <__floatsisf+0x6c>
    27ba:	6f 5f       	subi	r22, 0xFF	; 255
    27bc:	7f 4f       	sbci	r23, 0xFF	; 255
    27be:	8f 4f       	sbci	r24, 0xFF	; 255
    27c0:	9f 4f       	sbci	r25, 0xFF	; 255
    27c2:	16 c0       	rjmp	.+44     	; 0x27f0 <__floatsisf+0x6c>
    27c4:	88 23       	and	r24, r24
    27c6:	11 f0       	breq	.+4      	; 0x27cc <__floatsisf+0x48>
    27c8:	96 e9       	ldi	r25, 0x96	; 150
    27ca:	11 c0       	rjmp	.+34     	; 0x27ee <__floatsisf+0x6a>
    27cc:	77 23       	and	r23, r23
    27ce:	21 f0       	breq	.+8      	; 0x27d8 <__floatsisf+0x54>
    27d0:	9e e8       	ldi	r25, 0x8E	; 142
    27d2:	87 2f       	mov	r24, r23
    27d4:	76 2f       	mov	r23, r22
    27d6:	05 c0       	rjmp	.+10     	; 0x27e2 <__floatsisf+0x5e>
    27d8:	66 23       	and	r22, r22
    27da:	71 f0       	breq	.+28     	; 0x27f8 <__floatsisf+0x74>
    27dc:	96 e8       	ldi	r25, 0x86	; 134
    27de:	86 2f       	mov	r24, r22
    27e0:	70 e0       	ldi	r23, 0x00	; 0
    27e2:	60 e0       	ldi	r22, 0x00	; 0
    27e4:	2a f0       	brmi	.+10     	; 0x27f0 <__floatsisf+0x6c>
    27e6:	9a 95       	dec	r25
    27e8:	66 0f       	add	r22, r22
    27ea:	77 1f       	adc	r23, r23
    27ec:	88 1f       	adc	r24, r24
    27ee:	da f7       	brpl	.-10     	; 0x27e6 <__floatsisf+0x62>
    27f0:	88 0f       	add	r24, r24
    27f2:	96 95       	lsr	r25
    27f4:	87 95       	ror	r24
    27f6:	97 f9       	bld	r25, 7
    27f8:	08 95       	ret

000027fa <__fp_cmp>:
    27fa:	99 0f       	add	r25, r25
    27fc:	00 08       	sbc	r0, r0
    27fe:	55 0f       	add	r21, r21
    2800:	aa 0b       	sbc	r26, r26
    2802:	e0 e8       	ldi	r30, 0x80	; 128
    2804:	fe ef       	ldi	r31, 0xFE	; 254
    2806:	16 16       	cp	r1, r22
    2808:	17 06       	cpc	r1, r23
    280a:	e8 07       	cpc	r30, r24
    280c:	f9 07       	cpc	r31, r25
    280e:	c0 f0       	brcs	.+48     	; 0x2840 <__fp_cmp+0x46>
    2810:	12 16       	cp	r1, r18
    2812:	13 06       	cpc	r1, r19
    2814:	e4 07       	cpc	r30, r20
    2816:	f5 07       	cpc	r31, r21
    2818:	98 f0       	brcs	.+38     	; 0x2840 <__fp_cmp+0x46>
    281a:	62 1b       	sub	r22, r18
    281c:	73 0b       	sbc	r23, r19
    281e:	84 0b       	sbc	r24, r20
    2820:	95 0b       	sbc	r25, r21
    2822:	39 f4       	brne	.+14     	; 0x2832 <__fp_cmp+0x38>
    2824:	0a 26       	eor	r0, r26
    2826:	61 f0       	breq	.+24     	; 0x2840 <__fp_cmp+0x46>
    2828:	23 2b       	or	r18, r19
    282a:	24 2b       	or	r18, r20
    282c:	25 2b       	or	r18, r21
    282e:	21 f4       	brne	.+8      	; 0x2838 <__fp_cmp+0x3e>
    2830:	08 95       	ret
    2832:	0a 26       	eor	r0, r26
    2834:	09 f4       	brne	.+2      	; 0x2838 <__fp_cmp+0x3e>
    2836:	a1 40       	sbci	r26, 0x01	; 1
    2838:	a6 95       	lsr	r26
    283a:	8f ef       	ldi	r24, 0xFF	; 255
    283c:	81 1d       	adc	r24, r1
    283e:	81 1d       	adc	r24, r1
    2840:	08 95       	ret

00002842 <__fp_inf>:
    2842:	97 f9       	bld	r25, 7
    2844:	9f 67       	ori	r25, 0x7F	; 127
    2846:	80 e8       	ldi	r24, 0x80	; 128
    2848:	70 e0       	ldi	r23, 0x00	; 0
    284a:	60 e0       	ldi	r22, 0x00	; 0
    284c:	08 95       	ret

0000284e <__fp_nan>:
    284e:	9f ef       	ldi	r25, 0xFF	; 255
    2850:	80 ec       	ldi	r24, 0xC0	; 192
    2852:	08 95       	ret

00002854 <__fp_pscA>:
    2854:	00 24       	eor	r0, r0
    2856:	0a 94       	dec	r0
    2858:	16 16       	cp	r1, r22
    285a:	17 06       	cpc	r1, r23
    285c:	18 06       	cpc	r1, r24
    285e:	09 06       	cpc	r0, r25
    2860:	08 95       	ret

00002862 <__fp_pscB>:
    2862:	00 24       	eor	r0, r0
    2864:	0a 94       	dec	r0
    2866:	12 16       	cp	r1, r18
    2868:	13 06       	cpc	r1, r19
    286a:	14 06       	cpc	r1, r20
    286c:	05 06       	cpc	r0, r21
    286e:	08 95       	ret

00002870 <__fp_round>:
    2870:	09 2e       	mov	r0, r25
    2872:	03 94       	inc	r0
    2874:	00 0c       	add	r0, r0
    2876:	11 f4       	brne	.+4      	; 0x287c <__fp_round+0xc>
    2878:	88 23       	and	r24, r24
    287a:	52 f0       	brmi	.+20     	; 0x2890 <__fp_round+0x20>
    287c:	bb 0f       	add	r27, r27
    287e:	40 f4       	brcc	.+16     	; 0x2890 <__fp_round+0x20>
    2880:	bf 2b       	or	r27, r31
    2882:	11 f4       	brne	.+4      	; 0x2888 <__fp_round+0x18>
    2884:	60 ff       	sbrs	r22, 0
    2886:	04 c0       	rjmp	.+8      	; 0x2890 <__fp_round+0x20>
    2888:	6f 5f       	subi	r22, 0xFF	; 255
    288a:	7f 4f       	sbci	r23, 0xFF	; 255
    288c:	8f 4f       	sbci	r24, 0xFF	; 255
    288e:	9f 4f       	sbci	r25, 0xFF	; 255
    2890:	08 95       	ret

00002892 <__fp_split3>:
    2892:	57 fd       	sbrc	r21, 7
    2894:	90 58       	subi	r25, 0x80	; 128
    2896:	44 0f       	add	r20, r20
    2898:	55 1f       	adc	r21, r21
    289a:	59 f0       	breq	.+22     	; 0x28b2 <__fp_splitA+0x10>
    289c:	5f 3f       	cpi	r21, 0xFF	; 255
    289e:	71 f0       	breq	.+28     	; 0x28bc <__fp_splitA+0x1a>
    28a0:	47 95       	ror	r20

000028a2 <__fp_splitA>:
    28a2:	88 0f       	add	r24, r24
    28a4:	97 fb       	bst	r25, 7
    28a6:	99 1f       	adc	r25, r25
    28a8:	61 f0       	breq	.+24     	; 0x28c2 <__fp_splitA+0x20>
    28aa:	9f 3f       	cpi	r25, 0xFF	; 255
    28ac:	79 f0       	breq	.+30     	; 0x28cc <__fp_splitA+0x2a>
    28ae:	87 95       	ror	r24
    28b0:	08 95       	ret
    28b2:	12 16       	cp	r1, r18
    28b4:	13 06       	cpc	r1, r19
    28b6:	14 06       	cpc	r1, r20
    28b8:	55 1f       	adc	r21, r21
    28ba:	f2 cf       	rjmp	.-28     	; 0x28a0 <__fp_split3+0xe>
    28bc:	46 95       	lsr	r20
    28be:	f1 df       	rcall	.-30     	; 0x28a2 <__fp_splitA>
    28c0:	08 c0       	rjmp	.+16     	; 0x28d2 <__fp_splitA+0x30>
    28c2:	16 16       	cp	r1, r22
    28c4:	17 06       	cpc	r1, r23
    28c6:	18 06       	cpc	r1, r24
    28c8:	99 1f       	adc	r25, r25
    28ca:	f1 cf       	rjmp	.-30     	; 0x28ae <__fp_splitA+0xc>
    28cc:	86 95       	lsr	r24
    28ce:	71 05       	cpc	r23, r1
    28d0:	61 05       	cpc	r22, r1
    28d2:	08 94       	sec
    28d4:	08 95       	ret

000028d6 <__fp_zero>:
    28d6:	e8 94       	clt

000028d8 <__fp_szero>:
    28d8:	bb 27       	eor	r27, r27
    28da:	66 27       	eor	r22, r22
    28dc:	77 27       	eor	r23, r23
    28de:	cb 01       	movw	r24, r22
    28e0:	97 f9       	bld	r25, 7
    28e2:	08 95       	ret

000028e4 <__gesf2>:
    28e4:	8a df       	rcall	.-236    	; 0x27fa <__fp_cmp>
    28e6:	08 f4       	brcc	.+2      	; 0x28ea <__gesf2+0x6>
    28e8:	8f ef       	ldi	r24, 0xFF	; 255
    28ea:	08 95       	ret

000028ec <__mulsf3>:
    28ec:	0b d0       	rcall	.+22     	; 0x2904 <__mulsf3x>
    28ee:	c0 cf       	rjmp	.-128    	; 0x2870 <__fp_round>
    28f0:	b1 df       	rcall	.-158    	; 0x2854 <__fp_pscA>
    28f2:	28 f0       	brcs	.+10     	; 0x28fe <__mulsf3+0x12>
    28f4:	b6 df       	rcall	.-148    	; 0x2862 <__fp_pscB>
    28f6:	18 f0       	brcs	.+6      	; 0x28fe <__mulsf3+0x12>
    28f8:	95 23       	and	r25, r21
    28fa:	09 f0       	breq	.+2      	; 0x28fe <__mulsf3+0x12>
    28fc:	a2 cf       	rjmp	.-188    	; 0x2842 <__fp_inf>
    28fe:	a7 cf       	rjmp	.-178    	; 0x284e <__fp_nan>
    2900:	11 24       	eor	r1, r1
    2902:	ea cf       	rjmp	.-44     	; 0x28d8 <__fp_szero>

00002904 <__mulsf3x>:
    2904:	c6 df       	rcall	.-116    	; 0x2892 <__fp_split3>
    2906:	a0 f3       	brcs	.-24     	; 0x28f0 <__mulsf3+0x4>

00002908 <__mulsf3_pse>:
    2908:	95 9f       	mul	r25, r21
    290a:	d1 f3       	breq	.-12     	; 0x2900 <__mulsf3+0x14>
    290c:	95 0f       	add	r25, r21
    290e:	50 e0       	ldi	r21, 0x00	; 0
    2910:	55 1f       	adc	r21, r21
    2912:	62 9f       	mul	r22, r18
    2914:	f0 01       	movw	r30, r0
    2916:	72 9f       	mul	r23, r18
    2918:	bb 27       	eor	r27, r27
    291a:	f0 0d       	add	r31, r0
    291c:	b1 1d       	adc	r27, r1
    291e:	63 9f       	mul	r22, r19
    2920:	aa 27       	eor	r26, r26
    2922:	f0 0d       	add	r31, r0
    2924:	b1 1d       	adc	r27, r1
    2926:	aa 1f       	adc	r26, r26
    2928:	64 9f       	mul	r22, r20
    292a:	66 27       	eor	r22, r22
    292c:	b0 0d       	add	r27, r0
    292e:	a1 1d       	adc	r26, r1
    2930:	66 1f       	adc	r22, r22
    2932:	82 9f       	mul	r24, r18
    2934:	22 27       	eor	r18, r18
    2936:	b0 0d       	add	r27, r0
    2938:	a1 1d       	adc	r26, r1
    293a:	62 1f       	adc	r22, r18
    293c:	73 9f       	mul	r23, r19
    293e:	b0 0d       	add	r27, r0
    2940:	a1 1d       	adc	r26, r1
    2942:	62 1f       	adc	r22, r18
    2944:	83 9f       	mul	r24, r19
    2946:	a0 0d       	add	r26, r0
    2948:	61 1d       	adc	r22, r1
    294a:	22 1f       	adc	r18, r18
    294c:	74 9f       	mul	r23, r20
    294e:	33 27       	eor	r19, r19
    2950:	a0 0d       	add	r26, r0
    2952:	61 1d       	adc	r22, r1
    2954:	23 1f       	adc	r18, r19
    2956:	84 9f       	mul	r24, r20
    2958:	60 0d       	add	r22, r0
    295a:	21 1d       	adc	r18, r1
    295c:	82 2f       	mov	r24, r18
    295e:	76 2f       	mov	r23, r22
    2960:	6a 2f       	mov	r22, r26
    2962:	11 24       	eor	r1, r1
    2964:	9f 57       	subi	r25, 0x7F	; 127
    2966:	50 40       	sbci	r21, 0x00	; 0
    2968:	8a f0       	brmi	.+34     	; 0x298c <__mulsf3_pse+0x84>
    296a:	e1 f0       	breq	.+56     	; 0x29a4 <__mulsf3_pse+0x9c>
    296c:	88 23       	and	r24, r24
    296e:	4a f0       	brmi	.+18     	; 0x2982 <__mulsf3_pse+0x7a>
    2970:	ee 0f       	add	r30, r30
    2972:	ff 1f       	adc	r31, r31
    2974:	bb 1f       	adc	r27, r27
    2976:	66 1f       	adc	r22, r22
    2978:	77 1f       	adc	r23, r23
    297a:	88 1f       	adc	r24, r24
    297c:	91 50       	subi	r25, 0x01	; 1
    297e:	50 40       	sbci	r21, 0x00	; 0
    2980:	a9 f7       	brne	.-22     	; 0x296c <__mulsf3_pse+0x64>
    2982:	9e 3f       	cpi	r25, 0xFE	; 254
    2984:	51 05       	cpc	r21, r1
    2986:	70 f0       	brcs	.+28     	; 0x29a4 <__mulsf3_pse+0x9c>
    2988:	5c cf       	rjmp	.-328    	; 0x2842 <__fp_inf>
    298a:	a6 cf       	rjmp	.-180    	; 0x28d8 <__fp_szero>
    298c:	5f 3f       	cpi	r21, 0xFF	; 255
    298e:	ec f3       	brlt	.-6      	; 0x298a <__mulsf3_pse+0x82>
    2990:	98 3e       	cpi	r25, 0xE8	; 232
    2992:	dc f3       	brlt	.-10     	; 0x298a <__mulsf3_pse+0x82>
    2994:	86 95       	lsr	r24
    2996:	77 95       	ror	r23
    2998:	67 95       	ror	r22
    299a:	b7 95       	ror	r27
    299c:	f7 95       	ror	r31
    299e:	e7 95       	ror	r30
    29a0:	9f 5f       	subi	r25, 0xFF	; 255
    29a2:	c1 f7       	brne	.-16     	; 0x2994 <__mulsf3_pse+0x8c>
    29a4:	fe 2b       	or	r31, r30
    29a6:	88 0f       	add	r24, r24
    29a8:	91 1d       	adc	r25, r1
    29aa:	96 95       	lsr	r25
    29ac:	87 95       	ror	r24
    29ae:	97 f9       	bld	r25, 7
    29b0:	08 95       	ret

000029b2 <__udivmodhi4>:
    29b2:	aa 1b       	sub	r26, r26
    29b4:	bb 1b       	sub	r27, r27
    29b6:	51 e1       	ldi	r21, 0x11	; 17
    29b8:	07 c0       	rjmp	.+14     	; 0x29c8 <__udivmodhi4_ep>

000029ba <__udivmodhi4_loop>:
    29ba:	aa 1f       	adc	r26, r26
    29bc:	bb 1f       	adc	r27, r27
    29be:	a6 17       	cp	r26, r22
    29c0:	b7 07       	cpc	r27, r23
    29c2:	10 f0       	brcs	.+4      	; 0x29c8 <__udivmodhi4_ep>
    29c4:	a6 1b       	sub	r26, r22
    29c6:	b7 0b       	sbc	r27, r23

000029c8 <__udivmodhi4_ep>:
    29c8:	88 1f       	adc	r24, r24
    29ca:	99 1f       	adc	r25, r25
    29cc:	5a 95       	dec	r21
    29ce:	a9 f7       	brne	.-22     	; 0x29ba <__udivmodhi4_loop>
    29d0:	80 95       	com	r24
    29d2:	90 95       	com	r25
    29d4:	bc 01       	movw	r22, r24
    29d6:	cd 01       	movw	r24, r26
    29d8:	08 95       	ret

000029da <__divmodhi4>:
    29da:	97 fb       	bst	r25, 7
    29dc:	09 2e       	mov	r0, r25
    29de:	07 26       	eor	r0, r23
    29e0:	0a d0       	rcall	.+20     	; 0x29f6 <__divmodhi4_neg1>
    29e2:	77 fd       	sbrc	r23, 7
    29e4:	04 d0       	rcall	.+8      	; 0x29ee <__divmodhi4_neg2>
    29e6:	e5 df       	rcall	.-54     	; 0x29b2 <__udivmodhi4>
    29e8:	06 d0       	rcall	.+12     	; 0x29f6 <__divmodhi4_neg1>
    29ea:	00 20       	and	r0, r0
    29ec:	1a f4       	brpl	.+6      	; 0x29f4 <__divmodhi4_exit>

000029ee <__divmodhi4_neg2>:
    29ee:	70 95       	com	r23
    29f0:	61 95       	neg	r22
    29f2:	7f 4f       	sbci	r23, 0xFF	; 255

000029f4 <__divmodhi4_exit>:
    29f4:	08 95       	ret

000029f6 <__divmodhi4_neg1>:
    29f6:	f6 f7       	brtc	.-4      	; 0x29f4 <__divmodhi4_exit>
    29f8:	90 95       	com	r25
    29fa:	81 95       	neg	r24
    29fc:	9f 4f       	sbci	r25, 0xFF	; 255
    29fe:	08 95       	ret

00002a00 <_exit>:
    2a00:	f8 94       	cli

00002a02 <__stop_program>:
    2a02:	ff cf       	rjmp	.-2      	; 0x2a02 <__stop_program>
