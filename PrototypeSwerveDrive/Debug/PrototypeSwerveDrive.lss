
PrototypeSwerveDrive.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000be  00800200  0000230e  000023a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000230e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000027  008002be  008002be  00002460  2**0
                  ALLOC
  3 .stab         00001c50  00000000  00000000  00002460  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000068a  00000000  00000000  000040b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  0000473a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000251  00000000  00000000  0000475a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000015ac  00000000  00000000  000049ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000462  00000000  00000000  00005f57  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001314  00000000  00000000  000063b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001d0  00000000  00000000  000076d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000096d  00000000  00000000  000078a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000116a  00000000  00000000  0000820d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 0000007c  00000000  00000000  00009377  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000c0  00000000  00000000  000093f3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__ctors_end>
       4:	0c 94 11 07 	jmp	0xe22	; 0xe22 <__vector_1>
       8:	0c 94 3c 07 	jmp	0xe78	; 0xe78 <__vector_2>
       c:	0c 94 67 07 	jmp	0xece	; 0xece <__vector_3>
      10:	0c 94 92 07 	jmp	0xf24	; 0xf24 <__vector_4>
      14:	0c 94 bd 07 	jmp	0xf7a	; 0xf7a <__vector_5>
      18:	0c 94 e8 07 	jmp	0xfd0	; 0xfd0 <__vector_6>
      1c:	0c 94 13 08 	jmp	0x1026	; 0x1026 <__vector_7>
      20:	0c 94 3e 08 	jmp	0x107c	; 0x107c <__vector_8>
      24:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      28:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      2c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      30:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      34:	0c 94 16 05 	jmp	0xa2c	; 0xa2c <__vector_13>
      38:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      3c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      40:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      44:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      48:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      4c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      50:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      54:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      58:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      5c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      60:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      64:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      68:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      6c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      70:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      74:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      78:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      7c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      80:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      84:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      88:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      8c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      90:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      94:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      98:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      9c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      a0:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      a4:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      a8:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      ac:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      b0:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      b4:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      b8:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      bc:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      c0:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      c4:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      c8:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      cc:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      d0:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      d4:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      d8:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      dc:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      e0:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>

000000e4 <__ctors_start>:
      e4:	56 0f       	add	r21, r22

000000e6 <__ctors_end>:
      e6:	11 24       	eor	r1, r1
      e8:	1f be       	out	0x3f, r1	; 63
      ea:	cf ef       	ldi	r28, 0xFF	; 255
      ec:	d1 e2       	ldi	r29, 0x21	; 33
      ee:	de bf       	out	0x3e, r29	; 62
      f0:	cd bf       	out	0x3d, r28	; 61
      f2:	00 e0       	ldi	r16, 0x00	; 0
      f4:	0c bf       	out	0x3c, r16	; 60

000000f6 <__do_copy_data>:
      f6:	12 e0       	ldi	r17, 0x02	; 2
      f8:	a0 e0       	ldi	r26, 0x00	; 0
      fa:	b2 e0       	ldi	r27, 0x02	; 2
      fc:	ee e0       	ldi	r30, 0x0E	; 14
      fe:	f3 e2       	ldi	r31, 0x23	; 35
     100:	00 e0       	ldi	r16, 0x00	; 0
     102:	0b bf       	out	0x3b, r16	; 59
     104:	02 c0       	rjmp	.+4      	; 0x10a <__do_copy_data+0x14>
     106:	07 90       	elpm	r0, Z+
     108:	0d 92       	st	X+, r0
     10a:	ae 3b       	cpi	r26, 0xBE	; 190
     10c:	b1 07       	cpc	r27, r17
     10e:	d9 f7       	brne	.-10     	; 0x106 <__do_copy_data+0x10>

00000110 <__do_clear_bss>:
     110:	12 e0       	ldi	r17, 0x02	; 2
     112:	ae eb       	ldi	r26, 0xBE	; 190
     114:	b2 e0       	ldi	r27, 0x02	; 2
     116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
     118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
     11a:	a5 3e       	cpi	r26, 0xE5	; 229
     11c:	b1 07       	cpc	r27, r17
     11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>

00000120 <__do_global_ctors>:
     120:	10 e0       	ldi	r17, 0x00	; 0
     122:	00 e0       	ldi	r16, 0x00	; 0
     124:	c6 ee       	ldi	r28, 0xE6	; 230
     126:	d0 e0       	ldi	r29, 0x00	; 0
     128:	40 e0       	ldi	r20, 0x00	; 0
     12a:	06 c0       	rjmp	.+12     	; 0x138 <__do_global_ctors+0x18>
     12c:	22 97       	sbiw	r28, 0x02	; 2
     12e:	41 09       	sbc	r20, r1
     130:	fe 01       	movw	r30, r28
     132:	4b bf       	out	0x3b, r20	; 59
     134:	0e 94 81 11 	call	0x2302	; 0x2302 <__tablejump_elpm__>
     138:	c4 3e       	cpi	r28, 0xE4	; 228
     13a:	d1 07       	cpc	r29, r17
     13c:	40 07       	cpc	r20, r16
     13e:	b1 f7       	brne	.-20     	; 0x12c <__do_global_ctors+0xc>
     140:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <main>
     144:	0c 94 85 11 	jmp	0x230a	; 0x230a <_exit>

00000148 <__bad_interrupt>:
     148:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000014c <_Z7pinModehh>:
//Functions:

void pinMode(uint8_t pInno,uint8_t mOde)
{
	int l;
  	if(mOde==0)
     14c:	66 23       	and	r22, r22
     14e:	09 f0       	breq	.+2      	; 0x152 <_Z7pinModehh+0x6>
     150:	b8 c0       	rjmp	.+368    	; 0x2c2 <_Z7pinModehh+0x176>
    {
    	switch(d[pInno]){
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	fc 01       	movw	r30, r24
     156:	e8 58       	subi	r30, 0x88	; 136
     158:	fd 4f       	sbci	r31, 0xFD	; 253
     15a:	20 81       	ld	r18, Z
     15c:	25 36       	cpi	r18, 0x65	; 101
     15e:	09 f4       	brne	.+2      	; 0x162 <_Z7pinModehh+0x16>
     160:	50 c0       	rjmp	.+160    	; 0x202 <_Z7pinModehh+0xb6>
     162:	26 36       	cpi	r18, 0x66	; 102
     164:	40 f4       	brcc	.+16     	; 0x176 <_Z7pinModehh+0x2a>
     166:	23 36       	cpi	r18, 0x63	; 99
     168:	41 f1       	breq	.+80     	; 0x1ba <_Z7pinModehh+0x6e>
     16a:	24 36       	cpi	r18, 0x64	; 100
     16c:	c0 f5       	brcc	.+112    	; 0x1de <_Z7pinModehh+0x92>
     16e:	22 36       	cpi	r18, 0x62	; 98
     170:	09 f0       	breq	.+2      	; 0x174 <_Z7pinModehh+0x28>
     172:	5e c1       	rjmp	.+700    	; 0x430 <_Z7pinModehh+0x2e4>
     174:	10 c0       	rjmp	.+32     	; 0x196 <_Z7pinModehh+0x4a>
     176:	28 36       	cpi	r18, 0x68	; 104
     178:	09 f4       	brne	.+2      	; 0x17c <_Z7pinModehh+0x30>
     17a:	67 c0       	rjmp	.+206    	; 0x24a <_Z7pinModehh+0xfe>
     17c:	29 36       	cpi	r18, 0x69	; 105
     17e:	20 f4       	brcc	.+8      	; 0x188 <_Z7pinModehh+0x3c>
     180:	27 36       	cpi	r18, 0x67	; 103
     182:	09 f0       	breq	.+2      	; 0x186 <_Z7pinModehh+0x3a>
     184:	55 c1       	rjmp	.+682    	; 0x430 <_Z7pinModehh+0x2e4>
     186:	4f c0       	rjmp	.+158    	; 0x226 <_Z7pinModehh+0xda>
     188:	2a 36       	cpi	r18, 0x6A	; 106
     18a:	09 f4       	brne	.+2      	; 0x18e <_Z7pinModehh+0x42>
     18c:	72 c0       	rjmp	.+228    	; 0x272 <_Z7pinModehh+0x126>
     18e:	2c 36       	cpi	r18, 0x6C	; 108
     190:	09 f0       	breq	.+2      	; 0x194 <_Z7pinModehh+0x48>
     192:	4e c1       	rjmp	.+668    	; 0x430 <_Z7pinModehh+0x2e4>
     194:	82 c0       	rjmp	.+260    	; 0x29a <_Z7pinModehh+0x14e>

          	case'b':
                  DDRB&=~(1<<c[pInno]);
     196:	24 b1       	in	r18, 0x04	; 4
     198:	fc 01       	movw	r30, r24
     19a:	ee 0f       	add	r30, r30
     19c:	ff 1f       	adc	r31, r31
     19e:	e0 50       	subi	r30, 0x00	; 0
     1a0:	fe 4f       	sbci	r31, 0xFE	; 254
     1a2:	81 e0       	ldi	r24, 0x01	; 1
     1a4:	90 e0       	ldi	r25, 0x00	; 0
     1a6:	00 80       	ld	r0, Z
     1a8:	02 c0       	rjmp	.+4      	; 0x1ae <_Z7pinModehh+0x62>
     1aa:	88 0f       	add	r24, r24
     1ac:	99 1f       	adc	r25, r25
     1ae:	0a 94       	dec	r0
     1b0:	e2 f7       	brpl	.-8      	; 0x1aa <_Z7pinModehh+0x5e>
     1b2:	80 95       	com	r24
     1b4:	82 23       	and	r24, r18
     1b6:	84 b9       	out	0x04, r24	; 4
		           break;
     1b8:	08 95       	ret
          	case'c':
                 DDRC&=~(1<<c[pInno]);
     1ba:	27 b1       	in	r18, 0x07	; 7
     1bc:	fc 01       	movw	r30, r24
     1be:	ee 0f       	add	r30, r30
     1c0:	ff 1f       	adc	r31, r31
     1c2:	e0 50       	subi	r30, 0x00	; 0
     1c4:	fe 4f       	sbci	r31, 0xFE	; 254
     1c6:	81 e0       	ldi	r24, 0x01	; 1
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	00 80       	ld	r0, Z
     1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <_Z7pinModehh+0x86>
     1ce:	88 0f       	add	r24, r24
     1d0:	99 1f       	adc	r25, r25
     1d2:	0a 94       	dec	r0
     1d4:	e2 f7       	brpl	.-8      	; 0x1ce <_Z7pinModehh+0x82>
     1d6:	80 95       	com	r24
     1d8:	82 23       	and	r24, r18
     1da:	87 b9       	out	0x07, r24	; 7
		          break;
     1dc:	08 95       	ret
          	case'd':
                 DDRD&=~(1<<c[pInno]);
     1de:	2a b1       	in	r18, 0x0a	; 10
     1e0:	fc 01       	movw	r30, r24
     1e2:	ee 0f       	add	r30, r30
     1e4:	ff 1f       	adc	r31, r31
     1e6:	e0 50       	subi	r30, 0x00	; 0
     1e8:	fe 4f       	sbci	r31, 0xFE	; 254
     1ea:	81 e0       	ldi	r24, 0x01	; 1
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	00 80       	ld	r0, Z
     1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <_Z7pinModehh+0xaa>
     1f2:	88 0f       	add	r24, r24
     1f4:	99 1f       	adc	r25, r25
     1f6:	0a 94       	dec	r0
     1f8:	e2 f7       	brpl	.-8      	; 0x1f2 <_Z7pinModehh+0xa6>
     1fa:	80 95       	com	r24
     1fc:	82 23       	and	r24, r18
     1fe:	8a b9       	out	0x0a, r24	; 10
		          break;
     200:	08 95       	ret
	      	case'e':
                  DDRE&=~(1<<c[pInno]);
     202:	2d b1       	in	r18, 0x0d	; 13
     204:	fc 01       	movw	r30, r24
     206:	ee 0f       	add	r30, r30
     208:	ff 1f       	adc	r31, r31
     20a:	e0 50       	subi	r30, 0x00	; 0
     20c:	fe 4f       	sbci	r31, 0xFE	; 254
     20e:	81 e0       	ldi	r24, 0x01	; 1
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	00 80       	ld	r0, Z
     214:	02 c0       	rjmp	.+4      	; 0x21a <_Z7pinModehh+0xce>
     216:	88 0f       	add	r24, r24
     218:	99 1f       	adc	r25, r25
     21a:	0a 94       	dec	r0
     21c:	e2 f7       	brpl	.-8      	; 0x216 <_Z7pinModehh+0xca>
     21e:	80 95       	com	r24
     220:	82 23       	and	r24, r18
     222:	8d b9       	out	0x0d, r24	; 13
		           break;
     224:	08 95       	ret
		    case'g':
                  DDRG&=~(1<<c[pInno]);
     226:	23 b3       	in	r18, 0x13	; 19
     228:	fc 01       	movw	r30, r24
     22a:	ee 0f       	add	r30, r30
     22c:	ff 1f       	adc	r31, r31
     22e:	e0 50       	subi	r30, 0x00	; 0
     230:	fe 4f       	sbci	r31, 0xFE	; 254
     232:	81 e0       	ldi	r24, 0x01	; 1
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	00 80       	ld	r0, Z
     238:	02 c0       	rjmp	.+4      	; 0x23e <_Z7pinModehh+0xf2>
     23a:	88 0f       	add	r24, r24
     23c:	99 1f       	adc	r25, r25
     23e:	0a 94       	dec	r0
     240:	e2 f7       	brpl	.-8      	; 0x23a <_Z7pinModehh+0xee>
     242:	80 95       	com	r24
     244:	82 23       	and	r24, r18
     246:	83 bb       	out	0x13, r24	; 19
		           break;
     248:	08 95       	ret
			case'h':
                  DDRH&=~(1<<c[pInno]);
     24a:	e1 e0       	ldi	r30, 0x01	; 1
     24c:	f1 e0       	ldi	r31, 0x01	; 1
     24e:	20 81       	ld	r18, Z
     250:	dc 01       	movw	r26, r24
     252:	aa 0f       	add	r26, r26
     254:	bb 1f       	adc	r27, r27
     256:	a0 50       	subi	r26, 0x00	; 0
     258:	be 4f       	sbci	r27, 0xFE	; 254
     25a:	81 e0       	ldi	r24, 0x01	; 1
     25c:	90 e0       	ldi	r25, 0x00	; 0
     25e:	0c 90       	ld	r0, X
     260:	02 c0       	rjmp	.+4      	; 0x266 <_Z7pinModehh+0x11a>
     262:	88 0f       	add	r24, r24
     264:	99 1f       	adc	r25, r25
     266:	0a 94       	dec	r0
     268:	e2 f7       	brpl	.-8      	; 0x262 <_Z7pinModehh+0x116>
     26a:	80 95       	com	r24
     26c:	82 23       	and	r24, r18
     26e:	80 83       	st	Z, r24
				  break;
     270:	08 95       	ret
		    case'j':
                  DDRJ&=~(1<<c[pInno]);
     272:	e4 e0       	ldi	r30, 0x04	; 4
     274:	f1 e0       	ldi	r31, 0x01	; 1
     276:	20 81       	ld	r18, Z
     278:	dc 01       	movw	r26, r24
     27a:	aa 0f       	add	r26, r26
     27c:	bb 1f       	adc	r27, r27
     27e:	a0 50       	subi	r26, 0x00	; 0
     280:	be 4f       	sbci	r27, 0xFE	; 254
     282:	81 e0       	ldi	r24, 0x01	; 1
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	0c 90       	ld	r0, X
     288:	02 c0       	rjmp	.+4      	; 0x28e <_Z7pinModehh+0x142>
     28a:	88 0f       	add	r24, r24
     28c:	99 1f       	adc	r25, r25
     28e:	0a 94       	dec	r0
     290:	e2 f7       	brpl	.-8      	; 0x28a <_Z7pinModehh+0x13e>
     292:	80 95       	com	r24
     294:	82 23       	and	r24, r18
     296:	80 83       	st	Z, r24
		          break;
     298:	08 95       	ret
			case'l':
                  DDRL&=~(1<<c[pInno]);
     29a:	ea e0       	ldi	r30, 0x0A	; 10
     29c:	f1 e0       	ldi	r31, 0x01	; 1
     29e:	20 81       	ld	r18, Z
     2a0:	dc 01       	movw	r26, r24
     2a2:	aa 0f       	add	r26, r26
     2a4:	bb 1f       	adc	r27, r27
     2a6:	a0 50       	subi	r26, 0x00	; 0
     2a8:	be 4f       	sbci	r27, 0xFE	; 254
     2aa:	81 e0       	ldi	r24, 0x01	; 1
     2ac:	90 e0       	ldi	r25, 0x00	; 0
     2ae:	0c 90       	ld	r0, X
     2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <_Z7pinModehh+0x16a>
     2b2:	88 0f       	add	r24, r24
     2b4:	99 1f       	adc	r25, r25
     2b6:	0a 94       	dec	r0
     2b8:	e2 f7       	brpl	.-8      	; 0x2b2 <_Z7pinModehh+0x166>
     2ba:	80 95       	com	r24
     2bc:	82 23       	and	r24, r18
     2be:	80 83       	st	Z, r24
		          break;
     2c0:	08 95       	ret
     	}
	}
	else{
			switch(d[pInno])
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	fc 01       	movw	r30, r24
     2c6:	e8 58       	subi	r30, 0x88	; 136
     2c8:	fd 4f       	sbci	r31, 0xFD	; 253
     2ca:	20 81       	ld	r18, Z
     2cc:	25 36       	cpi	r18, 0x65	; 101
     2ce:	09 f4       	brne	.+2      	; 0x2d2 <_Z7pinModehh+0x186>
     2d0:	50 c0       	rjmp	.+160    	; 0x372 <_Z7pinModehh+0x226>
     2d2:	26 36       	cpi	r18, 0x66	; 102
     2d4:	40 f4       	brcc	.+16     	; 0x2e6 <_Z7pinModehh+0x19a>
     2d6:	23 36       	cpi	r18, 0x63	; 99
     2d8:	41 f1       	breq	.+80     	; 0x32a <_Z7pinModehh+0x1de>
     2da:	24 36       	cpi	r18, 0x64	; 100
     2dc:	c0 f5       	brcc	.+112    	; 0x34e <_Z7pinModehh+0x202>
     2de:	22 36       	cpi	r18, 0x62	; 98
     2e0:	09 f0       	breq	.+2      	; 0x2e4 <_Z7pinModehh+0x198>
     2e2:	a6 c0       	rjmp	.+332    	; 0x430 <_Z7pinModehh+0x2e4>
     2e4:	10 c0       	rjmp	.+32     	; 0x306 <_Z7pinModehh+0x1ba>
     2e6:	28 36       	cpi	r18, 0x68	; 104
     2e8:	09 f4       	brne	.+2      	; 0x2ec <_Z7pinModehh+0x1a0>
     2ea:	67 c0       	rjmp	.+206    	; 0x3ba <_Z7pinModehh+0x26e>
     2ec:	29 36       	cpi	r18, 0x69	; 105
     2ee:	20 f4       	brcc	.+8      	; 0x2f8 <_Z7pinModehh+0x1ac>
     2f0:	27 36       	cpi	r18, 0x67	; 103
     2f2:	09 f0       	breq	.+2      	; 0x2f6 <_Z7pinModehh+0x1aa>
     2f4:	9d c0       	rjmp	.+314    	; 0x430 <_Z7pinModehh+0x2e4>
     2f6:	4f c0       	rjmp	.+158    	; 0x396 <_Z7pinModehh+0x24a>
     2f8:	2a 36       	cpi	r18, 0x6A	; 106
     2fa:	09 f4       	brne	.+2      	; 0x2fe <_Z7pinModehh+0x1b2>
     2fc:	72 c0       	rjmp	.+228    	; 0x3e2 <_Z7pinModehh+0x296>
     2fe:	2c 36       	cpi	r18, 0x6C	; 108
     300:	09 f0       	breq	.+2      	; 0x304 <_Z7pinModehh+0x1b8>
     302:	96 c0       	rjmp	.+300    	; 0x430 <_Z7pinModehh+0x2e4>
     304:	82 c0       	rjmp	.+260    	; 0x40a <_Z7pinModehh+0x2be>
         	{

	        	case'b':
	            	DDRB|=(1<<c[pInno]);
     306:	44 b1       	in	r20, 0x04	; 4
     308:	fc 01       	movw	r30, r24
     30a:	ee 0f       	add	r30, r30
     30c:	ff 1f       	adc	r31, r31
     30e:	e0 50       	subi	r30, 0x00	; 0
     310:	fe 4f       	sbci	r31, 0xFE	; 254
     312:	21 e0       	ldi	r18, 0x01	; 1
     314:	30 e0       	ldi	r19, 0x00	; 0
     316:	c9 01       	movw	r24, r18
     318:	00 80       	ld	r0, Z
     31a:	02 c0       	rjmp	.+4      	; 0x320 <_Z7pinModehh+0x1d4>
     31c:	88 0f       	add	r24, r24
     31e:	99 1f       	adc	r25, r25
     320:	0a 94       	dec	r0
     322:	e2 f7       	brpl	.-8      	; 0x31c <_Z7pinModehh+0x1d0>
     324:	84 2b       	or	r24, r20
     326:	84 b9       	out	0x04, r24	; 4
			    	break;
     328:	08 95       	ret
	          	case'c':
	                DDRC|=(1<<c[pInno]);
     32a:	47 b1       	in	r20, 0x07	; 7
     32c:	fc 01       	movw	r30, r24
     32e:	ee 0f       	add	r30, r30
     330:	ff 1f       	adc	r31, r31
     332:	e0 50       	subi	r30, 0x00	; 0
     334:	fe 4f       	sbci	r31, 0xFE	; 254
     336:	21 e0       	ldi	r18, 0x01	; 1
     338:	30 e0       	ldi	r19, 0x00	; 0
     33a:	c9 01       	movw	r24, r18
     33c:	00 80       	ld	r0, Z
     33e:	02 c0       	rjmp	.+4      	; 0x344 <_Z7pinModehh+0x1f8>
     340:	88 0f       	add	r24, r24
     342:	99 1f       	adc	r25, r25
     344:	0a 94       	dec	r0
     346:	e2 f7       	brpl	.-8      	; 0x340 <_Z7pinModehh+0x1f4>
     348:	84 2b       	or	r24, r20
     34a:	87 b9       	out	0x07, r24	; 7
			        break;
     34c:	08 95       	ret
	          	case'd':
	                DDRD|=(1<<c[pInno]);
     34e:	4a b1       	in	r20, 0x0a	; 10
     350:	fc 01       	movw	r30, r24
     352:	ee 0f       	add	r30, r30
     354:	ff 1f       	adc	r31, r31
     356:	e0 50       	subi	r30, 0x00	; 0
     358:	fe 4f       	sbci	r31, 0xFE	; 254
     35a:	21 e0       	ldi	r18, 0x01	; 1
     35c:	30 e0       	ldi	r19, 0x00	; 0
     35e:	c9 01       	movw	r24, r18
     360:	00 80       	ld	r0, Z
     362:	02 c0       	rjmp	.+4      	; 0x368 <_Z7pinModehh+0x21c>
     364:	88 0f       	add	r24, r24
     366:	99 1f       	adc	r25, r25
     368:	0a 94       	dec	r0
     36a:	e2 f7       	brpl	.-8      	; 0x364 <_Z7pinModehh+0x218>
     36c:	84 2b       	or	r24, r20
     36e:	8a b9       	out	0x0a, r24	; 10
			        break;
     370:	08 95       	ret
		      	case'e':
	                DDRE|=(1<<c[pInno]);
     372:	4d b1       	in	r20, 0x0d	; 13
     374:	fc 01       	movw	r30, r24
     376:	ee 0f       	add	r30, r30
     378:	ff 1f       	adc	r31, r31
     37a:	e0 50       	subi	r30, 0x00	; 0
     37c:	fe 4f       	sbci	r31, 0xFE	; 254
     37e:	21 e0       	ldi	r18, 0x01	; 1
     380:	30 e0       	ldi	r19, 0x00	; 0
     382:	c9 01       	movw	r24, r18
     384:	00 80       	ld	r0, Z
     386:	02 c0       	rjmp	.+4      	; 0x38c <_Z7pinModehh+0x240>
     388:	88 0f       	add	r24, r24
     38a:	99 1f       	adc	r25, r25
     38c:	0a 94       	dec	r0
     38e:	e2 f7       	brpl	.-8      	; 0x388 <_Z7pinModehh+0x23c>
     390:	84 2b       	or	r24, r20
     392:	8d b9       	out	0x0d, r24	; 13
			        break;
     394:	08 95       	ret
			    case'g':
	                DDRG|=(1<<c[pInno]);
     396:	43 b3       	in	r20, 0x13	; 19
     398:	fc 01       	movw	r30, r24
     39a:	ee 0f       	add	r30, r30
     39c:	ff 1f       	adc	r31, r31
     39e:	e0 50       	subi	r30, 0x00	; 0
     3a0:	fe 4f       	sbci	r31, 0xFE	; 254
     3a2:	21 e0       	ldi	r18, 0x01	; 1
     3a4:	30 e0       	ldi	r19, 0x00	; 0
     3a6:	c9 01       	movw	r24, r18
     3a8:	00 80       	ld	r0, Z
     3aa:	02 c0       	rjmp	.+4      	; 0x3b0 <_Z7pinModehh+0x264>
     3ac:	88 0f       	add	r24, r24
     3ae:	99 1f       	adc	r25, r25
     3b0:	0a 94       	dec	r0
     3b2:	e2 f7       	brpl	.-8      	; 0x3ac <_Z7pinModehh+0x260>
     3b4:	84 2b       	or	r24, r20
     3b6:	83 bb       	out	0x13, r24	; 19
			        break;
     3b8:	08 95       	ret
			 	case'h':
	                DDRH|=(1<<c[pInno]);
     3ba:	e1 e0       	ldi	r30, 0x01	; 1
     3bc:	f1 e0       	ldi	r31, 0x01	; 1
     3be:	40 81       	ld	r20, Z
     3c0:	dc 01       	movw	r26, r24
     3c2:	aa 0f       	add	r26, r26
     3c4:	bb 1f       	adc	r27, r27
     3c6:	a0 50       	subi	r26, 0x00	; 0
     3c8:	be 4f       	sbci	r27, 0xFE	; 254
     3ca:	21 e0       	ldi	r18, 0x01	; 1
     3cc:	30 e0       	ldi	r19, 0x00	; 0
     3ce:	c9 01       	movw	r24, r18
     3d0:	0c 90       	ld	r0, X
     3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <_Z7pinModehh+0x28c>
     3d4:	88 0f       	add	r24, r24
     3d6:	99 1f       	adc	r25, r25
     3d8:	0a 94       	dec	r0
     3da:	e2 f7       	brpl	.-8      	; 0x3d4 <_Z7pinModehh+0x288>
     3dc:	84 2b       	or	r24, r20
     3de:	80 83       	st	Z, r24
			        break;
     3e0:	08 95       	ret
			    case'j':
	                DDRJ|=(1<<c[pInno]);
     3e2:	e4 e0       	ldi	r30, 0x04	; 4
     3e4:	f1 e0       	ldi	r31, 0x01	; 1
     3e6:	40 81       	ld	r20, Z
     3e8:	dc 01       	movw	r26, r24
     3ea:	aa 0f       	add	r26, r26
     3ec:	bb 1f       	adc	r27, r27
     3ee:	a0 50       	subi	r26, 0x00	; 0
     3f0:	be 4f       	sbci	r27, 0xFE	; 254
     3f2:	21 e0       	ldi	r18, 0x01	; 1
     3f4:	30 e0       	ldi	r19, 0x00	; 0
     3f6:	c9 01       	movw	r24, r18
     3f8:	0c 90       	ld	r0, X
     3fa:	02 c0       	rjmp	.+4      	; 0x400 <_Z7pinModehh+0x2b4>
     3fc:	88 0f       	add	r24, r24
     3fe:	99 1f       	adc	r25, r25
     400:	0a 94       	dec	r0
     402:	e2 f7       	brpl	.-8      	; 0x3fc <_Z7pinModehh+0x2b0>
     404:	84 2b       	or	r24, r20
     406:	80 83       	st	Z, r24
			        break;
     408:	08 95       	ret
				case'l':
	                DDRL|=(1<<c[pInno]);
     40a:	ea e0       	ldi	r30, 0x0A	; 10
     40c:	f1 e0       	ldi	r31, 0x01	; 1
     40e:	40 81       	ld	r20, Z
     410:	dc 01       	movw	r26, r24
     412:	aa 0f       	add	r26, r26
     414:	bb 1f       	adc	r27, r27
     416:	a0 50       	subi	r26, 0x00	; 0
     418:	be 4f       	sbci	r27, 0xFE	; 254
     41a:	21 e0       	ldi	r18, 0x01	; 1
     41c:	30 e0       	ldi	r19, 0x00	; 0
     41e:	c9 01       	movw	r24, r18
     420:	0c 90       	ld	r0, X
     422:	02 c0       	rjmp	.+4      	; 0x428 <_Z7pinModehh+0x2dc>
     424:	88 0f       	add	r24, r24
     426:	99 1f       	adc	r25, r25
     428:	0a 94       	dec	r0
     42a:	e2 f7       	brpl	.-8      	; 0x424 <_Z7pinModehh+0x2d8>
     42c:	84 2b       	or	r24, r20
     42e:	80 83       	st	Z, r24
     430:	08 95       	ret

00000432 <_Z12digitalWritehh>:
	}
}

void digitalWrite (uint8_t pInno ,uint8_t mOde)
{
   if(mOde==0)
     432:	66 23       	and	r22, r22
     434:	09 f0       	breq	.+2      	; 0x438 <_Z12digitalWritehh+0x6>
     436:	b8 c0       	rjmp	.+368    	; 0x5a8 <_Z12digitalWritehh+0x176>
        { switch(d[pInno])
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	fc 01       	movw	r30, r24
     43c:	e8 58       	subi	r30, 0x88	; 136
     43e:	fd 4f       	sbci	r31, 0xFD	; 253
     440:	20 81       	ld	r18, Z
     442:	25 36       	cpi	r18, 0x65	; 101
     444:	09 f4       	brne	.+2      	; 0x448 <_Z12digitalWritehh+0x16>
     446:	50 c0       	rjmp	.+160    	; 0x4e8 <_Z12digitalWritehh+0xb6>
     448:	26 36       	cpi	r18, 0x66	; 102
     44a:	40 f4       	brcc	.+16     	; 0x45c <_Z12digitalWritehh+0x2a>
     44c:	23 36       	cpi	r18, 0x63	; 99
     44e:	41 f1       	breq	.+80     	; 0x4a0 <_Z12digitalWritehh+0x6e>
     450:	24 36       	cpi	r18, 0x64	; 100
     452:	c0 f5       	brcc	.+112    	; 0x4c4 <_Z12digitalWritehh+0x92>
     454:	22 36       	cpi	r18, 0x62	; 98
     456:	09 f0       	breq	.+2      	; 0x45a <_Z12digitalWritehh+0x28>
     458:	5e c1       	rjmp	.+700    	; 0x716 <_Z12digitalWritehh+0x2e4>
     45a:	10 c0       	rjmp	.+32     	; 0x47c <_Z12digitalWritehh+0x4a>
     45c:	28 36       	cpi	r18, 0x68	; 104
     45e:	09 f4       	brne	.+2      	; 0x462 <_Z12digitalWritehh+0x30>
     460:	67 c0       	rjmp	.+206    	; 0x530 <_Z12digitalWritehh+0xfe>
     462:	29 36       	cpi	r18, 0x69	; 105
     464:	20 f4       	brcc	.+8      	; 0x46e <_Z12digitalWritehh+0x3c>
     466:	27 36       	cpi	r18, 0x67	; 103
     468:	09 f0       	breq	.+2      	; 0x46c <_Z12digitalWritehh+0x3a>
     46a:	55 c1       	rjmp	.+682    	; 0x716 <_Z12digitalWritehh+0x2e4>
     46c:	4f c0       	rjmp	.+158    	; 0x50c <_Z12digitalWritehh+0xda>
     46e:	2a 36       	cpi	r18, 0x6A	; 106
     470:	09 f4       	brne	.+2      	; 0x474 <_Z12digitalWritehh+0x42>
     472:	72 c0       	rjmp	.+228    	; 0x558 <_Z12digitalWritehh+0x126>
     474:	2c 36       	cpi	r18, 0x6C	; 108
     476:	09 f0       	breq	.+2      	; 0x47a <_Z12digitalWritehh+0x48>
     478:	4e c1       	rjmp	.+668    	; 0x716 <_Z12digitalWritehh+0x2e4>
     47a:	82 c0       	rjmp	.+260    	; 0x580 <_Z12digitalWritehh+0x14e>
         {

	          case'b':
	                  PORTB&=~(1<<c[pInno]);
     47c:	25 b1       	in	r18, 0x05	; 5
     47e:	fc 01       	movw	r30, r24
     480:	ee 0f       	add	r30, r30
     482:	ff 1f       	adc	r31, r31
     484:	e0 50       	subi	r30, 0x00	; 0
     486:	fe 4f       	sbci	r31, 0xFE	; 254
     488:	81 e0       	ldi	r24, 0x01	; 1
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	00 80       	ld	r0, Z
     48e:	02 c0       	rjmp	.+4      	; 0x494 <_Z12digitalWritehh+0x62>
     490:	88 0f       	add	r24, r24
     492:	99 1f       	adc	r25, r25
     494:	0a 94       	dec	r0
     496:	e2 f7       	brpl	.-8      	; 0x490 <_Z12digitalWritehh+0x5e>
     498:	80 95       	com	r24
     49a:	82 23       	and	r24, r18
     49c:	85 b9       	out	0x05, r24	; 5
			           break;
     49e:	08 95       	ret
	          case'c':
	                 PORTB&=~(1<<c[pInno]);
     4a0:	25 b1       	in	r18, 0x05	; 5
     4a2:	fc 01       	movw	r30, r24
     4a4:	ee 0f       	add	r30, r30
     4a6:	ff 1f       	adc	r31, r31
     4a8:	e0 50       	subi	r30, 0x00	; 0
     4aa:	fe 4f       	sbci	r31, 0xFE	; 254
     4ac:	81 e0       	ldi	r24, 0x01	; 1
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	00 80       	ld	r0, Z
     4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <_Z12digitalWritehh+0x86>
     4b4:	88 0f       	add	r24, r24
     4b6:	99 1f       	adc	r25, r25
     4b8:	0a 94       	dec	r0
     4ba:	e2 f7       	brpl	.-8      	; 0x4b4 <_Z12digitalWritehh+0x82>
     4bc:	80 95       	com	r24
     4be:	82 23       	and	r24, r18
     4c0:	85 b9       	out	0x05, r24	; 5
			          break;
     4c2:	08 95       	ret
	          case'd':
	                 PORTD&=~(1<<c[pInno]);
     4c4:	2b b1       	in	r18, 0x0b	; 11
     4c6:	fc 01       	movw	r30, r24
     4c8:	ee 0f       	add	r30, r30
     4ca:	ff 1f       	adc	r31, r31
     4cc:	e0 50       	subi	r30, 0x00	; 0
     4ce:	fe 4f       	sbci	r31, 0xFE	; 254
     4d0:	81 e0       	ldi	r24, 0x01	; 1
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	00 80       	ld	r0, Z
     4d6:	02 c0       	rjmp	.+4      	; 0x4dc <_Z12digitalWritehh+0xaa>
     4d8:	88 0f       	add	r24, r24
     4da:	99 1f       	adc	r25, r25
     4dc:	0a 94       	dec	r0
     4de:	e2 f7       	brpl	.-8      	; 0x4d8 <_Z12digitalWritehh+0xa6>
     4e0:	80 95       	com	r24
     4e2:	82 23       	and	r24, r18
     4e4:	8b b9       	out	0x0b, r24	; 11
			          break;
     4e6:	08 95       	ret

		      case'e':
	                  PORTE&=~(1<<c[pInno]);
     4e8:	2e b1       	in	r18, 0x0e	; 14
     4ea:	fc 01       	movw	r30, r24
     4ec:	ee 0f       	add	r30, r30
     4ee:	ff 1f       	adc	r31, r31
     4f0:	e0 50       	subi	r30, 0x00	; 0
     4f2:	fe 4f       	sbci	r31, 0xFE	; 254
     4f4:	81 e0       	ldi	r24, 0x01	; 1
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	00 80       	ld	r0, Z
     4fa:	02 c0       	rjmp	.+4      	; 0x500 <_Z12digitalWritehh+0xce>
     4fc:	88 0f       	add	r24, r24
     4fe:	99 1f       	adc	r25, r25
     500:	0a 94       	dec	r0
     502:	e2 f7       	brpl	.-8      	; 0x4fc <_Z12digitalWritehh+0xca>
     504:	80 95       	com	r24
     506:	82 23       	and	r24, r18
     508:	8e b9       	out	0x0e, r24	; 14
			           break;
     50a:	08 95       	ret

			     case'g':
	                  PORTG&=~(1<<c[pInno]);
     50c:	24 b3       	in	r18, 0x14	; 20
     50e:	fc 01       	movw	r30, r24
     510:	ee 0f       	add	r30, r30
     512:	ff 1f       	adc	r31, r31
     514:	e0 50       	subi	r30, 0x00	; 0
     516:	fe 4f       	sbci	r31, 0xFE	; 254
     518:	81 e0       	ldi	r24, 0x01	; 1
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	00 80       	ld	r0, Z
     51e:	02 c0       	rjmp	.+4      	; 0x524 <_Z12digitalWritehh+0xf2>
     520:	88 0f       	add	r24, r24
     522:	99 1f       	adc	r25, r25
     524:	0a 94       	dec	r0
     526:	e2 f7       	brpl	.-8      	; 0x520 <_Z12digitalWritehh+0xee>
     528:	80 95       	com	r24
     52a:	82 23       	and	r24, r18
     52c:	84 bb       	out	0x14, r24	; 20
			           break;
     52e:	08 95       	ret
			 case'h':
	                  PORTH&=~(1<<c[pInno]);
     530:	e2 e0       	ldi	r30, 0x02	; 2
     532:	f1 e0       	ldi	r31, 0x01	; 1
     534:	20 81       	ld	r18, Z
     536:	dc 01       	movw	r26, r24
     538:	aa 0f       	add	r26, r26
     53a:	bb 1f       	adc	r27, r27
     53c:	a0 50       	subi	r26, 0x00	; 0
     53e:	be 4f       	sbci	r27, 0xFE	; 254
     540:	81 e0       	ldi	r24, 0x01	; 1
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	0c 90       	ld	r0, X
     546:	02 c0       	rjmp	.+4      	; 0x54c <_Z12digitalWritehh+0x11a>
     548:	88 0f       	add	r24, r24
     54a:	99 1f       	adc	r25, r25
     54c:	0a 94       	dec	r0
     54e:	e2 f7       	brpl	.-8      	; 0x548 <_Z12digitalWritehh+0x116>
     550:	80 95       	com	r24
     552:	82 23       	and	r24, r18
     554:	80 83       	st	Z, r24
			           break;
     556:	08 95       	ret

			     case'j':
	                  PORTJ&=~(1<<c[pInno]);
     558:	e5 e0       	ldi	r30, 0x05	; 5
     55a:	f1 e0       	ldi	r31, 0x01	; 1
     55c:	20 81       	ld	r18, Z
     55e:	dc 01       	movw	r26, r24
     560:	aa 0f       	add	r26, r26
     562:	bb 1f       	adc	r27, r27
     564:	a0 50       	subi	r26, 0x00	; 0
     566:	be 4f       	sbci	r27, 0xFE	; 254
     568:	81 e0       	ldi	r24, 0x01	; 1
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	0c 90       	ld	r0, X
     56e:	02 c0       	rjmp	.+4      	; 0x574 <_Z12digitalWritehh+0x142>
     570:	88 0f       	add	r24, r24
     572:	99 1f       	adc	r25, r25
     574:	0a 94       	dec	r0
     576:	e2 f7       	brpl	.-8      	; 0x570 <_Z12digitalWritehh+0x13e>
     578:	80 95       	com	r24
     57a:	82 23       	and	r24, r18
     57c:	80 83       	st	Z, r24
			           break;
     57e:	08 95       	ret
				     case'l':
	                  PORTL&=~(1<<c[pInno]);
     580:	eb e0       	ldi	r30, 0x0B	; 11
     582:	f1 e0       	ldi	r31, 0x01	; 1
     584:	20 81       	ld	r18, Z
     586:	dc 01       	movw	r26, r24
     588:	aa 0f       	add	r26, r26
     58a:	bb 1f       	adc	r27, r27
     58c:	a0 50       	subi	r26, 0x00	; 0
     58e:	be 4f       	sbci	r27, 0xFE	; 254
     590:	81 e0       	ldi	r24, 0x01	; 1
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	0c 90       	ld	r0, X
     596:	02 c0       	rjmp	.+4      	; 0x59c <_Z12digitalWritehh+0x16a>
     598:	88 0f       	add	r24, r24
     59a:	99 1f       	adc	r25, r25
     59c:	0a 94       	dec	r0
     59e:	e2 f7       	brpl	.-8      	; 0x598 <_Z12digitalWritehh+0x166>
     5a0:	80 95       	com	r24
     5a2:	82 23       	and	r24, r18
     5a4:	80 83       	st	Z, r24
			           break;
     5a6:	08 95       	ret
	     }  }
	else{          switch(d[pInno])
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	fc 01       	movw	r30, r24
     5ac:	e8 58       	subi	r30, 0x88	; 136
     5ae:	fd 4f       	sbci	r31, 0xFD	; 253
     5b0:	20 81       	ld	r18, Z
     5b2:	25 36       	cpi	r18, 0x65	; 101
     5b4:	09 f4       	brne	.+2      	; 0x5b8 <_Z12digitalWritehh+0x186>
     5b6:	50 c0       	rjmp	.+160    	; 0x658 <_Z12digitalWritehh+0x226>
     5b8:	26 36       	cpi	r18, 0x66	; 102
     5ba:	40 f4       	brcc	.+16     	; 0x5cc <_Z12digitalWritehh+0x19a>
     5bc:	23 36       	cpi	r18, 0x63	; 99
     5be:	41 f1       	breq	.+80     	; 0x610 <_Z12digitalWritehh+0x1de>
     5c0:	24 36       	cpi	r18, 0x64	; 100
     5c2:	c0 f5       	brcc	.+112    	; 0x634 <_Z12digitalWritehh+0x202>
     5c4:	22 36       	cpi	r18, 0x62	; 98
     5c6:	09 f0       	breq	.+2      	; 0x5ca <_Z12digitalWritehh+0x198>
     5c8:	a6 c0       	rjmp	.+332    	; 0x716 <_Z12digitalWritehh+0x2e4>
     5ca:	10 c0       	rjmp	.+32     	; 0x5ec <_Z12digitalWritehh+0x1ba>
     5cc:	28 36       	cpi	r18, 0x68	; 104
     5ce:	09 f4       	brne	.+2      	; 0x5d2 <_Z12digitalWritehh+0x1a0>
     5d0:	67 c0       	rjmp	.+206    	; 0x6a0 <_Z12digitalWritehh+0x26e>
     5d2:	29 36       	cpi	r18, 0x69	; 105
     5d4:	20 f4       	brcc	.+8      	; 0x5de <_Z12digitalWritehh+0x1ac>
     5d6:	27 36       	cpi	r18, 0x67	; 103
     5d8:	09 f0       	breq	.+2      	; 0x5dc <_Z12digitalWritehh+0x1aa>
     5da:	9d c0       	rjmp	.+314    	; 0x716 <_Z12digitalWritehh+0x2e4>
     5dc:	4f c0       	rjmp	.+158    	; 0x67c <_Z12digitalWritehh+0x24a>
     5de:	2a 36       	cpi	r18, 0x6A	; 106
     5e0:	09 f4       	brne	.+2      	; 0x5e4 <_Z12digitalWritehh+0x1b2>
     5e2:	72 c0       	rjmp	.+228    	; 0x6c8 <_Z12digitalWritehh+0x296>
     5e4:	2c 36       	cpi	r18, 0x6C	; 108
     5e6:	09 f0       	breq	.+2      	; 0x5ea <_Z12digitalWritehh+0x1b8>
     5e8:	96 c0       	rjmp	.+300    	; 0x716 <_Z12digitalWritehh+0x2e4>
     5ea:	82 c0       	rjmp	.+260    	; 0x6f0 <_Z12digitalWritehh+0x2be>
         {

	          case'b':
	                 PORTB|=(1<<c[pInno]);
     5ec:	45 b1       	in	r20, 0x05	; 5
     5ee:	fc 01       	movw	r30, r24
     5f0:	ee 0f       	add	r30, r30
     5f2:	ff 1f       	adc	r31, r31
     5f4:	e0 50       	subi	r30, 0x00	; 0
     5f6:	fe 4f       	sbci	r31, 0xFE	; 254
     5f8:	21 e0       	ldi	r18, 0x01	; 1
     5fa:	30 e0       	ldi	r19, 0x00	; 0
     5fc:	c9 01       	movw	r24, r18
     5fe:	00 80       	ld	r0, Z
     600:	02 c0       	rjmp	.+4      	; 0x606 <_Z12digitalWritehh+0x1d4>
     602:	88 0f       	add	r24, r24
     604:	99 1f       	adc	r25, r25
     606:	0a 94       	dec	r0
     608:	e2 f7       	brpl	.-8      	; 0x602 <_Z12digitalWritehh+0x1d0>
     60a:	84 2b       	or	r24, r20
     60c:	85 b9       	out	0x05, r24	; 5
			           break;
     60e:	08 95       	ret
	          case'c':
	                 PORTC|=(1<<c[pInno]);
     610:	48 b1       	in	r20, 0x08	; 8
     612:	fc 01       	movw	r30, r24
     614:	ee 0f       	add	r30, r30
     616:	ff 1f       	adc	r31, r31
     618:	e0 50       	subi	r30, 0x00	; 0
     61a:	fe 4f       	sbci	r31, 0xFE	; 254
     61c:	21 e0       	ldi	r18, 0x01	; 1
     61e:	30 e0       	ldi	r19, 0x00	; 0
     620:	c9 01       	movw	r24, r18
     622:	00 80       	ld	r0, Z
     624:	02 c0       	rjmp	.+4      	; 0x62a <_Z12digitalWritehh+0x1f8>
     626:	88 0f       	add	r24, r24
     628:	99 1f       	adc	r25, r25
     62a:	0a 94       	dec	r0
     62c:	e2 f7       	brpl	.-8      	; 0x626 <_Z12digitalWritehh+0x1f4>
     62e:	84 2b       	or	r24, r20
     630:	88 b9       	out	0x08, r24	; 8
			          break;
     632:	08 95       	ret
	          case'd':
	                 PORTD|=(1<<c[pInno]);
     634:	4b b1       	in	r20, 0x0b	; 11
     636:	fc 01       	movw	r30, r24
     638:	ee 0f       	add	r30, r30
     63a:	ff 1f       	adc	r31, r31
     63c:	e0 50       	subi	r30, 0x00	; 0
     63e:	fe 4f       	sbci	r31, 0xFE	; 254
     640:	21 e0       	ldi	r18, 0x01	; 1
     642:	30 e0       	ldi	r19, 0x00	; 0
     644:	c9 01       	movw	r24, r18
     646:	00 80       	ld	r0, Z
     648:	02 c0       	rjmp	.+4      	; 0x64e <_Z12digitalWritehh+0x21c>
     64a:	88 0f       	add	r24, r24
     64c:	99 1f       	adc	r25, r25
     64e:	0a 94       	dec	r0
     650:	e2 f7       	brpl	.-8      	; 0x64a <_Z12digitalWritehh+0x218>
     652:	84 2b       	or	r24, r20
     654:	8b b9       	out	0x0b, r24	; 11
			          break;
     656:	08 95       	ret

		      case'e':
	                  PORTE|=(1<<c[pInno]);
     658:	4e b1       	in	r20, 0x0e	; 14
     65a:	fc 01       	movw	r30, r24
     65c:	ee 0f       	add	r30, r30
     65e:	ff 1f       	adc	r31, r31
     660:	e0 50       	subi	r30, 0x00	; 0
     662:	fe 4f       	sbci	r31, 0xFE	; 254
     664:	21 e0       	ldi	r18, 0x01	; 1
     666:	30 e0       	ldi	r19, 0x00	; 0
     668:	c9 01       	movw	r24, r18
     66a:	00 80       	ld	r0, Z
     66c:	02 c0       	rjmp	.+4      	; 0x672 <_Z12digitalWritehh+0x240>
     66e:	88 0f       	add	r24, r24
     670:	99 1f       	adc	r25, r25
     672:	0a 94       	dec	r0
     674:	e2 f7       	brpl	.-8      	; 0x66e <_Z12digitalWritehh+0x23c>
     676:	84 2b       	or	r24, r20
     678:	8e b9       	out	0x0e, r24	; 14
			           break;
     67a:	08 95       	ret

			     case'g':
	                  PORTG|=(1<<c[pInno]);
     67c:	44 b3       	in	r20, 0x14	; 20
     67e:	fc 01       	movw	r30, r24
     680:	ee 0f       	add	r30, r30
     682:	ff 1f       	adc	r31, r31
     684:	e0 50       	subi	r30, 0x00	; 0
     686:	fe 4f       	sbci	r31, 0xFE	; 254
     688:	21 e0       	ldi	r18, 0x01	; 1
     68a:	30 e0       	ldi	r19, 0x00	; 0
     68c:	c9 01       	movw	r24, r18
     68e:	00 80       	ld	r0, Z
     690:	02 c0       	rjmp	.+4      	; 0x696 <_Z12digitalWritehh+0x264>
     692:	88 0f       	add	r24, r24
     694:	99 1f       	adc	r25, r25
     696:	0a 94       	dec	r0
     698:	e2 f7       	brpl	.-8      	; 0x692 <_Z12digitalWritehh+0x260>
     69a:	84 2b       	or	r24, r20
     69c:	84 bb       	out	0x14, r24	; 20
			           break;
     69e:	08 95       	ret
			 case'h':
	                  PORTH|=(1<<c[pInno]);
     6a0:	e2 e0       	ldi	r30, 0x02	; 2
     6a2:	f1 e0       	ldi	r31, 0x01	; 1
     6a4:	40 81       	ld	r20, Z
     6a6:	dc 01       	movw	r26, r24
     6a8:	aa 0f       	add	r26, r26
     6aa:	bb 1f       	adc	r27, r27
     6ac:	a0 50       	subi	r26, 0x00	; 0
     6ae:	be 4f       	sbci	r27, 0xFE	; 254
     6b0:	21 e0       	ldi	r18, 0x01	; 1
     6b2:	30 e0       	ldi	r19, 0x00	; 0
     6b4:	c9 01       	movw	r24, r18
     6b6:	0c 90       	ld	r0, X
     6b8:	02 c0       	rjmp	.+4      	; 0x6be <_Z12digitalWritehh+0x28c>
     6ba:	88 0f       	add	r24, r24
     6bc:	99 1f       	adc	r25, r25
     6be:	0a 94       	dec	r0
     6c0:	e2 f7       	brpl	.-8      	; 0x6ba <_Z12digitalWritehh+0x288>
     6c2:	84 2b       	or	r24, r20
     6c4:	80 83       	st	Z, r24
			           break;
     6c6:	08 95       	ret
		     /*case'i':
	                  PORTI|=(1<<c[pInno]);
			           break;*/
			     case'j':
	                  PORTJ|=(1<<c[pInno]);
     6c8:	e5 e0       	ldi	r30, 0x05	; 5
     6ca:	f1 e0       	ldi	r31, 0x01	; 1
     6cc:	40 81       	ld	r20, Z
     6ce:	dc 01       	movw	r26, r24
     6d0:	aa 0f       	add	r26, r26
     6d2:	bb 1f       	adc	r27, r27
     6d4:	a0 50       	subi	r26, 0x00	; 0
     6d6:	be 4f       	sbci	r27, 0xFE	; 254
     6d8:	21 e0       	ldi	r18, 0x01	; 1
     6da:	30 e0       	ldi	r19, 0x00	; 0
     6dc:	c9 01       	movw	r24, r18
     6de:	0c 90       	ld	r0, X
     6e0:	02 c0       	rjmp	.+4      	; 0x6e6 <_Z12digitalWritehh+0x2b4>
     6e2:	88 0f       	add	r24, r24
     6e4:	99 1f       	adc	r25, r25
     6e6:	0a 94       	dec	r0
     6e8:	e2 f7       	brpl	.-8      	; 0x6e2 <_Z12digitalWritehh+0x2b0>
     6ea:	84 2b       	or	r24, r20
     6ec:	80 83       	st	Z, r24
			           break;
     6ee:	08 95       	ret
				     case'l':
	                  PORTL|=(1<<c[pInno]);
     6f0:	eb e0       	ldi	r30, 0x0B	; 11
     6f2:	f1 e0       	ldi	r31, 0x01	; 1
     6f4:	40 81       	ld	r20, Z
     6f6:	dc 01       	movw	r26, r24
     6f8:	aa 0f       	add	r26, r26
     6fa:	bb 1f       	adc	r27, r27
     6fc:	a0 50       	subi	r26, 0x00	; 0
     6fe:	be 4f       	sbci	r27, 0xFE	; 254
     700:	21 e0       	ldi	r18, 0x01	; 1
     702:	30 e0       	ldi	r19, 0x00	; 0
     704:	c9 01       	movw	r24, r18
     706:	0c 90       	ld	r0, X
     708:	02 c0       	rjmp	.+4      	; 0x70e <_Z12digitalWritehh+0x2dc>
     70a:	88 0f       	add	r24, r24
     70c:	99 1f       	adc	r25, r25
     70e:	0a 94       	dec	r0
     710:	e2 f7       	brpl	.-8      	; 0x70a <_Z12digitalWritehh+0x2d8>
     712:	84 2b       	or	r24, r20
     714:	80 83       	st	Z, r24
     716:	08 95       	ret

00000718 <_Z11digitalReadh>:

uint8_t digitalRead(uint8_t pInno)
{
	uint8_t z;				//not a good practice
	uint8_t x;				//not a good practice
   switch(d[pInno])
     718:	28 e7       	ldi	r18, 0x78	; 120
     71a:	32 e0       	ldi	r19, 0x02	; 2
     71c:	28 0f       	add	r18, r24
     71e:	31 1d       	adc	r19, r1
     720:	f9 01       	movw	r30, r18
     722:	80 81       	ld	r24, Z
     724:	85 36       	cpi	r24, 0x65	; 101
     726:	d9 f0       	breq	.+54     	; 0x75e <_Z11digitalReadh+0x46>
     728:	86 36       	cpi	r24, 0x66	; 102
     72a:	38 f4       	brcc	.+14     	; 0x73a <_Z11digitalReadh+0x22>
     72c:	83 36       	cpi	r24, 0x63	; 99
     72e:	99 f0       	breq	.+38     	; 0x756 <_Z11digitalReadh+0x3e>
     730:	84 36       	cpi	r24, 0x64	; 100
     732:	98 f4       	brcc	.+38     	; 0x75a <_Z11digitalReadh+0x42>
     734:	82 36       	cpi	r24, 0x62	; 98
     736:	f9 f4       	brne	.+62     	; 0x776 <_Z11digitalReadh+0x5e>
     738:	0c c0       	rjmp	.+24     	; 0x752 <_Z11digitalReadh+0x3a>
     73a:	88 36       	cpi	r24, 0x68	; 104
     73c:	a1 f0       	breq	.+40     	; 0x766 <_Z11digitalReadh+0x4e>
     73e:	89 36       	cpi	r24, 0x69	; 105
     740:	18 f4       	brcc	.+6      	; 0x748 <_Z11digitalReadh+0x30>
     742:	87 36       	cpi	r24, 0x67	; 103
     744:	c1 f4       	brne	.+48     	; 0x776 <_Z11digitalReadh+0x5e>
     746:	0d c0       	rjmp	.+26     	; 0x762 <_Z11digitalReadh+0x4a>
     748:	8a 36       	cpi	r24, 0x6A	; 106
     74a:	81 f0       	breq	.+32     	; 0x76c <_Z11digitalReadh+0x54>
     74c:	8c 36       	cpi	r24, 0x6C	; 108
     74e:	99 f4       	brne	.+38     	; 0x776 <_Z11digitalReadh+0x5e>
     750:	10 c0       	rjmp	.+32     	; 0x772 <_Z11digitalReadh+0x5a>
         {

	          case'b':
	                  z=PINB&(1<<c[pInno]);
     752:	83 b1       	in	r24, 0x03	; 3
			           break;
     754:	08 95       	ret
	          case'c':
	                  z=PINC&(1<<c[pInno]);
     756:	86 b1       	in	r24, 0x06	; 6
			          break;
     758:	08 95       	ret
	          case'd':
	                  z=PIND&(1<<c[pInno]);
     75a:	89 b1       	in	r24, 0x09	; 9
			          break;
     75c:	08 95       	ret

		      case'e':
	                   z=PINE&(1<<c[pInno]);
     75e:	8c b1       	in	r24, 0x0c	; 12
			           break;
     760:	08 95       	ret

			     case'g':
	                   z=PING&(1<<c[pInno]);
     762:	82 b3       	in	r24, 0x12	; 18
			           break;
     764:	08 95       	ret
			 case'h':
	                  z=PINH&(1<<c[pInno]);
     766:	80 91 00 01 	lds	r24, 0x0100
			           break;
     76a:	08 95       	ret

			     case'j':
	                   z=PINJ&(1<<c[pInno]);
     76c:	80 91 03 01 	lds	r24, 0x0103
			           break;
     770:	08 95       	ret
				     case'l':
	                   z=PINL&(1<<c[pInno]);
     772:	80 91 09 01 	lds	r24, 0x0109
			           break;
					   return z;
	     }
}
     776:	08 95       	ret

00000778 <_Z20microsecondsToInchesm>:
{
  // According to Parallax's datasheet for the PING))), there are 73.746
  // microseconds per inch (i.e. sound travels at 1130 feet per second).
  // This gives the distance travelled by the ping, outbound and return,
  // so we divide by 2 to get the distance of the obstacle.
  return (mIcroseconds*0.00669/ 2);
     778:	0e 94 0d 10 	call	0x201a	; 0x201a <__floatunsisf>
     77c:	2a ec       	ldi	r18, 0xCA	; 202
     77e:	37 e3       	ldi	r19, 0x37	; 55
     780:	4b ed       	ldi	r20, 0xDB	; 219
     782:	5b e3       	ldi	r21, 0x3B	; 59
     784:	0e 94 9b 10 	call	0x2136	; 0x2136 <__mulsf3>
     788:	20 e0       	ldi	r18, 0x00	; 0
     78a:	30 e0       	ldi	r19, 0x00	; 0
     78c:	40 e0       	ldi	r20, 0x00	; 0
     78e:	5f e3       	ldi	r21, 0x3F	; 63
     790:	0e 94 9b 10 	call	0x2136	; 0x2136 <__mulsf3>
     794:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <__fixunssfsi>
}
     798:	08 95       	ret

0000079a <_Z25microsecondsToCentimetersm>:
long unsigned int microsecondsToCentimeters(long unsigned int microseconds)
{
  // The speed of sound is 340 m/s or 29 microseconds per centimeter.
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
     79a:	0e 94 0d 10 	call	0x201a	; 0x201a <__floatunsisf>
     79e:	2b e7       	ldi	r18, 0x7B	; 123
     7a0:	34 e1       	ldi	r19, 0x14	; 20
     7a2:	4e e2       	ldi	r20, 0x2E	; 46
     7a4:	5e e3       	ldi	r21, 0x3E	; 62
     7a6:	0e 94 9b 10 	call	0x2136	; 0x2136 <__mulsf3>
     7aa:	20 e0       	ldi	r18, 0x00	; 0
     7ac:	30 e0       	ldi	r19, 0x00	; 0
     7ae:	40 e0       	ldi	r20, 0x00	; 0
     7b0:	5f e3       	ldi	r21, 0x3F	; 63
     7b2:	0e 94 9b 10 	call	0x2136	; 0x2136 <__mulsf3>
     7b6:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <__fixunssfsi>
}
     7ba:	08 95       	ret

000007bc <_Z7initADCv>:
Serial1 Serial1;
Serial2 Serial2;
Serial3 Serial3;
void initADC()
{
	ADMUX=(1<<REFS0);				//Aref=AVcc
     7bc:	80 e4       	ldi	r24, 0x40	; 64
     7be:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1);		//ADC enabled, Prescaler 64
     7c2:	86 e8       	ldi	r24, 0x86	; 134
     7c4:	80 93 7a 00 	sts	0x007A, r24
}
     7c8:	08 95       	ret

000007ca <_Z10analogReadi>:

int analogRead(int (pInno))
{
     7ca:	0f 93       	push	r16
     7cc:	1f 93       	push	r17
     7ce:	cf 93       	push	r28
     7d0:	df 93       	push	r29
     7d2:	8c 01       	movw	r16, r24
        //prescalar set to default
  	initADC();
     7d4:	0e 94 de 03 	call	0x7bc	; 0x7bc <_Z7initADCv>
  	ADMUX=(1<<REFS0)|(0<<REFS1);
     7d8:	cc e7       	ldi	r28, 0x7C	; 124
     7da:	d0 e0       	ldi	r29, 0x00	; 0
     7dc:	80 e4       	ldi	r24, 0x40	; 64
     7de:	88 83       	st	Y, r24
  	ADCSRA|=(1<<ADEN);
     7e0:	ea e7       	ldi	r30, 0x7A	; 122
     7e2:	f0 e0       	ldi	r31, 0x00	; 0
     7e4:	80 81       	ld	r24, Z
     7e6:	80 68       	ori	r24, 0x80	; 128
     7e8:	80 83       	st	Z, r24
    ADMUX|=(pInno%8);//chose value from 0 to 7 to chose adc pin accordingly
     7ea:	28 81       	ld	r18, Y
     7ec:	c8 01       	movw	r24, r16
     7ee:	68 e0       	ldi	r22, 0x08	; 8
     7f0:	70 e0       	ldi	r23, 0x00	; 0
     7f2:	0e 94 1d 11 	call	0x223a	; 0x223a <__divmodhi4>
     7f6:	28 2b       	or	r18, r24
     7f8:	28 83       	st	Y, r18
    ADCSRA|=(1<<ADEN);
     7fa:	80 81       	ld	r24, Z
     7fc:	80 68       	ori	r24, 0x80	; 128
     7fe:	80 83       	st	Z, r24
    ADCSRA|=(1<<ADSC);
     800:	80 81       	ld	r24, Z
     802:	80 64       	ori	r24, 0x40	; 64
     804:	80 83       	st	Z, r24
	while(ADCSRA&(1<<ADSC));
     806:	80 81       	ld	r24, Z
     808:	86 fd       	sbrc	r24, 6
     80a:	fd cf       	rjmp	.-6      	; 0x806 <_Z10analogReadi+0x3c>
	return (ADC);
     80c:	20 91 78 00 	lds	r18, 0x0078
     810:	30 91 79 00 	lds	r19, 0x0079
}
     814:	82 2f       	mov	r24, r18
     816:	93 2f       	mov	r25, r19
     818:	df 91       	pop	r29
     81a:	cf 91       	pop	r28
     81c:	1f 91       	pop	r17
     81e:	0f 91       	pop	r16
     820:	08 95       	ret

00000822 <_Z11analogWritehh>:

void analogWrite(uint8_t pInno,uint8_t dUtycY)
{
  switch(pInno)
     822:	89 30       	cpi	r24, 0x09	; 9
     824:	09 f4       	brne	.+2      	; 0x828 <_Z11analogWritehh+0x6>
     826:	59 c0       	rjmp	.+178    	; 0x8da <_Z11analogWritehh+0xb8>
     828:	8a 30       	cpi	r24, 0x0A	; 10
     82a:	98 f4       	brcc	.+38     	; 0x852 <_Z11analogWritehh+0x30>
     82c:	85 30       	cpi	r24, 0x05	; 5
     82e:	09 f4       	brne	.+2      	; 0x832 <_Z11analogWritehh+0x10>
     830:	66 c0       	rjmp	.+204    	; 0x8fe <_Z11analogWritehh+0xdc>
     832:	86 30       	cpi	r24, 0x06	; 6
     834:	38 f4       	brcc	.+14     	; 0x844 <_Z11analogWritehh+0x22>
     836:	82 30       	cpi	r24, 0x02	; 2
     838:	09 f4       	brne	.+2      	; 0x83c <_Z11analogWritehh+0x1a>
     83a:	72 c0       	rjmp	.+228    	; 0x920 <_Z11analogWritehh+0xfe>
     83c:	84 30       	cpi	r24, 0x04	; 4
     83e:	09 f0       	breq	.+2      	; 0x842 <_Z11analogWritehh+0x20>
     840:	e5 c0       	rjmp	.+458    	; 0xa0c <_Z11analogWritehh+0x1ea>
     842:	b2 c0       	rjmp	.+356    	; 0x9a8 <_Z11analogWritehh+0x186>
     844:	86 30       	cpi	r24, 0x06	; 6
     846:	09 f4       	brne	.+2      	; 0x84a <_Z11analogWritehh+0x28>
     848:	b8 c0       	rjmp	.+368    	; 0x9ba <_Z11analogWritehh+0x198>
     84a:	87 30       	cpi	r24, 0x07	; 7
     84c:	09 f0       	breq	.+2      	; 0x850 <_Z11analogWritehh+0x2e>
     84e:	de c0       	rjmp	.+444    	; 0xa0c <_Z11analogWritehh+0x1ea>
     850:	c9 c0       	rjmp	.+402    	; 0x9e4 <_Z11analogWritehh+0x1c2>
     852:	8c 30       	cpi	r24, 0x0C	; 12
     854:	19 f1       	breq	.+70     	; 0x89c <_Z11analogWritehh+0x7a>
     856:	8d 30       	cpi	r24, 0x0D	; 13
     858:	30 f4       	brcc	.+12     	; 0x866 <_Z11analogWritehh+0x44>
     85a:	8a 30       	cpi	r24, 0x0A	; 10
     85c:	81 f1       	breq	.+96     	; 0x8be <_Z11analogWritehh+0x9c>
     85e:	8b 30       	cpi	r24, 0x0B	; 11
     860:	09 f0       	breq	.+2      	; 0x864 <_Z11analogWritehh+0x42>
     862:	d4 c0       	rjmp	.+424    	; 0xa0c <_Z11analogWritehh+0x1ea>
     864:	0a c0       	rjmp	.+20     	; 0x87a <_Z11analogWritehh+0x58>
     866:	8d 32       	cpi	r24, 0x2D	; 45
     868:	09 f4       	brne	.+2      	; 0x86c <_Z11analogWritehh+0x4a>
     86a:	80 c0       	rjmp	.+256    	; 0x96c <_Z11analogWritehh+0x14a>
     86c:	8e 32       	cpi	r24, 0x2E	; 46
     86e:	09 f4       	brne	.+2      	; 0x872 <_Z11analogWritehh+0x50>
     870:	68 c0       	rjmp	.+208    	; 0x942 <_Z11analogWritehh+0x120>
     872:	8d 30       	cpi	r24, 0x0D	; 13
     874:	09 f0       	breq	.+2      	; 0x878 <_Z11analogWritehh+0x56>
     876:	ca c0       	rjmp	.+404    	; 0xa0c <_Z11analogWritehh+0x1ea>
     878:	8e c0       	rjmp	.+284    	; 0x996 <_Z11analogWritehh+0x174>
  {
	  case 11:
		   DDRB|=(1<<PB5);
     87a:	25 9a       	sbi	0x04, 5	; 4
		   TCCR1A|=(1<<WGM10)|(1<<WGM12)|(1<<COM1A1);
     87c:	e0 e8       	ldi	r30, 0x80	; 128
     87e:	f0 e0       	ldi	r31, 0x00	; 0
     880:	80 81       	ld	r24, Z
     882:	89 68       	ori	r24, 0x89	; 137
     884:	80 83       	st	Z, r24
		   TCCR1B|=(1<<CS11)|(1<<CS10);
     886:	e1 e8       	ldi	r30, 0x81	; 129
     888:	f0 e0       	ldi	r31, 0x00	; 0
     88a:	80 81       	ld	r24, Z
     88c:	83 60       	ori	r24, 0x03	; 3
     88e:	80 83       	st	Z, r24
		   OCR1A=dUtycY;
     890:	70 e0       	ldi	r23, 0x00	; 0
     892:	70 93 89 00 	sts	0x0089, r23
     896:	60 93 88 00 	sts	0x0088, r22
		   break;
     89a:	08 95       	ret
	  case 12:
		  DDRB|=(1<<PB6);
     89c:	26 9a       	sbi	0x04, 6	; 4
		  TCCR1A|=(1<<WGM10)|(1<<WGM12)|(1<<COM1B1);
     89e:	e0 e8       	ldi	r30, 0x80	; 128
     8a0:	f0 e0       	ldi	r31, 0x00	; 0
     8a2:	80 81       	ld	r24, Z
     8a4:	89 62       	ori	r24, 0x29	; 41
     8a6:	80 83       	st	Z, r24
		  TCCR1B|=(1<<CS11)|(1<<CS10);
     8a8:	e1 e8       	ldi	r30, 0x81	; 129
     8aa:	f0 e0       	ldi	r31, 0x00	; 0
     8ac:	80 81       	ld	r24, Z
     8ae:	83 60       	ori	r24, 0x03	; 3
     8b0:	80 83       	st	Z, r24
		  OCR1B=dUtycY;
     8b2:	70 e0       	ldi	r23, 0x00	; 0
     8b4:	70 93 8b 00 	sts	0x008B, r23
     8b8:	60 93 8a 00 	sts	0x008A, r22
		  break;
     8bc:	08 95       	ret
	  case 10:
		  DDRB|=(1<<PB4);
     8be:	24 9a       	sbi	0x04, 4	; 4
		  TCCR2A|=(1<<COM2A1)|(1<<WGM21)|(1<<WGM20);
     8c0:	e0 eb       	ldi	r30, 0xB0	; 176
     8c2:	f0 e0       	ldi	r31, 0x00	; 0
     8c4:	80 81       	ld	r24, Z
     8c6:	83 68       	ori	r24, 0x83	; 131
     8c8:	80 83       	st	Z, r24
		  TCCR2B|=(1<<CS20);
     8ca:	e1 eb       	ldi	r30, 0xB1	; 177
     8cc:	f0 e0       	ldi	r31, 0x00	; 0
     8ce:	80 81       	ld	r24, Z
     8d0:	81 60       	ori	r24, 0x01	; 1
     8d2:	80 83       	st	Z, r24
		  OCR2A=dUtycY;
     8d4:	60 93 b3 00 	sts	0x00B3, r22
		  break;
     8d8:	08 95       	ret
	  case 9:
		   DDRH|=(1<<PH6);
     8da:	e1 e0       	ldi	r30, 0x01	; 1
     8dc:	f1 e0       	ldi	r31, 0x01	; 1
     8de:	80 81       	ld	r24, Z
     8e0:	80 64       	ori	r24, 0x40	; 64
     8e2:	80 83       	st	Z, r24
		   TCCR2A|=(1<<WGM21)|(1<<WGM20)|(1<<COM2B1);
     8e4:	e0 eb       	ldi	r30, 0xB0	; 176
     8e6:	f0 e0       	ldi	r31, 0x00	; 0
     8e8:	80 81       	ld	r24, Z
     8ea:	83 62       	ori	r24, 0x23	; 35
     8ec:	80 83       	st	Z, r24
		   TCCR2B|=(1<<CS20);
     8ee:	e1 eb       	ldi	r30, 0xB1	; 177
     8f0:	f0 e0       	ldi	r31, 0x00	; 0
     8f2:	80 81       	ld	r24, Z
     8f4:	81 60       	ori	r24, 0x01	; 1
     8f6:	80 83       	st	Z, r24
		   OCR2B=dUtycY;
     8f8:	60 93 b4 00 	sts	0x00B4, r22
		   break;
     8fc:	08 95       	ret
	  case 5:
		  DDRE|=(1<<PE3);
     8fe:	6b 9a       	sbi	0x0d, 3	; 13
		  TCCR3A|=(1<<WGM32)|(1<<WGM30)|(1<<COM3A1);
     900:	e0 e9       	ldi	r30, 0x90	; 144
     902:	f0 e0       	ldi	r31, 0x00	; 0
     904:	80 81       	ld	r24, Z
     906:	89 68       	ori	r24, 0x89	; 137
     908:	80 83       	st	Z, r24
		  TCCR3B|=(1<<CS30);
     90a:	e1 e9       	ldi	r30, 0x91	; 145
     90c:	f0 e0       	ldi	r31, 0x00	; 0
     90e:	80 81       	ld	r24, Z
     910:	81 60       	ori	r24, 0x01	; 1
     912:	80 83       	st	Z, r24
		  OCR3A=dUtycY;
     914:	70 e0       	ldi	r23, 0x00	; 0
     916:	70 93 99 00 	sts	0x0099, r23
     91a:	60 93 98 00 	sts	0x0098, r22
		  break;
     91e:	08 95       	ret
	  case 2:
	  	  DDRE|=(1<<PE4);	
     920:	6c 9a       	sbi	0x0d, 4	; 13
		  TCCR3A|=(1<<WGM32)|(1<<WGM30)|(1<<COM3B1);
     922:	e0 e9       	ldi	r30, 0x90	; 144
     924:	f0 e0       	ldi	r31, 0x00	; 0
     926:	80 81       	ld	r24, Z
     928:	89 62       	ori	r24, 0x29	; 41
     92a:	80 83       	st	Z, r24
		  TCCR3B|=(1<<CS30);
     92c:	e1 e9       	ldi	r30, 0x91	; 145
     92e:	f0 e0       	ldi	r31, 0x00	; 0
     930:	80 81       	ld	r24, Z
     932:	81 60       	ori	r24, 0x01	; 1
     934:	80 83       	st	Z, r24
		  OCR3B=dUtycY;
     936:	70 e0       	ldi	r23, 0x00	; 0
     938:	70 93 9b 00 	sts	0x009B, r23
     93c:	60 93 9a 00 	sts	0x009A, r22
		  break;
     940:	08 95       	ret
	  case 46:
		  DDRL|=(1<<PL3);
     942:	ea e0       	ldi	r30, 0x0A	; 10
     944:	f1 e0       	ldi	r31, 0x01	; 1
     946:	80 81       	ld	r24, Z
     948:	88 60       	ori	r24, 0x08	; 8
     94a:	80 83       	st	Z, r24
		  TCCR5A|=(1<<WGM52)|(1<<WGM50)|(1<<COM5A1);
     94c:	e0 e2       	ldi	r30, 0x20	; 32
     94e:	f1 e0       	ldi	r31, 0x01	; 1
     950:	80 81       	ld	r24, Z
     952:	89 68       	ori	r24, 0x89	; 137
     954:	80 83       	st	Z, r24
		  TCCR5B|=(1<<CS50);
     956:	e1 e2       	ldi	r30, 0x21	; 33
     958:	f1 e0       	ldi	r31, 0x01	; 1
     95a:	80 81       	ld	r24, Z
     95c:	81 60       	ori	r24, 0x01	; 1
     95e:	80 83       	st	Z, r24
		  OCR5A=dUtycY;
     960:	70 e0       	ldi	r23, 0x00	; 0
     962:	70 93 29 01 	sts	0x0129, r23
     966:	60 93 28 01 	sts	0x0128, r22
		  break;
     96a:	08 95       	ret
	  case 45:
		  DDRL|=(1<<PL4);
     96c:	ea e0       	ldi	r30, 0x0A	; 10
     96e:	f1 e0       	ldi	r31, 0x01	; 1
     970:	80 81       	ld	r24, Z
     972:	80 61       	ori	r24, 0x10	; 16
     974:	80 83       	st	Z, r24
		  TCCR5A|=(1<<WGM52)|(1<<WGM50)|(1<<COM5B1);
     976:	e0 e2       	ldi	r30, 0x20	; 32
     978:	f1 e0       	ldi	r31, 0x01	; 1
     97a:	80 81       	ld	r24, Z
     97c:	89 62       	ori	r24, 0x29	; 41
     97e:	80 83       	st	Z, r24
		  TCCR5B|=(1<<CS50);
     980:	e1 e2       	ldi	r30, 0x21	; 33
     982:	f1 e0       	ldi	r31, 0x01	; 1
     984:	80 81       	ld	r24, Z
     986:	81 60       	ori	r24, 0x01	; 1
     988:	80 83       	st	Z, r24
		  OCR5B=dUtycY;
     98a:	70 e0       	ldi	r23, 0x00	; 0
     98c:	70 93 2b 01 	sts	0x012B, r23
     990:	60 93 2a 01 	sts	0x012A, r22
		  break;
     994:	08 95       	ret
	  case 13:
		  DDRB|=(1<<PB7);
     996:	27 9a       	sbi	0x04, 7	; 4
		  TCCR0A|=(1<<WGM10)|(1<<WGM00)|(1<<COM0A1);
     998:	84 b5       	in	r24, 0x24	; 36
     99a:	81 68       	ori	r24, 0x81	; 129
     99c:	84 bd       	out	0x24, r24	; 36
		  TCCR0B|=(1<<CS00);
     99e:	85 b5       	in	r24, 0x25	; 37
     9a0:	81 60       	ori	r24, 0x01	; 1
     9a2:	85 bd       	out	0x25, r24	; 37
		  OCR0A=dUtycY;
     9a4:	67 bd       	out	0x27, r22	; 39
		  break;
     9a6:	08 95       	ret
	  case 4:
	  	DDRG|=(1<<PG5);
     9a8:	9d 9a       	sbi	0x13, 5	; 19
		TCCR0A|=(1<<WGM10)|(1<<WGM00)|(1<<COM0B1);
     9aa:	84 b5       	in	r24, 0x24	; 36
     9ac:	81 62       	ori	r24, 0x21	; 33
     9ae:	84 bd       	out	0x24, r24	; 36
		TCCR0B|=(1<<CS00);
     9b0:	85 b5       	in	r24, 0x25	; 37
     9b2:	81 60       	ori	r24, 0x01	; 1
     9b4:	85 bd       	out	0x25, r24	; 37
		OCR0B=dUtycY;
     9b6:	68 bd       	out	0x28, r22	; 40
		break;
     9b8:	08 95       	ret

	  case 6:
		  DDRH|=(1<<PH3);
     9ba:	e1 e0       	ldi	r30, 0x01	; 1
     9bc:	f1 e0       	ldi	r31, 0x01	; 1
     9be:	80 81       	ld	r24, Z
     9c0:	88 60       	ori	r24, 0x08	; 8
     9c2:	80 83       	st	Z, r24
		  TCCR4A|=(1<<WGM42)|(1<<WGM40)|(1<<COM4A1);
     9c4:	e0 ea       	ldi	r30, 0xA0	; 160
     9c6:	f0 e0       	ldi	r31, 0x00	; 0
     9c8:	80 81       	ld	r24, Z
     9ca:	89 68       	ori	r24, 0x89	; 137
     9cc:	80 83       	st	Z, r24
		  TCCR4B|=(1<<CS40);
     9ce:	e1 ea       	ldi	r30, 0xA1	; 161
     9d0:	f0 e0       	ldi	r31, 0x00	; 0
     9d2:	80 81       	ld	r24, Z
     9d4:	81 60       	ori	r24, 0x01	; 1
     9d6:	80 83       	st	Z, r24
		  OCR4A=dUtycY;
     9d8:	70 e0       	ldi	r23, 0x00	; 0
     9da:	70 93 a9 00 	sts	0x00A9, r23
     9de:	60 93 a8 00 	sts	0x00A8, r22
		  break;
     9e2:	08 95       	ret
	  case 7:
		  
		  DDRH|=(1<<PH4);
     9e4:	e1 e0       	ldi	r30, 0x01	; 1
     9e6:	f1 e0       	ldi	r31, 0x01	; 1
     9e8:	80 81       	ld	r24, Z
     9ea:	80 61       	ori	r24, 0x10	; 16
     9ec:	80 83       	st	Z, r24
		TCCR4A|=(1<<WGM42)|(1<<WGM40)|(1<<COM4B1);
     9ee:	e0 ea       	ldi	r30, 0xA0	; 160
     9f0:	f0 e0       	ldi	r31, 0x00	; 0
     9f2:	80 81       	ld	r24, Z
     9f4:	89 62       	ori	r24, 0x29	; 41
     9f6:	80 83       	st	Z, r24
		  TCCR4B|=(1<<CS40);
     9f8:	e1 ea       	ldi	r30, 0xA1	; 161
     9fa:	f0 e0       	ldi	r31, 0x00	; 0
     9fc:	80 81       	ld	r24, Z
     9fe:	81 60       	ori	r24, 0x01	; 1
     a00:	80 83       	st	Z, r24
		  OCR4B=dUtycY;
     a02:	70 e0       	ldi	r23, 0x00	; 0
     a04:	70 93 ab 00 	sts	0x00AB, r23
     a08:	60 93 aa 00 	sts	0x00AA, r22
     a0c:	08 95       	ret

00000a0e <_Z6millisv>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a0e:	f8 94       	cli
{
    unsigned long millis_return;

    // Ensure this cannot be disrupted
    ATOMIC_BLOCK(ATOMIC_FORCEON) {
        millis_return = tImer2_millis;
     a10:	20 91 be 02 	lds	r18, 0x02BE
     a14:	30 91 bf 02 	lds	r19, 0x02BF
     a18:	40 91 c0 02 	lds	r20, 0x02C0
     a1c:	50 91 c1 02 	lds	r21, 0x02C1
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
     a20:	78 94       	sei
    }

    return millis_return;
}
     a22:	62 2f       	mov	r22, r18
     a24:	73 2f       	mov	r23, r19
     a26:	84 2f       	mov	r24, r20
     a28:	95 2f       	mov	r25, r21
     a2a:	08 95       	ret

00000a2c <__vector_13>:

ISR (TIMER2_COMPA_vect)
{
     a2c:	1f 92       	push	r1
     a2e:	0f 92       	push	r0
     a30:	0f b6       	in	r0, 0x3f	; 63
     a32:	0f 92       	push	r0
     a34:	11 24       	eor	r1, r1
     a36:	8f 93       	push	r24
     a38:	9f 93       	push	r25
     a3a:	af 93       	push	r26
     a3c:	bf 93       	push	r27
    tImer2_millis++;
     a3e:	80 91 be 02 	lds	r24, 0x02BE
     a42:	90 91 bf 02 	lds	r25, 0x02BF
     a46:	a0 91 c0 02 	lds	r26, 0x02C0
     a4a:	b0 91 c1 02 	lds	r27, 0x02C1
     a4e:	01 96       	adiw	r24, 0x01	; 1
     a50:	a1 1d       	adc	r26, r1
     a52:	b1 1d       	adc	r27, r1
     a54:	80 93 be 02 	sts	0x02BE, r24
     a58:	90 93 bf 02 	sts	0x02BF, r25
     a5c:	a0 93 c0 02 	sts	0x02C0, r26
     a60:	b0 93 c1 02 	sts	0x02C1, r27
}
     a64:	bf 91       	pop	r27
     a66:	af 91       	pop	r26
     a68:	9f 91       	pop	r25
     a6a:	8f 91       	pop	r24
     a6c:	0f 90       	pop	r0
     a6e:	0f be       	out	0x3f, r0	; 63
     a70:	0f 90       	pop	r0
     a72:	1f 90       	pop	r1
     a74:	18 95       	reti

00000a76 <_Z5tinitv>:

void tinit()
{
	TCCR2B |= (1 << WGM22) | (1 << CS21);
     a76:	e1 eb       	ldi	r30, 0xB1	; 177
     a78:	f0 e0       	ldi	r31, 0x00	; 0
     a7a:	80 81       	ld	r24, Z
     a7c:	8a 60       	ori	r24, 0x0A	; 10
     a7e:	80 83       	st	Z, r24

    // Load the high byte, then the low byte
    // into the output compare
    OCR2A = CTC_MATCH_OVERFLOW;
     a80:	8d e7       	ldi	r24, 0x7D	; 125
     a82:	80 93 b3 00 	sts	0x00B3, r24

    // Enable the compare match interrupt
    TIMSK2 |= (1 << OCIE2A);
     a86:	e0 e7       	ldi	r30, 0x70	; 112
     a88:	f0 e0       	ldi	r31, 0x00	; 0
     a8a:	80 81       	ld	r24, Z
     a8c:	82 60       	ori	r24, 0x02	; 2
     a8e:	80 83       	st	Z, r24

    // Now enable global interrupts
    sei();
     a90:	78 94       	sei
}
     a92:	08 95       	ret

00000a94 <_Z5delaym>:


void delay(unsigned long mIllisec)
{
     a94:	9b 01       	movw	r18, r22
     a96:	ac 01       	movw	r20, r24
	int i;
	for(i=0;i<mIllisec;i++)
     a98:	61 15       	cp	r22, r1
     a9a:	71 05       	cpc	r23, r1
     a9c:	81 05       	cpc	r24, r1
     a9e:	91 05       	cpc	r25, r1
     aa0:	a1 f0       	breq	.+40     	; 0xaca <_Z5delaym+0x36>
     aa2:	60 e0       	ldi	r22, 0x00	; 0
     aa4:	70 e0       	ldi	r23, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     aa6:	89 ef       	ldi	r24, 0xF9	; 249
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	01 97       	sbiw	r24, 0x01	; 1
     aac:	f1 f7       	brne	.-4      	; 0xaaa <_Z5delaym+0x16>
     aae:	00 c0       	rjmp	.+0      	; 0xab0 <_Z5delaym+0x1c>
     ab0:	00 00       	nop
     ab2:	6f 5f       	subi	r22, 0xFF	; 255
     ab4:	7f 4f       	sbci	r23, 0xFF	; 255
     ab6:	cb 01       	movw	r24, r22
     ab8:	aa 27       	eor	r26, r26
     aba:	97 fd       	sbrc	r25, 7
     abc:	a0 95       	com	r26
     abe:	ba 2f       	mov	r27, r26
     ac0:	82 17       	cp	r24, r18
     ac2:	93 07       	cpc	r25, r19
     ac4:	a4 07       	cpc	r26, r20
     ac6:	b5 07       	cpc	r27, r21
     ac8:	70 f3       	brcs	.-36     	; 0xaa6 <_Z5delaym+0x12>
     aca:	08 95       	ret

00000acc <_Z17delayMicrosecondsm>:
	}
	return;
}

void delayMicroseconds(unsigned long mIcrosec)
{
     acc:	9b 01       	movw	r18, r22
     ace:	ac 01       	movw	r20, r24
	int i;
	for(i=0;i<mIcrosec;i++)
     ad0:	61 15       	cp	r22, r1
     ad2:	71 05       	cpc	r23, r1
     ad4:	81 05       	cpc	r24, r1
     ad6:	91 05       	cpc	r25, r1
     ad8:	79 f0       	breq	.+30     	; 0xaf8 <_Z17delayMicrosecondsm+0x2c>
     ada:	60 e0       	ldi	r22, 0x00	; 0
     adc:	70 e0       	ldi	r23, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ade:	00 00       	nop
     ae0:	6f 5f       	subi	r22, 0xFF	; 255
     ae2:	7f 4f       	sbci	r23, 0xFF	; 255
     ae4:	cb 01       	movw	r24, r22
     ae6:	aa 27       	eor	r26, r26
     ae8:	97 fd       	sbrc	r25, 7
     aea:	a0 95       	com	r26
     aec:	ba 2f       	mov	r27, r26
     aee:	82 17       	cp	r24, r18
     af0:	93 07       	cpc	r25, r19
     af2:	a4 07       	cpc	r26, r20
     af4:	b5 07       	cpc	r27, r21
     af6:	98 f3       	brcs	.-26     	; 0xade <_Z17delayMicrosecondsm+0x12>
     af8:	08 95       	ret

00000afa <_Z3maplllll>:
	}
	return;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
     afa:	2f 92       	push	r2
     afc:	3f 92       	push	r3
     afe:	4f 92       	push	r4
     b00:	5f 92       	push	r5
     b02:	6f 92       	push	r6
     b04:	7f 92       	push	r7
     b06:	8f 92       	push	r8
     b08:	9f 92       	push	r9
     b0a:	af 92       	push	r10
     b0c:	bf 92       	push	r11
     b0e:	cf 92       	push	r12
     b10:	df 92       	push	r13
     b12:	ef 92       	push	r14
     b14:	ff 92       	push	r15
     b16:	0f 93       	push	r16
     b18:	1f 93       	push	r17
     b1a:	df 93       	push	r29
     b1c:	cf 93       	push	r28
     b1e:	cd b7       	in	r28, 0x3d	; 61
     b20:	de b7       	in	r29, 0x3e	; 62
     b22:	dc 01       	movw	r26, r24
     b24:	cb 01       	movw	r24, r22
     b26:	39 01       	movw	r6, r18
     b28:	4a 01       	movw	r8, r20
     b2a:	17 01       	movw	r2, r14
     b2c:	28 01       	movw	r4, r16
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
     b2e:	ee 88       	ldd	r14, Y+22	; 0x16
     b30:	ff 88       	ldd	r15, Y+23	; 0x17
     b32:	08 8d       	ldd	r16, Y+24	; 0x18
     b34:	19 8d       	ldd	r17, Y+25	; 0x19
     b36:	ea 18       	sub	r14, r10
     b38:	fb 08       	sbc	r15, r11
     b3a:	0c 09       	sbc	r16, r12
     b3c:	1d 09       	sbc	r17, r13
     b3e:	9c 01       	movw	r18, r24
     b40:	ad 01       	movw	r20, r26
     b42:	26 19       	sub	r18, r6
     b44:	37 09       	sbc	r19, r7
     b46:	48 09       	sbc	r20, r8
     b48:	59 09       	sbc	r21, r9
     b4a:	c8 01       	movw	r24, r16
     b4c:	b7 01       	movw	r22, r14
     b4e:	0e 94 fe 10 	call	0x21fc	; 0x21fc <__mulsi3>
     b52:	a2 01       	movw	r20, r4
     b54:	91 01       	movw	r18, r2
     b56:	26 19       	sub	r18, r6
     b58:	37 09       	sbc	r19, r7
     b5a:	48 09       	sbc	r20, r8
     b5c:	59 09       	sbc	r21, r9
     b5e:	0e 94 30 11 	call	0x2260	; 0x2260 <__divmodsi4>
     b62:	2a 0d       	add	r18, r10
     b64:	3b 1d       	adc	r19, r11
     b66:	4c 1d       	adc	r20, r12
     b68:	5d 1d       	adc	r21, r13
}
     b6a:	62 2f       	mov	r22, r18
     b6c:	73 2f       	mov	r23, r19
     b6e:	84 2f       	mov	r24, r20
     b70:	95 2f       	mov	r25, r21
     b72:	cf 91       	pop	r28
     b74:	df 91       	pop	r29
     b76:	1f 91       	pop	r17
     b78:	0f 91       	pop	r16
     b7a:	ff 90       	pop	r15
     b7c:	ef 90       	pop	r14
     b7e:	df 90       	pop	r13
     b80:	cf 90       	pop	r12
     b82:	bf 90       	pop	r11
     b84:	af 90       	pop	r10
     b86:	9f 90       	pop	r9
     b88:	8f 90       	pop	r8
     b8a:	7f 90       	pop	r7
     b8c:	6f 90       	pop	r6
     b8e:	5f 90       	pop	r5
     b90:	4f 90       	pop	r4
     b92:	3f 90       	pop	r3
     b94:	2f 90       	pop	r2
     b96:	08 95       	ret

00000b98 <_Z9constrainlll>:

long constrain(long nUm, long lOwer, long uPper)
{
     b98:	ef 92       	push	r14
     b9a:	ff 92       	push	r15
     b9c:	0f 93       	push	r16
     b9e:	1f 93       	push	r17
     ba0:	dc 01       	movw	r26, r24
     ba2:	cb 01       	movw	r24, r22
	if(nUm>uPper){
     ba4:	e8 16       	cp	r14, r24
     ba6:	f9 06       	cpc	r15, r25
     ba8:	0a 07       	cpc	r16, r26
     baa:	1b 07       	cpc	r17, r27
     bac:	5c f0       	brlt	.+22     	; 0xbc4 <_Z9constrainlll+0x2c>
     bae:	e2 2e       	mov	r14, r18
     bb0:	f3 2e       	mov	r15, r19
     bb2:	04 2f       	mov	r16, r20
     bb4:	15 2f       	mov	r17, r21
     bb6:	e8 16       	cp	r14, r24
     bb8:	f9 06       	cpc	r15, r25
     bba:	0a 07       	cpc	r16, r26
     bbc:	1b 07       	cpc	r17, r27
     bbe:	14 f4       	brge	.+4      	; 0xbc4 <_Z9constrainlll+0x2c>
     bc0:	7c 01       	movw	r14, r24
     bc2:	8d 01       	movw	r16, r26
    else if(nUm<lOwer){
      return lOwer;
  	}
    else 
    return nUm;
}
     bc4:	6e 2d       	mov	r22, r14
     bc6:	7f 2d       	mov	r23, r15
     bc8:	80 2f       	mov	r24, r16
     bca:	91 2f       	mov	r25, r17
     bcc:	1f 91       	pop	r17
     bce:	0f 91       	pop	r16
     bd0:	ff 90       	pop	r15
     bd2:	ef 90       	pop	r14
     bd4:	08 95       	ret

00000bd6 <_Z15attachIntteruptiPFvvEi>:
void attachIntterupt(int pIn, void (*iSrfunc)(void), int cOmpare)		//cOmpare:LOW=0,HIGH1,RISING=2,FALLING=3
{
	sei();
     bd6:	78 94       	sei
	cAllisr=iSrfunc;
     bd8:	70 93 c3 02 	sts	0x02C3, r23
     bdc:	60 93 c2 02 	sts	0x02C2, r22
	switch(pIn)	  //enabling interrupt pin
     be0:	83 30       	cpi	r24, 0x03	; 3
     be2:	91 05       	cpc	r25, r1
     be4:	09 f4       	brne	.+2      	; 0xbe8 <_Z15attachIntteruptiPFvvEi+0x12>
     be6:	7d c0       	rjmp	.+250    	; 0xce2 <_Z15attachIntteruptiPFvvEi+0x10c>
     be8:	84 30       	cpi	r24, 0x04	; 4
     bea:	91 05       	cpc	r25, r1
     bec:	54 f4       	brge	.+20     	; 0xc02 <_Z15attachIntteruptiPFvvEi+0x2c>
     bee:	81 30       	cpi	r24, 0x01	; 1
     bf0:	91 05       	cpc	r25, r1
     bf2:	c9 f1       	breq	.+114    	; 0xc66 <_Z15attachIntteruptiPFvvEi+0x90>
     bf4:	82 30       	cpi	r24, 0x02	; 2
     bf6:	91 05       	cpc	r25, r1
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <_Z15attachIntteruptiPFvvEi+0x26>
     bfa:	54 c0       	rjmp	.+168    	; 0xca4 <_Z15attachIntteruptiPFvvEi+0xce>
     bfc:	00 97       	sbiw	r24, 0x00	; 0
     bfe:	91 f0       	breq	.+36     	; 0xc24 <_Z15attachIntteruptiPFvvEi+0x4e>
     c00:	0b c1       	rjmp	.+534    	; 0xe18 <_Z15attachIntteruptiPFvvEi+0x242>
     c02:	85 30       	cpi	r24, 0x05	; 5
     c04:	91 05       	cpc	r25, r1
     c06:	09 f4       	brne	.+2      	; 0xc0a <_Z15attachIntteruptiPFvvEi+0x34>
     c08:	aa c0       	rjmp	.+340    	; 0xd5e <_Z15attachIntteruptiPFvvEi+0x188>
     c0a:	85 30       	cpi	r24, 0x05	; 5
     c0c:	91 05       	cpc	r25, r1
     c0e:	0c f4       	brge	.+2      	; 0xc12 <_Z15attachIntteruptiPFvvEi+0x3c>
     c10:	87 c0       	rjmp	.+270    	; 0xd20 <_Z15attachIntteruptiPFvvEi+0x14a>
     c12:	86 30       	cpi	r24, 0x06	; 6
     c14:	91 05       	cpc	r25, r1
     c16:	09 f4       	brne	.+2      	; 0xc1a <_Z15attachIntteruptiPFvvEi+0x44>
     c18:	c1 c0       	rjmp	.+386    	; 0xd9c <_Z15attachIntteruptiPFvvEi+0x1c6>
     c1a:	87 30       	cpi	r24, 0x07	; 7
     c1c:	91 05       	cpc	r25, r1
     c1e:	09 f0       	breq	.+2      	; 0xc22 <_Z15attachIntteruptiPFvvEi+0x4c>
     c20:	fb c0       	rjmp	.+502    	; 0xe18 <_Z15attachIntteruptiPFvvEi+0x242>
     c22:	db c0       	rjmp	.+438    	; 0xdda <_Z15attachIntteruptiPFvvEi+0x204>
	{
		case 0:
		EIMSK|=1<<INT0;
     c24:	e8 9a       	sbi	0x1d, 0	; 29
		switch(cOmpare){
     c26:	43 30       	cpi	r20, 0x03	; 3
     c28:	51 05       	cpc	r21, r1
     c2a:	61 f0       	breq	.+24     	; 0xc44 <_Z15attachIntteruptiPFvvEi+0x6e>
     c2c:	44 30       	cpi	r20, 0x04	; 4
     c2e:	51 05       	cpc	r21, r1
     c30:	79 f0       	breq	.+30     	; 0xc50 <_Z15attachIntteruptiPFvvEi+0x7a>
     c32:	42 30       	cpi	r20, 0x02	; 2
     c34:	51 05       	cpc	r21, r1
     c36:	91 f4       	brne	.+36     	; 0xc5c <_Z15attachIntteruptiPFvvEi+0x86>
			case 2:
			EICRA|=(1<<ISC00)|(1<<ISC01);
     c38:	e9 e6       	ldi	r30, 0x69	; 105
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	83 60       	ori	r24, 0x03	; 3
     c40:	80 83       	st	Z, r24
			break;
     c42:	08 95       	ret
			case 3:
			EICRA|=(0<<ISC00)|(1<<ISC01);
     c44:	e9 e6       	ldi	r30, 0x69	; 105
     c46:	f0 e0       	ldi	r31, 0x00	; 0
     c48:	80 81       	ld	r24, Z
     c4a:	82 60       	ori	r24, 0x02	; 2
     c4c:	80 83       	st	Z, r24
			break;
     c4e:	08 95       	ret
			case 4:
			EICRA|=(1<<ISC00)|(0<<ISC01);
     c50:	e9 e6       	ldi	r30, 0x69	; 105
     c52:	f0 e0       	ldi	r31, 0x00	; 0
     c54:	80 81       	ld	r24, Z
     c56:	81 60       	ori	r24, 0x01	; 1
     c58:	80 83       	st	Z, r24
			break;
     c5a:	08 95       	ret
			default:
			EICRA|=(0<<ISC00)|(0<<ISC01);
     c5c:	e9 e6       	ldi	r30, 0x69	; 105
     c5e:	f0 e0       	ldi	r31, 0x00	; 0
     c60:	80 81       	ld	r24, Z
     c62:	80 83       	st	Z, r24
     c64:	08 95       	ret
		}
		break;

		case 1:
		EIMSK|=1<<INT1;
     c66:	e9 9a       	sbi	0x1d, 1	; 29
                switch(cOmpare)
     c68:	43 30       	cpi	r20, 0x03	; 3
     c6a:	51 05       	cpc	r21, r1
     c6c:	61 f0       	breq	.+24     	; 0xc86 <_Z15attachIntteruptiPFvvEi+0xb0>
     c6e:	44 30       	cpi	r20, 0x04	; 4
     c70:	51 05       	cpc	r21, r1
     c72:	69 f0       	breq	.+26     	; 0xc8e <_Z15attachIntteruptiPFvvEi+0xb8>
     c74:	42 30       	cpi	r20, 0x02	; 2
     c76:	51 05       	cpc	r21, r1
     c78:	81 f4       	brne	.+32     	; 0xc9a <_Z15attachIntteruptiPFvvEi+0xc4>
		{
			case 2:
			EICRA|=(1<<ISC10)|(1<<ISC11);
     c7a:	e9 e6       	ldi	r30, 0x69	; 105
     c7c:	f0 e0       	ldi	r31, 0x00	; 0
     c7e:	80 81       	ld	r24, Z
     c80:	8c 60       	ori	r24, 0x0C	; 12
     c82:	80 83       	st	Z, r24
			break;
     c84:	08 95       	ret
			case 3:
			EICRA=(0<<ISC10)|(1<<ISC11);
     c86:	88 e0       	ldi	r24, 0x08	; 8
     c88:	80 93 69 00 	sts	0x0069, r24
			break;
     c8c:	08 95       	ret
			case 4:
			EICRA|=(1<<ISC10)|(0<<ISC11);
     c8e:	e9 e6       	ldi	r30, 0x69	; 105
     c90:	f0 e0       	ldi	r31, 0x00	; 0
     c92:	80 81       	ld	r24, Z
     c94:	84 60       	ori	r24, 0x04	; 4
     c96:	80 83       	st	Z, r24
			break;
     c98:	08 95       	ret
			default:
			EICRA|=(0<<ISC10)|(0<<ISC11);
     c9a:	e9 e6       	ldi	r30, 0x69	; 105
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	80 81       	ld	r24, Z
     ca0:	80 83       	st	Z, r24
     ca2:	08 95       	ret
		}
		break;

		case 2:
		EIMSK|=1<<INT2;
     ca4:	ea 9a       	sbi	0x1d, 2	; 29
		switch(cOmpare)
     ca6:	43 30       	cpi	r20, 0x03	; 3
     ca8:	51 05       	cpc	r21, r1
     caa:	61 f0       	breq	.+24     	; 0xcc4 <_Z15attachIntteruptiPFvvEi+0xee>
     cac:	44 30       	cpi	r20, 0x04	; 4
     cae:	51 05       	cpc	r21, r1
     cb0:	69 f0       	breq	.+26     	; 0xccc <_Z15attachIntteruptiPFvvEi+0xf6>
     cb2:	42 30       	cpi	r20, 0x02	; 2
     cb4:	51 05       	cpc	r21, r1
     cb6:	81 f4       	brne	.+32     	; 0xcd8 <_Z15attachIntteruptiPFvvEi+0x102>
		{
			case 2:
			EICRA|=(1<<ISC20)|(1<<ISC21);
     cb8:	e9 e6       	ldi	r30, 0x69	; 105
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	80 81       	ld	r24, Z
     cbe:	80 63       	ori	r24, 0x30	; 48
     cc0:	80 83       	st	Z, r24
			break;
     cc2:	08 95       	ret
			case 3:
			EICRA=(0<<ISC20)|(1<<ISC21);
     cc4:	80 e2       	ldi	r24, 0x20	; 32
     cc6:	80 93 69 00 	sts	0x0069, r24
			break;
     cca:	08 95       	ret
			case 4:
			EICRA|=(1<<ISC20)|(0<<ISC21);
     ccc:	e9 e6       	ldi	r30, 0x69	; 105
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	80 81       	ld	r24, Z
     cd2:	80 61       	ori	r24, 0x10	; 16
     cd4:	80 83       	st	Z, r24
			break;
     cd6:	08 95       	ret
			default:
			EICRA|=(0<<ISC20)|(0<<ISC21);
     cd8:	e9 e6       	ldi	r30, 0x69	; 105
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	80 81       	ld	r24, Z
     cde:	80 83       	st	Z, r24
     ce0:	08 95       	ret
		}
		break;

		case 3:
		EIMSK|=1<<INT3;
     ce2:	eb 9a       	sbi	0x1d, 3	; 29
		switch(cOmpare)
     ce4:	43 30       	cpi	r20, 0x03	; 3
     ce6:	51 05       	cpc	r21, r1
     ce8:	61 f0       	breq	.+24     	; 0xd02 <_Z15attachIntteruptiPFvvEi+0x12c>
     cea:	44 30       	cpi	r20, 0x04	; 4
     cec:	51 05       	cpc	r21, r1
     cee:	69 f0       	breq	.+26     	; 0xd0a <_Z15attachIntteruptiPFvvEi+0x134>
     cf0:	42 30       	cpi	r20, 0x02	; 2
     cf2:	51 05       	cpc	r21, r1
     cf4:	81 f4       	brne	.+32     	; 0xd16 <_Z15attachIntteruptiPFvvEi+0x140>
		{
			case 2:
			EICRA|=(1<<ISC30)|(1<<ISC31);
     cf6:	e9 e6       	ldi	r30, 0x69	; 105
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	80 81       	ld	r24, Z
     cfc:	80 6c       	ori	r24, 0xC0	; 192
     cfe:	80 83       	st	Z, r24
			break;
     d00:	08 95       	ret
			case 3:
			EICRA=(0<<ISC30)|(1<<ISC31);
     d02:	80 e8       	ldi	r24, 0x80	; 128
     d04:	80 93 69 00 	sts	0x0069, r24
			break;
     d08:	08 95       	ret
			case 4:
			EICRA|=(1<<ISC30)|(0<<ISC31);
     d0a:	e9 e6       	ldi	r30, 0x69	; 105
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	80 81       	ld	r24, Z
     d10:	80 64       	ori	r24, 0x40	; 64
     d12:	80 83       	st	Z, r24
			break;
     d14:	08 95       	ret
			default:
			EICRA|=(0<<ISC30)|(0<<ISC31);
     d16:	e9 e6       	ldi	r30, 0x69	; 105
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	80 81       	ld	r24, Z
     d1c:	80 83       	st	Z, r24
     d1e:	08 95       	ret
		}
		break;

		case 4:
		EIMSK|=1<<INT4;
     d20:	ec 9a       	sbi	0x1d, 4	; 29
                switch(cOmpare)
     d22:	43 30       	cpi	r20, 0x03	; 3
     d24:	51 05       	cpc	r21, r1
     d26:	61 f0       	breq	.+24     	; 0xd40 <_Z15attachIntteruptiPFvvEi+0x16a>
     d28:	44 30       	cpi	r20, 0x04	; 4
     d2a:	51 05       	cpc	r21, r1
     d2c:	69 f0       	breq	.+26     	; 0xd48 <_Z15attachIntteruptiPFvvEi+0x172>
     d2e:	42 30       	cpi	r20, 0x02	; 2
     d30:	51 05       	cpc	r21, r1
     d32:	81 f4       	brne	.+32     	; 0xd54 <_Z15attachIntteruptiPFvvEi+0x17e>
		{
			case 2:
			EICRB|=(1<<ISC40)|(1<<ISC41);
     d34:	ea e6       	ldi	r30, 0x6A	; 106
     d36:	f0 e0       	ldi	r31, 0x00	; 0
     d38:	80 81       	ld	r24, Z
     d3a:	83 60       	ori	r24, 0x03	; 3
     d3c:	80 83       	st	Z, r24
			break;
     d3e:	08 95       	ret
			case 3:
			EICRB=(0<<ISC40)|(1<<ISC41);
     d40:	82 e0       	ldi	r24, 0x02	; 2
     d42:	80 93 6a 00 	sts	0x006A, r24
			break;
     d46:	08 95       	ret
			case 4:
			EICRB|=(1<<ISC40)|(0<<ISC41);
     d48:	ea e6       	ldi	r30, 0x6A	; 106
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	80 81       	ld	r24, Z
     d4e:	81 60       	ori	r24, 0x01	; 1
     d50:	80 83       	st	Z, r24
			break;
     d52:	08 95       	ret
			default:
			EICRB|=(0<<ISC40)|(0<<ISC41);
     d54:	ea e6       	ldi	r30, 0x6A	; 106
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	80 81       	ld	r24, Z
     d5a:	80 83       	st	Z, r24
     d5c:	08 95       	ret
		}
		break;

		case 5:
		EIMSK|=1<<INT5;
     d5e:	ed 9a       	sbi	0x1d, 5	; 29
		switch(cOmpare)
     d60:	43 30       	cpi	r20, 0x03	; 3
     d62:	51 05       	cpc	r21, r1
     d64:	61 f0       	breq	.+24     	; 0xd7e <_Z15attachIntteruptiPFvvEi+0x1a8>
     d66:	44 30       	cpi	r20, 0x04	; 4
     d68:	51 05       	cpc	r21, r1
     d6a:	69 f0       	breq	.+26     	; 0xd86 <_Z15attachIntteruptiPFvvEi+0x1b0>
     d6c:	42 30       	cpi	r20, 0x02	; 2
     d6e:	51 05       	cpc	r21, r1
     d70:	81 f4       	brne	.+32     	; 0xd92 <_Z15attachIntteruptiPFvvEi+0x1bc>
		{
			case 2:
			EICRB|=(1<<ISC50)|(1<<ISC51);
     d72:	ea e6       	ldi	r30, 0x6A	; 106
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	80 81       	ld	r24, Z
     d78:	8c 60       	ori	r24, 0x0C	; 12
     d7a:	80 83       	st	Z, r24
			break;
     d7c:	08 95       	ret
			case 3:
			EICRB=(0<<ISC50)|(1<<ISC51);
     d7e:	88 e0       	ldi	r24, 0x08	; 8
     d80:	80 93 6a 00 	sts	0x006A, r24
			break;
     d84:	08 95       	ret
			case 4:
			EICRB|=(1<<ISC50)|(0<<ISC51);
     d86:	ea e6       	ldi	r30, 0x6A	; 106
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	80 81       	ld	r24, Z
     d8c:	84 60       	ori	r24, 0x04	; 4
     d8e:	80 83       	st	Z, r24
			break;
     d90:	08 95       	ret
			default:
                 	EICRB|=(0<<ISC40)|(0<<ISC41);
     d92:	ea e6       	ldi	r30, 0x6A	; 106
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	80 81       	ld	r24, Z
     d98:	80 83       	st	Z, r24
     d9a:	08 95       	ret

		}
		break;

		case 6:
		EIMSK|=1<<INT6;
     d9c:	ee 9a       	sbi	0x1d, 6	; 29
	        switch(cOmpare)
     d9e:	43 30       	cpi	r20, 0x03	; 3
     da0:	51 05       	cpc	r21, r1
     da2:	61 f0       	breq	.+24     	; 0xdbc <_Z15attachIntteruptiPFvvEi+0x1e6>
     da4:	44 30       	cpi	r20, 0x04	; 4
     da6:	51 05       	cpc	r21, r1
     da8:	69 f0       	breq	.+26     	; 0xdc4 <_Z15attachIntteruptiPFvvEi+0x1ee>
     daa:	42 30       	cpi	r20, 0x02	; 2
     dac:	51 05       	cpc	r21, r1
     dae:	81 f4       	brne	.+32     	; 0xdd0 <_Z15attachIntteruptiPFvvEi+0x1fa>
		{
			case 2:
			EICRB|=(1<<ISC60)|(1<<ISC61);
     db0:	ea e6       	ldi	r30, 0x6A	; 106
     db2:	f0 e0       	ldi	r31, 0x00	; 0
     db4:	80 81       	ld	r24, Z
     db6:	80 63       	ori	r24, 0x30	; 48
     db8:	80 83       	st	Z, r24
			break;
     dba:	08 95       	ret
			case 3:
			EICRB=(0<<ISC60)|(1<<ISC61);
     dbc:	80 e2       	ldi	r24, 0x20	; 32
     dbe:	80 93 6a 00 	sts	0x006A, r24
			break;
     dc2:	08 95       	ret
			case 4:
			EICRB|=(1<<ISC60)|(0<<ISC61);
     dc4:	ea e6       	ldi	r30, 0x6A	; 106
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	80 81       	ld	r24, Z
     dca:	80 61       	ori	r24, 0x10	; 16
     dcc:	80 83       	st	Z, r24
			break;
     dce:	08 95       	ret
			default:
			EICRB|=(0<<ISC60)|(0<<ISC61);
     dd0:	ea e6       	ldi	r30, 0x6A	; 106
     dd2:	f0 e0       	ldi	r31, 0x00	; 0
     dd4:	80 81       	ld	r24, Z
     dd6:	80 83       	st	Z, r24
     dd8:	08 95       	ret

		}
		break;

		case 7:
		EIMSK|=1<<INT7;
     dda:	ef 9a       	sbi	0x1d, 7	; 29
		switch(cOmpare)
     ddc:	43 30       	cpi	r20, 0x03	; 3
     dde:	51 05       	cpc	r21, r1
     de0:	61 f0       	breq	.+24     	; 0xdfa <_Z15attachIntteruptiPFvvEi+0x224>
     de2:	44 30       	cpi	r20, 0x04	; 4
     de4:	51 05       	cpc	r21, r1
     de6:	69 f0       	breq	.+26     	; 0xe02 <_Z15attachIntteruptiPFvvEi+0x22c>
     de8:	42 30       	cpi	r20, 0x02	; 2
     dea:	51 05       	cpc	r21, r1
     dec:	81 f4       	brne	.+32     	; 0xe0e <_Z15attachIntteruptiPFvvEi+0x238>
		{
			case 2:
			EICRB|=(1<<ISC70)|(1<<ISC71);
     dee:	ea e6       	ldi	r30, 0x6A	; 106
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	80 81       	ld	r24, Z
     df4:	80 6c       	ori	r24, 0xC0	; 192
     df6:	80 83       	st	Z, r24
			break;
     df8:	08 95       	ret
			case 3:
			EICRB=(0<<ISC70)|(1<<ISC71);
     dfa:	80 e8       	ldi	r24, 0x80	; 128
     dfc:	80 93 6a 00 	sts	0x006A, r24
			break;
     e00:	08 95       	ret
			case 4:
			EICRB|=(1<<ISC70)|(0<<ISC71);
     e02:	ea e6       	ldi	r30, 0x6A	; 106
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	80 81       	ld	r24, Z
     e08:	80 64       	ori	r24, 0x40	; 64
     e0a:	80 83       	st	Z, r24
			break;
     e0c:	08 95       	ret
			default:
			EICRB|=(0<<ISC70)|(0<<ISC71);
     e0e:	ea e6       	ldi	r30, 0x6A	; 106
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	80 83       	st	Z, r24
     e16:	08 95       	ret
		}
		break;

	        default:EICRA|=(0<<ISC01)|(0<<ISC00);
     e18:	e9 e6       	ldi	r30, 0x69	; 105
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	80 81       	ld	r24, Z
     e1e:	80 83       	st	Z, r24
     e20:	08 95       	ret

00000e22 <__vector_1>:
	}
}
ISR(INT0_vect)
{
     e22:	1f 92       	push	r1
     e24:	0f 92       	push	r0
     e26:	0f b6       	in	r0, 0x3f	; 63
     e28:	0f 92       	push	r0
     e2a:	0b b6       	in	r0, 0x3b	; 59
     e2c:	0f 92       	push	r0
     e2e:	11 24       	eor	r1, r1
     e30:	2f 93       	push	r18
     e32:	3f 93       	push	r19
     e34:	4f 93       	push	r20
     e36:	5f 93       	push	r21
     e38:	6f 93       	push	r22
     e3a:	7f 93       	push	r23
     e3c:	8f 93       	push	r24
     e3e:	9f 93       	push	r25
     e40:	af 93       	push	r26
     e42:	bf 93       	push	r27
     e44:	ef 93       	push	r30
     e46:	ff 93       	push	r31
   cAllisr();
     e48:	e0 91 c2 02 	lds	r30, 0x02C2
     e4c:	f0 91 c3 02 	lds	r31, 0x02C3
     e50:	19 95       	eicall
}
     e52:	ff 91       	pop	r31
     e54:	ef 91       	pop	r30
     e56:	bf 91       	pop	r27
     e58:	af 91       	pop	r26
     e5a:	9f 91       	pop	r25
     e5c:	8f 91       	pop	r24
     e5e:	7f 91       	pop	r23
     e60:	6f 91       	pop	r22
     e62:	5f 91       	pop	r21
     e64:	4f 91       	pop	r20
     e66:	3f 91       	pop	r19
     e68:	2f 91       	pop	r18
     e6a:	0f 90       	pop	r0
     e6c:	0b be       	out	0x3b, r0	; 59
     e6e:	0f 90       	pop	r0
     e70:	0f be       	out	0x3f, r0	; 63
     e72:	0f 90       	pop	r0
     e74:	1f 90       	pop	r1
     e76:	18 95       	reti

00000e78 <__vector_2>:
ISR(INT1_vect)
{
     e78:	1f 92       	push	r1
     e7a:	0f 92       	push	r0
     e7c:	0f b6       	in	r0, 0x3f	; 63
     e7e:	0f 92       	push	r0
     e80:	0b b6       	in	r0, 0x3b	; 59
     e82:	0f 92       	push	r0
     e84:	11 24       	eor	r1, r1
     e86:	2f 93       	push	r18
     e88:	3f 93       	push	r19
     e8a:	4f 93       	push	r20
     e8c:	5f 93       	push	r21
     e8e:	6f 93       	push	r22
     e90:	7f 93       	push	r23
     e92:	8f 93       	push	r24
     e94:	9f 93       	push	r25
     e96:	af 93       	push	r26
     e98:	bf 93       	push	r27
     e9a:	ef 93       	push	r30
     e9c:	ff 93       	push	r31
   cAllisr();
     e9e:	e0 91 c2 02 	lds	r30, 0x02C2
     ea2:	f0 91 c3 02 	lds	r31, 0x02C3
     ea6:	19 95       	eicall
}
     ea8:	ff 91       	pop	r31
     eaa:	ef 91       	pop	r30
     eac:	bf 91       	pop	r27
     eae:	af 91       	pop	r26
     eb0:	9f 91       	pop	r25
     eb2:	8f 91       	pop	r24
     eb4:	7f 91       	pop	r23
     eb6:	6f 91       	pop	r22
     eb8:	5f 91       	pop	r21
     eba:	4f 91       	pop	r20
     ebc:	3f 91       	pop	r19
     ebe:	2f 91       	pop	r18
     ec0:	0f 90       	pop	r0
     ec2:	0b be       	out	0x3b, r0	; 59
     ec4:	0f 90       	pop	r0
     ec6:	0f be       	out	0x3f, r0	; 63
     ec8:	0f 90       	pop	r0
     eca:	1f 90       	pop	r1
     ecc:	18 95       	reti

00000ece <__vector_3>:
ISR(INT2_vect)
{
     ece:	1f 92       	push	r1
     ed0:	0f 92       	push	r0
     ed2:	0f b6       	in	r0, 0x3f	; 63
     ed4:	0f 92       	push	r0
     ed6:	0b b6       	in	r0, 0x3b	; 59
     ed8:	0f 92       	push	r0
     eda:	11 24       	eor	r1, r1
     edc:	2f 93       	push	r18
     ede:	3f 93       	push	r19
     ee0:	4f 93       	push	r20
     ee2:	5f 93       	push	r21
     ee4:	6f 93       	push	r22
     ee6:	7f 93       	push	r23
     ee8:	8f 93       	push	r24
     eea:	9f 93       	push	r25
     eec:	af 93       	push	r26
     eee:	bf 93       	push	r27
     ef0:	ef 93       	push	r30
     ef2:	ff 93       	push	r31
   cAllisr();
     ef4:	e0 91 c2 02 	lds	r30, 0x02C2
     ef8:	f0 91 c3 02 	lds	r31, 0x02C3
     efc:	19 95       	eicall
}
     efe:	ff 91       	pop	r31
     f00:	ef 91       	pop	r30
     f02:	bf 91       	pop	r27
     f04:	af 91       	pop	r26
     f06:	9f 91       	pop	r25
     f08:	8f 91       	pop	r24
     f0a:	7f 91       	pop	r23
     f0c:	6f 91       	pop	r22
     f0e:	5f 91       	pop	r21
     f10:	4f 91       	pop	r20
     f12:	3f 91       	pop	r19
     f14:	2f 91       	pop	r18
     f16:	0f 90       	pop	r0
     f18:	0b be       	out	0x3b, r0	; 59
     f1a:	0f 90       	pop	r0
     f1c:	0f be       	out	0x3f, r0	; 63
     f1e:	0f 90       	pop	r0
     f20:	1f 90       	pop	r1
     f22:	18 95       	reti

00000f24 <__vector_4>:
ISR(INT3_vect)
{
     f24:	1f 92       	push	r1
     f26:	0f 92       	push	r0
     f28:	0f b6       	in	r0, 0x3f	; 63
     f2a:	0f 92       	push	r0
     f2c:	0b b6       	in	r0, 0x3b	; 59
     f2e:	0f 92       	push	r0
     f30:	11 24       	eor	r1, r1
     f32:	2f 93       	push	r18
     f34:	3f 93       	push	r19
     f36:	4f 93       	push	r20
     f38:	5f 93       	push	r21
     f3a:	6f 93       	push	r22
     f3c:	7f 93       	push	r23
     f3e:	8f 93       	push	r24
     f40:	9f 93       	push	r25
     f42:	af 93       	push	r26
     f44:	bf 93       	push	r27
     f46:	ef 93       	push	r30
     f48:	ff 93       	push	r31
   cAllisr();
     f4a:	e0 91 c2 02 	lds	r30, 0x02C2
     f4e:	f0 91 c3 02 	lds	r31, 0x02C3
     f52:	19 95       	eicall
}
     f54:	ff 91       	pop	r31
     f56:	ef 91       	pop	r30
     f58:	bf 91       	pop	r27
     f5a:	af 91       	pop	r26
     f5c:	9f 91       	pop	r25
     f5e:	8f 91       	pop	r24
     f60:	7f 91       	pop	r23
     f62:	6f 91       	pop	r22
     f64:	5f 91       	pop	r21
     f66:	4f 91       	pop	r20
     f68:	3f 91       	pop	r19
     f6a:	2f 91       	pop	r18
     f6c:	0f 90       	pop	r0
     f6e:	0b be       	out	0x3b, r0	; 59
     f70:	0f 90       	pop	r0
     f72:	0f be       	out	0x3f, r0	; 63
     f74:	0f 90       	pop	r0
     f76:	1f 90       	pop	r1
     f78:	18 95       	reti

00000f7a <__vector_5>:
ISR(INT4_vect)
{
     f7a:	1f 92       	push	r1
     f7c:	0f 92       	push	r0
     f7e:	0f b6       	in	r0, 0x3f	; 63
     f80:	0f 92       	push	r0
     f82:	0b b6       	in	r0, 0x3b	; 59
     f84:	0f 92       	push	r0
     f86:	11 24       	eor	r1, r1
     f88:	2f 93       	push	r18
     f8a:	3f 93       	push	r19
     f8c:	4f 93       	push	r20
     f8e:	5f 93       	push	r21
     f90:	6f 93       	push	r22
     f92:	7f 93       	push	r23
     f94:	8f 93       	push	r24
     f96:	9f 93       	push	r25
     f98:	af 93       	push	r26
     f9a:	bf 93       	push	r27
     f9c:	ef 93       	push	r30
     f9e:	ff 93       	push	r31
    cAllisr();
     fa0:	e0 91 c2 02 	lds	r30, 0x02C2
     fa4:	f0 91 c3 02 	lds	r31, 0x02C3
     fa8:	19 95       	eicall
}
     faa:	ff 91       	pop	r31
     fac:	ef 91       	pop	r30
     fae:	bf 91       	pop	r27
     fb0:	af 91       	pop	r26
     fb2:	9f 91       	pop	r25
     fb4:	8f 91       	pop	r24
     fb6:	7f 91       	pop	r23
     fb8:	6f 91       	pop	r22
     fba:	5f 91       	pop	r21
     fbc:	4f 91       	pop	r20
     fbe:	3f 91       	pop	r19
     fc0:	2f 91       	pop	r18
     fc2:	0f 90       	pop	r0
     fc4:	0b be       	out	0x3b, r0	; 59
     fc6:	0f 90       	pop	r0
     fc8:	0f be       	out	0x3f, r0	; 63
     fca:	0f 90       	pop	r0
     fcc:	1f 90       	pop	r1
     fce:	18 95       	reti

00000fd0 <__vector_6>:
ISR(INT5_vect)
{
     fd0:	1f 92       	push	r1
     fd2:	0f 92       	push	r0
     fd4:	0f b6       	in	r0, 0x3f	; 63
     fd6:	0f 92       	push	r0
     fd8:	0b b6       	in	r0, 0x3b	; 59
     fda:	0f 92       	push	r0
     fdc:	11 24       	eor	r1, r1
     fde:	2f 93       	push	r18
     fe0:	3f 93       	push	r19
     fe2:	4f 93       	push	r20
     fe4:	5f 93       	push	r21
     fe6:	6f 93       	push	r22
     fe8:	7f 93       	push	r23
     fea:	8f 93       	push	r24
     fec:	9f 93       	push	r25
     fee:	af 93       	push	r26
     ff0:	bf 93       	push	r27
     ff2:	ef 93       	push	r30
     ff4:	ff 93       	push	r31
    cAllisr();
     ff6:	e0 91 c2 02 	lds	r30, 0x02C2
     ffa:	f0 91 c3 02 	lds	r31, 0x02C3
     ffe:	19 95       	eicall
}
    1000:	ff 91       	pop	r31
    1002:	ef 91       	pop	r30
    1004:	bf 91       	pop	r27
    1006:	af 91       	pop	r26
    1008:	9f 91       	pop	r25
    100a:	8f 91       	pop	r24
    100c:	7f 91       	pop	r23
    100e:	6f 91       	pop	r22
    1010:	5f 91       	pop	r21
    1012:	4f 91       	pop	r20
    1014:	3f 91       	pop	r19
    1016:	2f 91       	pop	r18
    1018:	0f 90       	pop	r0
    101a:	0b be       	out	0x3b, r0	; 59
    101c:	0f 90       	pop	r0
    101e:	0f be       	out	0x3f, r0	; 63
    1020:	0f 90       	pop	r0
    1022:	1f 90       	pop	r1
    1024:	18 95       	reti

00001026 <__vector_7>:
ISR(INT6_vect)
{
    1026:	1f 92       	push	r1
    1028:	0f 92       	push	r0
    102a:	0f b6       	in	r0, 0x3f	; 63
    102c:	0f 92       	push	r0
    102e:	0b b6       	in	r0, 0x3b	; 59
    1030:	0f 92       	push	r0
    1032:	11 24       	eor	r1, r1
    1034:	2f 93       	push	r18
    1036:	3f 93       	push	r19
    1038:	4f 93       	push	r20
    103a:	5f 93       	push	r21
    103c:	6f 93       	push	r22
    103e:	7f 93       	push	r23
    1040:	8f 93       	push	r24
    1042:	9f 93       	push	r25
    1044:	af 93       	push	r26
    1046:	bf 93       	push	r27
    1048:	ef 93       	push	r30
    104a:	ff 93       	push	r31
    cAllisr();
    104c:	e0 91 c2 02 	lds	r30, 0x02C2
    1050:	f0 91 c3 02 	lds	r31, 0x02C3
    1054:	19 95       	eicall
}
    1056:	ff 91       	pop	r31
    1058:	ef 91       	pop	r30
    105a:	bf 91       	pop	r27
    105c:	af 91       	pop	r26
    105e:	9f 91       	pop	r25
    1060:	8f 91       	pop	r24
    1062:	7f 91       	pop	r23
    1064:	6f 91       	pop	r22
    1066:	5f 91       	pop	r21
    1068:	4f 91       	pop	r20
    106a:	3f 91       	pop	r19
    106c:	2f 91       	pop	r18
    106e:	0f 90       	pop	r0
    1070:	0b be       	out	0x3b, r0	; 59
    1072:	0f 90       	pop	r0
    1074:	0f be       	out	0x3f, r0	; 63
    1076:	0f 90       	pop	r0
    1078:	1f 90       	pop	r1
    107a:	18 95       	reti

0000107c <__vector_8>:
ISR(INT7_vect)
{
    107c:	1f 92       	push	r1
    107e:	0f 92       	push	r0
    1080:	0f b6       	in	r0, 0x3f	; 63
    1082:	0f 92       	push	r0
    1084:	0b b6       	in	r0, 0x3b	; 59
    1086:	0f 92       	push	r0
    1088:	11 24       	eor	r1, r1
    108a:	2f 93       	push	r18
    108c:	3f 93       	push	r19
    108e:	4f 93       	push	r20
    1090:	5f 93       	push	r21
    1092:	6f 93       	push	r22
    1094:	7f 93       	push	r23
    1096:	8f 93       	push	r24
    1098:	9f 93       	push	r25
    109a:	af 93       	push	r26
    109c:	bf 93       	push	r27
    109e:	ef 93       	push	r30
    10a0:	ff 93       	push	r31
    cAllisr();
    10a2:	e0 91 c2 02 	lds	r30, 0x02C2
    10a6:	f0 91 c3 02 	lds	r31, 0x02C3
    10aa:	19 95       	eicall
}
    10ac:	ff 91       	pop	r31
    10ae:	ef 91       	pop	r30
    10b0:	bf 91       	pop	r27
    10b2:	af 91       	pop	r26
    10b4:	9f 91       	pop	r25
    10b6:	8f 91       	pop	r24
    10b8:	7f 91       	pop	r23
    10ba:	6f 91       	pop	r22
    10bc:	5f 91       	pop	r21
    10be:	4f 91       	pop	r20
    10c0:	3f 91       	pop	r19
    10c2:	2f 91       	pop	r18
    10c4:	0f 90       	pop	r0
    10c6:	0b be       	out	0x3b, r0	; 59
    10c8:	0f 90       	pop	r0
    10ca:	0f be       	out	0x3f, r0	; 63
    10cc:	0f 90       	pop	r0
    10ce:	1f 90       	pop	r1
    10d0:	18 95       	reti

000010d2 <_Z5setupv>:
#define servoPwm4 2

int correction[4]={-10,-20,-45,5},angle=150;		//HACK:All four servo are not mounted parallely, thus to compensate the offset angle, correction aray is made. 
Cytron motors(dir1,pwm1,dir2,pwm2,dir3,pwm3,dir4,pwm4);
/******************Main Code********************/	
void setup(){
    10d2:	1f 93       	push	r17
    10d4:	cf 93       	push	r28
    10d6:	df 93       	push	r29
{
	public:
	void begin( unsigned int BAUD){
		/*Set baud rate */int uBrr;
		uBrr=(F_CPU/16UL/BAUD-1);
		UBRR0H = (unsigned char)(uBrr>>8);
    10d8:	10 92 c5 00 	sts	0x00C5, r1
		UBRR0L = (unsigned char)uBrr;
    10dc:	1c e0       	ldi	r17, 0x0C	; 12
    10de:	10 93 c4 00 	sts	0x00C4, r17
		/* Enable receiver and transmitter */
		UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    10e2:	88 e1       	ldi	r24, 0x18	; 24
    10e4:	80 93 c1 00 	sts	0x00C1, r24
		/* Set frame format: 8data, 2stop bit */
		UCSR0C = (1<<USBS0)|(3<<UCSZ00);
    10e8:	8e e0       	ldi	r24, 0x0E	; 14
    10ea:	80 93 c2 00 	sts	0x00C2, r24
		digitalWrite(dIrpin1,dIrection1);
		digitalWrite(dIrpin2,dIrection2);
	}

	void direction(uint8_t dIrection, uint8_t dIrection1, uint8_t dIrection2, uint8_t dIrection3){
		pinMode(dIrpin,OUTPUT);     //sets direction pin as output
    10ee:	80 91 d4 02 	lds	r24, 0x02D4
    10f2:	61 e0       	ldi	r22, 0x01	; 1
    10f4:	0e 94 a6 00 	call	0x14c	; 0x14c <_Z7pinModehh>
	    pinMode(dIrpin1,OUTPUT);
    10f8:	80 91 d9 02 	lds	r24, 0x02D9
    10fc:	61 e0       	ldi	r22, 0x01	; 1
    10fe:	0e 94 a6 00 	call	0x14c	; 0x14c <_Z7pinModehh>
	    pinMode(dIrpin2,OUTPUT);
    1102:	80 91 dd 02 	lds	r24, 0x02DD
    1106:	61 e0       	ldi	r22, 0x01	; 1
    1108:	0e 94 a6 00 	call	0x14c	; 0x14c <_Z7pinModehh>
	    pinMode(dIrpin3,OUTPUT);
    110c:	80 91 e1 02 	lds	r24, 0x02E1
    1110:	61 e0       	ldi	r22, 0x01	; 1
    1112:	0e 94 a6 00 	call	0x14c	; 0x14c <_Z7pinModehh>
		digitalWrite(dIrpin,dIrection);
    1116:	80 91 d4 02 	lds	r24, 0x02D4
    111a:	60 e0       	ldi	r22, 0x00	; 0
    111c:	0e 94 19 02 	call	0x432	; 0x432 <_Z12digitalWritehh>
		digitalWrite(dIrpin1,dIrection1);
    1120:	80 91 d9 02 	lds	r24, 0x02D9
    1124:	60 e0       	ldi	r22, 0x00	; 0
    1126:	0e 94 19 02 	call	0x432	; 0x432 <_Z12digitalWritehh>
		digitalWrite(dIrpin2,dIrection2);
    112a:	80 91 dd 02 	lds	r24, 0x02DD
    112e:	60 e0       	ldi	r22, 0x00	; 0
    1130:	0e 94 19 02 	call	0x432	; 0x432 <_Z12digitalWritehh>
		digitalWrite(dIrpin3,dIrection3);
    1134:	80 91 e1 02 	lds	r24, 0x02E1
    1138:	60 e0       	ldi	r22, 0x00	; 0
    113a:	0e 94 19 02 	call	0x432	; 0x432 <_Z12digitalWritehh>
public:
  uint8_t pIn;
  
  void attach(uint8_t nUm)       //F_CPU=clock frequency and num=pin no.to be attached
  {
    iCr=19999;
    113e:	8f e1       	ldi	r24, 0x1F	; 31
    1140:	9e e4       	ldi	r25, 0x4E	; 78
    1142:	90 93 c9 02 	sts	0x02C9, r25
    1146:	80 93 c8 02 	sts	0x02C8, r24
    pIn=nUm;
    114a:	2b e0       	ldi	r18, 0x0B	; 11
    114c:	20 93 ca 02 	sts	0x02CA, r18
    switch(pIn)
    {
     case 11 :                           //OC1A
        DDRB|=(1<<PB5); // PORTB as OUTPUT
    1150:	25 9a       	sbi	0x04, 5	; 4
        TCCR1A |= (1<<WGM11) | (1<<COM1A1) | (1<<COM1A0);
    1152:	a0 e8       	ldi	r26, 0x80	; 128
    1154:	b0 e0       	ldi	r27, 0x00	; 0
    1156:	2c 91       	ld	r18, X
    1158:	22 6c       	ori	r18, 0xC2	; 194
    115a:	2c 93       	st	X, r18
        TCCR1B |= (1<<WGM12) | (1<<WGM13);
    115c:	e1 e8       	ldi	r30, 0x81	; 129
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	20 81       	ld	r18, Z
    1162:	28 61       	ori	r18, 0x18	; 24
    1164:	20 83       	st	Z, r18
        TCCR1B |= (1<<CS10);
    1166:	20 81       	ld	r18, Z
    1168:	21 60       	ori	r18, 0x01	; 1
    116a:	20 83       	st	Z, r18
        ICR1=iCr;                    //generating 20msec pulse (pwm method)
    116c:	c6 e8       	ldi	r28, 0x86	; 134
    116e:	d0 e0       	ldi	r29, 0x00	; 0
    1170:	99 83       	std	Y+1, r25	; 0x01
    1172:	88 83       	st	Y, r24
public:
  uint8_t pIn;
  
  void attach(uint8_t nUm)       //F_CPU=clock frequency and num=pin no.to be attached
  {
    iCr=19999;
    1174:	90 93 cc 02 	sts	0x02CC, r25
    1178:	80 93 cb 02 	sts	0x02CB, r24
    pIn=nUm;
    117c:	10 93 cd 02 	sts	0x02CD, r17
        TCCR1B |= (1<<CS10);
        ICR1=iCr;                    //generating 20msec pulse (pwm method)
        break; 

     case 12 :                            //OC1B
        DDRB|=(1<<PB6); // PORTB as OUTPUT
    1180:	26 9a       	sbi	0x04, 6	; 4
        TCCR1A|=(1<<WGM11)|(1<<COM1B1)|(1<<COM1B0);  //SETTING PRESCALAR AS 64 
    1182:	2c 91       	ld	r18, X
    1184:	22 63       	ori	r18, 0x32	; 50
    1186:	2c 93       	st	X, r18
        TCCR1B|=(1<<WGM12)|(1<<WGM13)|(1<<CS10); //FAST PWM MODE
    1188:	20 81       	ld	r18, Z
    118a:	29 61       	ori	r18, 0x19	; 25
    118c:	20 83       	st	Z, r18
        ICR1=iCr;                    //generating 20msec pulse (pwm method)
    118e:	99 83       	std	Y+1, r25	; 0x01
    1190:	88 83       	st	Y, r24
public:
  uint8_t pIn;
  
  void attach(uint8_t nUm)       //F_CPU=clock frequency and num=pin no.to be attached
  {
    iCr=19999;
    1192:	90 93 cf 02 	sts	0x02CF, r25
    1196:	80 93 ce 02 	sts	0x02CE, r24
    pIn=nUm;
    119a:	25 e0       	ldi	r18, 0x05	; 5
    119c:	20 93 d0 02 	sts	0x02D0, r18
        TCCR1B|=(1<<WGM12)|(1<<WGM13)|(1<<CS10); //FAST PWM MODE
        ICR1=iCr;                    //generating 20msec pulse (pwm method)
        break;

      case 5 :                            //OC3A
        DDRE|=(1<<PE3); // PORTB as OUTPUT
    11a0:	6b 9a       	sbi	0x0d, 3	; 13
        TCCR3A|=(1<<WGM31)|(1<<COM3A1)|(1<<COM3A0);  //SETTING PRESCALAR AS 64 
    11a2:	a0 e9       	ldi	r26, 0x90	; 144
    11a4:	b0 e0       	ldi	r27, 0x00	; 0
    11a6:	2c 91       	ld	r18, X
    11a8:	22 6c       	ori	r18, 0xC2	; 194
    11aa:	2c 93       	st	X, r18
        TCCR3B|=(1<<WGM32)|(1<<WGM33)|(1<<CS30); //FAST PWM MODE
    11ac:	e1 e9       	ldi	r30, 0x91	; 145
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	20 81       	ld	r18, Z
    11b2:	29 61       	ori	r18, 0x19	; 25
    11b4:	20 83       	st	Z, r18
        ICR3=iCr;                    //generating 20msec pulse (pwm method)
    11b6:	c6 e9       	ldi	r28, 0x96	; 150
    11b8:	d0 e0       	ldi	r29, 0x00	; 0
    11ba:	99 83       	std	Y+1, r25	; 0x01
    11bc:	88 83       	st	Y, r24
public:
  uint8_t pIn;
  
  void attach(uint8_t nUm)       //F_CPU=clock frequency and num=pin no.to be attached
  {
    iCr=19999;
    11be:	90 93 d2 02 	sts	0x02D2, r25
    11c2:	80 93 d1 02 	sts	0x02D1, r24
    pIn=nUm;
    11c6:	22 e0       	ldi	r18, 0x02	; 2
    11c8:	20 93 d3 02 	sts	0x02D3, r18
        TCCR3B|=(1<<WGM32)|(1<<WGM33)|(1<<CS30); //FAST PWM MODE
        ICR3=iCr;                    //generating 20msec pulse (pwm method)
        break;

      case 2 :                            //OC3B
        DDRE|=(1<<PE4); // PORTB as OUTPUT
    11cc:	6c 9a       	sbi	0x0d, 4	; 13
        TCCR3A|=(1<<WGM31)|(1<<COM3B1)|(1<<COM3B0);  //SETTING PRESCALAR AS 64 
    11ce:	2c 91       	ld	r18, X
    11d0:	22 63       	ori	r18, 0x32	; 50
    11d2:	2c 93       	st	X, r18
        TCCR3B|=(1<<WGM32)|(1<<WGM33)|(1<<CS30); //FAST PWM MODE
    11d4:	20 81       	ld	r18, Z
    11d6:	29 61       	ori	r18, 0x19	; 25
    11d8:	20 83       	st	Z, r18
        ICR3=iCr;                    //generating 20msec pulse (pwm method)
    11da:	99 83       	std	Y+1, r25	; 0x01
    11dc:	88 83       	st	Y, r24
	motors.direction(0,0,0,0);
	swerve1.attach(servoPwm1);
	swerve2.attach(servoPwm2);
	swerve3.attach(servoPwm3);
	swerve4.attach(servoPwm4);	
}
    11de:	df 91       	pop	r29
    11e0:	cf 91       	pop	r28
    11e2:	1f 91       	pop	r17
    11e4:	08 95       	ret

000011e6 <_Z4loopv>:
void loop(){
    11e6:	2f 92       	push	r2
    11e8:	3f 92       	push	r3
    11ea:	4f 92       	push	r4
    11ec:	5f 92       	push	r5
    11ee:	6f 92       	push	r6
    11f0:	7f 92       	push	r7
    11f2:	8f 92       	push	r8
    11f4:	9f 92       	push	r9
    11f6:	af 92       	push	r10
    11f8:	bf 92       	push	r11
    11fa:	cf 92       	push	r12
    11fc:	df 92       	push	r13
    11fe:	ef 92       	push	r14
    1200:	ff 92       	push	r15
    1202:	0f 93       	push	r16
    1204:	1f 93       	push	r17
    1206:	df 93       	push	r29
    1208:	cf 93       	push	r28
    120a:	cd b7       	in	r28, 0x3d	; 61
    120c:	de b7       	in	r29, 0x3e	; 62
    120e:	60 97       	sbiw	r28, 0x10	; 16
    1210:	0f b6       	in	r0, 0x3f	; 63
    1212:	f8 94       	cli
    1214:	de bf       	out	0x3e, r29	; 62
    1216:	0f be       	out	0x3f, r0	; 63
    1218:	cd bf       	out	0x3d, r28	; 61
	//XXX: Check if servo is stalling, if yes don't freak out just make sure it doesn't stall for long time. Check if heating
	angle=170;
    121a:	8a ea       	ldi	r24, 0xAA	; 170
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	90 93 bd 02 	sts	0x02BD, r25
    1222:	80 93 bc 02 	sts	0x02BC, r24
     }
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,270,iCr/40,iCr/8.7),iCr/40,iCr/8);
    1226:	00 91 c8 02 	lds	r16, 0x02C8
    122a:	10 91 c9 02 	lds	r17, 0x02C9
    122e:	c8 01       	movw	r24, r16
    1230:	68 e2       	ldi	r22, 0x28	; 40
    1232:	70 e0       	ldi	r23, 0x00	; 0
    1234:	0e 94 1d 11 	call	0x223a	; 0x223a <__divmodhi4>
    1238:	6b 01       	movw	r12, r22
    123a:	ee 24       	eor	r14, r14
    123c:	d7 fc       	sbrc	r13, 7
    123e:	e0 94       	com	r14
    1240:	fe 2c       	mov	r15, r14
    1242:	b8 01       	movw	r22, r16
    1244:	88 27       	eor	r24, r24
    1246:	77 fd       	sbrc	r23, 7
    1248:	80 95       	com	r24
    124a:	98 2f       	mov	r25, r24
    124c:	0e 94 0f 10 	call	0x201e	; 0x201e <__floatsisf>
    1250:	23 e3       	ldi	r18, 0x33	; 51
    1252:	33 e3       	ldi	r19, 0x33	; 51
    1254:	4b e0       	ldi	r20, 0x0B	; 11
    1256:	51 e4       	ldi	r21, 0x41	; 65
    1258:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <__divsf3>
    125c:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <__fixsfsi>
        break; 
    }   
  }
  long mapAngle(long x, long in_min, long in_max, long out_min, long out_max)
  {
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    1260:	6c 19       	sub	r22, r12
    1262:	7d 09       	sbc	r23, r13
    1264:	8e 09       	sbc	r24, r14
    1266:	9f 09       	sbc	r25, r15
	swerve1.write(angle+correction[0]);
    1268:	20 91 b4 02 	lds	r18, 0x02B4
    126c:	30 91 b5 02 	lds	r19, 0x02B5
    1270:	26 55       	subi	r18, 0x56	; 86
    1272:	3f 4f       	sbci	r19, 0xFF	; 255
     }
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,270,iCr/40,iCr/8.7),iCr/40,iCr/8);
    1274:	44 27       	eor	r20, r20
    1276:	37 fd       	sbrc	r19, 7
    1278:	40 95       	com	r20
    127a:	54 2f       	mov	r21, r20
        break; 
    }   
  }
  long mapAngle(long x, long in_min, long in_max, long out_min, long out_max)
  {
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    127c:	0e 94 fe 10 	call	0x21fc	; 0x21fc <__mulsi3>
    1280:	2e e0       	ldi	r18, 0x0E	; 14
    1282:	31 e0       	ldi	r19, 0x01	; 1
    1284:	40 e0       	ldi	r20, 0x00	; 0
    1286:	50 e0       	ldi	r21, 0x00	; 0
    1288:	0e 94 30 11 	call	0x2260	; 0x2260 <__divmodsi4>
    128c:	2c 0d       	add	r18, r12
    128e:	3d 1d       	adc	r19, r13
    1290:	4e 1d       	adc	r20, r14
    1292:	5f 1d       	adc	r21, r15
     }
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,270,iCr/40,iCr/8.7),iCr/40,iCr/8);
    1294:	c8 01       	movw	r24, r16
    1296:	99 23       	and	r25, r25
    1298:	0c f4       	brge	.+2      	; 0x129c <_Z4loopv+0xb6>
    129a:	07 96       	adiw	r24, 0x07	; 7
    129c:	95 95       	asr	r25
    129e:	87 95       	ror	r24
    12a0:	95 95       	asr	r25
    12a2:	87 95       	ror	r24
    12a4:	95 95       	asr	r25
    12a6:	87 95       	ror	r24
    12a8:	aa 27       	eor	r26, r26
    12aa:	97 fd       	sbrc	r25, 7
    12ac:	a0 95       	com	r26
    12ae:	ba 2f       	mov	r27, r26
  {
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  }
  long constraint(long nUm,long lOwer,long uPper)
  {
    if(nUm>uPper){
    12b0:	82 17       	cp	r24, r18
    12b2:	93 07       	cpc	r25, r19
    12b4:	a4 07       	cpc	r26, r20
    12b6:	b5 07       	cpc	r27, r21
    12b8:	4c f0       	brlt	.+18     	; 0x12cc <_Z4loopv+0xe6>
    12ba:	da 01       	movw	r26, r20
    12bc:	c9 01       	movw	r24, r18
    12be:	2c 15       	cp	r18, r12
    12c0:	3d 05       	cpc	r19, r13
    12c2:	4e 05       	cpc	r20, r14
    12c4:	5f 05       	cpc	r21, r15
    12c6:	14 f4       	brge	.+4      	; 0x12cc <_Z4loopv+0xe6>
    12c8:	d7 01       	movw	r26, r14
    12ca:	c6 01       	movw	r24, r12
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,270,iCr/40,iCr/8.7),iCr/40,iCr/8);
    switch(pIn)
    12cc:	20 91 ca 02 	lds	r18, 0x02CA
    12d0:	28 30       	cpi	r18, 0x08	; 8
    12d2:	09 f4       	brne	.+2      	; 0x12d6 <_Z4loopv+0xf0>
    12d4:	7a c0       	rjmp	.+244    	; 0x13ca <_Z4loopv+0x1e4>
    12d6:	29 30       	cpi	r18, 0x09	; 9
    12d8:	90 f4       	brcc	.+36     	; 0x12fe <_Z4loopv+0x118>
    12da:	25 30       	cpi	r18, 0x05	; 5
    12dc:	d1 f1       	breq	.+116    	; 0x1352 <_Z4loopv+0x16c>
    12de:	26 30       	cpi	r18, 0x06	; 6
    12e0:	38 f4       	brcc	.+14     	; 0x12f0 <_Z4loopv+0x10a>
    12e2:	22 30       	cpi	r18, 0x02	; 2
    12e4:	09 f4       	brne	.+2      	; 0x12e8 <_Z4loopv+0x102>
    12e6:	41 c0       	rjmp	.+130    	; 0x136a <_Z4loopv+0x184>
    12e8:	23 30       	cpi	r18, 0x03	; 3
    12ea:	09 f0       	breq	.+2      	; 0x12ee <_Z4loopv+0x108>
    12ec:	9d c0       	rjmp	.+314    	; 0x1428 <_Z4loopv+0x242>
    12ee:	49 c0       	rjmp	.+146    	; 0x1382 <_Z4loopv+0x19c>
    12f0:	26 30       	cpi	r18, 0x06	; 6
    12f2:	09 f4       	brne	.+2      	; 0x12f6 <_Z4loopv+0x110>
    12f4:	52 c0       	rjmp	.+164    	; 0x139a <_Z4loopv+0x1b4>
    12f6:	27 30       	cpi	r18, 0x07	; 7
    12f8:	09 f0       	breq	.+2      	; 0x12fc <_Z4loopv+0x116>
    12fa:	96 c0       	rjmp	.+300    	; 0x1428 <_Z4loopv+0x242>
    12fc:	5a c0       	rjmp	.+180    	; 0x13b2 <_Z4loopv+0x1cc>
    12fe:	2c 32       	cpi	r18, 0x2C	; 44
    1300:	09 f4       	brne	.+2      	; 0x1304 <_Z4loopv+0x11e>
    1302:	87 c0       	rjmp	.+270    	; 0x1412 <_Z4loopv+0x22c>
    1304:	2d 32       	cpi	r18, 0x2D	; 45
    1306:	30 f4       	brcc	.+12     	; 0x1314 <_Z4loopv+0x12e>
    1308:	2b 30       	cpi	r18, 0x0B	; 11
    130a:	59 f0       	breq	.+22     	; 0x1322 <_Z4loopv+0x13c>
    130c:	2c 30       	cpi	r18, 0x0C	; 12
    130e:	09 f0       	breq	.+2      	; 0x1312 <_Z4loopv+0x12c>
    1310:	8b c0       	rjmp	.+278    	; 0x1428 <_Z4loopv+0x242>
    1312:	13 c0       	rjmp	.+38     	; 0x133a <_Z4loopv+0x154>
    1314:	2d 32       	cpi	r18, 0x2D	; 45
    1316:	09 f4       	brne	.+2      	; 0x131a <_Z4loopv+0x134>
    1318:	70 c0       	rjmp	.+224    	; 0x13fa <_Z4loopv+0x214>
    131a:	2e 32       	cpi	r18, 0x2E	; 46
    131c:	09 f0       	breq	.+2      	; 0x1320 <_Z4loopv+0x13a>
    131e:	84 c0       	rjmp	.+264    	; 0x1428 <_Z4loopv+0x242>
    1320:	60 c0       	rjmp	.+192    	; 0x13e2 <_Z4loopv+0x1fc>
    {
     case 11:
        OCR1A=ICR1-vAl;
    1322:	20 91 86 00 	lds	r18, 0x0086
    1326:	30 91 87 00 	lds	r19, 0x0087
    132a:	a9 01       	movw	r20, r18
    132c:	48 1b       	sub	r20, r24
    132e:	59 0b       	sbc	r21, r25
    1330:	50 93 89 00 	sts	0x0089, r21
    1334:	40 93 88 00 	sts	0x0088, r20
    1338:	77 c0       	rjmp	.+238    	; 0x1428 <_Z4loopv+0x242>
        break;
      case 12:
        OCR1B=ICR1-vAl;
    133a:	20 91 86 00 	lds	r18, 0x0086
    133e:	30 91 87 00 	lds	r19, 0x0087
    1342:	f9 01       	movw	r30, r18
    1344:	e8 1b       	sub	r30, r24
    1346:	f9 0b       	sbc	r31, r25
    1348:	f0 93 8b 00 	sts	0x008B, r31
    134c:	e0 93 8a 00 	sts	0x008A, r30
    1350:	6b c0       	rjmp	.+214    	; 0x1428 <_Z4loopv+0x242>
        break;
      case 5:
        OCR3A=ICR3-vAl;
    1352:	20 91 96 00 	lds	r18, 0x0096
    1356:	30 91 97 00 	lds	r19, 0x0097
    135a:	a9 01       	movw	r20, r18
    135c:	48 1b       	sub	r20, r24
    135e:	59 0b       	sbc	r21, r25
    1360:	50 93 99 00 	sts	0x0099, r21
    1364:	40 93 98 00 	sts	0x0098, r20
    1368:	5f c0       	rjmp	.+190    	; 0x1428 <_Z4loopv+0x242>
        break;
      case 2:
        OCR3B=ICR3-vAl;
    136a:	20 91 96 00 	lds	r18, 0x0096
    136e:	30 91 97 00 	lds	r19, 0x0097
    1372:	f9 01       	movw	r30, r18
    1374:	e8 1b       	sub	r30, r24
    1376:	f9 0b       	sbc	r31, r25
    1378:	f0 93 9b 00 	sts	0x009B, r31
    137c:	e0 93 9a 00 	sts	0x009A, r30
    1380:	53 c0       	rjmp	.+166    	; 0x1428 <_Z4loopv+0x242>
        break;
      case 3:
        OCR3C=ICR3-vAl;
    1382:	20 91 96 00 	lds	r18, 0x0096
    1386:	30 91 97 00 	lds	r19, 0x0097
    138a:	a9 01       	movw	r20, r18
    138c:	48 1b       	sub	r20, r24
    138e:	59 0b       	sbc	r21, r25
    1390:	50 93 9d 00 	sts	0x009D, r21
    1394:	40 93 9c 00 	sts	0x009C, r20
    1398:	47 c0       	rjmp	.+142    	; 0x1428 <_Z4loopv+0x242>
        break;
      case 6:
        OCR4A=ICR4-vAl;
    139a:	20 91 a6 00 	lds	r18, 0x00A6
    139e:	30 91 a7 00 	lds	r19, 0x00A7
    13a2:	f9 01       	movw	r30, r18
    13a4:	e8 1b       	sub	r30, r24
    13a6:	f9 0b       	sbc	r31, r25
    13a8:	f0 93 a9 00 	sts	0x00A9, r31
    13ac:	e0 93 a8 00 	sts	0x00A8, r30
    13b0:	3b c0       	rjmp	.+118    	; 0x1428 <_Z4loopv+0x242>
        break;
      case 7:
        OCR4B=ICR4-vAl;
    13b2:	20 91 a6 00 	lds	r18, 0x00A6
    13b6:	30 91 a7 00 	lds	r19, 0x00A7
    13ba:	a9 01       	movw	r20, r18
    13bc:	48 1b       	sub	r20, r24
    13be:	59 0b       	sbc	r21, r25
    13c0:	50 93 ab 00 	sts	0x00AB, r21
    13c4:	40 93 aa 00 	sts	0x00AA, r20
    13c8:	2f c0       	rjmp	.+94     	; 0x1428 <_Z4loopv+0x242>
        break; 
      case 8:
        OCR4C=ICR4-vAl;
    13ca:	20 91 a6 00 	lds	r18, 0x00A6
    13ce:	30 91 a7 00 	lds	r19, 0x00A7
    13d2:	f9 01       	movw	r30, r18
    13d4:	e8 1b       	sub	r30, r24
    13d6:	f9 0b       	sbc	r31, r25
    13d8:	f0 93 ad 00 	sts	0x00AD, r31
    13dc:	e0 93 ac 00 	sts	0x00AC, r30
    13e0:	23 c0       	rjmp	.+70     	; 0x1428 <_Z4loopv+0x242>
        break;
      case 46:
        OCR5A=ICR5-vAl;
    13e2:	20 91 26 01 	lds	r18, 0x0126
    13e6:	30 91 27 01 	lds	r19, 0x0127
    13ea:	a9 01       	movw	r20, r18
    13ec:	48 1b       	sub	r20, r24
    13ee:	59 0b       	sbc	r21, r25
    13f0:	50 93 29 01 	sts	0x0129, r21
    13f4:	40 93 28 01 	sts	0x0128, r20
    13f8:	17 c0       	rjmp	.+46     	; 0x1428 <_Z4loopv+0x242>
        break;
      case 45:
        OCR5B=ICR5-vAl;
    13fa:	20 91 26 01 	lds	r18, 0x0126
    13fe:	30 91 27 01 	lds	r19, 0x0127
    1402:	f9 01       	movw	r30, r18
    1404:	e8 1b       	sub	r30, r24
    1406:	f9 0b       	sbc	r31, r25
    1408:	f0 93 2b 01 	sts	0x012B, r31
    140c:	e0 93 2a 01 	sts	0x012A, r30
    1410:	0b c0       	rjmp	.+22     	; 0x1428 <_Z4loopv+0x242>
        break;
      case 44:
        OCR5C=ICR5-vAl;
    1412:	20 91 26 01 	lds	r18, 0x0126
    1416:	30 91 27 01 	lds	r19, 0x0127
    141a:	a9 01       	movw	r20, r18
    141c:	48 1b       	sub	r20, r24
    141e:	59 0b       	sbc	r21, r25
    1420:	50 93 2d 01 	sts	0x012D, r21
    1424:	40 93 2c 01 	sts	0x012C, r20
     }
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,270,iCr/40,iCr/8.7),iCr/40,iCr/8);
    1428:	00 91 cb 02 	lds	r16, 0x02CB
    142c:	10 91 cc 02 	lds	r17, 0x02CC
    1430:	c8 01       	movw	r24, r16
    1432:	68 e2       	ldi	r22, 0x28	; 40
    1434:	70 e0       	ldi	r23, 0x00	; 0
    1436:	0e 94 1d 11 	call	0x223a	; 0x223a <__divmodhi4>
    143a:	6b 01       	movw	r12, r22
    143c:	ee 24       	eor	r14, r14
    143e:	d7 fc       	sbrc	r13, 7
    1440:	e0 94       	com	r14
    1442:	fe 2c       	mov	r15, r14
    1444:	b8 01       	movw	r22, r16
    1446:	88 27       	eor	r24, r24
    1448:	77 fd       	sbrc	r23, 7
    144a:	80 95       	com	r24
    144c:	98 2f       	mov	r25, r24
    144e:	0e 94 0f 10 	call	0x201e	; 0x201e <__floatsisf>
    1452:	23 e3       	ldi	r18, 0x33	; 51
    1454:	33 e3       	ldi	r19, 0x33	; 51
    1456:	4b e0       	ldi	r20, 0x0B	; 11
    1458:	51 e4       	ldi	r21, 0x41	; 65
    145a:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <__divsf3>
    145e:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <__fixsfsi>
        break; 
    }   
  }
  long mapAngle(long x, long in_min, long in_max, long out_min, long out_max)
  {
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    1462:	6c 19       	sub	r22, r12
    1464:	7d 09       	sbc	r23, r13
    1466:	8e 09       	sbc	r24, r14
    1468:	9f 09       	sbc	r25, r15
	swerve2.write(angle+correction[1]);
    146a:	40 91 bc 02 	lds	r20, 0x02BC
    146e:	50 91 bd 02 	lds	r21, 0x02BD
    1472:	20 91 b6 02 	lds	r18, 0x02B6
    1476:	30 91 b7 02 	lds	r19, 0x02B7
    147a:	24 0f       	add	r18, r20
    147c:	35 1f       	adc	r19, r21
     }
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,270,iCr/40,iCr/8.7),iCr/40,iCr/8);
    147e:	44 27       	eor	r20, r20
    1480:	37 fd       	sbrc	r19, 7
    1482:	40 95       	com	r20
    1484:	54 2f       	mov	r21, r20
        break; 
    }   
  }
  long mapAngle(long x, long in_min, long in_max, long out_min, long out_max)
  {
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    1486:	0e 94 fe 10 	call	0x21fc	; 0x21fc <__mulsi3>
    148a:	2e e0       	ldi	r18, 0x0E	; 14
    148c:	31 e0       	ldi	r19, 0x01	; 1
    148e:	40 e0       	ldi	r20, 0x00	; 0
    1490:	50 e0       	ldi	r21, 0x00	; 0
    1492:	0e 94 30 11 	call	0x2260	; 0x2260 <__divmodsi4>
    1496:	2c 0d       	add	r18, r12
    1498:	3d 1d       	adc	r19, r13
    149a:	4e 1d       	adc	r20, r14
    149c:	5f 1d       	adc	r21, r15
     }
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,270,iCr/40,iCr/8.7),iCr/40,iCr/8);
    149e:	c8 01       	movw	r24, r16
    14a0:	99 23       	and	r25, r25
    14a2:	0c f4       	brge	.+2      	; 0x14a6 <_Z4loopv+0x2c0>
    14a4:	07 96       	adiw	r24, 0x07	; 7
    14a6:	95 95       	asr	r25
    14a8:	87 95       	ror	r24
    14aa:	95 95       	asr	r25
    14ac:	87 95       	ror	r24
    14ae:	95 95       	asr	r25
    14b0:	87 95       	ror	r24
    14b2:	aa 27       	eor	r26, r26
    14b4:	97 fd       	sbrc	r25, 7
    14b6:	a0 95       	com	r26
    14b8:	ba 2f       	mov	r27, r26
  {
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  }
  long constraint(long nUm,long lOwer,long uPper)
  {
    if(nUm>uPper){
    14ba:	82 17       	cp	r24, r18
    14bc:	93 07       	cpc	r25, r19
    14be:	a4 07       	cpc	r26, r20
    14c0:	b5 07       	cpc	r27, r21
    14c2:	4c f0       	brlt	.+18     	; 0x14d6 <_Z4loopv+0x2f0>
    14c4:	da 01       	movw	r26, r20
    14c6:	c9 01       	movw	r24, r18
    14c8:	2c 15       	cp	r18, r12
    14ca:	3d 05       	cpc	r19, r13
    14cc:	4e 05       	cpc	r20, r14
    14ce:	5f 05       	cpc	r21, r15
    14d0:	14 f4       	brge	.+4      	; 0x14d6 <_Z4loopv+0x2f0>
    14d2:	d7 01       	movw	r26, r14
    14d4:	c6 01       	movw	r24, r12
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,270,iCr/40,iCr/8.7),iCr/40,iCr/8);
    switch(pIn)
    14d6:	20 91 cd 02 	lds	r18, 0x02CD
    14da:	28 30       	cpi	r18, 0x08	; 8
    14dc:	09 f4       	brne	.+2      	; 0x14e0 <_Z4loopv+0x2fa>
    14de:	7a c0       	rjmp	.+244    	; 0x15d4 <_Z4loopv+0x3ee>
    14e0:	29 30       	cpi	r18, 0x09	; 9
    14e2:	90 f4       	brcc	.+36     	; 0x1508 <_Z4loopv+0x322>
    14e4:	25 30       	cpi	r18, 0x05	; 5
    14e6:	d1 f1       	breq	.+116    	; 0x155c <_Z4loopv+0x376>
    14e8:	26 30       	cpi	r18, 0x06	; 6
    14ea:	38 f4       	brcc	.+14     	; 0x14fa <_Z4loopv+0x314>
    14ec:	22 30       	cpi	r18, 0x02	; 2
    14ee:	09 f4       	brne	.+2      	; 0x14f2 <_Z4loopv+0x30c>
    14f0:	41 c0       	rjmp	.+130    	; 0x1574 <_Z4loopv+0x38e>
    14f2:	23 30       	cpi	r18, 0x03	; 3
    14f4:	09 f0       	breq	.+2      	; 0x14f8 <_Z4loopv+0x312>
    14f6:	9d c0       	rjmp	.+314    	; 0x1632 <_Z4loopv+0x44c>
    14f8:	49 c0       	rjmp	.+146    	; 0x158c <_Z4loopv+0x3a6>
    14fa:	26 30       	cpi	r18, 0x06	; 6
    14fc:	09 f4       	brne	.+2      	; 0x1500 <_Z4loopv+0x31a>
    14fe:	52 c0       	rjmp	.+164    	; 0x15a4 <_Z4loopv+0x3be>
    1500:	27 30       	cpi	r18, 0x07	; 7
    1502:	09 f0       	breq	.+2      	; 0x1506 <_Z4loopv+0x320>
    1504:	96 c0       	rjmp	.+300    	; 0x1632 <_Z4loopv+0x44c>
    1506:	5a c0       	rjmp	.+180    	; 0x15bc <_Z4loopv+0x3d6>
    1508:	2c 32       	cpi	r18, 0x2C	; 44
    150a:	09 f4       	brne	.+2      	; 0x150e <_Z4loopv+0x328>
    150c:	87 c0       	rjmp	.+270    	; 0x161c <_Z4loopv+0x436>
    150e:	2d 32       	cpi	r18, 0x2D	; 45
    1510:	30 f4       	brcc	.+12     	; 0x151e <_Z4loopv+0x338>
    1512:	2b 30       	cpi	r18, 0x0B	; 11
    1514:	59 f0       	breq	.+22     	; 0x152c <_Z4loopv+0x346>
    1516:	2c 30       	cpi	r18, 0x0C	; 12
    1518:	09 f0       	breq	.+2      	; 0x151c <_Z4loopv+0x336>
    151a:	8b c0       	rjmp	.+278    	; 0x1632 <_Z4loopv+0x44c>
    151c:	13 c0       	rjmp	.+38     	; 0x1544 <_Z4loopv+0x35e>
    151e:	2d 32       	cpi	r18, 0x2D	; 45
    1520:	09 f4       	brne	.+2      	; 0x1524 <_Z4loopv+0x33e>
    1522:	70 c0       	rjmp	.+224    	; 0x1604 <_Z4loopv+0x41e>
    1524:	2e 32       	cpi	r18, 0x2E	; 46
    1526:	09 f0       	breq	.+2      	; 0x152a <_Z4loopv+0x344>
    1528:	84 c0       	rjmp	.+264    	; 0x1632 <_Z4loopv+0x44c>
    152a:	60 c0       	rjmp	.+192    	; 0x15ec <_Z4loopv+0x406>
    {
     case 11:
        OCR1A=ICR1-vAl;
    152c:	20 91 86 00 	lds	r18, 0x0086
    1530:	30 91 87 00 	lds	r19, 0x0087
    1534:	f9 01       	movw	r30, r18
    1536:	e8 1b       	sub	r30, r24
    1538:	f9 0b       	sbc	r31, r25
    153a:	f0 93 89 00 	sts	0x0089, r31
    153e:	e0 93 88 00 	sts	0x0088, r30
    1542:	77 c0       	rjmp	.+238    	; 0x1632 <_Z4loopv+0x44c>
        break;
      case 12:
        OCR1B=ICR1-vAl;
    1544:	20 91 86 00 	lds	r18, 0x0086
    1548:	30 91 87 00 	lds	r19, 0x0087
    154c:	a9 01       	movw	r20, r18
    154e:	48 1b       	sub	r20, r24
    1550:	59 0b       	sbc	r21, r25
    1552:	50 93 8b 00 	sts	0x008B, r21
    1556:	40 93 8a 00 	sts	0x008A, r20
    155a:	6b c0       	rjmp	.+214    	; 0x1632 <_Z4loopv+0x44c>
        break;
      case 5:
        OCR3A=ICR3-vAl;
    155c:	20 91 96 00 	lds	r18, 0x0096
    1560:	30 91 97 00 	lds	r19, 0x0097
    1564:	f9 01       	movw	r30, r18
    1566:	e8 1b       	sub	r30, r24
    1568:	f9 0b       	sbc	r31, r25
    156a:	f0 93 99 00 	sts	0x0099, r31
    156e:	e0 93 98 00 	sts	0x0098, r30
    1572:	5f c0       	rjmp	.+190    	; 0x1632 <_Z4loopv+0x44c>
        break;
      case 2:
        OCR3B=ICR3-vAl;
    1574:	20 91 96 00 	lds	r18, 0x0096
    1578:	30 91 97 00 	lds	r19, 0x0097
    157c:	a9 01       	movw	r20, r18
    157e:	48 1b       	sub	r20, r24
    1580:	59 0b       	sbc	r21, r25
    1582:	50 93 9b 00 	sts	0x009B, r21
    1586:	40 93 9a 00 	sts	0x009A, r20
    158a:	53 c0       	rjmp	.+166    	; 0x1632 <_Z4loopv+0x44c>
        break;
      case 3:
        OCR3C=ICR3-vAl;
    158c:	20 91 96 00 	lds	r18, 0x0096
    1590:	30 91 97 00 	lds	r19, 0x0097
    1594:	f9 01       	movw	r30, r18
    1596:	e8 1b       	sub	r30, r24
    1598:	f9 0b       	sbc	r31, r25
    159a:	f0 93 9d 00 	sts	0x009D, r31
    159e:	e0 93 9c 00 	sts	0x009C, r30
    15a2:	47 c0       	rjmp	.+142    	; 0x1632 <_Z4loopv+0x44c>
        break;
      case 6:
        OCR4A=ICR4-vAl;
    15a4:	20 91 a6 00 	lds	r18, 0x00A6
    15a8:	30 91 a7 00 	lds	r19, 0x00A7
    15ac:	a9 01       	movw	r20, r18
    15ae:	48 1b       	sub	r20, r24
    15b0:	59 0b       	sbc	r21, r25
    15b2:	50 93 a9 00 	sts	0x00A9, r21
    15b6:	40 93 a8 00 	sts	0x00A8, r20
    15ba:	3b c0       	rjmp	.+118    	; 0x1632 <_Z4loopv+0x44c>
        break;
      case 7:
        OCR4B=ICR4-vAl;
    15bc:	20 91 a6 00 	lds	r18, 0x00A6
    15c0:	30 91 a7 00 	lds	r19, 0x00A7
    15c4:	f9 01       	movw	r30, r18
    15c6:	e8 1b       	sub	r30, r24
    15c8:	f9 0b       	sbc	r31, r25
    15ca:	f0 93 ab 00 	sts	0x00AB, r31
    15ce:	e0 93 aa 00 	sts	0x00AA, r30
    15d2:	2f c0       	rjmp	.+94     	; 0x1632 <_Z4loopv+0x44c>
        break; 
      case 8:
        OCR4C=ICR4-vAl;
    15d4:	20 91 a6 00 	lds	r18, 0x00A6
    15d8:	30 91 a7 00 	lds	r19, 0x00A7
    15dc:	a9 01       	movw	r20, r18
    15de:	48 1b       	sub	r20, r24
    15e0:	59 0b       	sbc	r21, r25
    15e2:	50 93 ad 00 	sts	0x00AD, r21
    15e6:	40 93 ac 00 	sts	0x00AC, r20
    15ea:	23 c0       	rjmp	.+70     	; 0x1632 <_Z4loopv+0x44c>
        break;
      case 46:
        OCR5A=ICR5-vAl;
    15ec:	20 91 26 01 	lds	r18, 0x0126
    15f0:	30 91 27 01 	lds	r19, 0x0127
    15f4:	f9 01       	movw	r30, r18
    15f6:	e8 1b       	sub	r30, r24
    15f8:	f9 0b       	sbc	r31, r25
    15fa:	f0 93 29 01 	sts	0x0129, r31
    15fe:	e0 93 28 01 	sts	0x0128, r30
    1602:	17 c0       	rjmp	.+46     	; 0x1632 <_Z4loopv+0x44c>
        break;
      case 45:
        OCR5B=ICR5-vAl;
    1604:	20 91 26 01 	lds	r18, 0x0126
    1608:	30 91 27 01 	lds	r19, 0x0127
    160c:	a9 01       	movw	r20, r18
    160e:	48 1b       	sub	r20, r24
    1610:	59 0b       	sbc	r21, r25
    1612:	50 93 2b 01 	sts	0x012B, r21
    1616:	40 93 2a 01 	sts	0x012A, r20
    161a:	0b c0       	rjmp	.+22     	; 0x1632 <_Z4loopv+0x44c>
        break;
      case 44:
        OCR5C=ICR5-vAl;
    161c:	20 91 26 01 	lds	r18, 0x0126
    1620:	30 91 27 01 	lds	r19, 0x0127
    1624:	f9 01       	movw	r30, r18
    1626:	e8 1b       	sub	r30, r24
    1628:	f9 0b       	sbc	r31, r25
    162a:	f0 93 2d 01 	sts	0x012D, r31
    162e:	e0 93 2c 01 	sts	0x012C, r30
     }
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,270,iCr/40,iCr/8.7),iCr/40,iCr/8);
    1632:	00 91 ce 02 	lds	r16, 0x02CE
    1636:	10 91 cf 02 	lds	r17, 0x02CF
    163a:	c8 01       	movw	r24, r16
    163c:	68 e2       	ldi	r22, 0x28	; 40
    163e:	70 e0       	ldi	r23, 0x00	; 0
    1640:	0e 94 1d 11 	call	0x223a	; 0x223a <__divmodhi4>
    1644:	6b 01       	movw	r12, r22
    1646:	ee 24       	eor	r14, r14
    1648:	d7 fc       	sbrc	r13, 7
    164a:	e0 94       	com	r14
    164c:	fe 2c       	mov	r15, r14
    164e:	b8 01       	movw	r22, r16
    1650:	88 27       	eor	r24, r24
    1652:	77 fd       	sbrc	r23, 7
    1654:	80 95       	com	r24
    1656:	98 2f       	mov	r25, r24
    1658:	0e 94 0f 10 	call	0x201e	; 0x201e <__floatsisf>
    165c:	23 e3       	ldi	r18, 0x33	; 51
    165e:	33 e3       	ldi	r19, 0x33	; 51
    1660:	4b e0       	ldi	r20, 0x0B	; 11
    1662:	51 e4       	ldi	r21, 0x41	; 65
    1664:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <__divsf3>
    1668:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <__fixsfsi>
        break; 
    }   
  }
  long mapAngle(long x, long in_min, long in_max, long out_min, long out_max)
  {
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    166c:	6c 19       	sub	r22, r12
    166e:	7d 09       	sbc	r23, r13
    1670:	8e 09       	sbc	r24, r14
    1672:	9f 09       	sbc	r25, r15
	swerve3.write(angle+correction[2]);
    1674:	40 91 bc 02 	lds	r20, 0x02BC
    1678:	50 91 bd 02 	lds	r21, 0x02BD
    167c:	20 91 b8 02 	lds	r18, 0x02B8
    1680:	30 91 b9 02 	lds	r19, 0x02B9
    1684:	24 0f       	add	r18, r20
    1686:	35 1f       	adc	r19, r21
     }
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,270,iCr/40,iCr/8.7),iCr/40,iCr/8);
    1688:	44 27       	eor	r20, r20
    168a:	37 fd       	sbrc	r19, 7
    168c:	40 95       	com	r20
    168e:	54 2f       	mov	r21, r20
        break; 
    }   
  }
  long mapAngle(long x, long in_min, long in_max, long out_min, long out_max)
  {
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    1690:	0e 94 fe 10 	call	0x21fc	; 0x21fc <__mulsi3>
    1694:	2e e0       	ldi	r18, 0x0E	; 14
    1696:	31 e0       	ldi	r19, 0x01	; 1
    1698:	40 e0       	ldi	r20, 0x00	; 0
    169a:	50 e0       	ldi	r21, 0x00	; 0
    169c:	0e 94 30 11 	call	0x2260	; 0x2260 <__divmodsi4>
    16a0:	2c 0d       	add	r18, r12
    16a2:	3d 1d       	adc	r19, r13
    16a4:	4e 1d       	adc	r20, r14
    16a6:	5f 1d       	adc	r21, r15
     }
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,270,iCr/40,iCr/8.7),iCr/40,iCr/8);
    16a8:	c8 01       	movw	r24, r16
    16aa:	99 23       	and	r25, r25
    16ac:	0c f4       	brge	.+2      	; 0x16b0 <_Z4loopv+0x4ca>
    16ae:	07 96       	adiw	r24, 0x07	; 7
    16b0:	95 95       	asr	r25
    16b2:	87 95       	ror	r24
    16b4:	95 95       	asr	r25
    16b6:	87 95       	ror	r24
    16b8:	95 95       	asr	r25
    16ba:	87 95       	ror	r24
    16bc:	aa 27       	eor	r26, r26
    16be:	97 fd       	sbrc	r25, 7
    16c0:	a0 95       	com	r26
    16c2:	ba 2f       	mov	r27, r26
  {
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  }
  long constraint(long nUm,long lOwer,long uPper)
  {
    if(nUm>uPper){
    16c4:	82 17       	cp	r24, r18
    16c6:	93 07       	cpc	r25, r19
    16c8:	a4 07       	cpc	r26, r20
    16ca:	b5 07       	cpc	r27, r21
    16cc:	4c f0       	brlt	.+18     	; 0x16e0 <_Z4loopv+0x4fa>
    16ce:	da 01       	movw	r26, r20
    16d0:	c9 01       	movw	r24, r18
    16d2:	2c 15       	cp	r18, r12
    16d4:	3d 05       	cpc	r19, r13
    16d6:	4e 05       	cpc	r20, r14
    16d8:	5f 05       	cpc	r21, r15
    16da:	14 f4       	brge	.+4      	; 0x16e0 <_Z4loopv+0x4fa>
    16dc:	d7 01       	movw	r26, r14
    16de:	c6 01       	movw	r24, r12
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,270,iCr/40,iCr/8.7),iCr/40,iCr/8);
    switch(pIn)
    16e0:	20 91 d0 02 	lds	r18, 0x02D0
    16e4:	28 30       	cpi	r18, 0x08	; 8
    16e6:	09 f4       	brne	.+2      	; 0x16ea <_Z4loopv+0x504>
    16e8:	7a c0       	rjmp	.+244    	; 0x17de <_Z4loopv+0x5f8>
    16ea:	29 30       	cpi	r18, 0x09	; 9
    16ec:	90 f4       	brcc	.+36     	; 0x1712 <_Z4loopv+0x52c>
    16ee:	25 30       	cpi	r18, 0x05	; 5
    16f0:	d1 f1       	breq	.+116    	; 0x1766 <_Z4loopv+0x580>
    16f2:	26 30       	cpi	r18, 0x06	; 6
    16f4:	38 f4       	brcc	.+14     	; 0x1704 <_Z4loopv+0x51e>
    16f6:	22 30       	cpi	r18, 0x02	; 2
    16f8:	09 f4       	brne	.+2      	; 0x16fc <_Z4loopv+0x516>
    16fa:	41 c0       	rjmp	.+130    	; 0x177e <_Z4loopv+0x598>
    16fc:	23 30       	cpi	r18, 0x03	; 3
    16fe:	09 f0       	breq	.+2      	; 0x1702 <_Z4loopv+0x51c>
    1700:	9d c0       	rjmp	.+314    	; 0x183c <_Z4loopv+0x656>
    1702:	49 c0       	rjmp	.+146    	; 0x1796 <_Z4loopv+0x5b0>
    1704:	26 30       	cpi	r18, 0x06	; 6
    1706:	09 f4       	brne	.+2      	; 0x170a <_Z4loopv+0x524>
    1708:	52 c0       	rjmp	.+164    	; 0x17ae <_Z4loopv+0x5c8>
    170a:	27 30       	cpi	r18, 0x07	; 7
    170c:	09 f0       	breq	.+2      	; 0x1710 <_Z4loopv+0x52a>
    170e:	96 c0       	rjmp	.+300    	; 0x183c <_Z4loopv+0x656>
    1710:	5a c0       	rjmp	.+180    	; 0x17c6 <_Z4loopv+0x5e0>
    1712:	2c 32       	cpi	r18, 0x2C	; 44
    1714:	09 f4       	brne	.+2      	; 0x1718 <_Z4loopv+0x532>
    1716:	87 c0       	rjmp	.+270    	; 0x1826 <_Z4loopv+0x640>
    1718:	2d 32       	cpi	r18, 0x2D	; 45
    171a:	30 f4       	brcc	.+12     	; 0x1728 <_Z4loopv+0x542>
    171c:	2b 30       	cpi	r18, 0x0B	; 11
    171e:	59 f0       	breq	.+22     	; 0x1736 <_Z4loopv+0x550>
    1720:	2c 30       	cpi	r18, 0x0C	; 12
    1722:	09 f0       	breq	.+2      	; 0x1726 <_Z4loopv+0x540>
    1724:	8b c0       	rjmp	.+278    	; 0x183c <_Z4loopv+0x656>
    1726:	13 c0       	rjmp	.+38     	; 0x174e <_Z4loopv+0x568>
    1728:	2d 32       	cpi	r18, 0x2D	; 45
    172a:	09 f4       	brne	.+2      	; 0x172e <_Z4loopv+0x548>
    172c:	70 c0       	rjmp	.+224    	; 0x180e <_Z4loopv+0x628>
    172e:	2e 32       	cpi	r18, 0x2E	; 46
    1730:	09 f0       	breq	.+2      	; 0x1734 <_Z4loopv+0x54e>
    1732:	84 c0       	rjmp	.+264    	; 0x183c <_Z4loopv+0x656>
    1734:	60 c0       	rjmp	.+192    	; 0x17f6 <_Z4loopv+0x610>
    {
     case 11:
        OCR1A=ICR1-vAl;
    1736:	20 91 86 00 	lds	r18, 0x0086
    173a:	30 91 87 00 	lds	r19, 0x0087
    173e:	a9 01       	movw	r20, r18
    1740:	48 1b       	sub	r20, r24
    1742:	59 0b       	sbc	r21, r25
    1744:	50 93 89 00 	sts	0x0089, r21
    1748:	40 93 88 00 	sts	0x0088, r20
    174c:	77 c0       	rjmp	.+238    	; 0x183c <_Z4loopv+0x656>
        break;
      case 12:
        OCR1B=ICR1-vAl;
    174e:	20 91 86 00 	lds	r18, 0x0086
    1752:	30 91 87 00 	lds	r19, 0x0087
    1756:	f9 01       	movw	r30, r18
    1758:	e8 1b       	sub	r30, r24
    175a:	f9 0b       	sbc	r31, r25
    175c:	f0 93 8b 00 	sts	0x008B, r31
    1760:	e0 93 8a 00 	sts	0x008A, r30
    1764:	6b c0       	rjmp	.+214    	; 0x183c <_Z4loopv+0x656>
        break;
      case 5:
        OCR3A=ICR3-vAl;
    1766:	20 91 96 00 	lds	r18, 0x0096
    176a:	30 91 97 00 	lds	r19, 0x0097
    176e:	a9 01       	movw	r20, r18
    1770:	48 1b       	sub	r20, r24
    1772:	59 0b       	sbc	r21, r25
    1774:	50 93 99 00 	sts	0x0099, r21
    1778:	40 93 98 00 	sts	0x0098, r20
    177c:	5f c0       	rjmp	.+190    	; 0x183c <_Z4loopv+0x656>
        break;
      case 2:
        OCR3B=ICR3-vAl;
    177e:	20 91 96 00 	lds	r18, 0x0096
    1782:	30 91 97 00 	lds	r19, 0x0097
    1786:	f9 01       	movw	r30, r18
    1788:	e8 1b       	sub	r30, r24
    178a:	f9 0b       	sbc	r31, r25
    178c:	f0 93 9b 00 	sts	0x009B, r31
    1790:	e0 93 9a 00 	sts	0x009A, r30
    1794:	53 c0       	rjmp	.+166    	; 0x183c <_Z4loopv+0x656>
        break;
      case 3:
        OCR3C=ICR3-vAl;
    1796:	20 91 96 00 	lds	r18, 0x0096
    179a:	30 91 97 00 	lds	r19, 0x0097
    179e:	a9 01       	movw	r20, r18
    17a0:	48 1b       	sub	r20, r24
    17a2:	59 0b       	sbc	r21, r25
    17a4:	50 93 9d 00 	sts	0x009D, r21
    17a8:	40 93 9c 00 	sts	0x009C, r20
    17ac:	47 c0       	rjmp	.+142    	; 0x183c <_Z4loopv+0x656>
        break;
      case 6:
        OCR4A=ICR4-vAl;
    17ae:	20 91 a6 00 	lds	r18, 0x00A6
    17b2:	30 91 a7 00 	lds	r19, 0x00A7
    17b6:	f9 01       	movw	r30, r18
    17b8:	e8 1b       	sub	r30, r24
    17ba:	f9 0b       	sbc	r31, r25
    17bc:	f0 93 a9 00 	sts	0x00A9, r31
    17c0:	e0 93 a8 00 	sts	0x00A8, r30
    17c4:	3b c0       	rjmp	.+118    	; 0x183c <_Z4loopv+0x656>
        break;
      case 7:
        OCR4B=ICR4-vAl;
    17c6:	20 91 a6 00 	lds	r18, 0x00A6
    17ca:	30 91 a7 00 	lds	r19, 0x00A7
    17ce:	a9 01       	movw	r20, r18
    17d0:	48 1b       	sub	r20, r24
    17d2:	59 0b       	sbc	r21, r25
    17d4:	50 93 ab 00 	sts	0x00AB, r21
    17d8:	40 93 aa 00 	sts	0x00AA, r20
    17dc:	2f c0       	rjmp	.+94     	; 0x183c <_Z4loopv+0x656>
        break; 
      case 8:
        OCR4C=ICR4-vAl;
    17de:	20 91 a6 00 	lds	r18, 0x00A6
    17e2:	30 91 a7 00 	lds	r19, 0x00A7
    17e6:	f9 01       	movw	r30, r18
    17e8:	e8 1b       	sub	r30, r24
    17ea:	f9 0b       	sbc	r31, r25
    17ec:	f0 93 ad 00 	sts	0x00AD, r31
    17f0:	e0 93 ac 00 	sts	0x00AC, r30
    17f4:	23 c0       	rjmp	.+70     	; 0x183c <_Z4loopv+0x656>
        break;
      case 46:
        OCR5A=ICR5-vAl;
    17f6:	20 91 26 01 	lds	r18, 0x0126
    17fa:	30 91 27 01 	lds	r19, 0x0127
    17fe:	a9 01       	movw	r20, r18
    1800:	48 1b       	sub	r20, r24
    1802:	59 0b       	sbc	r21, r25
    1804:	50 93 29 01 	sts	0x0129, r21
    1808:	40 93 28 01 	sts	0x0128, r20
    180c:	17 c0       	rjmp	.+46     	; 0x183c <_Z4loopv+0x656>
        break;
      case 45:
        OCR5B=ICR5-vAl;
    180e:	20 91 26 01 	lds	r18, 0x0126
    1812:	30 91 27 01 	lds	r19, 0x0127
    1816:	f9 01       	movw	r30, r18
    1818:	e8 1b       	sub	r30, r24
    181a:	f9 0b       	sbc	r31, r25
    181c:	f0 93 2b 01 	sts	0x012B, r31
    1820:	e0 93 2a 01 	sts	0x012A, r30
    1824:	0b c0       	rjmp	.+22     	; 0x183c <_Z4loopv+0x656>
        break;
      case 44:
        OCR5C=ICR5-vAl;
    1826:	20 91 26 01 	lds	r18, 0x0126
    182a:	30 91 27 01 	lds	r19, 0x0127
    182e:	a9 01       	movw	r20, r18
    1830:	48 1b       	sub	r20, r24
    1832:	59 0b       	sbc	r21, r25
    1834:	50 93 2d 01 	sts	0x012D, r21
    1838:	40 93 2c 01 	sts	0x012C, r20
     }
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,270,iCr/40,iCr/8.7),iCr/40,iCr/8);
    183c:	00 91 d1 02 	lds	r16, 0x02D1
    1840:	10 91 d2 02 	lds	r17, 0x02D2
    1844:	c8 01       	movw	r24, r16
    1846:	68 e2       	ldi	r22, 0x28	; 40
    1848:	70 e0       	ldi	r23, 0x00	; 0
    184a:	0e 94 1d 11 	call	0x223a	; 0x223a <__divmodhi4>
    184e:	6b 01       	movw	r12, r22
    1850:	ee 24       	eor	r14, r14
    1852:	d7 fc       	sbrc	r13, 7
    1854:	e0 94       	com	r14
    1856:	fe 2c       	mov	r15, r14
    1858:	b8 01       	movw	r22, r16
    185a:	88 27       	eor	r24, r24
    185c:	77 fd       	sbrc	r23, 7
    185e:	80 95       	com	r24
    1860:	98 2f       	mov	r25, r24
    1862:	0e 94 0f 10 	call	0x201e	; 0x201e <__floatsisf>
    1866:	23 e3       	ldi	r18, 0x33	; 51
    1868:	33 e3       	ldi	r19, 0x33	; 51
    186a:	4b e0       	ldi	r20, 0x0B	; 11
    186c:	51 e4       	ldi	r21, 0x41	; 65
    186e:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <__divsf3>
    1872:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <__fixsfsi>
        break; 
    }   
  }
  long mapAngle(long x, long in_min, long in_max, long out_min, long out_max)
  {
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    1876:	6c 19       	sub	r22, r12
    1878:	7d 09       	sbc	r23, r13
    187a:	8e 09       	sbc	r24, r14
    187c:	9f 09       	sbc	r25, r15
	swerve4.write(angle+correction[3]);	
    187e:	40 91 bc 02 	lds	r20, 0x02BC
    1882:	50 91 bd 02 	lds	r21, 0x02BD
    1886:	20 91 ba 02 	lds	r18, 0x02BA
    188a:	30 91 bb 02 	lds	r19, 0x02BB
    188e:	24 0f       	add	r18, r20
    1890:	35 1f       	adc	r19, r21
     }
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,270,iCr/40,iCr/8.7),iCr/40,iCr/8);
    1892:	44 27       	eor	r20, r20
    1894:	37 fd       	sbrc	r19, 7
    1896:	40 95       	com	r20
    1898:	54 2f       	mov	r21, r20
        break; 
    }   
  }
  long mapAngle(long x, long in_min, long in_max, long out_min, long out_max)
  {
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    189a:	0e 94 fe 10 	call	0x21fc	; 0x21fc <__mulsi3>
    189e:	2e e0       	ldi	r18, 0x0E	; 14
    18a0:	31 e0       	ldi	r19, 0x01	; 1
    18a2:	40 e0       	ldi	r20, 0x00	; 0
    18a4:	50 e0       	ldi	r21, 0x00	; 0
    18a6:	0e 94 30 11 	call	0x2260	; 0x2260 <__divmodsi4>
    18aa:	2c 0d       	add	r18, r12
    18ac:	3d 1d       	adc	r19, r13
    18ae:	4e 1d       	adc	r20, r14
    18b0:	5f 1d       	adc	r21, r15
     }
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,270,iCr/40,iCr/8.7),iCr/40,iCr/8);
    18b2:	c8 01       	movw	r24, r16
    18b4:	99 23       	and	r25, r25
    18b6:	0c f4       	brge	.+2      	; 0x18ba <_Z4loopv+0x6d4>
    18b8:	07 96       	adiw	r24, 0x07	; 7
    18ba:	95 95       	asr	r25
    18bc:	87 95       	ror	r24
    18be:	95 95       	asr	r25
    18c0:	87 95       	ror	r24
    18c2:	95 95       	asr	r25
    18c4:	87 95       	ror	r24
    18c6:	aa 27       	eor	r26, r26
    18c8:	97 fd       	sbrc	r25, 7
    18ca:	a0 95       	com	r26
    18cc:	ba 2f       	mov	r27, r26
  {
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  }
  long constraint(long nUm,long lOwer,long uPper)
  {
    if(nUm>uPper){
    18ce:	82 17       	cp	r24, r18
    18d0:	93 07       	cpc	r25, r19
    18d2:	a4 07       	cpc	r26, r20
    18d4:	b5 07       	cpc	r27, r21
    18d6:	4c f0       	brlt	.+18     	; 0x18ea <_Z4loopv+0x704>
    18d8:	da 01       	movw	r26, r20
    18da:	c9 01       	movw	r24, r18
    18dc:	2c 15       	cp	r18, r12
    18de:	3d 05       	cpc	r19, r13
    18e0:	4e 05       	cpc	r20, r14
    18e2:	5f 05       	cpc	r21, r15
    18e4:	14 f4       	brge	.+4      	; 0x18ea <_Z4loopv+0x704>
    18e6:	d7 01       	movw	r26, r14
    18e8:	c6 01       	movw	r24, r12
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,270,iCr/40,iCr/8.7),iCr/40,iCr/8);
    switch(pIn)
    18ea:	20 91 d3 02 	lds	r18, 0x02D3
    18ee:	28 30       	cpi	r18, 0x08	; 8
    18f0:	09 f4       	brne	.+2      	; 0x18f4 <_Z4loopv+0x70e>
    18f2:	7a c0       	rjmp	.+244    	; 0x19e8 <_Z4loopv+0x802>
    18f4:	29 30       	cpi	r18, 0x09	; 9
    18f6:	90 f4       	brcc	.+36     	; 0x191c <_Z4loopv+0x736>
    18f8:	25 30       	cpi	r18, 0x05	; 5
    18fa:	d1 f1       	breq	.+116    	; 0x1970 <_Z4loopv+0x78a>
    18fc:	26 30       	cpi	r18, 0x06	; 6
    18fe:	38 f4       	brcc	.+14     	; 0x190e <_Z4loopv+0x728>
    1900:	22 30       	cpi	r18, 0x02	; 2
    1902:	09 f4       	brne	.+2      	; 0x1906 <_Z4loopv+0x720>
    1904:	41 c0       	rjmp	.+130    	; 0x1988 <_Z4loopv+0x7a2>
    1906:	23 30       	cpi	r18, 0x03	; 3
    1908:	09 f0       	breq	.+2      	; 0x190c <_Z4loopv+0x726>
    190a:	9d c0       	rjmp	.+314    	; 0x1a46 <_Z4loopv+0x860>
    190c:	49 c0       	rjmp	.+146    	; 0x19a0 <_Z4loopv+0x7ba>
    190e:	26 30       	cpi	r18, 0x06	; 6
    1910:	09 f4       	brne	.+2      	; 0x1914 <_Z4loopv+0x72e>
    1912:	52 c0       	rjmp	.+164    	; 0x19b8 <_Z4loopv+0x7d2>
    1914:	27 30       	cpi	r18, 0x07	; 7
    1916:	09 f0       	breq	.+2      	; 0x191a <_Z4loopv+0x734>
    1918:	96 c0       	rjmp	.+300    	; 0x1a46 <_Z4loopv+0x860>
    191a:	5a c0       	rjmp	.+180    	; 0x19d0 <_Z4loopv+0x7ea>
    191c:	2c 32       	cpi	r18, 0x2C	; 44
    191e:	09 f4       	brne	.+2      	; 0x1922 <_Z4loopv+0x73c>
    1920:	87 c0       	rjmp	.+270    	; 0x1a30 <_Z4loopv+0x84a>
    1922:	2d 32       	cpi	r18, 0x2D	; 45
    1924:	30 f4       	brcc	.+12     	; 0x1932 <_Z4loopv+0x74c>
    1926:	2b 30       	cpi	r18, 0x0B	; 11
    1928:	59 f0       	breq	.+22     	; 0x1940 <_Z4loopv+0x75a>
    192a:	2c 30       	cpi	r18, 0x0C	; 12
    192c:	09 f0       	breq	.+2      	; 0x1930 <_Z4loopv+0x74a>
    192e:	8b c0       	rjmp	.+278    	; 0x1a46 <_Z4loopv+0x860>
    1930:	13 c0       	rjmp	.+38     	; 0x1958 <_Z4loopv+0x772>
    1932:	2d 32       	cpi	r18, 0x2D	; 45
    1934:	09 f4       	brne	.+2      	; 0x1938 <_Z4loopv+0x752>
    1936:	70 c0       	rjmp	.+224    	; 0x1a18 <_Z4loopv+0x832>
    1938:	2e 32       	cpi	r18, 0x2E	; 46
    193a:	09 f0       	breq	.+2      	; 0x193e <_Z4loopv+0x758>
    193c:	84 c0       	rjmp	.+264    	; 0x1a46 <_Z4loopv+0x860>
    193e:	60 c0       	rjmp	.+192    	; 0x1a00 <_Z4loopv+0x81a>
    {
     case 11:
        OCR1A=ICR1-vAl;
    1940:	20 91 86 00 	lds	r18, 0x0086
    1944:	30 91 87 00 	lds	r19, 0x0087
    1948:	f9 01       	movw	r30, r18
    194a:	e8 1b       	sub	r30, r24
    194c:	f9 0b       	sbc	r31, r25
    194e:	f0 93 89 00 	sts	0x0089, r31
    1952:	e0 93 88 00 	sts	0x0088, r30
    1956:	77 c0       	rjmp	.+238    	; 0x1a46 <_Z4loopv+0x860>
        break;
      case 12:
        OCR1B=ICR1-vAl;
    1958:	20 91 86 00 	lds	r18, 0x0086
    195c:	30 91 87 00 	lds	r19, 0x0087
    1960:	a9 01       	movw	r20, r18
    1962:	48 1b       	sub	r20, r24
    1964:	59 0b       	sbc	r21, r25
    1966:	50 93 8b 00 	sts	0x008B, r21
    196a:	40 93 8a 00 	sts	0x008A, r20
    196e:	6b c0       	rjmp	.+214    	; 0x1a46 <_Z4loopv+0x860>
        break;
      case 5:
        OCR3A=ICR3-vAl;
    1970:	20 91 96 00 	lds	r18, 0x0096
    1974:	30 91 97 00 	lds	r19, 0x0097
    1978:	f9 01       	movw	r30, r18
    197a:	e8 1b       	sub	r30, r24
    197c:	f9 0b       	sbc	r31, r25
    197e:	f0 93 99 00 	sts	0x0099, r31
    1982:	e0 93 98 00 	sts	0x0098, r30
    1986:	5f c0       	rjmp	.+190    	; 0x1a46 <_Z4loopv+0x860>
        break;
      case 2:
        OCR3B=ICR3-vAl;
    1988:	20 91 96 00 	lds	r18, 0x0096
    198c:	30 91 97 00 	lds	r19, 0x0097
    1990:	a9 01       	movw	r20, r18
    1992:	48 1b       	sub	r20, r24
    1994:	59 0b       	sbc	r21, r25
    1996:	50 93 9b 00 	sts	0x009B, r21
    199a:	40 93 9a 00 	sts	0x009A, r20
    199e:	53 c0       	rjmp	.+166    	; 0x1a46 <_Z4loopv+0x860>
        break;
      case 3:
        OCR3C=ICR3-vAl;
    19a0:	20 91 96 00 	lds	r18, 0x0096
    19a4:	30 91 97 00 	lds	r19, 0x0097
    19a8:	f9 01       	movw	r30, r18
    19aa:	e8 1b       	sub	r30, r24
    19ac:	f9 0b       	sbc	r31, r25
    19ae:	f0 93 9d 00 	sts	0x009D, r31
    19b2:	e0 93 9c 00 	sts	0x009C, r30
    19b6:	47 c0       	rjmp	.+142    	; 0x1a46 <_Z4loopv+0x860>
        break;
      case 6:
        OCR4A=ICR4-vAl;
    19b8:	20 91 a6 00 	lds	r18, 0x00A6
    19bc:	30 91 a7 00 	lds	r19, 0x00A7
    19c0:	a9 01       	movw	r20, r18
    19c2:	48 1b       	sub	r20, r24
    19c4:	59 0b       	sbc	r21, r25
    19c6:	50 93 a9 00 	sts	0x00A9, r21
    19ca:	40 93 a8 00 	sts	0x00A8, r20
    19ce:	3b c0       	rjmp	.+118    	; 0x1a46 <_Z4loopv+0x860>
        break;
      case 7:
        OCR4B=ICR4-vAl;
    19d0:	20 91 a6 00 	lds	r18, 0x00A6
    19d4:	30 91 a7 00 	lds	r19, 0x00A7
    19d8:	f9 01       	movw	r30, r18
    19da:	e8 1b       	sub	r30, r24
    19dc:	f9 0b       	sbc	r31, r25
    19de:	f0 93 ab 00 	sts	0x00AB, r31
    19e2:	e0 93 aa 00 	sts	0x00AA, r30
    19e6:	2f c0       	rjmp	.+94     	; 0x1a46 <_Z4loopv+0x860>
        break; 
      case 8:
        OCR4C=ICR4-vAl;
    19e8:	20 91 a6 00 	lds	r18, 0x00A6
    19ec:	30 91 a7 00 	lds	r19, 0x00A7
    19f0:	a9 01       	movw	r20, r18
    19f2:	48 1b       	sub	r20, r24
    19f4:	59 0b       	sbc	r21, r25
    19f6:	50 93 ad 00 	sts	0x00AD, r21
    19fa:	40 93 ac 00 	sts	0x00AC, r20
    19fe:	23 c0       	rjmp	.+70     	; 0x1a46 <_Z4loopv+0x860>
        break;
      case 46:
        OCR5A=ICR5-vAl;
    1a00:	20 91 26 01 	lds	r18, 0x0126
    1a04:	30 91 27 01 	lds	r19, 0x0127
    1a08:	f9 01       	movw	r30, r18
    1a0a:	e8 1b       	sub	r30, r24
    1a0c:	f9 0b       	sbc	r31, r25
    1a0e:	f0 93 29 01 	sts	0x0129, r31
    1a12:	e0 93 28 01 	sts	0x0128, r30
    1a16:	17 c0       	rjmp	.+46     	; 0x1a46 <_Z4loopv+0x860>
        break;
      case 45:
        OCR5B=ICR5-vAl;
    1a18:	20 91 26 01 	lds	r18, 0x0126
    1a1c:	30 91 27 01 	lds	r19, 0x0127
    1a20:	a9 01       	movw	r20, r18
    1a22:	48 1b       	sub	r20, r24
    1a24:	59 0b       	sbc	r21, r25
    1a26:	50 93 2b 01 	sts	0x012B, r21
    1a2a:	40 93 2a 01 	sts	0x012A, r20
    1a2e:	0b c0       	rjmp	.+22     	; 0x1a46 <_Z4loopv+0x860>
        break;
      case 44:
        OCR5C=ICR5-vAl;
    1a30:	20 91 26 01 	lds	r18, 0x0126
    1a34:	30 91 27 01 	lds	r19, 0x0127
    1a38:	f9 01       	movw	r30, r18
    1a3a:	e8 1b       	sub	r30, r24
    1a3c:	f9 0b       	sbc	r31, r25
    1a3e:	f0 93 2d 01 	sts	0x012D, r31
    1a42:	e0 93 2c 01 	sts	0x012C, r30
	}	
	
	//FOUR MOTORS
	void drive(uint8_t pWm, uint8_t pWm1, uint8_t pWm2, uint8_t pWm3){
		
		if(pWm>lAstpwm||pWm1>lAstpwm1||pWm2>lAstpwm2||pWm3>lAstpwm3){		//accelerate
    1a46:	80 91 d6 02 	lds	r24, 0x02D6
    1a4a:	84 36       	cpi	r24, 0x64	; 100
    1a4c:	08 f4       	brcc	.+2      	; 0x1a50 <_Z4loopv+0x86a>
    1a4e:	9f c0       	rjmp	.+318    	; 0x1b8e <_Z4loopv+0x9a8>
    1a50:	90 91 db 02 	lds	r25, 0x02DB
    1a54:	94 36       	cpi	r25, 0x64	; 100
    1a56:	08 f4       	brcc	.+2      	; 0x1a5a <_Z4loopv+0x874>
    1a58:	9a c0       	rjmp	.+308    	; 0x1b8e <_Z4loopv+0x9a8>
    1a5a:	20 91 df 02 	lds	r18, 0x02DF
    1a5e:	24 36       	cpi	r18, 0x64	; 100
    1a60:	08 f4       	brcc	.+2      	; 0x1a64 <_Z4loopv+0x87e>
    1a62:	95 c0       	rjmp	.+298    	; 0x1b8e <_Z4loopv+0x9a8>
    1a64:	30 91 e3 02 	lds	r19, 0x02E3
    1a68:	34 36       	cpi	r19, 0x64	; 100
    1a6a:	08 f4       	brcc	.+2      	; 0x1a6e <_Z4loopv+0x888>
    1a6c:	90 c0       	rjmp	.+288    	; 0x1b8e <_Z4loopv+0x9a8>
    1a6e:	f0 c0       	rjmp	.+480    	; 0x1c50 <_Z4loopv+0xa6a>

			for(lAstpwm=lAstpwm,lAstpwm1=lAstpwm1,lAstpwm2=lAstpwm2,lAstpwm3=lAstpwm3;lAstpwm<pWm||lAstpwm1<pWm1||lAstpwm2<pWm2||lAstpwm3<pWm3;){		//increase the speed step by step
				if (pWm>lAstpwm){
					lAstpwm+=step1;
    1a70:	f2 01       	movw	r30, r4
    1a72:	60 81       	ld	r22, Z
    1a74:	86 0f       	add	r24, r22
    1a76:	e9 81       	ldd	r30, Y+1	; 0x01
    1a78:	fa 81       	ldd	r31, Y+2	; 0x02
    1a7a:	80 83       	st	Z, r24
					analogWrite(pWmpin,constrain(lAstpwm,0,pWm));
    1a7c:	68 2f       	mov	r22, r24
    1a7e:	70 e0       	ldi	r23, 0x00	; 0
    1a80:	80 e0       	ldi	r24, 0x00	; 0
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	20 e0       	ldi	r18, 0x00	; 0
    1a86:	30 e0       	ldi	r19, 0x00	; 0
    1a88:	a9 01       	movw	r20, r18
    1a8a:	0f 2e       	mov	r0, r31
    1a8c:	f4 e6       	ldi	r31, 0x64	; 100
    1a8e:	ef 2e       	mov	r14, r31
    1a90:	f0 e0       	ldi	r31, 0x00	; 0
    1a92:	ff 2e       	mov	r15, r31
    1a94:	f0 e0       	ldi	r31, 0x00	; 0
    1a96:	0f 2f       	mov	r16, r31
    1a98:	f0 e0       	ldi	r31, 0x00	; 0
    1a9a:	1f 2f       	mov	r17, r31
    1a9c:	f0 2d       	mov	r31, r0
    1a9e:	0e 94 cc 05 	call	0xb98	; 0xb98 <_Z9constrainlll>
    1aa2:	eb 81       	ldd	r30, Y+3	; 0x03
    1aa4:	fc 81       	ldd	r31, Y+4	; 0x04
    1aa6:	80 81       	ld	r24, Z
    1aa8:	0e 94 11 04 	call	0x822	; 0x822 <_Z11analogWritehh>
				}
				if (pWm1>lAstpwm1){
    1aac:	eb ed       	ldi	r30, 0xDB	; 219
    1aae:	f2 e0       	ldi	r31, 0x02	; 2
    1ab0:	80 81       	ld	r24, Z
    1ab2:	84 36       	cpi	r24, 0x64	; 100
    1ab4:	f0 f4       	brcc	.+60     	; 0x1af2 <_Z4loopv+0x90c>
					lAstpwm1+=step2;
    1ab6:	f1 01       	movw	r30, r2
    1ab8:	60 81       	ld	r22, Z
    1aba:	86 0f       	add	r24, r22
    1abc:	ed 81       	ldd	r30, Y+5	; 0x05
    1abe:	fe 81       	ldd	r31, Y+6	; 0x06
    1ac0:	80 83       	st	Z, r24
					analogWrite(pWmpin1,constrain(lAstpwm1,0,pWm1));
    1ac2:	68 2f       	mov	r22, r24
    1ac4:	70 e0       	ldi	r23, 0x00	; 0
    1ac6:	80 e0       	ldi	r24, 0x00	; 0
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	20 e0       	ldi	r18, 0x00	; 0
    1acc:	30 e0       	ldi	r19, 0x00	; 0
    1ace:	a9 01       	movw	r20, r18
    1ad0:	0f 2e       	mov	r0, r31
    1ad2:	f4 e6       	ldi	r31, 0x64	; 100
    1ad4:	ef 2e       	mov	r14, r31
    1ad6:	f0 e0       	ldi	r31, 0x00	; 0
    1ad8:	ff 2e       	mov	r15, r31
    1ada:	f0 e0       	ldi	r31, 0x00	; 0
    1adc:	0f 2f       	mov	r16, r31
    1ade:	f0 e0       	ldi	r31, 0x00	; 0
    1ae0:	1f 2f       	mov	r17, r31
    1ae2:	f0 2d       	mov	r31, r0
    1ae4:	0e 94 cc 05 	call	0xb98	; 0xb98 <_Z9constrainlll>
    1ae8:	ef 81       	ldd	r30, Y+7	; 0x07
    1aea:	f8 85       	ldd	r31, Y+8	; 0x08
    1aec:	80 81       	ld	r24, Z
    1aee:	0e 94 11 04 	call	0x822	; 0x822 <_Z11analogWritehh>
				}
				if (pWm2>lAstpwm2){
    1af2:	f6 01       	movw	r30, r12
    1af4:	80 81       	ld	r24, Z
    1af6:	84 36       	cpi	r24, 0x64	; 100
    1af8:	f8 f4       	brcc	.+62     	; 0x1b38 <_Z4loopv+0x952>
					lAstpwm2+=step3;
    1afa:	e0 ee       	ldi	r30, 0xE0	; 224
    1afc:	f2 e0       	ldi	r31, 0x02	; 2
    1afe:	60 81       	ld	r22, Z
    1b00:	86 0f       	add	r24, r22
    1b02:	e9 85       	ldd	r30, Y+9	; 0x09
    1b04:	fa 85       	ldd	r31, Y+10	; 0x0a
    1b06:	80 83       	st	Z, r24
					analogWrite(pWmpin2,constrain(lAstpwm2,0,pWm2));
    1b08:	68 2f       	mov	r22, r24
    1b0a:	70 e0       	ldi	r23, 0x00	; 0
    1b0c:	80 e0       	ldi	r24, 0x00	; 0
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	20 e0       	ldi	r18, 0x00	; 0
    1b12:	30 e0       	ldi	r19, 0x00	; 0
    1b14:	a9 01       	movw	r20, r18
    1b16:	0f 2e       	mov	r0, r31
    1b18:	f4 e6       	ldi	r31, 0x64	; 100
    1b1a:	ef 2e       	mov	r14, r31
    1b1c:	f0 e0       	ldi	r31, 0x00	; 0
    1b1e:	ff 2e       	mov	r15, r31
    1b20:	f0 e0       	ldi	r31, 0x00	; 0
    1b22:	0f 2f       	mov	r16, r31
    1b24:	f0 e0       	ldi	r31, 0x00	; 0
    1b26:	1f 2f       	mov	r17, r31
    1b28:	f0 2d       	mov	r31, r0
    1b2a:	0e 94 cc 05 	call	0xb98	; 0xb98 <_Z9constrainlll>
    1b2e:	eb 85       	ldd	r30, Y+11	; 0x0b
    1b30:	fc 85       	ldd	r31, Y+12	; 0x0c
    1b32:	80 81       	ld	r24, Z
    1b34:	0e 94 11 04 	call	0x822	; 0x822 <_Z11analogWritehh>
				}
				if (pWm3>lAstpwm3){
    1b38:	f5 01       	movw	r30, r10
    1b3a:	80 81       	ld	r24, Z
    1b3c:	84 36       	cpi	r24, 0x64	; 100
    1b3e:	f8 f4       	brcc	.+62     	; 0x1b7e <_Z4loopv+0x998>
					lAstpwm3+=step4;
    1b40:	e4 ee       	ldi	r30, 0xE4	; 228
    1b42:	f2 e0       	ldi	r31, 0x02	; 2
    1b44:	60 81       	ld	r22, Z
    1b46:	86 0f       	add	r24, r22
    1b48:	ed 85       	ldd	r30, Y+13	; 0x0d
    1b4a:	fe 85       	ldd	r31, Y+14	; 0x0e
    1b4c:	80 83       	st	Z, r24
					analogWrite(pWmpin3,constrain(lAstpwm3,0,pWm3));
    1b4e:	68 2f       	mov	r22, r24
    1b50:	70 e0       	ldi	r23, 0x00	; 0
    1b52:	80 e0       	ldi	r24, 0x00	; 0
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	20 e0       	ldi	r18, 0x00	; 0
    1b58:	30 e0       	ldi	r19, 0x00	; 0
    1b5a:	a9 01       	movw	r20, r18
    1b5c:	0f 2e       	mov	r0, r31
    1b5e:	f4 e6       	ldi	r31, 0x64	; 100
    1b60:	ef 2e       	mov	r14, r31
    1b62:	f0 e0       	ldi	r31, 0x00	; 0
    1b64:	ff 2e       	mov	r15, r31
    1b66:	f0 e0       	ldi	r31, 0x00	; 0
    1b68:	0f 2f       	mov	r16, r31
    1b6a:	f0 e0       	ldi	r31, 0x00	; 0
    1b6c:	1f 2f       	mov	r17, r31
    1b6e:	f0 2d       	mov	r31, r0
    1b70:	0e 94 cc 05 	call	0xb98	; 0xb98 <_Z9constrainlll>
    1b74:	ef 85       	ldd	r30, Y+15	; 0x0f
    1b76:	f8 89       	ldd	r31, Y+16	; 0x10
    1b78:	80 81       	ld	r24, Z
    1b7a:	0e 94 11 04 	call	0x822	; 0x822 <_Z11analogWritehh>
				}	
				delay(interval);		
    1b7e:	f3 01       	movw	r30, r6
    1b80:	60 81       	ld	r22, Z
    1b82:	70 e0       	ldi	r23, 0x00	; 0
    1b84:	80 e0       	ldi	r24, 0x00	; 0
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	0e 94 4a 05 	call	0xa94	; 0xa94 <_Z5delaym>
    1b8c:	4b c0       	rjmp	.+150    	; 0x1c24 <_Z4loopv+0xa3e>
	//FOUR MOTORS
	void drive(uint8_t pWm, uint8_t pWm1, uint8_t pWm2, uint8_t pWm3){
		
		if(pWm>lAstpwm||pWm1>lAstpwm1||pWm2>lAstpwm2||pWm3>lAstpwm3){		//accelerate

			for(lAstpwm=lAstpwm,lAstpwm1=lAstpwm1,lAstpwm2=lAstpwm2,lAstpwm3=lAstpwm3;lAstpwm<pWm||lAstpwm1<pWm1||lAstpwm2<pWm2||lAstpwm3<pWm3;){		//increase the speed step by step
    1b8e:	0f 2e       	mov	r0, r31
    1b90:	f6 ed       	ldi	r31, 0xD6	; 214
    1b92:	8f 2e       	mov	r8, r31
    1b94:	f2 e0       	ldi	r31, 0x02	; 2
    1b96:	9f 2e       	mov	r9, r31
    1b98:	f0 2d       	mov	r31, r0
				if (pWm>lAstpwm){
					lAstpwm+=step1;
    1b9a:	0f 2e       	mov	r0, r31
    1b9c:	f7 ed       	ldi	r31, 0xD7	; 215
    1b9e:	4f 2e       	mov	r4, r31
    1ba0:	f2 e0       	ldi	r31, 0x02	; 2
    1ba2:	5f 2e       	mov	r5, r31
    1ba4:	f0 2d       	mov	r31, r0
    1ba6:	a2 01       	movw	r20, r4
    1ba8:	41 50       	subi	r20, 0x01	; 1
    1baa:	50 40       	sbci	r21, 0x00	; 0
    1bac:	5a 83       	std	Y+2, r21	; 0x02
    1bae:	49 83       	std	Y+1, r20	; 0x01
					analogWrite(pWmpin,constrain(lAstpwm,0,pWm));
    1bb0:	c2 01       	movw	r24, r4
    1bb2:	02 97       	sbiw	r24, 0x02	; 2
    1bb4:	9c 83       	std	Y+4, r25	; 0x04
    1bb6:	8b 83       	std	Y+3, r24	; 0x03
	//FOUR MOTORS
	void drive(uint8_t pWm, uint8_t pWm1, uint8_t pWm2, uint8_t pWm3){
		
		if(pWm>lAstpwm||pWm1>lAstpwm1||pWm2>lAstpwm2||pWm3>lAstpwm3){		//accelerate

			for(lAstpwm=lAstpwm,lAstpwm1=lAstpwm1,lAstpwm2=lAstpwm2,lAstpwm3=lAstpwm3;lAstpwm<pWm||lAstpwm1<pWm1||lAstpwm2<pWm2||lAstpwm3<pWm3;){		//increase the speed step by step
    1bb8:	0f 2e       	mov	r0, r31
    1bba:	ff ed       	ldi	r31, 0xDF	; 223
    1bbc:	cf 2e       	mov	r12, r31
    1bbe:	f2 e0       	ldi	r31, 0x02	; 2
    1bc0:	df 2e       	mov	r13, r31
    1bc2:	f0 2d       	mov	r31, r0
    1bc4:	0f 2e       	mov	r0, r31
    1bc6:	f3 ee       	ldi	r31, 0xE3	; 227
    1bc8:	af 2e       	mov	r10, r31
    1bca:	f2 e0       	ldi	r31, 0x02	; 2
    1bcc:	bf 2e       	mov	r11, r31
    1bce:	f0 2d       	mov	r31, r0
				if (pWm>lAstpwm){
					lAstpwm+=step1;
					analogWrite(pWmpin,constrain(lAstpwm,0,pWm));
				}
				if (pWm1>lAstpwm1){
					lAstpwm1+=step2;
    1bd0:	0f 2e       	mov	r0, r31
    1bd2:	fc ed       	ldi	r31, 0xDC	; 220
    1bd4:	2f 2e       	mov	r2, r31
    1bd6:	f2 e0       	ldi	r31, 0x02	; 2
    1bd8:	3f 2e       	mov	r3, r31
    1bda:	f0 2d       	mov	r31, r0
    1bdc:	f1 01       	movw	r30, r2
    1bde:	31 97       	sbiw	r30, 0x01	; 1
    1be0:	fe 83       	std	Y+6, r31	; 0x06
    1be2:	ed 83       	std	Y+5, r30	; 0x05
					analogWrite(pWmpin1,constrain(lAstpwm1,0,pWm1));
    1be4:	a1 01       	movw	r20, r2
    1be6:	42 50       	subi	r20, 0x02	; 2
    1be8:	50 40       	sbci	r21, 0x00	; 0
    1bea:	58 87       	std	Y+8, r21	; 0x08
    1bec:	4f 83       	std	Y+7, r20	; 0x07
				}
				if (pWm2>lAstpwm2){
					lAstpwm2+=step3;
    1bee:	80 ee       	ldi	r24, 0xE0	; 224
    1bf0:	92 e0       	ldi	r25, 0x02	; 2
    1bf2:	01 97       	sbiw	r24, 0x01	; 1
    1bf4:	9a 87       	std	Y+10, r25	; 0x0a
    1bf6:	89 87       	std	Y+9, r24	; 0x09
					analogWrite(pWmpin2,constrain(lAstpwm2,0,pWm2));
    1bf8:	e0 ee       	ldi	r30, 0xE0	; 224
    1bfa:	f2 e0       	ldi	r31, 0x02	; 2
    1bfc:	32 97       	sbiw	r30, 0x02	; 2
    1bfe:	fc 87       	std	Y+12, r31	; 0x0c
    1c00:	eb 87       	std	Y+11, r30	; 0x0b
				}
				if (pWm3>lAstpwm3){
					lAstpwm3+=step4;
    1c02:	44 ee       	ldi	r20, 0xE4	; 228
    1c04:	52 e0       	ldi	r21, 0x02	; 2
    1c06:	41 50       	subi	r20, 0x01	; 1
    1c08:	50 40       	sbci	r21, 0x00	; 0
    1c0a:	5e 87       	std	Y+14, r21	; 0x0e
    1c0c:	4d 87       	std	Y+13, r20	; 0x0d
					analogWrite(pWmpin3,constrain(lAstpwm3,0,pWm3));
    1c0e:	84 ee       	ldi	r24, 0xE4	; 228
    1c10:	92 e0       	ldi	r25, 0x02	; 2
    1c12:	02 97       	sbiw	r24, 0x02	; 2
    1c14:	98 8b       	std	Y+16, r25	; 0x10
    1c16:	8f 87       	std	Y+15, r24	; 0x0f
				}	
				delay(interval);		
    1c18:	0f 2e       	mov	r0, r31
    1c1a:	f8 ed       	ldi	r31, 0xD8	; 216
    1c1c:	6f 2e       	mov	r6, r31
    1c1e:	f2 e0       	ldi	r31, 0x02	; 2
    1c20:	7f 2e       	mov	r7, r31
    1c22:	f0 2d       	mov	r31, r0
	//FOUR MOTORS
	void drive(uint8_t pWm, uint8_t pWm1, uint8_t pWm2, uint8_t pWm3){
		
		if(pWm>lAstpwm||pWm1>lAstpwm1||pWm2>lAstpwm2||pWm3>lAstpwm3){		//accelerate

			for(lAstpwm=lAstpwm,lAstpwm1=lAstpwm1,lAstpwm2=lAstpwm2,lAstpwm3=lAstpwm3;lAstpwm<pWm||lAstpwm1<pWm1||lAstpwm2<pWm2||lAstpwm3<pWm3;){		//increase the speed step by step
    1c24:	f4 01       	movw	r30, r8
    1c26:	80 81       	ld	r24, Z
    1c28:	84 36       	cpi	r24, 0x64	; 100
    1c2a:	08 f4       	brcc	.+2      	; 0x1c2e <_Z4loopv+0xa48>
    1c2c:	21 cf       	rjmp	.-446    	; 0x1a70 <_Z4loopv+0x88a>
    1c2e:	eb ed       	ldi	r30, 0xDB	; 219
    1c30:	f2 e0       	ldi	r31, 0x02	; 2
    1c32:	80 81       	ld	r24, Z
    1c34:	84 36       	cpi	r24, 0x64	; 100
    1c36:	08 f4       	brcc	.+2      	; 0x1c3a <_Z4loopv+0xa54>
    1c38:	39 cf       	rjmp	.-398    	; 0x1aac <_Z4loopv+0x8c6>
    1c3a:	f6 01       	movw	r30, r12
    1c3c:	80 81       	ld	r24, Z
    1c3e:	84 36       	cpi	r24, 0x64	; 100
    1c40:	08 f4       	brcc	.+2      	; 0x1c44 <_Z4loopv+0xa5e>
    1c42:	34 cf       	rjmp	.-408    	; 0x1aac <_Z4loopv+0x8c6>
    1c44:	f5 01       	movw	r30, r10
    1c46:	80 81       	ld	r24, Z
    1c48:	84 36       	cpi	r24, 0x64	; 100
    1c4a:	08 f0       	brcs	.+2      	; 0x1c4e <_Z4loopv+0xa68>
    1c4c:	11 c1       	rjmp	.+546    	; 0x1e70 <_Z4loopv+0xc8a>
    1c4e:	2e cf       	rjmp	.-420    	; 0x1aac <_Z4loopv+0x8c6>
				delay(interval);		
			}
			
		}

		else if(pWm<lAstpwm||pWm1<lAstpwm1||pWm2<lAstpwm2||pWm3<lAstpwm3){				//decelerate
    1c50:	85 36       	cpi	r24, 0x65	; 101
    1c52:	08 f0       	brcs	.+2      	; 0x1c56 <_Z4loopv+0xa70>
    1c54:	99 c0       	rjmp	.+306    	; 0x1d88 <_Z4loopv+0xba2>
    1c56:	95 36       	cpi	r25, 0x65	; 101
    1c58:	08 f0       	brcs	.+2      	; 0x1c5c <_Z4loopv+0xa76>
    1c5a:	96 c0       	rjmp	.+300    	; 0x1d88 <_Z4loopv+0xba2>
    1c5c:	25 36       	cpi	r18, 0x65	; 101
    1c5e:	08 f0       	brcs	.+2      	; 0x1c62 <_Z4loopv+0xa7c>
    1c60:	93 c0       	rjmp	.+294    	; 0x1d88 <_Z4loopv+0xba2>
    1c62:	35 36       	cpi	r19, 0x65	; 101
    1c64:	08 f0       	brcs	.+2      	; 0x1c68 <_Z4loopv+0xa82>
    1c66:	90 c0       	rjmp	.+288    	; 0x1d88 <_Z4loopv+0xba2>
    1c68:	ef c0       	rjmp	.+478    	; 0x1e48 <_Z4loopv+0xc62>

			for(lAstpwm=lAstpwm,lAstpwm1=lAstpwm1,lAstpwm2=lAstpwm2,lAstpwm3=lAstpwm3;lAstpwm>pWm||lAstpwm1>pWm1||lAstpwm2>pWm2||lAstpwm3>pWm3;){		//decrease the speed step by step
				if (pWm<lAstpwm){
					lAstpwm-=step1;
    1c6a:	f2 01       	movw	r30, r4
    1c6c:	80 81       	ld	r24, Z
    1c6e:	68 1b       	sub	r22, r24
    1c70:	e9 81       	ldd	r30, Y+1	; 0x01
    1c72:	fa 81       	ldd	r31, Y+2	; 0x02
    1c74:	60 83       	st	Z, r22
					analogWrite(pWmpin,constrain(lAstpwm,pWm,255));
    1c76:	70 e0       	ldi	r23, 0x00	; 0
    1c78:	80 e0       	ldi	r24, 0x00	; 0
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	24 e6       	ldi	r18, 0x64	; 100
    1c7e:	30 e0       	ldi	r19, 0x00	; 0
    1c80:	40 e0       	ldi	r20, 0x00	; 0
    1c82:	50 e0       	ldi	r21, 0x00	; 0
    1c84:	0f 2e       	mov	r0, r31
    1c86:	ff ef       	ldi	r31, 0xFF	; 255
    1c88:	ef 2e       	mov	r14, r31
    1c8a:	f0 e0       	ldi	r31, 0x00	; 0
    1c8c:	ff 2e       	mov	r15, r31
    1c8e:	f0 e0       	ldi	r31, 0x00	; 0
    1c90:	0f 2f       	mov	r16, r31
    1c92:	f0 e0       	ldi	r31, 0x00	; 0
    1c94:	1f 2f       	mov	r17, r31
    1c96:	f0 2d       	mov	r31, r0
    1c98:	0e 94 cc 05 	call	0xb98	; 0xb98 <_Z9constrainlll>
    1c9c:	eb 81       	ldd	r30, Y+3	; 0x03
    1c9e:	fc 81       	ldd	r31, Y+4	; 0x04
    1ca0:	80 81       	ld	r24, Z
    1ca2:	0e 94 11 04 	call	0x822	; 0x822 <_Z11analogWritehh>
				}
				if (pWm1<lAstpwm1){
    1ca6:	eb ed       	ldi	r30, 0xDB	; 219
    1ca8:	f2 e0       	ldi	r31, 0x02	; 2
    1caa:	60 81       	ld	r22, Z
    1cac:	65 36       	cpi	r22, 0x65	; 101
    1cae:	f0 f0       	brcs	.+60     	; 0x1cec <_Z4loopv+0xb06>
					lAstpwm1-=step2;
    1cb0:	f1 01       	movw	r30, r2
    1cb2:	80 81       	ld	r24, Z
    1cb4:	68 1b       	sub	r22, r24
    1cb6:	ed 81       	ldd	r30, Y+5	; 0x05
    1cb8:	fe 81       	ldd	r31, Y+6	; 0x06
    1cba:	60 83       	st	Z, r22
					analogWrite(pWmpin1,constrain(lAstpwm1,pWm1,255));
    1cbc:	70 e0       	ldi	r23, 0x00	; 0
    1cbe:	80 e0       	ldi	r24, 0x00	; 0
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	24 e6       	ldi	r18, 0x64	; 100
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	40 e0       	ldi	r20, 0x00	; 0
    1cc8:	50 e0       	ldi	r21, 0x00	; 0
    1cca:	0f 2e       	mov	r0, r31
    1ccc:	ff ef       	ldi	r31, 0xFF	; 255
    1cce:	ef 2e       	mov	r14, r31
    1cd0:	f0 e0       	ldi	r31, 0x00	; 0
    1cd2:	ff 2e       	mov	r15, r31
    1cd4:	f0 e0       	ldi	r31, 0x00	; 0
    1cd6:	0f 2f       	mov	r16, r31
    1cd8:	f0 e0       	ldi	r31, 0x00	; 0
    1cda:	1f 2f       	mov	r17, r31
    1cdc:	f0 2d       	mov	r31, r0
    1cde:	0e 94 cc 05 	call	0xb98	; 0xb98 <_Z9constrainlll>
    1ce2:	ef 81       	ldd	r30, Y+7	; 0x07
    1ce4:	f8 85       	ldd	r31, Y+8	; 0x08
    1ce6:	80 81       	ld	r24, Z
    1ce8:	0e 94 11 04 	call	0x822	; 0x822 <_Z11analogWritehh>
				}
				if (pWm2<lAstpwm2){
    1cec:	f6 01       	movw	r30, r12
    1cee:	60 81       	ld	r22, Z
    1cf0:	65 36       	cpi	r22, 0x65	; 101
    1cf2:	f8 f0       	brcs	.+62     	; 0x1d32 <_Z4loopv+0xb4c>
					lAstpwm2-=step3;
    1cf4:	e0 ee       	ldi	r30, 0xE0	; 224
    1cf6:	f2 e0       	ldi	r31, 0x02	; 2
    1cf8:	80 81       	ld	r24, Z
    1cfa:	68 1b       	sub	r22, r24
    1cfc:	e9 85       	ldd	r30, Y+9	; 0x09
    1cfe:	fa 85       	ldd	r31, Y+10	; 0x0a
    1d00:	60 83       	st	Z, r22
					analogWrite(pWmpin2,constrain(lAstpwm2,pWm2,255));
    1d02:	70 e0       	ldi	r23, 0x00	; 0
    1d04:	80 e0       	ldi	r24, 0x00	; 0
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	24 e6       	ldi	r18, 0x64	; 100
    1d0a:	30 e0       	ldi	r19, 0x00	; 0
    1d0c:	40 e0       	ldi	r20, 0x00	; 0
    1d0e:	50 e0       	ldi	r21, 0x00	; 0
    1d10:	0f 2e       	mov	r0, r31
    1d12:	ff ef       	ldi	r31, 0xFF	; 255
    1d14:	ef 2e       	mov	r14, r31
    1d16:	f0 e0       	ldi	r31, 0x00	; 0
    1d18:	ff 2e       	mov	r15, r31
    1d1a:	f0 e0       	ldi	r31, 0x00	; 0
    1d1c:	0f 2f       	mov	r16, r31
    1d1e:	f0 e0       	ldi	r31, 0x00	; 0
    1d20:	1f 2f       	mov	r17, r31
    1d22:	f0 2d       	mov	r31, r0
    1d24:	0e 94 cc 05 	call	0xb98	; 0xb98 <_Z9constrainlll>
    1d28:	eb 85       	ldd	r30, Y+11	; 0x0b
    1d2a:	fc 85       	ldd	r31, Y+12	; 0x0c
    1d2c:	80 81       	ld	r24, Z
    1d2e:	0e 94 11 04 	call	0x822	; 0x822 <_Z11analogWritehh>
				}
				if (pWm3<lAstpwm3){
    1d32:	f5 01       	movw	r30, r10
    1d34:	60 81       	ld	r22, Z
    1d36:	65 36       	cpi	r22, 0x65	; 101
    1d38:	f8 f0       	brcs	.+62     	; 0x1d78 <_Z4loopv+0xb92>
					lAstpwm3-=step4;
    1d3a:	e4 ee       	ldi	r30, 0xE4	; 228
    1d3c:	f2 e0       	ldi	r31, 0x02	; 2
    1d3e:	80 81       	ld	r24, Z
    1d40:	68 1b       	sub	r22, r24
    1d42:	ed 85       	ldd	r30, Y+13	; 0x0d
    1d44:	fe 85       	ldd	r31, Y+14	; 0x0e
    1d46:	60 83       	st	Z, r22
					analogWrite(pWmpin3,constrain(lAstpwm3,pWm3,255));
    1d48:	70 e0       	ldi	r23, 0x00	; 0
    1d4a:	80 e0       	ldi	r24, 0x00	; 0
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	24 e6       	ldi	r18, 0x64	; 100
    1d50:	30 e0       	ldi	r19, 0x00	; 0
    1d52:	40 e0       	ldi	r20, 0x00	; 0
    1d54:	50 e0       	ldi	r21, 0x00	; 0
    1d56:	0f 2e       	mov	r0, r31
    1d58:	ff ef       	ldi	r31, 0xFF	; 255
    1d5a:	ef 2e       	mov	r14, r31
    1d5c:	f0 e0       	ldi	r31, 0x00	; 0
    1d5e:	ff 2e       	mov	r15, r31
    1d60:	f0 e0       	ldi	r31, 0x00	; 0
    1d62:	0f 2f       	mov	r16, r31
    1d64:	f0 e0       	ldi	r31, 0x00	; 0
    1d66:	1f 2f       	mov	r17, r31
    1d68:	f0 2d       	mov	r31, r0
    1d6a:	0e 94 cc 05 	call	0xb98	; 0xb98 <_Z9constrainlll>
    1d6e:	ef 85       	ldd	r30, Y+15	; 0x0f
    1d70:	f8 89       	ldd	r31, Y+16	; 0x10
    1d72:	80 81       	ld	r24, Z
    1d74:	0e 94 11 04 	call	0x822	; 0x822 <_Z11analogWritehh>
				}
				delay(interval);		
    1d78:	f3 01       	movw	r30, r6
    1d7a:	60 81       	ld	r22, Z
    1d7c:	70 e0       	ldi	r23, 0x00	; 0
    1d7e:	80 e0       	ldi	r24, 0x00	; 0
    1d80:	90 e0       	ldi	r25, 0x00	; 0
    1d82:	0e 94 4a 05 	call	0xa94	; 0xa94 <_Z5delaym>
    1d86:	4b c0       	rjmp	.+150    	; 0x1e1e <_Z4loopv+0xc38>
			
		}

		else if(pWm<lAstpwm||pWm1<lAstpwm1||pWm2<lAstpwm2||pWm3<lAstpwm3){				//decelerate

			for(lAstpwm=lAstpwm,lAstpwm1=lAstpwm1,lAstpwm2=lAstpwm2,lAstpwm3=lAstpwm3;lAstpwm>pWm||lAstpwm1>pWm1||lAstpwm2>pWm2||lAstpwm3>pWm3;){		//decrease the speed step by step
    1d88:	0f 2e       	mov	r0, r31
    1d8a:	f6 ed       	ldi	r31, 0xD6	; 214
    1d8c:	8f 2e       	mov	r8, r31
    1d8e:	f2 e0       	ldi	r31, 0x02	; 2
    1d90:	9f 2e       	mov	r9, r31
    1d92:	f0 2d       	mov	r31, r0
				if (pWm<lAstpwm){
					lAstpwm-=step1;
    1d94:	0f 2e       	mov	r0, r31
    1d96:	f7 ed       	ldi	r31, 0xD7	; 215
    1d98:	4f 2e       	mov	r4, r31
    1d9a:	f2 e0       	ldi	r31, 0x02	; 2
    1d9c:	5f 2e       	mov	r5, r31
    1d9e:	f0 2d       	mov	r31, r0
    1da0:	a2 01       	movw	r20, r4
    1da2:	41 50       	subi	r20, 0x01	; 1
    1da4:	50 40       	sbci	r21, 0x00	; 0
    1da6:	5a 83       	std	Y+2, r21	; 0x02
    1da8:	49 83       	std	Y+1, r20	; 0x01
					analogWrite(pWmpin,constrain(lAstpwm,pWm,255));
    1daa:	c2 01       	movw	r24, r4
    1dac:	02 97       	sbiw	r24, 0x02	; 2
    1dae:	9c 83       	std	Y+4, r25	; 0x04
    1db0:	8b 83       	std	Y+3, r24	; 0x03
			
		}

		else if(pWm<lAstpwm||pWm1<lAstpwm1||pWm2<lAstpwm2||pWm3<lAstpwm3){				//decelerate

			for(lAstpwm=lAstpwm,lAstpwm1=lAstpwm1,lAstpwm2=lAstpwm2,lAstpwm3=lAstpwm3;lAstpwm>pWm||lAstpwm1>pWm1||lAstpwm2>pWm2||lAstpwm3>pWm3;){		//decrease the speed step by step
    1db2:	0f 2e       	mov	r0, r31
    1db4:	ff ed       	ldi	r31, 0xDF	; 223
    1db6:	cf 2e       	mov	r12, r31
    1db8:	f2 e0       	ldi	r31, 0x02	; 2
    1dba:	df 2e       	mov	r13, r31
    1dbc:	f0 2d       	mov	r31, r0
    1dbe:	0f 2e       	mov	r0, r31
    1dc0:	f3 ee       	ldi	r31, 0xE3	; 227
    1dc2:	af 2e       	mov	r10, r31
    1dc4:	f2 e0       	ldi	r31, 0x02	; 2
    1dc6:	bf 2e       	mov	r11, r31
    1dc8:	f0 2d       	mov	r31, r0
				if (pWm<lAstpwm){
					lAstpwm-=step1;
					analogWrite(pWmpin,constrain(lAstpwm,pWm,255));
				}
				if (pWm1<lAstpwm1){
					lAstpwm1-=step2;
    1dca:	0f 2e       	mov	r0, r31
    1dcc:	fc ed       	ldi	r31, 0xDC	; 220
    1dce:	2f 2e       	mov	r2, r31
    1dd0:	f2 e0       	ldi	r31, 0x02	; 2
    1dd2:	3f 2e       	mov	r3, r31
    1dd4:	f0 2d       	mov	r31, r0
    1dd6:	f1 01       	movw	r30, r2
    1dd8:	31 97       	sbiw	r30, 0x01	; 1
    1dda:	fe 83       	std	Y+6, r31	; 0x06
    1ddc:	ed 83       	std	Y+5, r30	; 0x05
					analogWrite(pWmpin1,constrain(lAstpwm1,pWm1,255));
    1dde:	a1 01       	movw	r20, r2
    1de0:	42 50       	subi	r20, 0x02	; 2
    1de2:	50 40       	sbci	r21, 0x00	; 0
    1de4:	58 87       	std	Y+8, r21	; 0x08
    1de6:	4f 83       	std	Y+7, r20	; 0x07
				}
				if (pWm2<lAstpwm2){
					lAstpwm2-=step3;
    1de8:	80 ee       	ldi	r24, 0xE0	; 224
    1dea:	92 e0       	ldi	r25, 0x02	; 2
    1dec:	01 97       	sbiw	r24, 0x01	; 1
    1dee:	9a 87       	std	Y+10, r25	; 0x0a
    1df0:	89 87       	std	Y+9, r24	; 0x09
					analogWrite(pWmpin2,constrain(lAstpwm2,pWm2,255));
    1df2:	e0 ee       	ldi	r30, 0xE0	; 224
    1df4:	f2 e0       	ldi	r31, 0x02	; 2
    1df6:	32 97       	sbiw	r30, 0x02	; 2
    1df8:	fc 87       	std	Y+12, r31	; 0x0c
    1dfa:	eb 87       	std	Y+11, r30	; 0x0b
				}
				if (pWm3<lAstpwm3){
					lAstpwm3-=step4;
    1dfc:	44 ee       	ldi	r20, 0xE4	; 228
    1dfe:	52 e0       	ldi	r21, 0x02	; 2
    1e00:	41 50       	subi	r20, 0x01	; 1
    1e02:	50 40       	sbci	r21, 0x00	; 0
    1e04:	5e 87       	std	Y+14, r21	; 0x0e
    1e06:	4d 87       	std	Y+13, r20	; 0x0d
					analogWrite(pWmpin3,constrain(lAstpwm3,pWm3,255));
    1e08:	84 ee       	ldi	r24, 0xE4	; 228
    1e0a:	92 e0       	ldi	r25, 0x02	; 2
    1e0c:	02 97       	sbiw	r24, 0x02	; 2
    1e0e:	98 8b       	std	Y+16, r25	; 0x10
    1e10:	8f 87       	std	Y+15, r24	; 0x0f
				}
				delay(interval);		
    1e12:	0f 2e       	mov	r0, r31
    1e14:	f8 ed       	ldi	r31, 0xD8	; 216
    1e16:	6f 2e       	mov	r6, r31
    1e18:	f2 e0       	ldi	r31, 0x02	; 2
    1e1a:	7f 2e       	mov	r7, r31
    1e1c:	f0 2d       	mov	r31, r0
			
		}

		else if(pWm<lAstpwm||pWm1<lAstpwm1||pWm2<lAstpwm2||pWm3<lAstpwm3){				//decelerate

			for(lAstpwm=lAstpwm,lAstpwm1=lAstpwm1,lAstpwm2=lAstpwm2,lAstpwm3=lAstpwm3;lAstpwm>pWm||lAstpwm1>pWm1||lAstpwm2>pWm2||lAstpwm3>pWm3;){		//decrease the speed step by step
    1e1e:	f4 01       	movw	r30, r8
    1e20:	60 81       	ld	r22, Z
    1e22:	65 36       	cpi	r22, 0x65	; 101
    1e24:	08 f0       	brcs	.+2      	; 0x1e28 <_Z4loopv+0xc42>
    1e26:	21 cf       	rjmp	.-446    	; 0x1c6a <_Z4loopv+0xa84>
    1e28:	eb ed       	ldi	r30, 0xDB	; 219
    1e2a:	f2 e0       	ldi	r31, 0x02	; 2
    1e2c:	80 81       	ld	r24, Z
    1e2e:	85 36       	cpi	r24, 0x65	; 101
    1e30:	08 f0       	brcs	.+2      	; 0x1e34 <_Z4loopv+0xc4e>
    1e32:	39 cf       	rjmp	.-398    	; 0x1ca6 <_Z4loopv+0xac0>
    1e34:	f6 01       	movw	r30, r12
    1e36:	80 81       	ld	r24, Z
    1e38:	85 36       	cpi	r24, 0x65	; 101
    1e3a:	08 f0       	brcs	.+2      	; 0x1e3e <_Z4loopv+0xc58>
    1e3c:	34 cf       	rjmp	.-408    	; 0x1ca6 <_Z4loopv+0xac0>
    1e3e:	f5 01       	movw	r30, r10
    1e40:	80 81       	ld	r24, Z
    1e42:	85 36       	cpi	r24, 0x65	; 101
    1e44:	a8 f0       	brcs	.+42     	; 0x1e70 <_Z4loopv+0xc8a>
    1e46:	2f cf       	rjmp	.-418    	; 0x1ca6 <_Z4loopv+0xac0>
				delay(interval);		
			}
		}

		else{		//no change
			analogWrite(pWmpin,pWm);
    1e48:	80 91 d5 02 	lds	r24, 0x02D5
    1e4c:	64 e6       	ldi	r22, 0x64	; 100
    1e4e:	0e 94 11 04 	call	0x822	; 0x822 <_Z11analogWritehh>
			analogWrite(pWmpin1,pWm1);
    1e52:	80 91 da 02 	lds	r24, 0x02DA
    1e56:	64 e6       	ldi	r22, 0x64	; 100
    1e58:	0e 94 11 04 	call	0x822	; 0x822 <_Z11analogWritehh>
			analogWrite(pWmpin2,pWm2);
    1e5c:	80 91 de 02 	lds	r24, 0x02DE
    1e60:	64 e6       	ldi	r22, 0x64	; 100
    1e62:	0e 94 11 04 	call	0x822	; 0x822 <_Z11analogWritehh>
			analogWrite(pWmpin3,pWm3);
    1e66:	80 91 e2 02 	lds	r24, 0x02E2
    1e6a:	64 e6       	ldi	r22, 0x64	; 100
    1e6c:	0e 94 11 04 	call	0x822	; 0x822 <_Z11analogWritehh>
	motors.drive(100,100,100,100);
    1e70:	60 96       	adiw	r28, 0x10	; 16
    1e72:	0f b6       	in	r0, 0x3f	; 63
    1e74:	f8 94       	cli
    1e76:	de bf       	out	0x3e, r29	; 62
    1e78:	0f be       	out	0x3f, r0	; 63
    1e7a:	cd bf       	out	0x3d, r28	; 61
    1e7c:	cf 91       	pop	r28
    1e7e:	df 91       	pop	r29
    1e80:	1f 91       	pop	r17
    1e82:	0f 91       	pop	r16
    1e84:	ff 90       	pop	r15
    1e86:	ef 90       	pop	r14
    1e88:	df 90       	pop	r13
    1e8a:	cf 90       	pop	r12
    1e8c:	bf 90       	pop	r11
    1e8e:	af 90       	pop	r10
    1e90:	9f 90       	pop	r9
    1e92:	8f 90       	pop	r8
    1e94:	7f 90       	pop	r7
    1e96:	6f 90       	pop	r6
    1e98:	5f 90       	pop	r5
    1e9a:	4f 90       	pop	r4
    1e9c:	3f 90       	pop	r3
    1e9e:	2f 90       	pop	r2
    1ea0:	08 95       	ret

00001ea2 <main>:
{
	uSerfun();
}*/
int main(){
	//tinit();
	setup();
    1ea2:	0e 94 69 08 	call	0x10d2	; 0x10d2 <_Z5setupv>
	while(1){
		loop();
    1ea6:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <_Z4loopv>
    1eaa:	fd cf       	rjmp	.-6      	; 0x1ea6 <main+0x4>

00001eac <_GLOBAL__I_tImer2_millis>:
		step2=5;
		step3=5;
		interval=10;
  	}
  	Cytron(uint8_t getdIrpin, uint8_t getpWmpin, uint8_t getdIrpin1, uint8_t getpWmpin1, uint8_t getdIrpin2, uint8_t getpWmpin2, uint8_t getdIrpin3, uint8_t getpWmpin3){     //constructor function takes direction and pwm pins for cytron
	    pWmpin=getpWmpin;
    1eac:	84 e0       	ldi	r24, 0x04	; 4
    1eae:	80 93 d5 02 	sts	0x02D5, r24
	    dIrpin=getdIrpin;
    1eb2:	e5 ed       	ldi	r30, 0xD5	; 213
    1eb4:	f2 e0       	ldi	r31, 0x02	; 2
    1eb6:	8e e1       	ldi	r24, 0x1E	; 30
    1eb8:	82 93       	st	-Z, r24
	    pWmpin1=getpWmpin1;
    1eba:	8d e0       	ldi	r24, 0x0D	; 13
    1ebc:	86 83       	std	Z+6, r24	; 0x06
	    dIrpin1=getdIrpin1;
    1ebe:	8f e1       	ldi	r24, 0x1F	; 31
    1ec0:	85 83       	std	Z+5, r24	; 0x05
	    pWmpin2=getpWmpin2;
    1ec2:	9a e0       	ldi	r25, 0x0A	; 10
    1ec4:	92 87       	std	Z+10, r25	; 0x0a
	    dIrpin2=getdIrpin2;
    1ec6:	80 e2       	ldi	r24, 0x20	; 32
    1ec8:	81 87       	std	Z+9, r24	; 0x09
	    pWmpin3=getpWmpin3;
    1eca:	89 e0       	ldi	r24, 0x09	; 9
    1ecc:	86 87       	std	Z+14, r24	; 0x0e
	    dIrpin3=getdIrpin3;
    1ece:	81 e2       	ldi	r24, 0x21	; 33
    1ed0:	85 87       	std	Z+13, r24	; 0x0d
	    lAstpwm=0;
    1ed2:	12 82       	std	Z+2, r1	; 0x02
		lAstpwm1=0;
    1ed4:	17 82       	std	Z+7, r1	; 0x07
		lAstpwm2=0;
    1ed6:	13 86       	std	Z+11, r1	; 0x0b
		lAstpwm3=0;
    1ed8:	17 86       	std	Z+15, r1	; 0x0f
		step1=5;
    1eda:	85 e0       	ldi	r24, 0x05	; 5
    1edc:	83 83       	std	Z+3, r24	; 0x03
		step2=5;
    1ede:	80 87       	std	Z+8, r24	; 0x08
		step3=5;
    1ee0:	84 87       	std	Z+12, r24	; 0x0c
		step4=5;
    1ee2:	80 8b       	std	Z+16, r24	; 0x10
		interval=10;
    1ee4:	94 83       	std	Z+4, r25	; 0x04
    1ee6:	08 95       	ret

00001ee8 <__divsf3>:
    1ee8:	0c d0       	rcall	.+24     	; 0x1f02 <__divsf3x>
    1eea:	eb c0       	rjmp	.+470    	; 0x20c2 <__fp_round>
    1eec:	e3 d0       	rcall	.+454    	; 0x20b4 <__fp_pscB>
    1eee:	40 f0       	brcs	.+16     	; 0x1f00 <__divsf3+0x18>
    1ef0:	da d0       	rcall	.+436    	; 0x20a6 <__fp_pscA>
    1ef2:	30 f0       	brcs	.+12     	; 0x1f00 <__divsf3+0x18>
    1ef4:	21 f4       	brne	.+8      	; 0x1efe <__divsf3+0x16>
    1ef6:	5f 3f       	cpi	r21, 0xFF	; 255
    1ef8:	19 f0       	breq	.+6      	; 0x1f00 <__divsf3+0x18>
    1efa:	cc c0       	rjmp	.+408    	; 0x2094 <__fp_inf>
    1efc:	51 11       	cpse	r21, r1
    1efe:	15 c1       	rjmp	.+554    	; 0x212a <__fp_szero>
    1f00:	cf c0       	rjmp	.+414    	; 0x20a0 <__fp_nan>

00001f02 <__divsf3x>:
    1f02:	f0 d0       	rcall	.+480    	; 0x20e4 <__fp_split3>
    1f04:	98 f3       	brcs	.-26     	; 0x1eec <__divsf3+0x4>

00001f06 <__divsf3_pse>:
    1f06:	99 23       	and	r25, r25
    1f08:	c9 f3       	breq	.-14     	; 0x1efc <__divsf3+0x14>
    1f0a:	55 23       	and	r21, r21
    1f0c:	b1 f3       	breq	.-20     	; 0x1efa <__divsf3+0x12>
    1f0e:	95 1b       	sub	r25, r21
    1f10:	55 0b       	sbc	r21, r21
    1f12:	bb 27       	eor	r27, r27
    1f14:	aa 27       	eor	r26, r26
    1f16:	62 17       	cp	r22, r18
    1f18:	73 07       	cpc	r23, r19
    1f1a:	84 07       	cpc	r24, r20
    1f1c:	38 f0       	brcs	.+14     	; 0x1f2c <__divsf3_pse+0x26>
    1f1e:	9f 5f       	subi	r25, 0xFF	; 255
    1f20:	5f 4f       	sbci	r21, 0xFF	; 255
    1f22:	22 0f       	add	r18, r18
    1f24:	33 1f       	adc	r19, r19
    1f26:	44 1f       	adc	r20, r20
    1f28:	aa 1f       	adc	r26, r26
    1f2a:	a9 f3       	breq	.-22     	; 0x1f16 <__divsf3_pse+0x10>
    1f2c:	33 d0       	rcall	.+102    	; 0x1f94 <__divsf3_pse+0x8e>
    1f2e:	0e 2e       	mov	r0, r30
    1f30:	3a f0       	brmi	.+14     	; 0x1f40 <__divsf3_pse+0x3a>
    1f32:	e0 e8       	ldi	r30, 0x80	; 128
    1f34:	30 d0       	rcall	.+96     	; 0x1f96 <__divsf3_pse+0x90>
    1f36:	91 50       	subi	r25, 0x01	; 1
    1f38:	50 40       	sbci	r21, 0x00	; 0
    1f3a:	e6 95       	lsr	r30
    1f3c:	00 1c       	adc	r0, r0
    1f3e:	ca f7       	brpl	.-14     	; 0x1f32 <__divsf3_pse+0x2c>
    1f40:	29 d0       	rcall	.+82     	; 0x1f94 <__divsf3_pse+0x8e>
    1f42:	fe 2f       	mov	r31, r30
    1f44:	27 d0       	rcall	.+78     	; 0x1f94 <__divsf3_pse+0x8e>
    1f46:	66 0f       	add	r22, r22
    1f48:	77 1f       	adc	r23, r23
    1f4a:	88 1f       	adc	r24, r24
    1f4c:	bb 1f       	adc	r27, r27
    1f4e:	26 17       	cp	r18, r22
    1f50:	37 07       	cpc	r19, r23
    1f52:	48 07       	cpc	r20, r24
    1f54:	ab 07       	cpc	r26, r27
    1f56:	b0 e8       	ldi	r27, 0x80	; 128
    1f58:	09 f0       	breq	.+2      	; 0x1f5c <__divsf3_pse+0x56>
    1f5a:	bb 0b       	sbc	r27, r27
    1f5c:	80 2d       	mov	r24, r0
    1f5e:	bf 01       	movw	r22, r30
    1f60:	ff 27       	eor	r31, r31
    1f62:	93 58       	subi	r25, 0x83	; 131
    1f64:	5f 4f       	sbci	r21, 0xFF	; 255
    1f66:	2a f0       	brmi	.+10     	; 0x1f72 <__divsf3_pse+0x6c>
    1f68:	9e 3f       	cpi	r25, 0xFE	; 254
    1f6a:	51 05       	cpc	r21, r1
    1f6c:	68 f0       	brcs	.+26     	; 0x1f88 <__divsf3_pse+0x82>
    1f6e:	92 c0       	rjmp	.+292    	; 0x2094 <__fp_inf>
    1f70:	dc c0       	rjmp	.+440    	; 0x212a <__fp_szero>
    1f72:	5f 3f       	cpi	r21, 0xFF	; 255
    1f74:	ec f3       	brlt	.-6      	; 0x1f70 <__divsf3_pse+0x6a>
    1f76:	98 3e       	cpi	r25, 0xE8	; 232
    1f78:	dc f3       	brlt	.-10     	; 0x1f70 <__divsf3_pse+0x6a>
    1f7a:	86 95       	lsr	r24
    1f7c:	77 95       	ror	r23
    1f7e:	67 95       	ror	r22
    1f80:	b7 95       	ror	r27
    1f82:	f7 95       	ror	r31
    1f84:	9f 5f       	subi	r25, 0xFF	; 255
    1f86:	c9 f7       	brne	.-14     	; 0x1f7a <__divsf3_pse+0x74>
    1f88:	88 0f       	add	r24, r24
    1f8a:	91 1d       	adc	r25, r1
    1f8c:	96 95       	lsr	r25
    1f8e:	87 95       	ror	r24
    1f90:	97 f9       	bld	r25, 7
    1f92:	08 95       	ret
    1f94:	e1 e0       	ldi	r30, 0x01	; 1
    1f96:	66 0f       	add	r22, r22
    1f98:	77 1f       	adc	r23, r23
    1f9a:	88 1f       	adc	r24, r24
    1f9c:	bb 1f       	adc	r27, r27
    1f9e:	62 17       	cp	r22, r18
    1fa0:	73 07       	cpc	r23, r19
    1fa2:	84 07       	cpc	r24, r20
    1fa4:	ba 07       	cpc	r27, r26
    1fa6:	20 f0       	brcs	.+8      	; 0x1fb0 <__divsf3_pse+0xaa>
    1fa8:	62 1b       	sub	r22, r18
    1faa:	73 0b       	sbc	r23, r19
    1fac:	84 0b       	sbc	r24, r20
    1fae:	ba 0b       	sbc	r27, r26
    1fb0:	ee 1f       	adc	r30, r30
    1fb2:	88 f7       	brcc	.-30     	; 0x1f96 <__divsf3_pse+0x90>
    1fb4:	e0 95       	com	r30
    1fb6:	08 95       	ret

00001fb8 <__fixsfsi>:
    1fb8:	04 d0       	rcall	.+8      	; 0x1fc2 <__fixunssfsi>
    1fba:	68 94       	set
    1fbc:	b1 11       	cpse	r27, r1
    1fbe:	b5 c0       	rjmp	.+362    	; 0x212a <__fp_szero>
    1fc0:	08 95       	ret

00001fc2 <__fixunssfsi>:
    1fc2:	98 d0       	rcall	.+304    	; 0x20f4 <__fp_splitA>
    1fc4:	88 f0       	brcs	.+34     	; 0x1fe8 <__fixunssfsi+0x26>
    1fc6:	9f 57       	subi	r25, 0x7F	; 127
    1fc8:	90 f0       	brcs	.+36     	; 0x1fee <__fixunssfsi+0x2c>
    1fca:	b9 2f       	mov	r27, r25
    1fcc:	99 27       	eor	r25, r25
    1fce:	b7 51       	subi	r27, 0x17	; 23
    1fd0:	a0 f0       	brcs	.+40     	; 0x1ffa <__fixunssfsi+0x38>
    1fd2:	d1 f0       	breq	.+52     	; 0x2008 <__fixunssfsi+0x46>
    1fd4:	66 0f       	add	r22, r22
    1fd6:	77 1f       	adc	r23, r23
    1fd8:	88 1f       	adc	r24, r24
    1fda:	99 1f       	adc	r25, r25
    1fdc:	1a f0       	brmi	.+6      	; 0x1fe4 <__fixunssfsi+0x22>
    1fde:	ba 95       	dec	r27
    1fe0:	c9 f7       	brne	.-14     	; 0x1fd4 <__fixunssfsi+0x12>
    1fe2:	12 c0       	rjmp	.+36     	; 0x2008 <__fixunssfsi+0x46>
    1fe4:	b1 30       	cpi	r27, 0x01	; 1
    1fe6:	81 f0       	breq	.+32     	; 0x2008 <__fixunssfsi+0x46>
    1fe8:	9f d0       	rcall	.+318    	; 0x2128 <__fp_zero>
    1fea:	b1 e0       	ldi	r27, 0x01	; 1
    1fec:	08 95       	ret
    1fee:	9c c0       	rjmp	.+312    	; 0x2128 <__fp_zero>
    1ff0:	67 2f       	mov	r22, r23
    1ff2:	78 2f       	mov	r23, r24
    1ff4:	88 27       	eor	r24, r24
    1ff6:	b8 5f       	subi	r27, 0xF8	; 248
    1ff8:	39 f0       	breq	.+14     	; 0x2008 <__fixunssfsi+0x46>
    1ffa:	b9 3f       	cpi	r27, 0xF9	; 249
    1ffc:	cc f3       	brlt	.-14     	; 0x1ff0 <__fixunssfsi+0x2e>
    1ffe:	86 95       	lsr	r24
    2000:	77 95       	ror	r23
    2002:	67 95       	ror	r22
    2004:	b3 95       	inc	r27
    2006:	d9 f7       	brne	.-10     	; 0x1ffe <__fixunssfsi+0x3c>
    2008:	3e f4       	brtc	.+14     	; 0x2018 <__fixunssfsi+0x56>
    200a:	90 95       	com	r25
    200c:	80 95       	com	r24
    200e:	70 95       	com	r23
    2010:	61 95       	neg	r22
    2012:	7f 4f       	sbci	r23, 0xFF	; 255
    2014:	8f 4f       	sbci	r24, 0xFF	; 255
    2016:	9f 4f       	sbci	r25, 0xFF	; 255
    2018:	08 95       	ret

0000201a <__floatunsisf>:
    201a:	e8 94       	clt
    201c:	09 c0       	rjmp	.+18     	; 0x2030 <__floatsisf+0x12>

0000201e <__floatsisf>:
    201e:	97 fb       	bst	r25, 7
    2020:	3e f4       	brtc	.+14     	; 0x2030 <__floatsisf+0x12>
    2022:	90 95       	com	r25
    2024:	80 95       	com	r24
    2026:	70 95       	com	r23
    2028:	61 95       	neg	r22
    202a:	7f 4f       	sbci	r23, 0xFF	; 255
    202c:	8f 4f       	sbci	r24, 0xFF	; 255
    202e:	9f 4f       	sbci	r25, 0xFF	; 255
    2030:	99 23       	and	r25, r25
    2032:	a9 f0       	breq	.+42     	; 0x205e <__floatsisf+0x40>
    2034:	f9 2f       	mov	r31, r25
    2036:	96 e9       	ldi	r25, 0x96	; 150
    2038:	bb 27       	eor	r27, r27
    203a:	93 95       	inc	r25
    203c:	f6 95       	lsr	r31
    203e:	87 95       	ror	r24
    2040:	77 95       	ror	r23
    2042:	67 95       	ror	r22
    2044:	b7 95       	ror	r27
    2046:	f1 11       	cpse	r31, r1
    2048:	f8 cf       	rjmp	.-16     	; 0x203a <__floatsisf+0x1c>
    204a:	fa f4       	brpl	.+62     	; 0x208a <__floatsisf+0x6c>
    204c:	bb 0f       	add	r27, r27
    204e:	11 f4       	brne	.+4      	; 0x2054 <__floatsisf+0x36>
    2050:	60 ff       	sbrs	r22, 0
    2052:	1b c0       	rjmp	.+54     	; 0x208a <__floatsisf+0x6c>
    2054:	6f 5f       	subi	r22, 0xFF	; 255
    2056:	7f 4f       	sbci	r23, 0xFF	; 255
    2058:	8f 4f       	sbci	r24, 0xFF	; 255
    205a:	9f 4f       	sbci	r25, 0xFF	; 255
    205c:	16 c0       	rjmp	.+44     	; 0x208a <__floatsisf+0x6c>
    205e:	88 23       	and	r24, r24
    2060:	11 f0       	breq	.+4      	; 0x2066 <__floatsisf+0x48>
    2062:	96 e9       	ldi	r25, 0x96	; 150
    2064:	11 c0       	rjmp	.+34     	; 0x2088 <__floatsisf+0x6a>
    2066:	77 23       	and	r23, r23
    2068:	21 f0       	breq	.+8      	; 0x2072 <__floatsisf+0x54>
    206a:	9e e8       	ldi	r25, 0x8E	; 142
    206c:	87 2f       	mov	r24, r23
    206e:	76 2f       	mov	r23, r22
    2070:	05 c0       	rjmp	.+10     	; 0x207c <__floatsisf+0x5e>
    2072:	66 23       	and	r22, r22
    2074:	71 f0       	breq	.+28     	; 0x2092 <__floatsisf+0x74>
    2076:	96 e8       	ldi	r25, 0x86	; 134
    2078:	86 2f       	mov	r24, r22
    207a:	70 e0       	ldi	r23, 0x00	; 0
    207c:	60 e0       	ldi	r22, 0x00	; 0
    207e:	2a f0       	brmi	.+10     	; 0x208a <__floatsisf+0x6c>
    2080:	9a 95       	dec	r25
    2082:	66 0f       	add	r22, r22
    2084:	77 1f       	adc	r23, r23
    2086:	88 1f       	adc	r24, r24
    2088:	da f7       	brpl	.-10     	; 0x2080 <__floatsisf+0x62>
    208a:	88 0f       	add	r24, r24
    208c:	96 95       	lsr	r25
    208e:	87 95       	ror	r24
    2090:	97 f9       	bld	r25, 7
    2092:	08 95       	ret

00002094 <__fp_inf>:
    2094:	97 f9       	bld	r25, 7
    2096:	9f 67       	ori	r25, 0x7F	; 127
    2098:	80 e8       	ldi	r24, 0x80	; 128
    209a:	70 e0       	ldi	r23, 0x00	; 0
    209c:	60 e0       	ldi	r22, 0x00	; 0
    209e:	08 95       	ret

000020a0 <__fp_nan>:
    20a0:	9f ef       	ldi	r25, 0xFF	; 255
    20a2:	80 ec       	ldi	r24, 0xC0	; 192
    20a4:	08 95       	ret

000020a6 <__fp_pscA>:
    20a6:	00 24       	eor	r0, r0
    20a8:	0a 94       	dec	r0
    20aa:	16 16       	cp	r1, r22
    20ac:	17 06       	cpc	r1, r23
    20ae:	18 06       	cpc	r1, r24
    20b0:	09 06       	cpc	r0, r25
    20b2:	08 95       	ret

000020b4 <__fp_pscB>:
    20b4:	00 24       	eor	r0, r0
    20b6:	0a 94       	dec	r0
    20b8:	12 16       	cp	r1, r18
    20ba:	13 06       	cpc	r1, r19
    20bc:	14 06       	cpc	r1, r20
    20be:	05 06       	cpc	r0, r21
    20c0:	08 95       	ret

000020c2 <__fp_round>:
    20c2:	09 2e       	mov	r0, r25
    20c4:	03 94       	inc	r0
    20c6:	00 0c       	add	r0, r0
    20c8:	11 f4       	brne	.+4      	; 0x20ce <__fp_round+0xc>
    20ca:	88 23       	and	r24, r24
    20cc:	52 f0       	brmi	.+20     	; 0x20e2 <__fp_round+0x20>
    20ce:	bb 0f       	add	r27, r27
    20d0:	40 f4       	brcc	.+16     	; 0x20e2 <__fp_round+0x20>
    20d2:	bf 2b       	or	r27, r31
    20d4:	11 f4       	brne	.+4      	; 0x20da <__fp_round+0x18>
    20d6:	60 ff       	sbrs	r22, 0
    20d8:	04 c0       	rjmp	.+8      	; 0x20e2 <__fp_round+0x20>
    20da:	6f 5f       	subi	r22, 0xFF	; 255
    20dc:	7f 4f       	sbci	r23, 0xFF	; 255
    20de:	8f 4f       	sbci	r24, 0xFF	; 255
    20e0:	9f 4f       	sbci	r25, 0xFF	; 255
    20e2:	08 95       	ret

000020e4 <__fp_split3>:
    20e4:	57 fd       	sbrc	r21, 7
    20e6:	90 58       	subi	r25, 0x80	; 128
    20e8:	44 0f       	add	r20, r20
    20ea:	55 1f       	adc	r21, r21
    20ec:	59 f0       	breq	.+22     	; 0x2104 <__fp_splitA+0x10>
    20ee:	5f 3f       	cpi	r21, 0xFF	; 255
    20f0:	71 f0       	breq	.+28     	; 0x210e <__fp_splitA+0x1a>
    20f2:	47 95       	ror	r20

000020f4 <__fp_splitA>:
    20f4:	88 0f       	add	r24, r24
    20f6:	97 fb       	bst	r25, 7
    20f8:	99 1f       	adc	r25, r25
    20fa:	61 f0       	breq	.+24     	; 0x2114 <__fp_splitA+0x20>
    20fc:	9f 3f       	cpi	r25, 0xFF	; 255
    20fe:	79 f0       	breq	.+30     	; 0x211e <__fp_splitA+0x2a>
    2100:	87 95       	ror	r24
    2102:	08 95       	ret
    2104:	12 16       	cp	r1, r18
    2106:	13 06       	cpc	r1, r19
    2108:	14 06       	cpc	r1, r20
    210a:	55 1f       	adc	r21, r21
    210c:	f2 cf       	rjmp	.-28     	; 0x20f2 <__fp_split3+0xe>
    210e:	46 95       	lsr	r20
    2110:	f1 df       	rcall	.-30     	; 0x20f4 <__fp_splitA>
    2112:	08 c0       	rjmp	.+16     	; 0x2124 <__fp_splitA+0x30>
    2114:	16 16       	cp	r1, r22
    2116:	17 06       	cpc	r1, r23
    2118:	18 06       	cpc	r1, r24
    211a:	99 1f       	adc	r25, r25
    211c:	f1 cf       	rjmp	.-30     	; 0x2100 <__fp_splitA+0xc>
    211e:	86 95       	lsr	r24
    2120:	71 05       	cpc	r23, r1
    2122:	61 05       	cpc	r22, r1
    2124:	08 94       	sec
    2126:	08 95       	ret

00002128 <__fp_zero>:
    2128:	e8 94       	clt

0000212a <__fp_szero>:
    212a:	bb 27       	eor	r27, r27
    212c:	66 27       	eor	r22, r22
    212e:	77 27       	eor	r23, r23
    2130:	cb 01       	movw	r24, r22
    2132:	97 f9       	bld	r25, 7
    2134:	08 95       	ret

00002136 <__mulsf3>:
    2136:	0b d0       	rcall	.+22     	; 0x214e <__mulsf3x>
    2138:	c4 cf       	rjmp	.-120    	; 0x20c2 <__fp_round>
    213a:	b5 df       	rcall	.-150    	; 0x20a6 <__fp_pscA>
    213c:	28 f0       	brcs	.+10     	; 0x2148 <__mulsf3+0x12>
    213e:	ba df       	rcall	.-140    	; 0x20b4 <__fp_pscB>
    2140:	18 f0       	brcs	.+6      	; 0x2148 <__mulsf3+0x12>
    2142:	95 23       	and	r25, r21
    2144:	09 f0       	breq	.+2      	; 0x2148 <__mulsf3+0x12>
    2146:	a6 cf       	rjmp	.-180    	; 0x2094 <__fp_inf>
    2148:	ab cf       	rjmp	.-170    	; 0x20a0 <__fp_nan>
    214a:	11 24       	eor	r1, r1
    214c:	ee cf       	rjmp	.-36     	; 0x212a <__fp_szero>

0000214e <__mulsf3x>:
    214e:	ca df       	rcall	.-108    	; 0x20e4 <__fp_split3>
    2150:	a0 f3       	brcs	.-24     	; 0x213a <__mulsf3+0x4>

00002152 <__mulsf3_pse>:
    2152:	95 9f       	mul	r25, r21
    2154:	d1 f3       	breq	.-12     	; 0x214a <__mulsf3+0x14>
    2156:	95 0f       	add	r25, r21
    2158:	50 e0       	ldi	r21, 0x00	; 0
    215a:	55 1f       	adc	r21, r21
    215c:	62 9f       	mul	r22, r18
    215e:	f0 01       	movw	r30, r0
    2160:	72 9f       	mul	r23, r18
    2162:	bb 27       	eor	r27, r27
    2164:	f0 0d       	add	r31, r0
    2166:	b1 1d       	adc	r27, r1
    2168:	63 9f       	mul	r22, r19
    216a:	aa 27       	eor	r26, r26
    216c:	f0 0d       	add	r31, r0
    216e:	b1 1d       	adc	r27, r1
    2170:	aa 1f       	adc	r26, r26
    2172:	64 9f       	mul	r22, r20
    2174:	66 27       	eor	r22, r22
    2176:	b0 0d       	add	r27, r0
    2178:	a1 1d       	adc	r26, r1
    217a:	66 1f       	adc	r22, r22
    217c:	82 9f       	mul	r24, r18
    217e:	22 27       	eor	r18, r18
    2180:	b0 0d       	add	r27, r0
    2182:	a1 1d       	adc	r26, r1
    2184:	62 1f       	adc	r22, r18
    2186:	73 9f       	mul	r23, r19
    2188:	b0 0d       	add	r27, r0
    218a:	a1 1d       	adc	r26, r1
    218c:	62 1f       	adc	r22, r18
    218e:	83 9f       	mul	r24, r19
    2190:	a0 0d       	add	r26, r0
    2192:	61 1d       	adc	r22, r1
    2194:	22 1f       	adc	r18, r18
    2196:	74 9f       	mul	r23, r20
    2198:	33 27       	eor	r19, r19
    219a:	a0 0d       	add	r26, r0
    219c:	61 1d       	adc	r22, r1
    219e:	23 1f       	adc	r18, r19
    21a0:	84 9f       	mul	r24, r20
    21a2:	60 0d       	add	r22, r0
    21a4:	21 1d       	adc	r18, r1
    21a6:	82 2f       	mov	r24, r18
    21a8:	76 2f       	mov	r23, r22
    21aa:	6a 2f       	mov	r22, r26
    21ac:	11 24       	eor	r1, r1
    21ae:	9f 57       	subi	r25, 0x7F	; 127
    21b0:	50 40       	sbci	r21, 0x00	; 0
    21b2:	8a f0       	brmi	.+34     	; 0x21d6 <__mulsf3_pse+0x84>
    21b4:	e1 f0       	breq	.+56     	; 0x21ee <__mulsf3_pse+0x9c>
    21b6:	88 23       	and	r24, r24
    21b8:	4a f0       	brmi	.+18     	; 0x21cc <__mulsf3_pse+0x7a>
    21ba:	ee 0f       	add	r30, r30
    21bc:	ff 1f       	adc	r31, r31
    21be:	bb 1f       	adc	r27, r27
    21c0:	66 1f       	adc	r22, r22
    21c2:	77 1f       	adc	r23, r23
    21c4:	88 1f       	adc	r24, r24
    21c6:	91 50       	subi	r25, 0x01	; 1
    21c8:	50 40       	sbci	r21, 0x00	; 0
    21ca:	a9 f7       	brne	.-22     	; 0x21b6 <__mulsf3_pse+0x64>
    21cc:	9e 3f       	cpi	r25, 0xFE	; 254
    21ce:	51 05       	cpc	r21, r1
    21d0:	70 f0       	brcs	.+28     	; 0x21ee <__mulsf3_pse+0x9c>
    21d2:	60 cf       	rjmp	.-320    	; 0x2094 <__fp_inf>
    21d4:	aa cf       	rjmp	.-172    	; 0x212a <__fp_szero>
    21d6:	5f 3f       	cpi	r21, 0xFF	; 255
    21d8:	ec f3       	brlt	.-6      	; 0x21d4 <__mulsf3_pse+0x82>
    21da:	98 3e       	cpi	r25, 0xE8	; 232
    21dc:	dc f3       	brlt	.-10     	; 0x21d4 <__mulsf3_pse+0x82>
    21de:	86 95       	lsr	r24
    21e0:	77 95       	ror	r23
    21e2:	67 95       	ror	r22
    21e4:	b7 95       	ror	r27
    21e6:	f7 95       	ror	r31
    21e8:	e7 95       	ror	r30
    21ea:	9f 5f       	subi	r25, 0xFF	; 255
    21ec:	c1 f7       	brne	.-16     	; 0x21de <__mulsf3_pse+0x8c>
    21ee:	fe 2b       	or	r31, r30
    21f0:	88 0f       	add	r24, r24
    21f2:	91 1d       	adc	r25, r1
    21f4:	96 95       	lsr	r25
    21f6:	87 95       	ror	r24
    21f8:	97 f9       	bld	r25, 7
    21fa:	08 95       	ret

000021fc <__mulsi3>:
    21fc:	62 9f       	mul	r22, r18
    21fe:	d0 01       	movw	r26, r0
    2200:	73 9f       	mul	r23, r19
    2202:	f0 01       	movw	r30, r0
    2204:	82 9f       	mul	r24, r18
    2206:	e0 0d       	add	r30, r0
    2208:	f1 1d       	adc	r31, r1
    220a:	64 9f       	mul	r22, r20
    220c:	e0 0d       	add	r30, r0
    220e:	f1 1d       	adc	r31, r1
    2210:	92 9f       	mul	r25, r18
    2212:	f0 0d       	add	r31, r0
    2214:	83 9f       	mul	r24, r19
    2216:	f0 0d       	add	r31, r0
    2218:	74 9f       	mul	r23, r20
    221a:	f0 0d       	add	r31, r0
    221c:	65 9f       	mul	r22, r21
    221e:	f0 0d       	add	r31, r0
    2220:	99 27       	eor	r25, r25
    2222:	72 9f       	mul	r23, r18
    2224:	b0 0d       	add	r27, r0
    2226:	e1 1d       	adc	r30, r1
    2228:	f9 1f       	adc	r31, r25
    222a:	63 9f       	mul	r22, r19
    222c:	b0 0d       	add	r27, r0
    222e:	e1 1d       	adc	r30, r1
    2230:	f9 1f       	adc	r31, r25
    2232:	bd 01       	movw	r22, r26
    2234:	cf 01       	movw	r24, r30
    2236:	11 24       	eor	r1, r1
    2238:	08 95       	ret

0000223a <__divmodhi4>:
    223a:	97 fb       	bst	r25, 7
    223c:	09 2e       	mov	r0, r25
    223e:	07 26       	eor	r0, r23
    2240:	0a d0       	rcall	.+20     	; 0x2256 <__divmodhi4_neg1>
    2242:	77 fd       	sbrc	r23, 7
    2244:	04 d0       	rcall	.+8      	; 0x224e <__divmodhi4_neg2>
    2246:	27 d0       	rcall	.+78     	; 0x2296 <__udivmodhi4>
    2248:	06 d0       	rcall	.+12     	; 0x2256 <__divmodhi4_neg1>
    224a:	00 20       	and	r0, r0
    224c:	1a f4       	brpl	.+6      	; 0x2254 <__divmodhi4_exit>

0000224e <__divmodhi4_neg2>:
    224e:	70 95       	com	r23
    2250:	61 95       	neg	r22
    2252:	7f 4f       	sbci	r23, 0xFF	; 255

00002254 <__divmodhi4_exit>:
    2254:	08 95       	ret

00002256 <__divmodhi4_neg1>:
    2256:	f6 f7       	brtc	.-4      	; 0x2254 <__divmodhi4_exit>
    2258:	90 95       	com	r25
    225a:	81 95       	neg	r24
    225c:	9f 4f       	sbci	r25, 0xFF	; 255
    225e:	08 95       	ret

00002260 <__divmodsi4>:
    2260:	97 fb       	bst	r25, 7
    2262:	09 2e       	mov	r0, r25
    2264:	05 26       	eor	r0, r21
    2266:	0e d0       	rcall	.+28     	; 0x2284 <__divmodsi4_neg1>
    2268:	57 fd       	sbrc	r21, 7
    226a:	04 d0       	rcall	.+8      	; 0x2274 <__divmodsi4_neg2>
    226c:	28 d0       	rcall	.+80     	; 0x22be <__udivmodsi4>
    226e:	0a d0       	rcall	.+20     	; 0x2284 <__divmodsi4_neg1>
    2270:	00 1c       	adc	r0, r0
    2272:	38 f4       	brcc	.+14     	; 0x2282 <__divmodsi4_exit>

00002274 <__divmodsi4_neg2>:
    2274:	50 95       	com	r21
    2276:	40 95       	com	r20
    2278:	30 95       	com	r19
    227a:	21 95       	neg	r18
    227c:	3f 4f       	sbci	r19, 0xFF	; 255
    227e:	4f 4f       	sbci	r20, 0xFF	; 255
    2280:	5f 4f       	sbci	r21, 0xFF	; 255

00002282 <__divmodsi4_exit>:
    2282:	08 95       	ret

00002284 <__divmodsi4_neg1>:
    2284:	f6 f7       	brtc	.-4      	; 0x2282 <__divmodsi4_exit>
    2286:	90 95       	com	r25
    2288:	80 95       	com	r24
    228a:	70 95       	com	r23
    228c:	61 95       	neg	r22
    228e:	7f 4f       	sbci	r23, 0xFF	; 255
    2290:	8f 4f       	sbci	r24, 0xFF	; 255
    2292:	9f 4f       	sbci	r25, 0xFF	; 255
    2294:	08 95       	ret

00002296 <__udivmodhi4>:
    2296:	aa 1b       	sub	r26, r26
    2298:	bb 1b       	sub	r27, r27
    229a:	51 e1       	ldi	r21, 0x11	; 17
    229c:	07 c0       	rjmp	.+14     	; 0x22ac <__udivmodhi4_ep>

0000229e <__udivmodhi4_loop>:
    229e:	aa 1f       	adc	r26, r26
    22a0:	bb 1f       	adc	r27, r27
    22a2:	a6 17       	cp	r26, r22
    22a4:	b7 07       	cpc	r27, r23
    22a6:	10 f0       	brcs	.+4      	; 0x22ac <__udivmodhi4_ep>
    22a8:	a6 1b       	sub	r26, r22
    22aa:	b7 0b       	sbc	r27, r23

000022ac <__udivmodhi4_ep>:
    22ac:	88 1f       	adc	r24, r24
    22ae:	99 1f       	adc	r25, r25
    22b0:	5a 95       	dec	r21
    22b2:	a9 f7       	brne	.-22     	; 0x229e <__udivmodhi4_loop>
    22b4:	80 95       	com	r24
    22b6:	90 95       	com	r25
    22b8:	bc 01       	movw	r22, r24
    22ba:	cd 01       	movw	r24, r26
    22bc:	08 95       	ret

000022be <__udivmodsi4>:
    22be:	a1 e2       	ldi	r26, 0x21	; 33
    22c0:	1a 2e       	mov	r1, r26
    22c2:	aa 1b       	sub	r26, r26
    22c4:	bb 1b       	sub	r27, r27
    22c6:	fd 01       	movw	r30, r26
    22c8:	0d c0       	rjmp	.+26     	; 0x22e4 <__udivmodsi4_ep>

000022ca <__udivmodsi4_loop>:
    22ca:	aa 1f       	adc	r26, r26
    22cc:	bb 1f       	adc	r27, r27
    22ce:	ee 1f       	adc	r30, r30
    22d0:	ff 1f       	adc	r31, r31
    22d2:	a2 17       	cp	r26, r18
    22d4:	b3 07       	cpc	r27, r19
    22d6:	e4 07       	cpc	r30, r20
    22d8:	f5 07       	cpc	r31, r21
    22da:	20 f0       	brcs	.+8      	; 0x22e4 <__udivmodsi4_ep>
    22dc:	a2 1b       	sub	r26, r18
    22de:	b3 0b       	sbc	r27, r19
    22e0:	e4 0b       	sbc	r30, r20
    22e2:	f5 0b       	sbc	r31, r21

000022e4 <__udivmodsi4_ep>:
    22e4:	66 1f       	adc	r22, r22
    22e6:	77 1f       	adc	r23, r23
    22e8:	88 1f       	adc	r24, r24
    22ea:	99 1f       	adc	r25, r25
    22ec:	1a 94       	dec	r1
    22ee:	69 f7       	brne	.-38     	; 0x22ca <__udivmodsi4_loop>
    22f0:	60 95       	com	r22
    22f2:	70 95       	com	r23
    22f4:	80 95       	com	r24
    22f6:	90 95       	com	r25
    22f8:	9b 01       	movw	r18, r22
    22fa:	ac 01       	movw	r20, r24
    22fc:	bd 01       	movw	r22, r26
    22fe:	cf 01       	movw	r24, r30
    2300:	08 95       	ret

00002302 <__tablejump_elpm__>:
    2302:	07 90       	elpm	r0, Z+
    2304:	f6 91       	elpm	r31, Z+
    2306:	e0 2d       	mov	r30, r0
    2308:	19 94       	eijmp

0000230a <_exit>:
    230a:	f8 94       	cli

0000230c <__stop_program>:
    230c:	ff cf       	rjmp	.-2      	; 0x230c <__stop_program>
