
PrototypeSwerveDrive.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
<<<<<<< HEAD
<<<<<<< HEAD
  0 .data         000000b4  00800200  00001cde  00001d72  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001cde  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  008002b4  008002b4  00001e26  2**0
                  ALLOC
  3 .stab         00002460  00000000  00000000  00001e28  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000008a6  00000000  00000000  00004288  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  00004b2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000020c  00000000  00000000  00004b4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000c5d  00000000  00000000  00004d5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000039d  00000000  00000000  000059b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001267  00000000  00000000  00005d54  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001d0  00000000  00000000  00006fbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000623  00000000  00000000  0000718c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000d15  00000000  00000000  000077af  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000067  00000000  00000000  000084c4  2**0
=======
  0 .data         000000b4  00800200  00001b2e  00001bc2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b2e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  008002b4  008002b4  00001c76  2**0
                  ALLOC
  3 .stab         00002460  00000000  00000000  00001c78  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000008a6  00000000  00000000  000040d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  0000497e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001ce  00000000  00000000  0000499e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000081f  00000000  00000000  00004b6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000002bb  00000000  00000000  0000538b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000117c  00000000  00000000  00005646  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001d0  00000000  00000000  000067c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000442  00000000  00000000  00006994  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000d15  00000000  00000000  00006dd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000038  00000000  00000000  00007aeb  2**0
>>>>>>> parent of 1e7bf21... Included Cytron.h
=======
  0 .data         000000b4  00800200  00002a04  00002a98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002a04  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  008002b4  008002b4  00002b4c  2**0
                  ALLOC
  3 .stab         00002460  00000000  00000000  00002b4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000008a6  00000000  00000000  00004fac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  00005852  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001fd  00000000  00000000  00005872  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000008c8  00000000  00000000  00005a6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000002ca  00000000  00000000  00006337  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000174a  00000000  00000000  00006601  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000200  00000000  00000000  00007d4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000004ad  00000000  00000000  00007f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000010ad  00000000  00000000  000083f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000038  00000000  00000000  000094a6  2**0
>>>>>>> parent of 6ea3b60... Sinosudal Wave travelling
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
<<<<<<< HEAD
<<<<<<< HEAD
       4:	0c 94 ed 0b 	jmp	0x17da	; 0x17da <__vector_1>
       8:	0c 94 75 0a 	jmp	0x14ea	; 0x14ea <__vector_2>
       c:	0c 94 a0 0a 	jmp	0x1540	; 0x1540 <__vector_3>
      10:	0c 94 cb 0a 	jmp	0x1596	; 0x1596 <__vector_4>
      14:	0c 94 f6 0a 	jmp	0x15ec	; 0x15ec <__vector_5>
      18:	0c 94 21 0b 	jmp	0x1642	; 0x1642 <__vector_6>
      1c:	0c 94 4c 0b 	jmp	0x1698	; 0x1698 <__vector_7>
      20:	0c 94 77 0b 	jmp	0x16ee	; 0x16ee <__vector_8>
=======
       4:	0c 94 d6 09 	jmp	0x13ac	; 0x13ac <__vector_1>
       8:	0c 94 01 0a 	jmp	0x1402	; 0x1402 <__vector_2>
       c:	0c 94 2c 0a 	jmp	0x1458	; 0x1458 <__vector_3>
      10:	0c 94 57 0a 	jmp	0x14ae	; 0x14ae <__vector_4>
      14:	0c 94 82 0a 	jmp	0x1504	; 0x1504 <__vector_5>
      18:	0c 94 ad 0a 	jmp	0x155a	; 0x155a <__vector_6>
      1c:	0c 94 d8 0a 	jmp	0x15b0	; 0x15b0 <__vector_7>
      20:	0c 94 03 0b 	jmp	0x1606	; 0x1606 <__vector_8>
>>>>>>> parent of 1e7bf21... Included Cytron.h
=======
       4:	0c 94 78 0a 	jmp	0x14f0	; 0x14f0 <__vector_1>
       8:	0c 94 a3 0a 	jmp	0x1546	; 0x1546 <__vector_2>
       c:	0c 94 ce 0a 	jmp	0x159c	; 0x159c <__vector_3>
      10:	0c 94 f9 0a 	jmp	0x15f2	; 0x15f2 <__vector_4>
      14:	0c 94 24 0b 	jmp	0x1648	; 0x1648 <__vector_5>
      18:	0c 94 4f 0b 	jmp	0x169e	; 0x169e <__vector_6>
      1c:	0c 94 7a 0b 	jmp	0x16f4	; 0x16f4 <__vector_7>
      20:	0c 94 a5 0b 	jmp	0x174a	; 0x174a <__vector_8>
>>>>>>> parent of 6ea3b60... Sinosudal Wave travelling
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 8f 07 	jmp	0xf1e	; 0xf1e <__vector_23>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
<<<<<<< HEAD
<<<<<<< HEAD
      fa:	ee ed       	ldi	r30, 0xDE	; 222
      fc:	fc e1       	ldi	r31, 0x1C	; 28
=======
      fa:	ee e2       	ldi	r30, 0x2E	; 46
      fc:	fb e1       	ldi	r31, 0x1B	; 27
>>>>>>> parent of 1e7bf21... Included Cytron.h
=======
      fa:	e4 e0       	ldi	r30, 0x04	; 4
      fc:	fa e2       	ldi	r31, 0x2A	; 42
>>>>>>> parent of 6ea3b60... Sinosudal Wave travelling
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a4 3b       	cpi	r26, 0xB4	; 180
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	12 e0       	ldi	r17, 0x02	; 2
     110:	a4 eb       	ldi	r26, 0xB4	; 180
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
<<<<<<< HEAD
     118:	a3 3c       	cpi	r26, 0xC3	; 195
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
<<<<<<< HEAD
     11e:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <main>
     122:	0c 94 6d 0e 	jmp	0x1cda	; 0x1cda <_exit>
=======
     11e:	0e 94 4e 0b 	call	0x169c	; 0x169c <main>
     122:	0c 94 95 0d 	jmp	0x1b2a	; 0x1b2a <_exit>
>>>>>>> parent of 1e7bf21... Included Cytron.h
=======
     118:	aa 3b       	cpi	r26, 0xBA	; 186
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 b9 12 	call	0x2572	; 0x2572 <main>
     122:	0c 94 00 15 	jmp	0x2a00	; 0x2a00 <_exit>
>>>>>>> parent of 6ea3b60... Sinosudal Wave travelling

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <_Z7pinModehh>:
//Functions:

void pinMode(uint8_t pInno,uint8_t mOde)
{
	int l;
  	if(mOde==0)
     12a:	66 23       	and	r22, r22
     12c:	09 f0       	breq	.+2      	; 0x130 <_Z7pinModehh+0x6>
     12e:	b8 c0       	rjmp	.+368    	; 0x2a0 <_Z7pinModehh+0x176>
    { 
    	switch(d[pInno]){
     130:	90 e0       	ldi	r25, 0x00	; 0
     132:	fc 01       	movw	r30, r24
     134:	e8 58       	subi	r30, 0x88	; 136
     136:	fd 4f       	sbci	r31, 0xFD	; 253
     138:	20 81       	ld	r18, Z
     13a:	25 36       	cpi	r18, 0x65	; 101
     13c:	09 f4       	brne	.+2      	; 0x140 <_Z7pinModehh+0x16>
     13e:	50 c0       	rjmp	.+160    	; 0x1e0 <_Z7pinModehh+0xb6>
     140:	26 36       	cpi	r18, 0x66	; 102
     142:	40 f4       	brcc	.+16     	; 0x154 <_Z7pinModehh+0x2a>
     144:	23 36       	cpi	r18, 0x63	; 99
     146:	41 f1       	breq	.+80     	; 0x198 <_Z7pinModehh+0x6e>
     148:	24 36       	cpi	r18, 0x64	; 100
     14a:	c0 f5       	brcc	.+112    	; 0x1bc <_Z7pinModehh+0x92>
     14c:	22 36       	cpi	r18, 0x62	; 98
     14e:	09 f0       	breq	.+2      	; 0x152 <_Z7pinModehh+0x28>
     150:	5e c1       	rjmp	.+700    	; 0x40e <_Z7pinModehh+0x2e4>
     152:	10 c0       	rjmp	.+32     	; 0x174 <_Z7pinModehh+0x4a>
     154:	28 36       	cpi	r18, 0x68	; 104
     156:	09 f4       	brne	.+2      	; 0x15a <_Z7pinModehh+0x30>
     158:	67 c0       	rjmp	.+206    	; 0x228 <_Z7pinModehh+0xfe>
     15a:	29 36       	cpi	r18, 0x69	; 105
     15c:	20 f4       	brcc	.+8      	; 0x166 <_Z7pinModehh+0x3c>
     15e:	27 36       	cpi	r18, 0x67	; 103
     160:	09 f0       	breq	.+2      	; 0x164 <_Z7pinModehh+0x3a>
     162:	55 c1       	rjmp	.+682    	; 0x40e <_Z7pinModehh+0x2e4>
     164:	4f c0       	rjmp	.+158    	; 0x204 <_Z7pinModehh+0xda>
     166:	2a 36       	cpi	r18, 0x6A	; 106
     168:	09 f4       	brne	.+2      	; 0x16c <_Z7pinModehh+0x42>
     16a:	72 c0       	rjmp	.+228    	; 0x250 <_Z7pinModehh+0x126>
     16c:	2c 36       	cpi	r18, 0x6C	; 108
     16e:	09 f0       	breq	.+2      	; 0x172 <_Z7pinModehh+0x48>
     170:	4e c1       	rjmp	.+668    	; 0x40e <_Z7pinModehh+0x2e4>
     172:	82 c0       	rjmp	.+260    	; 0x278 <_Z7pinModehh+0x14e>
 
          	case'b':
                  DDRB&=~(1<<c[pInno]);
     174:	24 b1       	in	r18, 0x04	; 4
     176:	fc 01       	movw	r30, r24
     178:	ee 0f       	add	r30, r30
     17a:	ff 1f       	adc	r31, r31
     17c:	e0 50       	subi	r30, 0x00	; 0
     17e:	fe 4f       	sbci	r31, 0xFE	; 254
     180:	81 e0       	ldi	r24, 0x01	; 1
     182:	90 e0       	ldi	r25, 0x00	; 0
     184:	00 80       	ld	r0, Z
     186:	02 c0       	rjmp	.+4      	; 0x18c <_Z7pinModehh+0x62>
     188:	88 0f       	add	r24, r24
     18a:	99 1f       	adc	r25, r25
     18c:	0a 94       	dec	r0
     18e:	e2 f7       	brpl	.-8      	; 0x188 <_Z7pinModehh+0x5e>
     190:	80 95       	com	r24
     192:	82 23       	and	r24, r18
     194:	84 b9       	out	0x04, r24	; 4
		           break;
     196:	08 95       	ret
          	case'c':
                 DDRC&=~(1<<c[pInno]);
     198:	27 b1       	in	r18, 0x07	; 7
     19a:	fc 01       	movw	r30, r24
     19c:	ee 0f       	add	r30, r30
     19e:	ff 1f       	adc	r31, r31
     1a0:	e0 50       	subi	r30, 0x00	; 0
     1a2:	fe 4f       	sbci	r31, 0xFE	; 254
     1a4:	81 e0       	ldi	r24, 0x01	; 1
     1a6:	90 e0       	ldi	r25, 0x00	; 0
     1a8:	00 80       	ld	r0, Z
     1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <_Z7pinModehh+0x86>
     1ac:	88 0f       	add	r24, r24
     1ae:	99 1f       	adc	r25, r25
     1b0:	0a 94       	dec	r0
     1b2:	e2 f7       	brpl	.-8      	; 0x1ac <_Z7pinModehh+0x82>
     1b4:	80 95       	com	r24
     1b6:	82 23       	and	r24, r18
     1b8:	87 b9       	out	0x07, r24	; 7
		          break;
     1ba:	08 95       	ret
          	case'd':
                 DDRD&=~(1<<c[pInno]);
     1bc:	2a b1       	in	r18, 0x0a	; 10
     1be:	fc 01       	movw	r30, r24
     1c0:	ee 0f       	add	r30, r30
     1c2:	ff 1f       	adc	r31, r31
     1c4:	e0 50       	subi	r30, 0x00	; 0
     1c6:	fe 4f       	sbci	r31, 0xFE	; 254
     1c8:	81 e0       	ldi	r24, 0x01	; 1
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	00 80       	ld	r0, Z
     1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <_Z7pinModehh+0xaa>
     1d0:	88 0f       	add	r24, r24
     1d2:	99 1f       	adc	r25, r25
     1d4:	0a 94       	dec	r0
     1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <_Z7pinModehh+0xa6>
     1d8:	80 95       	com	r24
     1da:	82 23       	and	r24, r18
     1dc:	8a b9       	out	0x0a, r24	; 10
		          break;
     1de:	08 95       	ret
	      	case'e':
                  DDRE&=~(1<<c[pInno]);
     1e0:	2d b1       	in	r18, 0x0d	; 13
     1e2:	fc 01       	movw	r30, r24
     1e4:	ee 0f       	add	r30, r30
     1e6:	ff 1f       	adc	r31, r31
     1e8:	e0 50       	subi	r30, 0x00	; 0
     1ea:	fe 4f       	sbci	r31, 0xFE	; 254
     1ec:	81 e0       	ldi	r24, 0x01	; 1
     1ee:	90 e0       	ldi	r25, 0x00	; 0
     1f0:	00 80       	ld	r0, Z
     1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <_Z7pinModehh+0xce>
     1f4:	88 0f       	add	r24, r24
     1f6:	99 1f       	adc	r25, r25
     1f8:	0a 94       	dec	r0
     1fa:	e2 f7       	brpl	.-8      	; 0x1f4 <_Z7pinModehh+0xca>
     1fc:	80 95       	com	r24
     1fe:	82 23       	and	r24, r18
     200:	8d b9       	out	0x0d, r24	; 13
		           break;
     202:	08 95       	ret
		    case'g':
                  DDRG&=~(1<<c[pInno]);
     204:	23 b3       	in	r18, 0x13	; 19
     206:	fc 01       	movw	r30, r24
     208:	ee 0f       	add	r30, r30
     20a:	ff 1f       	adc	r31, r31
     20c:	e0 50       	subi	r30, 0x00	; 0
     20e:	fe 4f       	sbci	r31, 0xFE	; 254
     210:	81 e0       	ldi	r24, 0x01	; 1
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	00 80       	ld	r0, Z
     216:	02 c0       	rjmp	.+4      	; 0x21c <_Z7pinModehh+0xf2>
     218:	88 0f       	add	r24, r24
     21a:	99 1f       	adc	r25, r25
     21c:	0a 94       	dec	r0
     21e:	e2 f7       	brpl	.-8      	; 0x218 <_Z7pinModehh+0xee>
     220:	80 95       	com	r24
     222:	82 23       	and	r24, r18
     224:	83 bb       	out	0x13, r24	; 19
		           break;
     226:	08 95       	ret
			case'h':
                  DDRH&=~(1<<c[pInno]);
     228:	e1 e0       	ldi	r30, 0x01	; 1
     22a:	f1 e0       	ldi	r31, 0x01	; 1
     22c:	20 81       	ld	r18, Z
     22e:	dc 01       	movw	r26, r24
     230:	aa 0f       	add	r26, r26
     232:	bb 1f       	adc	r27, r27
     234:	a0 50       	subi	r26, 0x00	; 0
     236:	be 4f       	sbci	r27, 0xFE	; 254
     238:	81 e0       	ldi	r24, 0x01	; 1
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	0c 90       	ld	r0, X
     23e:	02 c0       	rjmp	.+4      	; 0x244 <_Z7pinModehh+0x11a>
     240:	88 0f       	add	r24, r24
     242:	99 1f       	adc	r25, r25
     244:	0a 94       	dec	r0
     246:	e2 f7       	brpl	.-8      	; 0x240 <_Z7pinModehh+0x116>
     248:	80 95       	com	r24
     24a:	82 23       	and	r24, r18
     24c:	80 83       	st	Z, r24
				  break;
     24e:	08 95       	ret
		    case'j':
                  DDRJ&=~(1<<c[pInno]);
     250:	e4 e0       	ldi	r30, 0x04	; 4
     252:	f1 e0       	ldi	r31, 0x01	; 1
     254:	20 81       	ld	r18, Z
     256:	dc 01       	movw	r26, r24
     258:	aa 0f       	add	r26, r26
     25a:	bb 1f       	adc	r27, r27
     25c:	a0 50       	subi	r26, 0x00	; 0
     25e:	be 4f       	sbci	r27, 0xFE	; 254
     260:	81 e0       	ldi	r24, 0x01	; 1
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	0c 90       	ld	r0, X
     266:	02 c0       	rjmp	.+4      	; 0x26c <_Z7pinModehh+0x142>
     268:	88 0f       	add	r24, r24
     26a:	99 1f       	adc	r25, r25
     26c:	0a 94       	dec	r0
     26e:	e2 f7       	brpl	.-8      	; 0x268 <_Z7pinModehh+0x13e>
     270:	80 95       	com	r24
     272:	82 23       	and	r24, r18
     274:	80 83       	st	Z, r24
		          break;
     276:	08 95       	ret
			case'l':
                  DDRL&=~(1<<c[pInno]);
     278:	ea e0       	ldi	r30, 0x0A	; 10
     27a:	f1 e0       	ldi	r31, 0x01	; 1
     27c:	20 81       	ld	r18, Z
     27e:	dc 01       	movw	r26, r24
     280:	aa 0f       	add	r26, r26
     282:	bb 1f       	adc	r27, r27
     284:	a0 50       	subi	r26, 0x00	; 0
     286:	be 4f       	sbci	r27, 0xFE	; 254
     288:	81 e0       	ldi	r24, 0x01	; 1
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	0c 90       	ld	r0, X
     28e:	02 c0       	rjmp	.+4      	; 0x294 <_Z7pinModehh+0x16a>
     290:	88 0f       	add	r24, r24
     292:	99 1f       	adc	r25, r25
     294:	0a 94       	dec	r0
     296:	e2 f7       	brpl	.-8      	; 0x290 <_Z7pinModehh+0x166>
     298:	80 95       	com	r24
     29a:	82 23       	and	r24, r18
     29c:	80 83       	st	Z, r24
		          break;	        		   		   	  	  		 		 			 
     29e:	08 95       	ret
     	}  
	}
	else{          
			switch(d[pInno])
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	fc 01       	movw	r30, r24
     2a4:	e8 58       	subi	r30, 0x88	; 136
     2a6:	fd 4f       	sbci	r31, 0xFD	; 253
     2a8:	20 81       	ld	r18, Z
     2aa:	25 36       	cpi	r18, 0x65	; 101
     2ac:	09 f4       	brne	.+2      	; 0x2b0 <_Z7pinModehh+0x186>
     2ae:	50 c0       	rjmp	.+160    	; 0x350 <_Z7pinModehh+0x226>
     2b0:	26 36       	cpi	r18, 0x66	; 102
     2b2:	40 f4       	brcc	.+16     	; 0x2c4 <_Z7pinModehh+0x19a>
     2b4:	23 36       	cpi	r18, 0x63	; 99
     2b6:	41 f1       	breq	.+80     	; 0x308 <_Z7pinModehh+0x1de>
     2b8:	24 36       	cpi	r18, 0x64	; 100
     2ba:	c0 f5       	brcc	.+112    	; 0x32c <_Z7pinModehh+0x202>
     2bc:	22 36       	cpi	r18, 0x62	; 98
     2be:	09 f0       	breq	.+2      	; 0x2c2 <_Z7pinModehh+0x198>
     2c0:	a6 c0       	rjmp	.+332    	; 0x40e <_Z7pinModehh+0x2e4>
     2c2:	10 c0       	rjmp	.+32     	; 0x2e4 <_Z7pinModehh+0x1ba>
     2c4:	28 36       	cpi	r18, 0x68	; 104
     2c6:	09 f4       	brne	.+2      	; 0x2ca <_Z7pinModehh+0x1a0>
     2c8:	67 c0       	rjmp	.+206    	; 0x398 <_Z7pinModehh+0x26e>
     2ca:	29 36       	cpi	r18, 0x69	; 105
     2cc:	20 f4       	brcc	.+8      	; 0x2d6 <_Z7pinModehh+0x1ac>
     2ce:	27 36       	cpi	r18, 0x67	; 103
     2d0:	09 f0       	breq	.+2      	; 0x2d4 <_Z7pinModehh+0x1aa>
     2d2:	9d c0       	rjmp	.+314    	; 0x40e <_Z7pinModehh+0x2e4>
     2d4:	4f c0       	rjmp	.+158    	; 0x374 <_Z7pinModehh+0x24a>
     2d6:	2a 36       	cpi	r18, 0x6A	; 106
     2d8:	09 f4       	brne	.+2      	; 0x2dc <_Z7pinModehh+0x1b2>
     2da:	72 c0       	rjmp	.+228    	; 0x3c0 <_Z7pinModehh+0x296>
     2dc:	2c 36       	cpi	r18, 0x6C	; 108
     2de:	09 f0       	breq	.+2      	; 0x2e2 <_Z7pinModehh+0x1b8>
     2e0:	96 c0       	rjmp	.+300    	; 0x40e <_Z7pinModehh+0x2e4>
     2e2:	82 c0       	rjmp	.+260    	; 0x3e8 <_Z7pinModehh+0x2be>
         	{
	 
	        	case'b':
	            	DDRB|=(1<<c[pInno]);
     2e4:	44 b1       	in	r20, 0x04	; 4
     2e6:	fc 01       	movw	r30, r24
     2e8:	ee 0f       	add	r30, r30
     2ea:	ff 1f       	adc	r31, r31
     2ec:	e0 50       	subi	r30, 0x00	; 0
     2ee:	fe 4f       	sbci	r31, 0xFE	; 254
     2f0:	21 e0       	ldi	r18, 0x01	; 1
     2f2:	30 e0       	ldi	r19, 0x00	; 0
     2f4:	c9 01       	movw	r24, r18
     2f6:	00 80       	ld	r0, Z
     2f8:	02 c0       	rjmp	.+4      	; 0x2fe <_Z7pinModehh+0x1d4>
     2fa:	88 0f       	add	r24, r24
     2fc:	99 1f       	adc	r25, r25
     2fe:	0a 94       	dec	r0
     300:	e2 f7       	brpl	.-8      	; 0x2fa <_Z7pinModehh+0x1d0>
     302:	84 2b       	or	r24, r20
     304:	84 b9       	out	0x04, r24	; 4
			    	break;
     306:	08 95       	ret
	          	case'c':
	                DDRC|=(1<<c[pInno]);
     308:	47 b1       	in	r20, 0x07	; 7
     30a:	fc 01       	movw	r30, r24
     30c:	ee 0f       	add	r30, r30
     30e:	ff 1f       	adc	r31, r31
     310:	e0 50       	subi	r30, 0x00	; 0
     312:	fe 4f       	sbci	r31, 0xFE	; 254
     314:	21 e0       	ldi	r18, 0x01	; 1
     316:	30 e0       	ldi	r19, 0x00	; 0
     318:	c9 01       	movw	r24, r18
     31a:	00 80       	ld	r0, Z
     31c:	02 c0       	rjmp	.+4      	; 0x322 <_Z7pinModehh+0x1f8>
     31e:	88 0f       	add	r24, r24
     320:	99 1f       	adc	r25, r25
     322:	0a 94       	dec	r0
     324:	e2 f7       	brpl	.-8      	; 0x31e <_Z7pinModehh+0x1f4>
     326:	84 2b       	or	r24, r20
     328:	87 b9       	out	0x07, r24	; 7
			        break;
     32a:	08 95       	ret
	          	case'd':
	                DDRD|=(1<<c[pInno]);
     32c:	4a b1       	in	r20, 0x0a	; 10
     32e:	fc 01       	movw	r30, r24
     330:	ee 0f       	add	r30, r30
     332:	ff 1f       	adc	r31, r31
     334:	e0 50       	subi	r30, 0x00	; 0
     336:	fe 4f       	sbci	r31, 0xFE	; 254
     338:	21 e0       	ldi	r18, 0x01	; 1
     33a:	30 e0       	ldi	r19, 0x00	; 0
     33c:	c9 01       	movw	r24, r18
     33e:	00 80       	ld	r0, Z
     340:	02 c0       	rjmp	.+4      	; 0x346 <_Z7pinModehh+0x21c>
     342:	88 0f       	add	r24, r24
     344:	99 1f       	adc	r25, r25
     346:	0a 94       	dec	r0
     348:	e2 f7       	brpl	.-8      	; 0x342 <_Z7pinModehh+0x218>
     34a:	84 2b       	or	r24, r20
     34c:	8a b9       	out	0x0a, r24	; 10
			        break;
     34e:	08 95       	ret
		      	case'e':
	                DDRE|=(1<<c[pInno]);
     350:	4d b1       	in	r20, 0x0d	; 13
     352:	fc 01       	movw	r30, r24
     354:	ee 0f       	add	r30, r30
     356:	ff 1f       	adc	r31, r31
     358:	e0 50       	subi	r30, 0x00	; 0
     35a:	fe 4f       	sbci	r31, 0xFE	; 254
     35c:	21 e0       	ldi	r18, 0x01	; 1
     35e:	30 e0       	ldi	r19, 0x00	; 0
     360:	c9 01       	movw	r24, r18
     362:	00 80       	ld	r0, Z
     364:	02 c0       	rjmp	.+4      	; 0x36a <_Z7pinModehh+0x240>
     366:	88 0f       	add	r24, r24
     368:	99 1f       	adc	r25, r25
     36a:	0a 94       	dec	r0
     36c:	e2 f7       	brpl	.-8      	; 0x366 <_Z7pinModehh+0x23c>
     36e:	84 2b       	or	r24, r20
     370:	8d b9       	out	0x0d, r24	; 13
			        break;
     372:	08 95       	ret
			    case'g':
	                DDRG|=(1<<c[pInno]);
     374:	43 b3       	in	r20, 0x13	; 19
     376:	fc 01       	movw	r30, r24
     378:	ee 0f       	add	r30, r30
     37a:	ff 1f       	adc	r31, r31
     37c:	e0 50       	subi	r30, 0x00	; 0
     37e:	fe 4f       	sbci	r31, 0xFE	; 254
     380:	21 e0       	ldi	r18, 0x01	; 1
     382:	30 e0       	ldi	r19, 0x00	; 0
     384:	c9 01       	movw	r24, r18
     386:	00 80       	ld	r0, Z
     388:	02 c0       	rjmp	.+4      	; 0x38e <_Z7pinModehh+0x264>
     38a:	88 0f       	add	r24, r24
     38c:	99 1f       	adc	r25, r25
     38e:	0a 94       	dec	r0
     390:	e2 f7       	brpl	.-8      	; 0x38a <_Z7pinModehh+0x260>
     392:	84 2b       	or	r24, r20
     394:	83 bb       	out	0x13, r24	; 19
			        break;
     396:	08 95       	ret
			 	case'h':
	                DDRH|=(1<<c[pInno]);
     398:	e1 e0       	ldi	r30, 0x01	; 1
     39a:	f1 e0       	ldi	r31, 0x01	; 1
     39c:	40 81       	ld	r20, Z
     39e:	dc 01       	movw	r26, r24
     3a0:	aa 0f       	add	r26, r26
     3a2:	bb 1f       	adc	r27, r27
     3a4:	a0 50       	subi	r26, 0x00	; 0
     3a6:	be 4f       	sbci	r27, 0xFE	; 254
     3a8:	21 e0       	ldi	r18, 0x01	; 1
     3aa:	30 e0       	ldi	r19, 0x00	; 0
     3ac:	c9 01       	movw	r24, r18
     3ae:	0c 90       	ld	r0, X
     3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <_Z7pinModehh+0x28c>
     3b2:	88 0f       	add	r24, r24
     3b4:	99 1f       	adc	r25, r25
     3b6:	0a 94       	dec	r0
     3b8:	e2 f7       	brpl	.-8      	; 0x3b2 <_Z7pinModehh+0x288>
     3ba:	84 2b       	or	r24, r20
     3bc:	80 83       	st	Z, r24
			        break;
     3be:	08 95       	ret
			    case'j':
	                DDRJ|=(1<<c[pInno]);
     3c0:	e4 e0       	ldi	r30, 0x04	; 4
     3c2:	f1 e0       	ldi	r31, 0x01	; 1
     3c4:	40 81       	ld	r20, Z
     3c6:	dc 01       	movw	r26, r24
     3c8:	aa 0f       	add	r26, r26
     3ca:	bb 1f       	adc	r27, r27
     3cc:	a0 50       	subi	r26, 0x00	; 0
     3ce:	be 4f       	sbci	r27, 0xFE	; 254
     3d0:	21 e0       	ldi	r18, 0x01	; 1
     3d2:	30 e0       	ldi	r19, 0x00	; 0
     3d4:	c9 01       	movw	r24, r18
     3d6:	0c 90       	ld	r0, X
     3d8:	02 c0       	rjmp	.+4      	; 0x3de <_Z7pinModehh+0x2b4>
     3da:	88 0f       	add	r24, r24
     3dc:	99 1f       	adc	r25, r25
     3de:	0a 94       	dec	r0
     3e0:	e2 f7       	brpl	.-8      	; 0x3da <_Z7pinModehh+0x2b0>
     3e2:	84 2b       	or	r24, r20
     3e4:	80 83       	st	Z, r24
			        break;
     3e6:	08 95       	ret
				case'l':
	                DDRL|=(1<<c[pInno]);
     3e8:	ea e0       	ldi	r30, 0x0A	; 10
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	40 81       	ld	r20, Z
     3ee:	dc 01       	movw	r26, r24
     3f0:	aa 0f       	add	r26, r26
     3f2:	bb 1f       	adc	r27, r27
     3f4:	a0 50       	subi	r26, 0x00	; 0
     3f6:	be 4f       	sbci	r27, 0xFE	; 254
     3f8:	21 e0       	ldi	r18, 0x01	; 1
     3fa:	30 e0       	ldi	r19, 0x00	; 0
     3fc:	c9 01       	movw	r24, r18
     3fe:	0c 90       	ld	r0, X
     400:	02 c0       	rjmp	.+4      	; 0x406 <_Z7pinModehh+0x2dc>
     402:	88 0f       	add	r24, r24
     404:	99 1f       	adc	r25, r25
     406:	0a 94       	dec	r0
     408:	e2 f7       	brpl	.-8      	; 0x402 <_Z7pinModehh+0x2d8>
     40a:	84 2b       	or	r24, r20
     40c:	80 83       	st	Z, r24
     40e:	08 95       	ret

00000410 <_Z12digitalWritehh>:
	}
}

void digitalWrite (uint8_t pInno ,uint8_t mOde)		 
{
   if(mOde==0)
     410:	66 23       	and	r22, r22
     412:	09 f0       	breq	.+2      	; 0x416 <_Z12digitalWritehh+0x6>
     414:	b8 c0       	rjmp	.+368    	; 0x586 <_Z12digitalWritehh+0x176>
        { switch(d[pInno])
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	fc 01       	movw	r30, r24
     41a:	e8 58       	subi	r30, 0x88	; 136
     41c:	fd 4f       	sbci	r31, 0xFD	; 253
     41e:	20 81       	ld	r18, Z
     420:	25 36       	cpi	r18, 0x65	; 101
     422:	09 f4       	brne	.+2      	; 0x426 <_Z12digitalWritehh+0x16>
     424:	50 c0       	rjmp	.+160    	; 0x4c6 <_Z12digitalWritehh+0xb6>
     426:	26 36       	cpi	r18, 0x66	; 102
     428:	40 f4       	brcc	.+16     	; 0x43a <_Z12digitalWritehh+0x2a>
     42a:	23 36       	cpi	r18, 0x63	; 99
     42c:	41 f1       	breq	.+80     	; 0x47e <_Z12digitalWritehh+0x6e>
     42e:	24 36       	cpi	r18, 0x64	; 100
     430:	c0 f5       	brcc	.+112    	; 0x4a2 <_Z12digitalWritehh+0x92>
     432:	22 36       	cpi	r18, 0x62	; 98
     434:	09 f0       	breq	.+2      	; 0x438 <_Z12digitalWritehh+0x28>
     436:	5e c1       	rjmp	.+700    	; 0x6f4 <_Z12digitalWritehh+0x2e4>
     438:	10 c0       	rjmp	.+32     	; 0x45a <_Z12digitalWritehh+0x4a>
     43a:	28 36       	cpi	r18, 0x68	; 104
     43c:	09 f4       	brne	.+2      	; 0x440 <_Z12digitalWritehh+0x30>
     43e:	67 c0       	rjmp	.+206    	; 0x50e <_Z12digitalWritehh+0xfe>
     440:	29 36       	cpi	r18, 0x69	; 105
     442:	20 f4       	brcc	.+8      	; 0x44c <_Z12digitalWritehh+0x3c>
     444:	27 36       	cpi	r18, 0x67	; 103
     446:	09 f0       	breq	.+2      	; 0x44a <_Z12digitalWritehh+0x3a>
     448:	55 c1       	rjmp	.+682    	; 0x6f4 <_Z12digitalWritehh+0x2e4>
     44a:	4f c0       	rjmp	.+158    	; 0x4ea <_Z12digitalWritehh+0xda>
     44c:	2a 36       	cpi	r18, 0x6A	; 106
     44e:	09 f4       	brne	.+2      	; 0x452 <_Z12digitalWritehh+0x42>
     450:	72 c0       	rjmp	.+228    	; 0x536 <_Z12digitalWritehh+0x126>
     452:	2c 36       	cpi	r18, 0x6C	; 108
     454:	09 f0       	breq	.+2      	; 0x458 <_Z12digitalWritehh+0x48>
     456:	4e c1       	rjmp	.+668    	; 0x6f4 <_Z12digitalWritehh+0x2e4>
     458:	82 c0       	rjmp	.+260    	; 0x55e <_Z12digitalWritehh+0x14e>
         {
	 
	          case'b':
	                  PORTB&=~(1<<c[pInno]);
     45a:	25 b1       	in	r18, 0x05	; 5
     45c:	fc 01       	movw	r30, r24
     45e:	ee 0f       	add	r30, r30
     460:	ff 1f       	adc	r31, r31
     462:	e0 50       	subi	r30, 0x00	; 0
     464:	fe 4f       	sbci	r31, 0xFE	; 254
     466:	81 e0       	ldi	r24, 0x01	; 1
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	00 80       	ld	r0, Z
     46c:	02 c0       	rjmp	.+4      	; 0x472 <_Z12digitalWritehh+0x62>
     46e:	88 0f       	add	r24, r24
     470:	99 1f       	adc	r25, r25
     472:	0a 94       	dec	r0
     474:	e2 f7       	brpl	.-8      	; 0x46e <_Z12digitalWritehh+0x5e>
     476:	80 95       	com	r24
     478:	82 23       	and	r24, r18
     47a:	85 b9       	out	0x05, r24	; 5
			           break;
     47c:	08 95       	ret
	          case'c':
	                 PORTB&=~(1<<c[pInno]);
     47e:	25 b1       	in	r18, 0x05	; 5
     480:	fc 01       	movw	r30, r24
     482:	ee 0f       	add	r30, r30
     484:	ff 1f       	adc	r31, r31
     486:	e0 50       	subi	r30, 0x00	; 0
     488:	fe 4f       	sbci	r31, 0xFE	; 254
     48a:	81 e0       	ldi	r24, 0x01	; 1
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	00 80       	ld	r0, Z
     490:	02 c0       	rjmp	.+4      	; 0x496 <_Z12digitalWritehh+0x86>
     492:	88 0f       	add	r24, r24
     494:	99 1f       	adc	r25, r25
     496:	0a 94       	dec	r0
     498:	e2 f7       	brpl	.-8      	; 0x492 <_Z12digitalWritehh+0x82>
     49a:	80 95       	com	r24
     49c:	82 23       	and	r24, r18
     49e:	85 b9       	out	0x05, r24	; 5
			          break;
     4a0:	08 95       	ret
	          case'd':
	                 PORTD&=~(1<<c[pInno]);
     4a2:	2b b1       	in	r18, 0x0b	; 11
     4a4:	fc 01       	movw	r30, r24
     4a6:	ee 0f       	add	r30, r30
     4a8:	ff 1f       	adc	r31, r31
     4aa:	e0 50       	subi	r30, 0x00	; 0
     4ac:	fe 4f       	sbci	r31, 0xFE	; 254
     4ae:	81 e0       	ldi	r24, 0x01	; 1
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	00 80       	ld	r0, Z
     4b4:	02 c0       	rjmp	.+4      	; 0x4ba <_Z12digitalWritehh+0xaa>
     4b6:	88 0f       	add	r24, r24
     4b8:	99 1f       	adc	r25, r25
     4ba:	0a 94       	dec	r0
     4bc:	e2 f7       	brpl	.-8      	; 0x4b6 <_Z12digitalWritehh+0xa6>
     4be:	80 95       	com	r24
     4c0:	82 23       	and	r24, r18
     4c2:	8b b9       	out	0x0b, r24	; 11
			          break;
     4c4:	08 95       	ret
				
		      case'e':
	                  PORTE&=~(1<<c[pInno]);
     4c6:	2e b1       	in	r18, 0x0e	; 14
     4c8:	fc 01       	movw	r30, r24
     4ca:	ee 0f       	add	r30, r30
     4cc:	ff 1f       	adc	r31, r31
     4ce:	e0 50       	subi	r30, 0x00	; 0
     4d0:	fe 4f       	sbci	r31, 0xFE	; 254
     4d2:	81 e0       	ldi	r24, 0x01	; 1
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	00 80       	ld	r0, Z
     4d8:	02 c0       	rjmp	.+4      	; 0x4de <_Z12digitalWritehh+0xce>
     4da:	88 0f       	add	r24, r24
     4dc:	99 1f       	adc	r25, r25
     4de:	0a 94       	dec	r0
     4e0:	e2 f7       	brpl	.-8      	; 0x4da <_Z12digitalWritehh+0xca>
     4e2:	80 95       	com	r24
     4e4:	82 23       	and	r24, r18
     4e6:	8e b9       	out	0x0e, r24	; 14
			           break;
     4e8:	08 95       	ret

			     case'g':
	                  PORTG&=~(1<<c[pInno]);
     4ea:	24 b3       	in	r18, 0x14	; 20
     4ec:	fc 01       	movw	r30, r24
     4ee:	ee 0f       	add	r30, r30
     4f0:	ff 1f       	adc	r31, r31
     4f2:	e0 50       	subi	r30, 0x00	; 0
     4f4:	fe 4f       	sbci	r31, 0xFE	; 254
     4f6:	81 e0       	ldi	r24, 0x01	; 1
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	00 80       	ld	r0, Z
     4fc:	02 c0       	rjmp	.+4      	; 0x502 <_Z12digitalWritehh+0xf2>
     4fe:	88 0f       	add	r24, r24
     500:	99 1f       	adc	r25, r25
     502:	0a 94       	dec	r0
     504:	e2 f7       	brpl	.-8      	; 0x4fe <_Z12digitalWritehh+0xee>
     506:	80 95       	com	r24
     508:	82 23       	and	r24, r18
     50a:	84 bb       	out	0x14, r24	; 20
			           break;
     50c:	08 95       	ret
			 case'h':
	                  PORTH&=~(1<<c[pInno]);
     50e:	e2 e0       	ldi	r30, 0x02	; 2
     510:	f1 e0       	ldi	r31, 0x01	; 1
     512:	20 81       	ld	r18, Z
     514:	dc 01       	movw	r26, r24
     516:	aa 0f       	add	r26, r26
     518:	bb 1f       	adc	r27, r27
     51a:	a0 50       	subi	r26, 0x00	; 0
     51c:	be 4f       	sbci	r27, 0xFE	; 254
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	0c 90       	ld	r0, X
     524:	02 c0       	rjmp	.+4      	; 0x52a <_Z12digitalWritehh+0x11a>
     526:	88 0f       	add	r24, r24
     528:	99 1f       	adc	r25, r25
     52a:	0a 94       	dec	r0
     52c:	e2 f7       	brpl	.-8      	; 0x526 <_Z12digitalWritehh+0x116>
     52e:	80 95       	com	r24
     530:	82 23       	and	r24, r18
     532:	80 83       	st	Z, r24
			           break;
     534:	08 95       	ret
		     
			     case'j':
	                  PORTJ&=~(1<<c[pInno]);
     536:	e5 e0       	ldi	r30, 0x05	; 5
     538:	f1 e0       	ldi	r31, 0x01	; 1
     53a:	20 81       	ld	r18, Z
     53c:	dc 01       	movw	r26, r24
     53e:	aa 0f       	add	r26, r26
     540:	bb 1f       	adc	r27, r27
     542:	a0 50       	subi	r26, 0x00	; 0
     544:	be 4f       	sbci	r27, 0xFE	; 254
     546:	81 e0       	ldi	r24, 0x01	; 1
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	0c 90       	ld	r0, X
     54c:	02 c0       	rjmp	.+4      	; 0x552 <_Z12digitalWritehh+0x142>
     54e:	88 0f       	add	r24, r24
     550:	99 1f       	adc	r25, r25
     552:	0a 94       	dec	r0
     554:	e2 f7       	brpl	.-8      	; 0x54e <_Z12digitalWritehh+0x13e>
     556:	80 95       	com	r24
     558:	82 23       	and	r24, r18
     55a:	80 83       	st	Z, r24
			           break;
     55c:	08 95       	ret
				     case'l':
	                  PORTL&=~(1<<c[pInno]);
     55e:	eb e0       	ldi	r30, 0x0B	; 11
     560:	f1 e0       	ldi	r31, 0x01	; 1
     562:	20 81       	ld	r18, Z
     564:	dc 01       	movw	r26, r24
     566:	aa 0f       	add	r26, r26
     568:	bb 1f       	adc	r27, r27
     56a:	a0 50       	subi	r26, 0x00	; 0
     56c:	be 4f       	sbci	r27, 0xFE	; 254
     56e:	81 e0       	ldi	r24, 0x01	; 1
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	0c 90       	ld	r0, X
     574:	02 c0       	rjmp	.+4      	; 0x57a <_Z12digitalWritehh+0x16a>
     576:	88 0f       	add	r24, r24
     578:	99 1f       	adc	r25, r25
     57a:	0a 94       	dec	r0
     57c:	e2 f7       	brpl	.-8      	; 0x576 <_Z12digitalWritehh+0x166>
     57e:	80 95       	com	r24
     580:	82 23       	and	r24, r18
     582:	80 83       	st	Z, r24
			           break;	        		   		   	  	  		 		 			 
     584:	08 95       	ret
	     }  }
	else{          switch(d[pInno])
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	fc 01       	movw	r30, r24
     58a:	e8 58       	subi	r30, 0x88	; 136
     58c:	fd 4f       	sbci	r31, 0xFD	; 253
     58e:	20 81       	ld	r18, Z
     590:	25 36       	cpi	r18, 0x65	; 101
     592:	09 f4       	brne	.+2      	; 0x596 <_Z12digitalWritehh+0x186>
     594:	50 c0       	rjmp	.+160    	; 0x636 <_Z12digitalWritehh+0x226>
     596:	26 36       	cpi	r18, 0x66	; 102
     598:	40 f4       	brcc	.+16     	; 0x5aa <_Z12digitalWritehh+0x19a>
     59a:	23 36       	cpi	r18, 0x63	; 99
     59c:	41 f1       	breq	.+80     	; 0x5ee <_Z12digitalWritehh+0x1de>
     59e:	24 36       	cpi	r18, 0x64	; 100
     5a0:	c0 f5       	brcc	.+112    	; 0x612 <_Z12digitalWritehh+0x202>
     5a2:	22 36       	cpi	r18, 0x62	; 98
     5a4:	09 f0       	breq	.+2      	; 0x5a8 <_Z12digitalWritehh+0x198>
     5a6:	a6 c0       	rjmp	.+332    	; 0x6f4 <_Z12digitalWritehh+0x2e4>
     5a8:	10 c0       	rjmp	.+32     	; 0x5ca <_Z12digitalWritehh+0x1ba>
     5aa:	28 36       	cpi	r18, 0x68	; 104
     5ac:	09 f4       	brne	.+2      	; 0x5b0 <_Z12digitalWritehh+0x1a0>
     5ae:	67 c0       	rjmp	.+206    	; 0x67e <_Z12digitalWritehh+0x26e>
     5b0:	29 36       	cpi	r18, 0x69	; 105
     5b2:	20 f4       	brcc	.+8      	; 0x5bc <_Z12digitalWritehh+0x1ac>
     5b4:	27 36       	cpi	r18, 0x67	; 103
     5b6:	09 f0       	breq	.+2      	; 0x5ba <_Z12digitalWritehh+0x1aa>
     5b8:	9d c0       	rjmp	.+314    	; 0x6f4 <_Z12digitalWritehh+0x2e4>
     5ba:	4f c0       	rjmp	.+158    	; 0x65a <_Z12digitalWritehh+0x24a>
     5bc:	2a 36       	cpi	r18, 0x6A	; 106
     5be:	09 f4       	brne	.+2      	; 0x5c2 <_Z12digitalWritehh+0x1b2>
     5c0:	72 c0       	rjmp	.+228    	; 0x6a6 <_Z12digitalWritehh+0x296>
     5c2:	2c 36       	cpi	r18, 0x6C	; 108
     5c4:	09 f0       	breq	.+2      	; 0x5c8 <_Z12digitalWritehh+0x1b8>
     5c6:	96 c0       	rjmp	.+300    	; 0x6f4 <_Z12digitalWritehh+0x2e4>
     5c8:	82 c0       	rjmp	.+260    	; 0x6ce <_Z12digitalWritehh+0x2be>
         {
	 
	          case'b':
	                 PORTB|=(1<<c[pInno]);
     5ca:	45 b1       	in	r20, 0x05	; 5
     5cc:	fc 01       	movw	r30, r24
     5ce:	ee 0f       	add	r30, r30
     5d0:	ff 1f       	adc	r31, r31
     5d2:	e0 50       	subi	r30, 0x00	; 0
     5d4:	fe 4f       	sbci	r31, 0xFE	; 254
     5d6:	21 e0       	ldi	r18, 0x01	; 1
     5d8:	30 e0       	ldi	r19, 0x00	; 0
     5da:	c9 01       	movw	r24, r18
     5dc:	00 80       	ld	r0, Z
     5de:	02 c0       	rjmp	.+4      	; 0x5e4 <_Z12digitalWritehh+0x1d4>
     5e0:	88 0f       	add	r24, r24
     5e2:	99 1f       	adc	r25, r25
     5e4:	0a 94       	dec	r0
     5e6:	e2 f7       	brpl	.-8      	; 0x5e0 <_Z12digitalWritehh+0x1d0>
     5e8:	84 2b       	or	r24, r20
     5ea:	85 b9       	out	0x05, r24	; 5
			           break;
     5ec:	08 95       	ret
	          case'c':
	                 PORTC|=(1<<c[pInno]);
     5ee:	48 b1       	in	r20, 0x08	; 8
     5f0:	fc 01       	movw	r30, r24
     5f2:	ee 0f       	add	r30, r30
     5f4:	ff 1f       	adc	r31, r31
     5f6:	e0 50       	subi	r30, 0x00	; 0
     5f8:	fe 4f       	sbci	r31, 0xFE	; 254
     5fa:	21 e0       	ldi	r18, 0x01	; 1
     5fc:	30 e0       	ldi	r19, 0x00	; 0
     5fe:	c9 01       	movw	r24, r18
     600:	00 80       	ld	r0, Z
     602:	02 c0       	rjmp	.+4      	; 0x608 <_Z12digitalWritehh+0x1f8>
     604:	88 0f       	add	r24, r24
     606:	99 1f       	adc	r25, r25
     608:	0a 94       	dec	r0
     60a:	e2 f7       	brpl	.-8      	; 0x604 <_Z12digitalWritehh+0x1f4>
     60c:	84 2b       	or	r24, r20
     60e:	88 b9       	out	0x08, r24	; 8
			          break;
     610:	08 95       	ret
	          case'd':
	                 PORTD|=(1<<c[pInno]);
     612:	4b b1       	in	r20, 0x0b	; 11
     614:	fc 01       	movw	r30, r24
     616:	ee 0f       	add	r30, r30
     618:	ff 1f       	adc	r31, r31
     61a:	e0 50       	subi	r30, 0x00	; 0
     61c:	fe 4f       	sbci	r31, 0xFE	; 254
     61e:	21 e0       	ldi	r18, 0x01	; 1
     620:	30 e0       	ldi	r19, 0x00	; 0
     622:	c9 01       	movw	r24, r18
     624:	00 80       	ld	r0, Z
     626:	02 c0       	rjmp	.+4      	; 0x62c <_Z12digitalWritehh+0x21c>
     628:	88 0f       	add	r24, r24
     62a:	99 1f       	adc	r25, r25
     62c:	0a 94       	dec	r0
     62e:	e2 f7       	brpl	.-8      	; 0x628 <_Z12digitalWritehh+0x218>
     630:	84 2b       	or	r24, r20
     632:	8b b9       	out	0x0b, r24	; 11
			          break;
     634:	08 95       	ret
				    
		      case'e':
	                  PORTE|=(1<<c[pInno]);
     636:	4e b1       	in	r20, 0x0e	; 14
     638:	fc 01       	movw	r30, r24
     63a:	ee 0f       	add	r30, r30
     63c:	ff 1f       	adc	r31, r31
     63e:	e0 50       	subi	r30, 0x00	; 0
     640:	fe 4f       	sbci	r31, 0xFE	; 254
     642:	21 e0       	ldi	r18, 0x01	; 1
     644:	30 e0       	ldi	r19, 0x00	; 0
     646:	c9 01       	movw	r24, r18
     648:	00 80       	ld	r0, Z
     64a:	02 c0       	rjmp	.+4      	; 0x650 <_Z12digitalWritehh+0x240>
     64c:	88 0f       	add	r24, r24
     64e:	99 1f       	adc	r25, r25
     650:	0a 94       	dec	r0
     652:	e2 f7       	brpl	.-8      	; 0x64c <_Z12digitalWritehh+0x23c>
     654:	84 2b       	or	r24, r20
     656:	8e b9       	out	0x0e, r24	; 14
			           break;
     658:	08 95       	ret

			     case'g':
	                  PORTG|=(1<<c[pInno]);
     65a:	44 b3       	in	r20, 0x14	; 20
     65c:	fc 01       	movw	r30, r24
     65e:	ee 0f       	add	r30, r30
     660:	ff 1f       	adc	r31, r31
     662:	e0 50       	subi	r30, 0x00	; 0
     664:	fe 4f       	sbci	r31, 0xFE	; 254
     666:	21 e0       	ldi	r18, 0x01	; 1
     668:	30 e0       	ldi	r19, 0x00	; 0
     66a:	c9 01       	movw	r24, r18
     66c:	00 80       	ld	r0, Z
     66e:	02 c0       	rjmp	.+4      	; 0x674 <_Z12digitalWritehh+0x264>
     670:	88 0f       	add	r24, r24
     672:	99 1f       	adc	r25, r25
     674:	0a 94       	dec	r0
     676:	e2 f7       	brpl	.-8      	; 0x670 <_Z12digitalWritehh+0x260>
     678:	84 2b       	or	r24, r20
     67a:	84 bb       	out	0x14, r24	; 20
			           break;
     67c:	08 95       	ret
			 case'h':
	                  PORTH|=(1<<c[pInno]);
     67e:	e2 e0       	ldi	r30, 0x02	; 2
     680:	f1 e0       	ldi	r31, 0x01	; 1
     682:	40 81       	ld	r20, Z
     684:	dc 01       	movw	r26, r24
     686:	aa 0f       	add	r26, r26
     688:	bb 1f       	adc	r27, r27
     68a:	a0 50       	subi	r26, 0x00	; 0
     68c:	be 4f       	sbci	r27, 0xFE	; 254
     68e:	21 e0       	ldi	r18, 0x01	; 1
     690:	30 e0       	ldi	r19, 0x00	; 0
     692:	c9 01       	movw	r24, r18
     694:	0c 90       	ld	r0, X
     696:	02 c0       	rjmp	.+4      	; 0x69c <_Z12digitalWritehh+0x28c>
     698:	88 0f       	add	r24, r24
     69a:	99 1f       	adc	r25, r25
     69c:	0a 94       	dec	r0
     69e:	e2 f7       	brpl	.-8      	; 0x698 <_Z12digitalWritehh+0x288>
     6a0:	84 2b       	or	r24, r20
     6a2:	80 83       	st	Z, r24
			           break;
     6a4:	08 95       	ret
		     /*case'i':
	                  PORTI|=(1<<c[pInno]);
			           break;*/
			     case'j':
	                  PORTJ|=(1<<c[pInno]);
     6a6:	e5 e0       	ldi	r30, 0x05	; 5
     6a8:	f1 e0       	ldi	r31, 0x01	; 1
     6aa:	40 81       	ld	r20, Z
     6ac:	dc 01       	movw	r26, r24
     6ae:	aa 0f       	add	r26, r26
     6b0:	bb 1f       	adc	r27, r27
     6b2:	a0 50       	subi	r26, 0x00	; 0
     6b4:	be 4f       	sbci	r27, 0xFE	; 254
     6b6:	21 e0       	ldi	r18, 0x01	; 1
     6b8:	30 e0       	ldi	r19, 0x00	; 0
     6ba:	c9 01       	movw	r24, r18
     6bc:	0c 90       	ld	r0, X
     6be:	02 c0       	rjmp	.+4      	; 0x6c4 <_Z12digitalWritehh+0x2b4>
     6c0:	88 0f       	add	r24, r24
     6c2:	99 1f       	adc	r25, r25
     6c4:	0a 94       	dec	r0
     6c6:	e2 f7       	brpl	.-8      	; 0x6c0 <_Z12digitalWritehh+0x2b0>
     6c8:	84 2b       	or	r24, r20
     6ca:	80 83       	st	Z, r24
			           break;
     6cc:	08 95       	ret
				     case'l':
	                  PORTL|=(1<<c[pInno]);
     6ce:	eb e0       	ldi	r30, 0x0B	; 11
     6d0:	f1 e0       	ldi	r31, 0x01	; 1
     6d2:	40 81       	ld	r20, Z
     6d4:	dc 01       	movw	r26, r24
     6d6:	aa 0f       	add	r26, r26
     6d8:	bb 1f       	adc	r27, r27
     6da:	a0 50       	subi	r26, 0x00	; 0
     6dc:	be 4f       	sbci	r27, 0xFE	; 254
     6de:	21 e0       	ldi	r18, 0x01	; 1
     6e0:	30 e0       	ldi	r19, 0x00	; 0
     6e2:	c9 01       	movw	r24, r18
     6e4:	0c 90       	ld	r0, X
     6e6:	02 c0       	rjmp	.+4      	; 0x6ec <_Z12digitalWritehh+0x2dc>
     6e8:	88 0f       	add	r24, r24
     6ea:	99 1f       	adc	r25, r25
     6ec:	0a 94       	dec	r0
     6ee:	e2 f7       	brpl	.-8      	; 0x6e8 <_Z12digitalWritehh+0x2d8>
     6f0:	84 2b       	or	r24, r20
     6f2:	80 83       	st	Z, r24
     6f4:	08 95       	ret

000006f6 <_Z11digitalReadi>:

uint8_t digitalRead(int pInno)
{  
	uint8_t z;				//not a good practice
	uint8_t x;				//not a good practice
   switch(d[pInno])
     6f6:	fc 01       	movw	r30, r24
     6f8:	e8 58       	subi	r30, 0x88	; 136
     6fa:	fd 4f       	sbci	r31, 0xFD	; 253
     6fc:	80 81       	ld	r24, Z
     6fe:	85 36       	cpi	r24, 0x65	; 101
     700:	d9 f0       	breq	.+54     	; 0x738 <_Z11digitalReadi+0x42>
     702:	86 36       	cpi	r24, 0x66	; 102
     704:	38 f4       	brcc	.+14     	; 0x714 <_Z11digitalReadi+0x1e>
     706:	83 36       	cpi	r24, 0x63	; 99
     708:	99 f0       	breq	.+38     	; 0x730 <_Z11digitalReadi+0x3a>
     70a:	84 36       	cpi	r24, 0x64	; 100
     70c:	98 f4       	brcc	.+38     	; 0x734 <_Z11digitalReadi+0x3e>
     70e:	82 36       	cpi	r24, 0x62	; 98
     710:	f9 f4       	brne	.+62     	; 0x750 <_Z11digitalReadi+0x5a>
     712:	0c c0       	rjmp	.+24     	; 0x72c <_Z11digitalReadi+0x36>
     714:	88 36       	cpi	r24, 0x68	; 104
     716:	a1 f0       	breq	.+40     	; 0x740 <_Z11digitalReadi+0x4a>
     718:	89 36       	cpi	r24, 0x69	; 105
     71a:	18 f4       	brcc	.+6      	; 0x722 <_Z11digitalReadi+0x2c>
     71c:	87 36       	cpi	r24, 0x67	; 103
     71e:	c1 f4       	brne	.+48     	; 0x750 <_Z11digitalReadi+0x5a>
     720:	0d c0       	rjmp	.+26     	; 0x73c <_Z11digitalReadi+0x46>
     722:	8a 36       	cpi	r24, 0x6A	; 106
     724:	81 f0       	breq	.+32     	; 0x746 <_Z11digitalReadi+0x50>
     726:	8c 36       	cpi	r24, 0x6C	; 108
     728:	99 f4       	brne	.+38     	; 0x750 <_Z11digitalReadi+0x5a>
     72a:	10 c0       	rjmp	.+32     	; 0x74c <_Z11digitalReadi+0x56>
         {
	 
	          case'b':
	                  z=PINB&(1<<c[pInno]);
     72c:	83 b1       	in	r24, 0x03	; 3
			           break;
     72e:	08 95       	ret
	          case'c':
	                  z=PINC&(1<<c[pInno]);
     730:	86 b1       	in	r24, 0x06	; 6
			          break;
     732:	08 95       	ret
	          case'd':
	                  z=PIND&(1<<c[pInno]);
     734:	89 b1       	in	r24, 0x09	; 9
			          break;
     736:	08 95       	ret
				
		      case'e':
	                   z=PINE&(1<<c[pInno]);
     738:	8c b1       	in	r24, 0x0c	; 12
			           break;
     73a:	08 95       	ret

			     case'g':
	                   z=PING&(1<<c[pInno]);
     73c:	82 b3       	in	r24, 0x12	; 18
			           break;
     73e:	08 95       	ret
			 case'h':
	                  z=PINH&(1<<c[pInno]);
     740:	80 91 00 01 	lds	r24, 0x0100
			           break;
     744:	08 95       	ret
		     
			     case'j':
	                   z=PINJ&(1<<c[pInno]);
     746:	80 91 03 01 	lds	r24, 0x0103
			           break;
     74a:	08 95       	ret
				     case'l':
	                   z=PINL&(1<<c[pInno]);
     74c:	80 91 09 01 	lds	r24, 0x0109
			           break;
					   return z;	        		   		   	  	  		 		 			 
	     }  
}
     750:	08 95       	ret

00000752 <_Z20microsecondsToInchesm>:
{
  // According to Parallax's datasheet for the PING))), there are 73.746
  // microseconds per inch (i.e. sound travels at 1130 feet per second).
  // This gives the distance travelled by the ping, outbound and return,
  // so we divide by 2 to get the distance of the obstacle.
  return (mIcroseconds*0.00669/ 2);
<<<<<<< HEAD
<<<<<<< HEAD
     752:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <__floatunsisf>
=======
     752:	0e 94 55 0c 	call	0x18aa	; 0x18aa <__floatunsisf>
>>>>>>> parent of 1e7bf21... Included Cytron.h
=======
     752:	0e 94 c0 13 	call	0x2780	; 0x2780 <__floatunsisf>
>>>>>>> parent of 6ea3b60... Sinosudal Wave travelling
     756:	2a ec       	ldi	r18, 0xCA	; 202
     758:	37 e3       	ldi	r19, 0x37	; 55
     75a:	4b ed       	ldi	r20, 0xDB	; 219
     75c:	5b e3       	ldi	r21, 0x3B	; 59
<<<<<<< HEAD
<<<<<<< HEAD
     75e:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <__mulsf3>
=======
     75e:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <__mulsf3>
>>>>>>> parent of 1e7bf21... Included Cytron.h
=======
     75e:	0e 94 76 14 	call	0x28ec	; 0x28ec <__mulsf3>
>>>>>>> parent of 6ea3b60... Sinosudal Wave travelling
     762:	20 e0       	ldi	r18, 0x00	; 0
     764:	30 e0       	ldi	r19, 0x00	; 0
     766:	40 e0       	ldi	r20, 0x00	; 0
     768:	5f e3       	ldi	r21, 0x3F	; 63
<<<<<<< HEAD
<<<<<<< HEAD
     76a:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <__mulsf3>
     76e:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <__fixunssfsi>
=======
     76a:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <__mulsf3>
     76e:	0e 94 29 0c 	call	0x1852	; 0x1852 <__fixunssfsi>
>>>>>>> parent of 1e7bf21... Included Cytron.h
=======
     76a:	0e 94 76 14 	call	0x28ec	; 0x28ec <__mulsf3>
     76e:	0e 94 94 13 	call	0x2728	; 0x2728 <__fixunssfsi>
>>>>>>> parent of 6ea3b60... Sinosudal Wave travelling
}
     772:	08 95       	ret

00000774 <_Z25microsecondsToCentimetersm>:
long unsigned int microsecondsToCentimeters(long unsigned int microseconds) 
{
  // The speed of sound is 340 m/s or 29 microseconds per centimeter.
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
<<<<<<< HEAD
<<<<<<< HEAD
     774:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <__floatunsisf>
=======
     774:	0e 94 55 0c 	call	0x18aa	; 0x18aa <__floatunsisf>
>>>>>>> parent of 1e7bf21... Included Cytron.h
=======
     774:	0e 94 c0 13 	call	0x2780	; 0x2780 <__floatunsisf>
>>>>>>> parent of 6ea3b60... Sinosudal Wave travelling
     778:	2b e7       	ldi	r18, 0x7B	; 123
     77a:	34 e1       	ldi	r19, 0x14	; 20
     77c:	4e e2       	ldi	r20, 0x2E	; 46
     77e:	5e e3       	ldi	r21, 0x3E	; 62
<<<<<<< HEAD
<<<<<<< HEAD
     780:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <__mulsf3>
=======
     780:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <__mulsf3>
>>>>>>> parent of 1e7bf21... Included Cytron.h
=======
     780:	0e 94 76 14 	call	0x28ec	; 0x28ec <__mulsf3>
>>>>>>> parent of 6ea3b60... Sinosudal Wave travelling
     784:	20 e0       	ldi	r18, 0x00	; 0
     786:	30 e0       	ldi	r19, 0x00	; 0
     788:	40 e0       	ldi	r20, 0x00	; 0
     78a:	5f e3       	ldi	r21, 0x3F	; 63
<<<<<<< HEAD
<<<<<<< HEAD
     78c:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <__mulsf3>
     790:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <__fixunssfsi>
=======
     78c:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <__mulsf3>
     790:	0e 94 29 0c 	call	0x1852	; 0x1852 <__fixunssfsi>
>>>>>>> parent of 1e7bf21... Included Cytron.h
=======
     78c:	0e 94 76 14 	call	0x28ec	; 0x28ec <__mulsf3>
     790:	0e 94 94 13 	call	0x2728	; 0x2728 <__fixunssfsi>
>>>>>>> parent of 6ea3b60... Sinosudal Wave travelling
}
     794:	08 95       	ret

00000796 <_Z7pulseInhh>:

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
{ char x;
     796:	af 92       	push	r10
     798:	bf 92       	push	r11
     79a:	cf 92       	push	r12
     79c:	df 92       	push	r13
     79e:	ef 92       	push	r14
     7a0:	ff 92       	push	r15
     7a2:	0f 93       	push	r16
     7a4:	1f 93       	push	r17
     7a6:	df 93       	push	r29
     7a8:	cf 93       	push	r28
     7aa:	0f 92       	push	r0
     7ac:	cd b7       	in	r28, 0x3d	; 61
     7ae:	de b7       	in	r29, 0x3e	; 62
     7b0:	89 83       	std	Y+1, r24	; 0x01
  TCCR2A = (1 << WGM21) | (1 << COM2A1) | (1 << FOC2A) | (0 << COM2A0) | (0 << WGM20); //initializing in CTC mode
     7b2:	e0 eb       	ldi	r30, 0xB0	; 176
     7b4:	f0 e0       	ldi	r31, 0x00	; 0
     7b6:	82 e8       	ldi	r24, 0x82	; 130
     7b8:	80 83       	st	Z, r24
  TCCR2A = (1 << CS20);
     7ba:	81 e0       	ldi	r24, 0x01	; 1
     7bc:	80 83       	st	Z, r24
  unsigned long mAxloops = 500000;
  unsigned long wIdth = 0;
  // wait for any previous pulse to end
  switch(d[pInno]){
     7be:	89 81       	ldd	r24, Y+1	; 0x01
     7c0:	e8 e7       	ldi	r30, 0x78	; 120
     7c2:	f2 e0       	ldi	r31, 0x02	; 2
     7c4:	e8 0f       	add	r30, r24
     7c6:	f1 1d       	adc	r31, r1
     7c8:	80 81       	ld	r24, Z
     7ca:	85 36       	cpi	r24, 0x65	; 101
     7cc:	09 f4       	brne	.+2      	; 0x7d0 <_Z7pulseInhh+0x3a>
     7ce:	32 c1       	rjmp	.+612    	; 0xa34 <_Z7pulseInhh+0x29e>
     7d0:	86 36       	cpi	r24, 0x66	; 102
     7d2:	50 f4       	brcc	.+20     	; 0x7e8 <_Z7pulseInhh+0x52>
     7d4:	83 36       	cpi	r24, 0x63	; 99
     7d6:	09 f4       	brne	.+2      	; 0x7da <_Z7pulseInhh+0x44>
     7d8:	73 c0       	rjmp	.+230    	; 0x8c0 <_Z7pulseInhh+0x12a>
     7da:	84 36       	cpi	r24, 0x64	; 100
     7dc:	08 f0       	brcs	.+2      	; 0x7e0 <_Z7pulseInhh+0x4a>
     7de:	cd c0       	rjmp	.+410    	; 0x97a <_Z7pulseInhh+0x1e4>
     7e0:	82 36       	cpi	r24, 0x62	; 98
     7e2:	09 f0       	breq	.+2      	; 0x7e6 <_Z7pulseInhh+0x50>
     7e4:	b1 c2       	rjmp	.+1378   	; 0xd48 <_Z7pulseInhh+0x5b2>
     7e6:	0f c0       	rjmp	.+30     	; 0x806 <_Z7pulseInhh+0x70>
     7e8:	8a 36       	cpi	r24, 0x6A	; 106
     7ea:	09 f4       	brne	.+2      	; 0x7ee <_Z7pulseInhh+0x58>
     7ec:	e6 c1       	rjmp	.+972    	; 0xbba <_Z7pulseInhh+0x424>
     7ee:	8c 36       	cpi	r24, 0x6C	; 108
     7f0:	09 f4       	brne	.+2      	; 0x7f4 <_Z7pulseInhh+0x5e>
     7f2:	49 c2       	rjmp	.+1170   	; 0xc86 <_Z7pulseInhh+0x4f0>
     7f4:	88 36       	cpi	r24, 0x68	; 104
     7f6:	09 f0       	breq	.+2      	; 0x7fa <_Z7pulseInhh+0x64>
     7f8:	a7 c2       	rjmp	.+1358   	; 0xd48 <_Z7pulseInhh+0x5b2>
     7fa:	79 c1       	rjmp	.+754    	; 0xaee <_Z7pulseInhh+0x358>
            case'b':
	               { while (((PINB) && ((pInno%8))) == vAlue)
	              {
		          if (--mAxloops == 0)
     7fc:	01 97       	sbiw	r24, 0x01	; 1
     7fe:	a1 09       	sbc	r26, r1
     800:	b1 09       	sbc	r27, r1
     802:	41 f4       	brne	.+16     	; 0x814 <_Z7pulseInhh+0x7e>
     804:	a2 c2       	rjmp	.+1348   	; 0xd4a <_Z7pulseInhh+0x5b4>
  TCCR2A = (1 << WGM21) | (1 << COM2A1) | (1 << FOC2A) | (0 << COM2A0) | (0 << WGM20); //initializing in CTC mode
  TCCR2A = (1 << CS20);
  unsigned long mAxloops = 500000;
  unsigned long wIdth = 0;
  // wait for any previous pulse to end
  switch(d[pInno]){
     806:	80 e2       	ldi	r24, 0x20	; 32
     808:	91 ea       	ldi	r25, 0xA1	; 161
     80a:	a7 e0       	ldi	r26, 0x07	; 7
     80c:	b0 e0       	ldi	r27, 0x00	; 0
            case'b':
	               { while (((PINB) && ((pInno%8))) == vAlue)
     80e:	00 e0       	ldi	r16, 0x00	; 0
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     810:	11 e0       	ldi	r17, 0x01	; 1
  unsigned long mAxloops = 500000;
  unsigned long wIdth = 0;
  // wait for any previous pulse to end
  switch(d[pInno]){
            case'b':
	               { while (((PINB) && ((pInno%8))) == vAlue)
     812:	70 e0       	ldi	r23, 0x00	; 0
     814:	23 b1       	in	r18, 0x03	; 3
     816:	22 23       	and	r18, r18
     818:	51 f0       	breq	.+20     	; 0x82e <_Z7pulseInhh+0x98>
     81a:	49 81       	ldd	r20, Y+1	; 0x01
     81c:	50 e0       	ldi	r21, 0x00	; 0
     81e:	47 70       	andi	r20, 0x07	; 7
     820:	50 70       	andi	r21, 0x00	; 0
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     822:	21 2f       	mov	r18, r17
     824:	41 15       	cp	r20, r1
     826:	51 05       	cpc	r21, r1
     828:	19 f4       	brne	.+6      	; 0x830 <_Z7pulseInhh+0x9a>
     82a:	20 2f       	mov	r18, r16
     82c:	01 c0       	rjmp	.+2      	; 0x830 <_Z7pulseInhh+0x9a>
  unsigned long mAxloops = 500000;
  unsigned long wIdth = 0;
  // wait for any previous pulse to end
  switch(d[pInno]){
            case'b':
	               { while (((PINB) && ((pInno%8))) == vAlue)
     82e:	20 2f       	mov	r18, r16
     830:	fb 01       	movw	r30, r22
     832:	30 e0       	ldi	r19, 0x00	; 0
     834:	26 17       	cp	r18, r22
     836:	37 07       	cpc	r19, r23
     838:	09 f3       	breq	.-62     	; 0x7fc <_Z7pulseInhh+0x66>
     83a:	05 c0       	rjmp	.+10     	; 0x846 <_Z7pulseInhh+0xb0>
		            return 0;
	                }
             // wait for the pulse to start  
              while (((PINB) && ((pInno%8))) != vAlue)
	              {
		     if (--mAxloops == 0) 
     83c:	01 97       	sbiw	r24, 0x01	; 1
     83e:	a1 09       	sbc	r26, r1
     840:	b1 09       	sbc	r27, r1
     842:	19 f4       	brne	.+6      	; 0x84a <_Z7pulseInhh+0xb4>
     844:	86 c2       	rjmp	.+1292   	; 0xd52 <_Z7pulseInhh+0x5bc>
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     846:	71 e0       	ldi	r23, 0x01	; 1
     848:	60 e0       	ldi	r22, 0x00	; 0
	              {
		          if (--mAxloops == 0)
		            return 0;
	                }
             // wait for the pulse to start  
              while (((PINB) && ((pInno%8))) != vAlue)
     84a:	23 b1       	in	r18, 0x03	; 3
     84c:	22 23       	and	r18, r18
     84e:	51 f0       	breq	.+20     	; 0x864 <_Z7pulseInhh+0xce>
     850:	49 81       	ldd	r20, Y+1	; 0x01
     852:	50 e0       	ldi	r21, 0x00	; 0
     854:	47 70       	andi	r20, 0x07	; 7
     856:	50 70       	andi	r21, 0x00	; 0
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     858:	27 2f       	mov	r18, r23
     85a:	41 15       	cp	r20, r1
     85c:	51 05       	cpc	r21, r1
     85e:	19 f4       	brne	.+6      	; 0x866 <_Z7pulseInhh+0xd0>
     860:	26 2f       	mov	r18, r22
     862:	01 c0       	rjmp	.+2      	; 0x866 <_Z7pulseInhh+0xd0>
	              {
		          if (--mAxloops == 0)
		            return 0;
	                }
             // wait for the pulse to start  
              while (((PINB) && ((pInno%8))) != vAlue)
     864:	26 2f       	mov	r18, r22
     866:	30 e0       	ldi	r19, 0x00	; 0
     868:	e2 17       	cp	r30, r18
     86a:	f3 07       	cpc	r31, r19
     86c:	39 f7       	brne	.-50     	; 0x83c <_Z7pulseInhh+0xa6>
     86e:	20 e0       	ldi	r18, 0x00	; 0
     870:	30 e0       	ldi	r19, 0x00	; 0
     872:	a9 01       	movw	r20, r18
	              {
		     if (--mAxloops == 0) 
		          return 0;
	           }
            // wait for the pulse to stop
             while (((PINB) && ((pInno%8))) == vAlue)
     874:	ee 24       	eor	r14, r14
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     876:	dd 24       	eor	r13, r13
     878:	d3 94       	inc	r13
     87a:	0a c0       	rjmp	.+20     	; 0x890 <_Z7pulseInhh+0xfa>
		          return 0;
	           }
            // wait for the pulse to stop
             while (((PINB) && ((pInno%8))) == vAlue)
	                   {
	               	if (++wIdth == mAxloops)
     87c:	2f 5f       	subi	r18, 0xFF	; 255
     87e:	3f 4f       	sbci	r19, 0xFF	; 255
     880:	4f 4f       	sbci	r20, 0xFF	; 255
     882:	5f 4f       	sbci	r21, 0xFF	; 255
     884:	82 17       	cp	r24, r18
     886:	93 07       	cpc	r25, r19
     888:	a4 07       	cpc	r26, r20
     88a:	b5 07       	cpc	r27, r21
     88c:	09 f4       	brne	.+2      	; 0x890 <_Z7pulseInhh+0xfa>
     88e:	65 c2       	rjmp	.+1226   	; 0xd5a <_Z7pulseInhh+0x5c4>
	              {
		     if (--mAxloops == 0) 
		          return 0;
	           }
            // wait for the pulse to stop
             while (((PINB) && ((pInno%8))) == vAlue)
     890:	63 b1       	in	r22, 0x03	; 3
     892:	66 23       	and	r22, r22
     894:	51 f0       	breq	.+20     	; 0x8aa <_Z7pulseInhh+0x114>
     896:	09 81       	ldd	r16, Y+1	; 0x01
     898:	10 e0       	ldi	r17, 0x00	; 0
     89a:	07 70       	andi	r16, 0x07	; 7
     89c:	10 70       	andi	r17, 0x00	; 0
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     89e:	6d 2d       	mov	r22, r13
     8a0:	01 15       	cp	r16, r1
     8a2:	11 05       	cpc	r17, r1
     8a4:	19 f4       	brne	.+6      	; 0x8ac <_Z7pulseInhh+0x116>
     8a6:	6e 2d       	mov	r22, r14
     8a8:	01 c0       	rjmp	.+2      	; 0x8ac <_Z7pulseInhh+0x116>
	              {
		     if (--mAxloops == 0) 
		          return 0;
	           }
            // wait for the pulse to stop
             while (((PINB) && ((pInno%8))) == vAlue)
     8aa:	6e 2d       	mov	r22, r14
     8ac:	70 e0       	ldi	r23, 0x00	; 0
     8ae:	e6 17       	cp	r30, r22
     8b0:	f7 07       	cpc	r31, r23
     8b2:	21 f3       	breq	.-56     	; 0x87c <_Z7pulseInhh+0xe6>
     8b4:	9d c2       	rjmp	.+1338   	; 0xdf0 <_Z7pulseInhh+0x65a>
              return wIdth;
                    }  break;
 case'c':
	                 { while (((PINC) && ((pInno%8))) == vAlue)
	                {
		              if (--mAxloops == 0)
     8b6:	01 97       	sbiw	r24, 0x01	; 1
     8b8:	a1 09       	sbc	r26, r1
     8ba:	b1 09       	sbc	r27, r1
     8bc:	41 f4       	brne	.+16     	; 0x8ce <_Z7pulseInhh+0x138>
     8be:	51 c2       	rjmp	.+1186   	; 0xd62 <_Z7pulseInhh+0x5cc>
  TCCR2A = (1 << WGM21) | (1 << COM2A1) | (1 << FOC2A) | (0 << COM2A0) | (0 << WGM20); //initializing in CTC mode
  TCCR2A = (1 << CS20);
  unsigned long mAxloops = 500000;
  unsigned long wIdth = 0;
  // wait for any previous pulse to end
  switch(d[pInno]){
     8c0:	80 e2       	ldi	r24, 0x20	; 32
     8c2:	91 ea       	ldi	r25, 0xA1	; 161
     8c4:	a7 e0       	ldi	r26, 0x07	; 7
     8c6:	b0 e0       	ldi	r27, 0x00	; 0
		          return 0;
	                      }
              return wIdth;
                    }  break;
 case'c':
	                 { while (((PINC) && ((pInno%8))) == vAlue)
     8c8:	00 e0       	ldi	r16, 0x00	; 0
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     8ca:	11 e0       	ldi	r17, 0x01	; 1
		          return 0;
	                      }
              return wIdth;
                    }  break;
 case'c':
	                 { while (((PINC) && ((pInno%8))) == vAlue)
     8cc:	70 e0       	ldi	r23, 0x00	; 0
     8ce:	26 b1       	in	r18, 0x06	; 6
     8d0:	22 23       	and	r18, r18
     8d2:	51 f0       	breq	.+20     	; 0x8e8 <_Z7pulseInhh+0x152>
     8d4:	49 81       	ldd	r20, Y+1	; 0x01
     8d6:	50 e0       	ldi	r21, 0x00	; 0
     8d8:	47 70       	andi	r20, 0x07	; 7
     8da:	50 70       	andi	r21, 0x00	; 0
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     8dc:	21 2f       	mov	r18, r17
     8de:	41 15       	cp	r20, r1
     8e0:	51 05       	cpc	r21, r1
     8e2:	19 f4       	brne	.+6      	; 0x8ea <_Z7pulseInhh+0x154>
     8e4:	20 2f       	mov	r18, r16
     8e6:	01 c0       	rjmp	.+2      	; 0x8ea <_Z7pulseInhh+0x154>
		          return 0;
	                      }
              return wIdth;
                    }  break;
 case'c':
	                 { while (((PINC) && ((pInno%8))) == vAlue)
     8e8:	20 2f       	mov	r18, r16
     8ea:	fb 01       	movw	r30, r22
     8ec:	30 e0       	ldi	r19, 0x00	; 0
     8ee:	26 17       	cp	r18, r22
     8f0:	37 07       	cpc	r19, r23
     8f2:	09 f3       	breq	.-62     	; 0x8b6 <_Z7pulseInhh+0x120>
     8f4:	05 c0       	rjmp	.+10     	; 0x900 <_Z7pulseInhh+0x16a>
		               return 0;
	                   }
  // wait for the pulse to start  
                  while (((PINC) && ((pInno%8))) != vAlue)
	                  {
		              if (--mAxloops == 0)
     8f6:	01 97       	sbiw	r24, 0x01	; 1
     8f8:	a1 09       	sbc	r26, r1
     8fa:	b1 09       	sbc	r27, r1
     8fc:	19 f4       	brne	.+6      	; 0x904 <_Z7pulseInhh+0x16e>
     8fe:	35 c2       	rjmp	.+1130   	; 0xd6a <_Z7pulseInhh+0x5d4>
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     900:	71 e0       	ldi	r23, 0x01	; 1
     902:	60 e0       	ldi	r22, 0x00	; 0
	                {
		              if (--mAxloops == 0)
		               return 0;
	                   }
  // wait for the pulse to start  
                  while (((PINC) && ((pInno%8))) != vAlue)
     904:	26 b1       	in	r18, 0x06	; 6
     906:	22 23       	and	r18, r18
     908:	51 f0       	breq	.+20     	; 0x91e <_Z7pulseInhh+0x188>
     90a:	49 81       	ldd	r20, Y+1	; 0x01
     90c:	50 e0       	ldi	r21, 0x00	; 0
     90e:	47 70       	andi	r20, 0x07	; 7
     910:	50 70       	andi	r21, 0x00	; 0
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     912:	27 2f       	mov	r18, r23
     914:	41 15       	cp	r20, r1
     916:	51 05       	cpc	r21, r1
     918:	19 f4       	brne	.+6      	; 0x920 <_Z7pulseInhh+0x18a>
     91a:	26 2f       	mov	r18, r22
     91c:	01 c0       	rjmp	.+2      	; 0x920 <_Z7pulseInhh+0x18a>
	                {
		              if (--mAxloops == 0)
		               return 0;
	                   }
  // wait for the pulse to start  
                  while (((PINC) && ((pInno%8))) != vAlue)
     91e:	26 2f       	mov	r18, r22
     920:	30 e0       	ldi	r19, 0x00	; 0
     922:	e2 17       	cp	r30, r18
     924:	f3 07       	cpc	r31, r19
     926:	39 f7       	brne	.-50     	; 0x8f6 <_Z7pulseInhh+0x160>
     928:	20 e0       	ldi	r18, 0x00	; 0
     92a:	30 e0       	ldi	r19, 0x00	; 0
     92c:	a9 01       	movw	r20, r18
	                  {
		              if (--mAxloops == 0)
		                 return 0;
	                      }
  // wait for the pulse to stop
                while (((PINC) && ((pInno%8))) == vAlue)
     92e:	ee 24       	eor	r14, r14
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     930:	dd 24       	eor	r13, r13
     932:	d3 94       	inc	r13
     934:	0a c0       	rjmp	.+20     	; 0x94a <_Z7pulseInhh+0x1b4>
		                 return 0;
	                      }
  // wait for the pulse to stop
                while (((PINC) && ((pInno%8))) == vAlue)
	                 {
                 		if (++wIdth == mAxloops)
     936:	2f 5f       	subi	r18, 0xFF	; 255
     938:	3f 4f       	sbci	r19, 0xFF	; 255
     93a:	4f 4f       	sbci	r20, 0xFF	; 255
     93c:	5f 4f       	sbci	r21, 0xFF	; 255
     93e:	82 17       	cp	r24, r18
     940:	93 07       	cpc	r25, r19
     942:	a4 07       	cpc	r26, r20
     944:	b5 07       	cpc	r27, r21
     946:	09 f4       	brne	.+2      	; 0x94a <_Z7pulseInhh+0x1b4>
     948:	14 c2       	rjmp	.+1064   	; 0xd72 <_Z7pulseInhh+0x5dc>
	                  {
		              if (--mAxloops == 0)
		                 return 0;
	                      }
  // wait for the pulse to stop
                while (((PINC) && ((pInno%8))) == vAlue)
     94a:	66 b1       	in	r22, 0x06	; 6
     94c:	66 23       	and	r22, r22
     94e:	51 f0       	breq	.+20     	; 0x964 <_Z7pulseInhh+0x1ce>
     950:	09 81       	ldd	r16, Y+1	; 0x01
     952:	10 e0       	ldi	r17, 0x00	; 0
     954:	07 70       	andi	r16, 0x07	; 7
     956:	10 70       	andi	r17, 0x00	; 0
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     958:	6d 2d       	mov	r22, r13
     95a:	01 15       	cp	r16, r1
     95c:	11 05       	cpc	r17, r1
     95e:	19 f4       	brne	.+6      	; 0x966 <_Z7pulseInhh+0x1d0>
     960:	6e 2d       	mov	r22, r14
     962:	01 c0       	rjmp	.+2      	; 0x966 <_Z7pulseInhh+0x1d0>
	                  {
		              if (--mAxloops == 0)
		                 return 0;
	                      }
  // wait for the pulse to stop
                while (((PINC) && ((pInno%8))) == vAlue)
     964:	6e 2d       	mov	r22, r14
     966:	70 e0       	ldi	r23, 0x00	; 0
     968:	e6 17       	cp	r30, r22
     96a:	f7 07       	cpc	r31, r23
     96c:	21 f3       	breq	.-56     	; 0x936 <_Z7pulseInhh+0x1a0>
     96e:	40 c2       	rjmp	.+1152   	; 0xdf0 <_Z7pulseInhh+0x65a>
						 
	 case'd':
	     
	                 { while (((PIND) && ((pInno%8))) == vAlue)
	                {
		              if (--mAxloops == 0)
     970:	01 97       	sbiw	r24, 0x01	; 1
     972:	a1 09       	sbc	r26, r1
     974:	b1 09       	sbc	r27, r1
     976:	41 f4       	brne	.+16     	; 0x988 <_Z7pulseInhh+0x1f2>
     978:	00 c2       	rjmp	.+1024   	; 0xd7a <_Z7pulseInhh+0x5e4>
  TCCR2A = (1 << WGM21) | (1 << COM2A1) | (1 << FOC2A) | (0 << COM2A0) | (0 << WGM20); //initializing in CTC mode
  TCCR2A = (1 << CS20);
  unsigned long mAxloops = 500000;
  unsigned long wIdth = 0;
  // wait for any previous pulse to end
  switch(d[pInno]){
     97a:	80 e2       	ldi	r24, 0x20	; 32
     97c:	91 ea       	ldi	r25, 0xA1	; 161
     97e:	a7 e0       	ldi	r26, 0x07	; 7
     980:	b0 e0       	ldi	r27, 0x00	; 0
                     return wIdth;
                         }break;
						 
	 case'd':
	     
	                 { while (((PIND) && ((pInno%8))) == vAlue)
     982:	00 e0       	ldi	r16, 0x00	; 0
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     984:	11 e0       	ldi	r17, 0x01	; 1
                     return wIdth;
                         }break;
						 
	 case'd':
	     
	                 { while (((PIND) && ((pInno%8))) == vAlue)
     986:	70 e0       	ldi	r23, 0x00	; 0
     988:	29 b1       	in	r18, 0x09	; 9
     98a:	22 23       	and	r18, r18
     98c:	51 f0       	breq	.+20     	; 0x9a2 <_Z7pulseInhh+0x20c>
     98e:	49 81       	ldd	r20, Y+1	; 0x01
     990:	50 e0       	ldi	r21, 0x00	; 0
     992:	47 70       	andi	r20, 0x07	; 7
     994:	50 70       	andi	r21, 0x00	; 0
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     996:	21 2f       	mov	r18, r17
     998:	41 15       	cp	r20, r1
     99a:	51 05       	cpc	r21, r1
     99c:	19 f4       	brne	.+6      	; 0x9a4 <_Z7pulseInhh+0x20e>
     99e:	20 2f       	mov	r18, r16
     9a0:	01 c0       	rjmp	.+2      	; 0x9a4 <_Z7pulseInhh+0x20e>
                     return wIdth;
                         }break;
						 
	 case'd':
	     
	                 { while (((PIND) && ((pInno%8))) == vAlue)
     9a2:	20 2f       	mov	r18, r16
     9a4:	fb 01       	movw	r30, r22
     9a6:	30 e0       	ldi	r19, 0x00	; 0
     9a8:	26 17       	cp	r18, r22
     9aa:	37 07       	cpc	r19, r23
     9ac:	09 f3       	breq	.-62     	; 0x970 <_Z7pulseInhh+0x1da>
     9ae:	05 c0       	rjmp	.+10     	; 0x9ba <_Z7pulseInhh+0x224>
		               return 0;
	                   }
  // wait for the pulse to start  
                  while (((PIND) && ((pInno%8))) != vAlue)
	                  {
		              if (--mAxloops == 0)
     9b0:	01 97       	sbiw	r24, 0x01	; 1
     9b2:	a1 09       	sbc	r26, r1
     9b4:	b1 09       	sbc	r27, r1
     9b6:	19 f4       	brne	.+6      	; 0x9be <_Z7pulseInhh+0x228>
     9b8:	e4 c1       	rjmp	.+968    	; 0xd82 <_Z7pulseInhh+0x5ec>
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     9ba:	71 e0       	ldi	r23, 0x01	; 1
     9bc:	60 e0       	ldi	r22, 0x00	; 0
	                {
		              if (--mAxloops == 0)
		               return 0;
	                   }
  // wait for the pulse to start  
                  while (((PIND) && ((pInno%8))) != vAlue)
     9be:	29 b1       	in	r18, 0x09	; 9
     9c0:	22 23       	and	r18, r18
     9c2:	51 f0       	breq	.+20     	; 0x9d8 <_Z7pulseInhh+0x242>
     9c4:	49 81       	ldd	r20, Y+1	; 0x01
     9c6:	50 e0       	ldi	r21, 0x00	; 0
     9c8:	47 70       	andi	r20, 0x07	; 7
     9ca:	50 70       	andi	r21, 0x00	; 0
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     9cc:	27 2f       	mov	r18, r23
     9ce:	41 15       	cp	r20, r1
     9d0:	51 05       	cpc	r21, r1
     9d2:	19 f4       	brne	.+6      	; 0x9da <_Z7pulseInhh+0x244>
     9d4:	26 2f       	mov	r18, r22
     9d6:	01 c0       	rjmp	.+2      	; 0x9da <_Z7pulseInhh+0x244>
	                {
		              if (--mAxloops == 0)
		               return 0;
	                   }
  // wait for the pulse to start  
                  while (((PIND) && ((pInno%8))) != vAlue)
     9d8:	26 2f       	mov	r18, r22
     9da:	30 e0       	ldi	r19, 0x00	; 0
     9dc:	e2 17       	cp	r30, r18
     9de:	f3 07       	cpc	r31, r19
     9e0:	39 f7       	brne	.-50     	; 0x9b0 <_Z7pulseInhh+0x21a>
     9e2:	20 e0       	ldi	r18, 0x00	; 0
     9e4:	30 e0       	ldi	r19, 0x00	; 0
     9e6:	a9 01       	movw	r20, r18
	                  {
		              if (--mAxloops == 0)
		                 return 0;
	                      }
  // wait for the pulse to stop
                while (((PIND) && ((pInno%8))) == vAlue)
     9e8:	ee 24       	eor	r14, r14
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     9ea:	dd 24       	eor	r13, r13
     9ec:	d3 94       	inc	r13
     9ee:	0a c0       	rjmp	.+20     	; 0xa04 <_Z7pulseInhh+0x26e>
		                 return 0;
	                      }
  // wait for the pulse to stop
                while (((PIND) && ((pInno%8))) == vAlue)
	                 {
                 		if (++wIdth == mAxloops)
     9f0:	2f 5f       	subi	r18, 0xFF	; 255
     9f2:	3f 4f       	sbci	r19, 0xFF	; 255
     9f4:	4f 4f       	sbci	r20, 0xFF	; 255
     9f6:	5f 4f       	sbci	r21, 0xFF	; 255
     9f8:	82 17       	cp	r24, r18
     9fa:	93 07       	cpc	r25, r19
     9fc:	a4 07       	cpc	r26, r20
     9fe:	b5 07       	cpc	r27, r21
     a00:	09 f4       	brne	.+2      	; 0xa04 <_Z7pulseInhh+0x26e>
     a02:	c3 c1       	rjmp	.+902    	; 0xd8a <_Z7pulseInhh+0x5f4>
	                  {
		              if (--mAxloops == 0)
		                 return 0;
	                      }
  // wait for the pulse to stop
                while (((PIND) && ((pInno%8))) == vAlue)
     a04:	69 b1       	in	r22, 0x09	; 9
     a06:	66 23       	and	r22, r22
     a08:	51 f0       	breq	.+20     	; 0xa1e <_Z7pulseInhh+0x288>
     a0a:	09 81       	ldd	r16, Y+1	; 0x01
     a0c:	10 e0       	ldi	r17, 0x00	; 0
     a0e:	07 70       	andi	r16, 0x07	; 7
     a10:	10 70       	andi	r17, 0x00	; 0
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     a12:	6d 2d       	mov	r22, r13
     a14:	01 15       	cp	r16, r1
     a16:	11 05       	cpc	r17, r1
     a18:	19 f4       	brne	.+6      	; 0xa20 <_Z7pulseInhh+0x28a>
     a1a:	6e 2d       	mov	r22, r14
     a1c:	01 c0       	rjmp	.+2      	; 0xa20 <_Z7pulseInhh+0x28a>
	                  {
		              if (--mAxloops == 0)
		                 return 0;
	                      }
  // wait for the pulse to stop
                while (((PIND) && ((pInno%8))) == vAlue)
     a1e:	6e 2d       	mov	r22, r14
     a20:	70 e0       	ldi	r23, 0x00	; 0
     a22:	e6 17       	cp	r30, r22
     a24:	f7 07       	cpc	r31, r23
     a26:	21 f3       	breq	.-56     	; 0x9f0 <_Z7pulseInhh+0x25a>
     a28:	e3 c1       	rjmp	.+966    	; 0xdf0 <_Z7pulseInhh+0x65a>
				  //  DDRH|(0<<c[pInno]);
	case'e':
	                  
	                 { while (((PINE) && ((pInno%8))) == vAlue)
	                {
		              if (--mAxloops == 0)
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	a1 09       	sbc	r26, r1
     a2e:	b1 09       	sbc	r27, r1
     a30:	41 f4       	brne	.+16     	; 0xa42 <_Z7pulseInhh+0x2ac>
     a32:	af c1       	rjmp	.+862    	; 0xd92 <_Z7pulseInhh+0x5fc>
  TCCR2A = (1 << WGM21) | (1 << COM2A1) | (1 << FOC2A) | (0 << COM2A0) | (0 << WGM20); //initializing in CTC mode
  TCCR2A = (1 << CS20);
  unsigned long mAxloops = 500000;
  unsigned long wIdth = 0;
  // wait for any previous pulse to end
  switch(d[pInno]){
     a34:	80 e2       	ldi	r24, 0x20	; 32
     a36:	91 ea       	ldi	r25, 0xA1	; 161
     a38:	a7 e0       	ldi	r26, 0x07	; 7
     a3a:	b0 e0       	ldi	r27, 0x00	; 0
                     return wIdth;
                         } break; 		//case'h':
				  //  DDRH|(0<<c[pInno]);
	case'e':
	                  
	                 { while (((PINE) && ((pInno%8))) == vAlue)
     a3c:	00 e0       	ldi	r16, 0x00	; 0
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     a3e:	11 e0       	ldi	r17, 0x01	; 1
                     return wIdth;
                         } break; 		//case'h':
				  //  DDRH|(0<<c[pInno]);
	case'e':
	                  
	                 { while (((PINE) && ((pInno%8))) == vAlue)
     a40:	70 e0       	ldi	r23, 0x00	; 0
     a42:	2c b1       	in	r18, 0x0c	; 12
     a44:	22 23       	and	r18, r18
     a46:	51 f0       	breq	.+20     	; 0xa5c <_Z7pulseInhh+0x2c6>
     a48:	49 81       	ldd	r20, Y+1	; 0x01
     a4a:	50 e0       	ldi	r21, 0x00	; 0
     a4c:	47 70       	andi	r20, 0x07	; 7
     a4e:	50 70       	andi	r21, 0x00	; 0
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     a50:	21 2f       	mov	r18, r17
     a52:	41 15       	cp	r20, r1
     a54:	51 05       	cpc	r21, r1
     a56:	19 f4       	brne	.+6      	; 0xa5e <_Z7pulseInhh+0x2c8>
     a58:	20 2f       	mov	r18, r16
     a5a:	01 c0       	rjmp	.+2      	; 0xa5e <_Z7pulseInhh+0x2c8>
                     return wIdth;
                         } break; 		//case'h':
				  //  DDRH|(0<<c[pInno]);
	case'e':
	                  
	                 { while (((PINE) && ((pInno%8))) == vAlue)
     a5c:	20 2f       	mov	r18, r16
     a5e:	fb 01       	movw	r30, r22
     a60:	30 e0       	ldi	r19, 0x00	; 0
     a62:	26 17       	cp	r18, r22
     a64:	37 07       	cpc	r19, r23
     a66:	09 f3       	breq	.-62     	; 0xa2a <_Z7pulseInhh+0x294>
     a68:	05 c0       	rjmp	.+10     	; 0xa74 <_Z7pulseInhh+0x2de>
		               return 0;
	                   }
  // wait for the pulse to start  
                  while (((PINE) && ((pInno%8))) != vAlue)
	                  {
		              if (--mAxloops == 0)
     a6a:	01 97       	sbiw	r24, 0x01	; 1
     a6c:	a1 09       	sbc	r26, r1
     a6e:	b1 09       	sbc	r27, r1
     a70:	19 f4       	brne	.+6      	; 0xa78 <_Z7pulseInhh+0x2e2>
     a72:	93 c1       	rjmp	.+806    	; 0xd9a <_Z7pulseInhh+0x604>
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     a74:	71 e0       	ldi	r23, 0x01	; 1
     a76:	60 e0       	ldi	r22, 0x00	; 0
	                {
		              if (--mAxloops == 0)
		               return 0;
	                   }
  // wait for the pulse to start  
                  while (((PINE) && ((pInno%8))) != vAlue)
     a78:	2c b1       	in	r18, 0x0c	; 12
     a7a:	22 23       	and	r18, r18
     a7c:	51 f0       	breq	.+20     	; 0xa92 <_Z7pulseInhh+0x2fc>
     a7e:	49 81       	ldd	r20, Y+1	; 0x01
     a80:	50 e0       	ldi	r21, 0x00	; 0
     a82:	47 70       	andi	r20, 0x07	; 7
     a84:	50 70       	andi	r21, 0x00	; 0
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     a86:	27 2f       	mov	r18, r23
     a88:	41 15       	cp	r20, r1
     a8a:	51 05       	cpc	r21, r1
     a8c:	19 f4       	brne	.+6      	; 0xa94 <_Z7pulseInhh+0x2fe>
     a8e:	26 2f       	mov	r18, r22
     a90:	01 c0       	rjmp	.+2      	; 0xa94 <_Z7pulseInhh+0x2fe>
	                {
		              if (--mAxloops == 0)
		               return 0;
	                   }
  // wait for the pulse to start  
                  while (((PINE) && ((pInno%8))) != vAlue)
     a92:	26 2f       	mov	r18, r22
     a94:	30 e0       	ldi	r19, 0x00	; 0
     a96:	e2 17       	cp	r30, r18
     a98:	f3 07       	cpc	r31, r19
     a9a:	39 f7       	brne	.-50     	; 0xa6a <_Z7pulseInhh+0x2d4>
     a9c:	20 e0       	ldi	r18, 0x00	; 0
     a9e:	30 e0       	ldi	r19, 0x00	; 0
     aa0:	a9 01       	movw	r20, r18
	                  {
		              if (--mAxloops == 0)
		                 return 0;
	                      }
  // wait for the pulse to stop
                while (((PINE) && ((pInno%8))) == vAlue)
     aa2:	ee 24       	eor	r14, r14
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     aa4:	dd 24       	eor	r13, r13
     aa6:	d3 94       	inc	r13
     aa8:	0a c0       	rjmp	.+20     	; 0xabe <_Z7pulseInhh+0x328>
		                 return 0;
	                      }
  // wait for the pulse to stop
                while (((PINE) && ((pInno%8))) == vAlue)
	                 {
                 		if (++wIdth == mAxloops)
     aaa:	2f 5f       	subi	r18, 0xFF	; 255
     aac:	3f 4f       	sbci	r19, 0xFF	; 255
     aae:	4f 4f       	sbci	r20, 0xFF	; 255
     ab0:	5f 4f       	sbci	r21, 0xFF	; 255
     ab2:	82 17       	cp	r24, r18
     ab4:	93 07       	cpc	r25, r19
     ab6:	a4 07       	cpc	r26, r20
     ab8:	b5 07       	cpc	r27, r21
     aba:	09 f4       	brne	.+2      	; 0xabe <_Z7pulseInhh+0x328>
     abc:	72 c1       	rjmp	.+740    	; 0xda2 <_Z7pulseInhh+0x60c>
	                  {
		              if (--mAxloops == 0)
		                 return 0;
	                      }
  // wait for the pulse to stop
                while (((PINE) && ((pInno%8))) == vAlue)
     abe:	6c b1       	in	r22, 0x0c	; 12
     ac0:	66 23       	and	r22, r22
     ac2:	51 f0       	breq	.+20     	; 0xad8 <_Z7pulseInhh+0x342>
     ac4:	09 81       	ldd	r16, Y+1	; 0x01
     ac6:	10 e0       	ldi	r17, 0x00	; 0
     ac8:	07 70       	andi	r16, 0x07	; 7
     aca:	10 70       	andi	r17, 0x00	; 0
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     acc:	6d 2d       	mov	r22, r13
     ace:	01 15       	cp	r16, r1
     ad0:	11 05       	cpc	r17, r1
     ad2:	19 f4       	brne	.+6      	; 0xada <_Z7pulseInhh+0x344>
     ad4:	6e 2d       	mov	r22, r14
     ad6:	01 c0       	rjmp	.+2      	; 0xada <_Z7pulseInhh+0x344>
	                  {
		              if (--mAxloops == 0)
		                 return 0;
	                      }
  // wait for the pulse to stop
                while (((PINE) && ((pInno%8))) == vAlue)
     ad8:	6e 2d       	mov	r22, r14
     ada:	70 e0       	ldi	r23, 0x00	; 0
     adc:	e6 17       	cp	r30, r22
     ade:	f7 07       	cpc	r31, r23
     ae0:	21 f3       	breq	.-56     	; 0xaaa <_Z7pulseInhh+0x314>
     ae2:	86 c1       	rjmp	.+780    	; 0xdf0 <_Z7pulseInhh+0x65a>
	                  
case'h':
	                 
	                 { while (((PINH) && ((pInno%8))) == vAlue)
	                {
		              if (--mAxloops == 0)
     ae4:	01 97       	sbiw	r24, 0x01	; 1
     ae6:	a1 09       	sbc	r26, r1
     ae8:	b1 09       	sbc	r27, r1
     aea:	51 f4       	brne	.+20     	; 0xb00 <_Z7pulseInhh+0x36a>
     aec:	5e c1       	rjmp	.+700    	; 0xdaa <_Z7pulseInhh+0x614>
  TCCR2A = (1 << WGM21) | (1 << COM2A1) | (1 << FOC2A) | (0 << COM2A0) | (0 << WGM20); //initializing in CTC mode
  TCCR2A = (1 << CS20);
  unsigned long mAxloops = 500000;
  unsigned long wIdth = 0;
  // wait for any previous pulse to end
  switch(d[pInno]){
     aee:	80 e2       	ldi	r24, 0x20	; 32
     af0:	91 ea       	ldi	r25, 0xA1	; 161
     af2:	a7 e0       	ldi	r26, 0x07	; 7
     af4:	b0 e0       	ldi	r27, 0x00	; 0
                     return wIdth;
                         } break; 			    
	                  
case'h':
	                 
	                 { while (((PINH) && ((pInno%8))) == vAlue)
     af6:	40 e0       	ldi	r20, 0x00	; 0
     af8:	51 e0       	ldi	r21, 0x01	; 1
     afa:	00 e0       	ldi	r16, 0x00	; 0
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     afc:	11 e0       	ldi	r17, 0x01	; 1
                     return wIdth;
                         } break; 			    
	                  
case'h':
	                 
	                 { while (((PINH) && ((pInno%8))) == vAlue)
     afe:	70 e0       	ldi	r23, 0x00	; 0
     b00:	fa 01       	movw	r30, r20
     b02:	20 81       	ld	r18, Z
     b04:	22 23       	and	r18, r18
     b06:	49 f0       	breq	.+18     	; 0xb1a <_Z7pulseInhh+0x384>
     b08:	e9 81       	ldd	r30, Y+1	; 0x01
     b0a:	f0 e0       	ldi	r31, 0x00	; 0
     b0c:	e7 70       	andi	r30, 0x07	; 7
     b0e:	f0 70       	andi	r31, 0x00	; 0
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     b10:	21 2f       	mov	r18, r17
     b12:	30 97       	sbiw	r30, 0x00	; 0
     b14:	19 f4       	brne	.+6      	; 0xb1c <_Z7pulseInhh+0x386>
     b16:	20 2f       	mov	r18, r16
     b18:	01 c0       	rjmp	.+2      	; 0xb1c <_Z7pulseInhh+0x386>
                     return wIdth;
                         } break; 			    
	                  
case'h':
	                 
	                 { while (((PINH) && ((pInno%8))) == vAlue)
     b1a:	20 2f       	mov	r18, r16
     b1c:	5b 01       	movw	r10, r22
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	26 17       	cp	r18, r22
     b22:	37 07       	cpc	r19, r23
     b24:	f9 f2       	breq	.-66     	; 0xae4 <_Z7pulseInhh+0x34e>
     b26:	05 c0       	rjmp	.+10     	; 0xb32 <_Z7pulseInhh+0x39c>
		               return 0;
	                   }
  // wait for the pulse to start  
                  while (((PINH) && ((pInno%8))) != vAlue)
	                  {
		              if (--mAxloops == 0)
     b28:	01 97       	sbiw	r24, 0x01	; 1
     b2a:	a1 09       	sbc	r26, r1
     b2c:	b1 09       	sbc	r27, r1
     b2e:	29 f4       	brne	.+10     	; 0xb3a <_Z7pulseInhh+0x3a4>
     b30:	40 c1       	rjmp	.+640    	; 0xdb2 <_Z7pulseInhh+0x61c>
	                {
		              if (--mAxloops == 0)
		               return 0;
	                   }
  // wait for the pulse to start  
                  while (((PINH) && ((pInno%8))) != vAlue)
     b32:	40 e0       	ldi	r20, 0x00	; 0
     b34:	51 e0       	ldi	r21, 0x01	; 1
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     b36:	01 e0       	ldi	r16, 0x01	; 1
     b38:	10 e0       	ldi	r17, 0x00	; 0
	                {
		              if (--mAxloops == 0)
		               return 0;
	                   }
  // wait for the pulse to start  
                  while (((PINH) && ((pInno%8))) != vAlue)
     b3a:	fa 01       	movw	r30, r20
     b3c:	20 81       	ld	r18, Z
     b3e:	22 23       	and	r18, r18
     b40:	51 f0       	breq	.+20     	; 0xb56 <_Z7pulseInhh+0x3c0>
     b42:	69 81       	ldd	r22, Y+1	; 0x01
     b44:	70 e0       	ldi	r23, 0x00	; 0
     b46:	67 70       	andi	r22, 0x07	; 7
     b48:	70 70       	andi	r23, 0x00	; 0
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     b4a:	20 2f       	mov	r18, r16
     b4c:	61 15       	cp	r22, r1
     b4e:	71 05       	cpc	r23, r1
     b50:	19 f4       	brne	.+6      	; 0xb58 <_Z7pulseInhh+0x3c2>
     b52:	21 2f       	mov	r18, r17
     b54:	01 c0       	rjmp	.+2      	; 0xb58 <_Z7pulseInhh+0x3c2>
	                {
		              if (--mAxloops == 0)
		               return 0;
	                   }
  // wait for the pulse to start  
                  while (((PINH) && ((pInno%8))) != vAlue)
     b56:	21 2f       	mov	r18, r17
     b58:	30 e0       	ldi	r19, 0x00	; 0
     b5a:	a2 16       	cp	r10, r18
     b5c:	b3 06       	cpc	r11, r19
     b5e:	21 f7       	brne	.-56     	; 0xb28 <_Z7pulseInhh+0x392>
     b60:	20 e0       	ldi	r18, 0x00	; 0
     b62:	30 e0       	ldi	r19, 0x00	; 0
     b64:	a9 01       	movw	r20, r18
	                  {
		              if (--mAxloops == 0)
		                 return 0;
	                      }
  // wait for the pulse to stop
                while (((PINH) && ((pInno%8))) == vAlue)
     b66:	00 e0       	ldi	r16, 0x00	; 0
     b68:	11 e0       	ldi	r17, 0x01	; 1
     b6a:	dd 24       	eor	r13, r13
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     b6c:	cc 24       	eor	r12, r12
     b6e:	c3 94       	inc	r12
     b70:	0a c0       	rjmp	.+20     	; 0xb86 <_Z7pulseInhh+0x3f0>
		                 return 0;
	                      }
  // wait for the pulse to stop
                while (((PINH) && ((pInno%8))) == vAlue)
	                 {
                 		if (++wIdth == mAxloops)
     b72:	2f 5f       	subi	r18, 0xFF	; 255
     b74:	3f 4f       	sbci	r19, 0xFF	; 255
     b76:	4f 4f       	sbci	r20, 0xFF	; 255
     b78:	5f 4f       	sbci	r21, 0xFF	; 255
     b7a:	82 17       	cp	r24, r18
     b7c:	93 07       	cpc	r25, r19
     b7e:	a4 07       	cpc	r26, r20
     b80:	b5 07       	cpc	r27, r21
     b82:	09 f4       	brne	.+2      	; 0xb86 <_Z7pulseInhh+0x3f0>
     b84:	1a c1       	rjmp	.+564    	; 0xdba <_Z7pulseInhh+0x624>
	                  {
		              if (--mAxloops == 0)
		                 return 0;
	                      }
  // wait for the pulse to stop
                while (((PINH) && ((pInno%8))) == vAlue)
     b86:	f8 01       	movw	r30, r16
     b88:	60 81       	ld	r22, Z
     b8a:	66 23       	and	r22, r22
     b8c:	59 f0       	breq	.+22     	; 0xba4 <_Z7pulseInhh+0x40e>
     b8e:	e9 80       	ldd	r14, Y+1	; 0x01
     b90:	ff 24       	eor	r15, r15
     b92:	f7 e0       	ldi	r31, 0x07	; 7
     b94:	ef 22       	and	r14, r31
     b96:	ff 24       	eor	r15, r15
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     b98:	6c 2d       	mov	r22, r12
     b9a:	e1 14       	cp	r14, r1
     b9c:	f1 04       	cpc	r15, r1
     b9e:	19 f4       	brne	.+6      	; 0xba6 <_Z7pulseInhh+0x410>
     ba0:	6d 2d       	mov	r22, r13
     ba2:	01 c0       	rjmp	.+2      	; 0xba6 <_Z7pulseInhh+0x410>
	                  {
		              if (--mAxloops == 0)
		                 return 0;
	                      }
  // wait for the pulse to stop
                while (((PINH) && ((pInno%8))) == vAlue)
     ba4:	6d 2d       	mov	r22, r13
     ba6:	70 e0       	ldi	r23, 0x00	; 0
     ba8:	a6 16       	cp	r10, r22
     baa:	b7 06       	cpc	r11, r23
     bac:	11 f3       	breq	.-60     	; 0xb72 <_Z7pulseInhh+0x3dc>
     bae:	20 c1       	rjmp	.+576    	; 0xdf0 <_Z7pulseInhh+0x65a>
                         } break;  
case'j':
	                  
	                 { while (((PINJ) && ((pInno%8))) == vAlue)
	                {
		              if (--mAxloops == 0)
     bb0:	01 97       	sbiw	r24, 0x01	; 1
     bb2:	a1 09       	sbc	r26, r1
     bb4:	b1 09       	sbc	r27, r1
     bb6:	51 f4       	brne	.+20     	; 0xbcc <_Z7pulseInhh+0x436>
     bb8:	04 c1       	rjmp	.+520    	; 0xdc2 <_Z7pulseInhh+0x62c>
  TCCR2A = (1 << WGM21) | (1 << COM2A1) | (1 << FOC2A) | (0 << COM2A0) | (0 << WGM20); //initializing in CTC mode
  TCCR2A = (1 << CS20);
  unsigned long mAxloops = 500000;
  unsigned long wIdth = 0;
  // wait for any previous pulse to end
  switch(d[pInno]){
     bba:	80 e2       	ldi	r24, 0x20	; 32
     bbc:	91 ea       	ldi	r25, 0xA1	; 161
     bbe:	a7 e0       	ldi	r26, 0x07	; 7
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
                     	    }
                     return wIdth;
                         } break;  
case'j':
	                  
	                 { while (((PINJ) && ((pInno%8))) == vAlue)
     bc2:	43 e0       	ldi	r20, 0x03	; 3
     bc4:	51 e0       	ldi	r21, 0x01	; 1
     bc6:	00 e0       	ldi	r16, 0x00	; 0
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     bc8:	11 e0       	ldi	r17, 0x01	; 1
                     	    }
                     return wIdth;
                         } break;  
case'j':
	                  
	                 { while (((PINJ) && ((pInno%8))) == vAlue)
     bca:	70 e0       	ldi	r23, 0x00	; 0
     bcc:	fa 01       	movw	r30, r20
     bce:	20 81       	ld	r18, Z
     bd0:	22 23       	and	r18, r18
     bd2:	49 f0       	breq	.+18     	; 0xbe6 <_Z7pulseInhh+0x450>
     bd4:	e9 81       	ldd	r30, Y+1	; 0x01
     bd6:	f0 e0       	ldi	r31, 0x00	; 0
     bd8:	e7 70       	andi	r30, 0x07	; 7
     bda:	f0 70       	andi	r31, 0x00	; 0
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     bdc:	21 2f       	mov	r18, r17
     bde:	30 97       	sbiw	r30, 0x00	; 0
     be0:	19 f4       	brne	.+6      	; 0xbe8 <_Z7pulseInhh+0x452>
     be2:	20 2f       	mov	r18, r16
     be4:	01 c0       	rjmp	.+2      	; 0xbe8 <_Z7pulseInhh+0x452>
                     	    }
                     return wIdth;
                         } break;  
case'j':
	                  
	                 { while (((PINJ) && ((pInno%8))) == vAlue)
     be6:	20 2f       	mov	r18, r16
     be8:	5b 01       	movw	r10, r22
     bea:	30 e0       	ldi	r19, 0x00	; 0
     bec:	26 17       	cp	r18, r22
     bee:	37 07       	cpc	r19, r23
     bf0:	f9 f2       	breq	.-66     	; 0xbb0 <_Z7pulseInhh+0x41a>
     bf2:	05 c0       	rjmp	.+10     	; 0xbfe <_Z7pulseInhh+0x468>
		               return 0;
	                   }
  // wait for the pulse to start  
                  while (((PINJ) && ((pInno%8))) != vAlue)
	                  {
		              if (--mAxloops == 0)
     bf4:	01 97       	sbiw	r24, 0x01	; 1
     bf6:	a1 09       	sbc	r26, r1
     bf8:	b1 09       	sbc	r27, r1
     bfa:	29 f4       	brne	.+10     	; 0xc06 <_Z7pulseInhh+0x470>
     bfc:	e6 c0       	rjmp	.+460    	; 0xdca <_Z7pulseInhh+0x634>
	                {
		              if (--mAxloops == 0)
		               return 0;
	                   }
  // wait for the pulse to start  
                  while (((PINJ) && ((pInno%8))) != vAlue)
     bfe:	43 e0       	ldi	r20, 0x03	; 3
     c00:	51 e0       	ldi	r21, 0x01	; 1
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     c02:	01 e0       	ldi	r16, 0x01	; 1
     c04:	10 e0       	ldi	r17, 0x00	; 0
	                {
		              if (--mAxloops == 0)
		               return 0;
	                   }
  // wait for the pulse to start  
                  while (((PINJ) && ((pInno%8))) != vAlue)
     c06:	fa 01       	movw	r30, r20
     c08:	20 81       	ld	r18, Z
     c0a:	22 23       	and	r18, r18
     c0c:	51 f0       	breq	.+20     	; 0xc22 <_Z7pulseInhh+0x48c>
     c0e:	69 81       	ldd	r22, Y+1	; 0x01
     c10:	70 e0       	ldi	r23, 0x00	; 0
     c12:	67 70       	andi	r22, 0x07	; 7
     c14:	70 70       	andi	r23, 0x00	; 0
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     c16:	20 2f       	mov	r18, r16
     c18:	61 15       	cp	r22, r1
     c1a:	71 05       	cpc	r23, r1
     c1c:	19 f4       	brne	.+6      	; 0xc24 <_Z7pulseInhh+0x48e>
     c1e:	21 2f       	mov	r18, r17
     c20:	01 c0       	rjmp	.+2      	; 0xc24 <_Z7pulseInhh+0x48e>
	                {
		              if (--mAxloops == 0)
		               return 0;
	                   }
  // wait for the pulse to start  
                  while (((PINJ) && ((pInno%8))) != vAlue)
     c22:	21 2f       	mov	r18, r17
     c24:	30 e0       	ldi	r19, 0x00	; 0
     c26:	a2 16       	cp	r10, r18
     c28:	b3 06       	cpc	r11, r19
     c2a:	21 f7       	brne	.-56     	; 0xbf4 <_Z7pulseInhh+0x45e>
     c2c:	20 e0       	ldi	r18, 0x00	; 0
     c2e:	30 e0       	ldi	r19, 0x00	; 0
     c30:	a9 01       	movw	r20, r18
	                  {
		              if (--mAxloops == 0)
		                 return 0;
	                      }
  // wait for the pulse to stop
                while (((PINJ) && ((pInno%8))) == vAlue)
     c32:	03 e0       	ldi	r16, 0x03	; 3
     c34:	11 e0       	ldi	r17, 0x01	; 1
     c36:	dd 24       	eor	r13, r13
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     c38:	cc 24       	eor	r12, r12
     c3a:	c3 94       	inc	r12
     c3c:	0a c0       	rjmp	.+20     	; 0xc52 <_Z7pulseInhh+0x4bc>
		                 return 0;
	                      }
  // wait for the pulse to stop
                while (((PINJ) && ((pInno%8))) == vAlue)
	                 {
                 		if (++wIdth == mAxloops)
     c3e:	2f 5f       	subi	r18, 0xFF	; 255
     c40:	3f 4f       	sbci	r19, 0xFF	; 255
     c42:	4f 4f       	sbci	r20, 0xFF	; 255
     c44:	5f 4f       	sbci	r21, 0xFF	; 255
     c46:	82 17       	cp	r24, r18
     c48:	93 07       	cpc	r25, r19
     c4a:	a4 07       	cpc	r26, r20
     c4c:	b5 07       	cpc	r27, r21
     c4e:	09 f4       	brne	.+2      	; 0xc52 <_Z7pulseInhh+0x4bc>
     c50:	c0 c0       	rjmp	.+384    	; 0xdd2 <_Z7pulseInhh+0x63c>
	                  {
		              if (--mAxloops == 0)
		                 return 0;
	                      }
  // wait for the pulse to stop
                while (((PINJ) && ((pInno%8))) == vAlue)
     c52:	f8 01       	movw	r30, r16
     c54:	60 81       	ld	r22, Z
     c56:	66 23       	and	r22, r22
     c58:	59 f0       	breq	.+22     	; 0xc70 <_Z7pulseInhh+0x4da>
     c5a:	e9 80       	ldd	r14, Y+1	; 0x01
     c5c:	ff 24       	eor	r15, r15
     c5e:	f7 e0       	ldi	r31, 0x07	; 7
     c60:	ef 22       	and	r14, r31
     c62:	ff 24       	eor	r15, r15
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     c64:	6c 2d       	mov	r22, r12
     c66:	e1 14       	cp	r14, r1
     c68:	f1 04       	cpc	r15, r1
     c6a:	19 f4       	brne	.+6      	; 0xc72 <_Z7pulseInhh+0x4dc>
     c6c:	6d 2d       	mov	r22, r13
     c6e:	01 c0       	rjmp	.+2      	; 0xc72 <_Z7pulseInhh+0x4dc>
	                  {
		              if (--mAxloops == 0)
		                 return 0;
	                      }
  // wait for the pulse to stop
                while (((PINJ) && ((pInno%8))) == vAlue)
     c70:	6d 2d       	mov	r22, r13
     c72:	70 e0       	ldi	r23, 0x00	; 0
     c74:	a6 16       	cp	r10, r22
     c76:	b7 06       	cpc	r11, r23
     c78:	11 f3       	breq	.-60     	; 0xc3e <_Z7pulseInhh+0x4a8>
     c7a:	ba c0       	rjmp	.+372    	; 0xdf0 <_Z7pulseInhh+0x65a>
			           break;
case 'l':
	                  
	                 { while (((PINL) && (((pInno%8)%8))) == vAlue)
	                {
		              if (--mAxloops == 0)
     c7c:	01 97       	sbiw	r24, 0x01	; 1
     c7e:	a1 09       	sbc	r26, r1
     c80:	b1 09       	sbc	r27, r1
     c82:	51 f4       	brne	.+20     	; 0xc98 <_Z7pulseInhh+0x502>
     c84:	aa c0       	rjmp	.+340    	; 0xdda <_Z7pulseInhh+0x644>
  TCCR2A = (1 << WGM21) | (1 << COM2A1) | (1 << FOC2A) | (0 << COM2A0) | (0 << WGM20); //initializing in CTC mode
  TCCR2A = (1 << CS20);
  unsigned long mAxloops = 500000;
  unsigned long wIdth = 0;
  // wait for any previous pulse to end
  switch(d[pInno]){
     c86:	80 e2       	ldi	r24, 0x20	; 32
     c88:	91 ea       	ldi	r25, 0xA1	; 161
     c8a:	a7 e0       	ldi	r26, 0x07	; 7
     c8c:	b0 e0       	ldi	r27, 0x00	; 0
                     return wIdth;
                         }  
			           break;
case 'l':
	                  
	                 { while (((PINL) && (((pInno%8)%8))) == vAlue)
     c8e:	49 e0       	ldi	r20, 0x09	; 9
     c90:	51 e0       	ldi	r21, 0x01	; 1
     c92:	00 e0       	ldi	r16, 0x00	; 0
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     c94:	11 e0       	ldi	r17, 0x01	; 1
                     return wIdth;
                         }  
			           break;
case 'l':
	                  
	                 { while (((PINL) && (((pInno%8)%8))) == vAlue)
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	fa 01       	movw	r30, r20
     c9a:	20 81       	ld	r18, Z
     c9c:	22 23       	and	r18, r18
     c9e:	49 f0       	breq	.+18     	; 0xcb2 <_Z7pulseInhh+0x51c>
     ca0:	e9 81       	ldd	r30, Y+1	; 0x01
     ca2:	f0 e0       	ldi	r31, 0x00	; 0
     ca4:	e7 70       	andi	r30, 0x07	; 7
     ca6:	f0 70       	andi	r31, 0x00	; 0
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     ca8:	21 2f       	mov	r18, r17
     caa:	30 97       	sbiw	r30, 0x00	; 0
     cac:	19 f4       	brne	.+6      	; 0xcb4 <_Z7pulseInhh+0x51e>
     cae:	20 2f       	mov	r18, r16
     cb0:	01 c0       	rjmp	.+2      	; 0xcb4 <_Z7pulseInhh+0x51e>
                     return wIdth;
                         }  
			           break;
case 'l':
	                  
	                 { while (((PINL) && (((pInno%8)%8))) == vAlue)
     cb2:	20 2f       	mov	r18, r16
     cb4:	5b 01       	movw	r10, r22
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	26 17       	cp	r18, r22
     cba:	37 07       	cpc	r19, r23
     cbc:	f9 f2       	breq	.-66     	; 0xc7c <_Z7pulseInhh+0x4e6>
     cbe:	05 c0       	rjmp	.+10     	; 0xcca <_Z7pulseInhh+0x534>
		               return 0;
	                   }
  // wait for the pulse to start  
                  while (((PINL) && ((pInno%8))) != vAlue)
	                  {
		              if (--mAxloops == 0)
     cc0:	01 97       	sbiw	r24, 0x01	; 1
     cc2:	a1 09       	sbc	r26, r1
     cc4:	b1 09       	sbc	r27, r1
     cc6:	29 f4       	brne	.+10     	; 0xcd2 <_Z7pulseInhh+0x53c>
     cc8:	8c c0       	rjmp	.+280    	; 0xde2 <_Z7pulseInhh+0x64c>
	                {
		              if (--mAxloops == 0)
		               return 0;
	                   }
  // wait for the pulse to start  
                  while (((PINL) && ((pInno%8))) != vAlue)
     cca:	49 e0       	ldi	r20, 0x09	; 9
     ccc:	51 e0       	ldi	r21, 0x01	; 1
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     cce:	01 e0       	ldi	r16, 0x01	; 1
     cd0:	10 e0       	ldi	r17, 0x00	; 0
	                {
		              if (--mAxloops == 0)
		               return 0;
	                   }
  // wait for the pulse to start  
                  while (((PINL) && ((pInno%8))) != vAlue)
     cd2:	fa 01       	movw	r30, r20
     cd4:	20 81       	ld	r18, Z
     cd6:	22 23       	and	r18, r18
     cd8:	51 f0       	breq	.+20     	; 0xcee <_Z7pulseInhh+0x558>
     cda:	69 81       	ldd	r22, Y+1	; 0x01
     cdc:	70 e0       	ldi	r23, 0x00	; 0
     cde:	67 70       	andi	r22, 0x07	; 7
     ce0:	70 70       	andi	r23, 0x00	; 0
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     ce2:	20 2f       	mov	r18, r16
     ce4:	61 15       	cp	r22, r1
     ce6:	71 05       	cpc	r23, r1
     ce8:	19 f4       	brne	.+6      	; 0xcf0 <_Z7pulseInhh+0x55a>
     cea:	21 2f       	mov	r18, r17
     cec:	01 c0       	rjmp	.+2      	; 0xcf0 <_Z7pulseInhh+0x55a>
	                {
		              if (--mAxloops == 0)
		               return 0;
	                   }
  // wait for the pulse to start  
                  while (((PINL) && ((pInno%8))) != vAlue)
     cee:	21 2f       	mov	r18, r17
     cf0:	30 e0       	ldi	r19, 0x00	; 0
     cf2:	a2 16       	cp	r10, r18
     cf4:	b3 06       	cpc	r11, r19
     cf6:	21 f7       	brne	.-56     	; 0xcc0 <_Z7pulseInhh+0x52a>
     cf8:	20 e0       	ldi	r18, 0x00	; 0
     cfa:	30 e0       	ldi	r19, 0x00	; 0
     cfc:	a9 01       	movw	r20, r18
	                  {
		              if (--mAxloops == 0)
		                 return 0;
	                      }
  // wait for the pulse to stop
                while (((PINL) && ((pInno%8))) == vAlue)
     cfe:	09 e0       	ldi	r16, 0x09	; 9
     d00:	11 e0       	ldi	r17, 0x01	; 1
     d02:	dd 24       	eor	r13, r13
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     d04:	cc 24       	eor	r12, r12
     d06:	c3 94       	inc	r12
     d08:	0a c0       	rjmp	.+20     	; 0xd1e <_Z7pulseInhh+0x588>
		                 return 0;
	                      }
  // wait for the pulse to stop
                while (((PINL) && ((pInno%8))) == vAlue)
	                 {
                 		if (++wIdth == mAxloops)
     d0a:	2f 5f       	subi	r18, 0xFF	; 255
     d0c:	3f 4f       	sbci	r19, 0xFF	; 255
     d0e:	4f 4f       	sbci	r20, 0xFF	; 255
     d10:	5f 4f       	sbci	r21, 0xFF	; 255
     d12:	82 17       	cp	r24, r18
     d14:	93 07       	cpc	r25, r19
     d16:	a4 07       	cpc	r26, r20
     d18:	b5 07       	cpc	r27, r21
     d1a:	09 f4       	brne	.+2      	; 0xd1e <_Z7pulseInhh+0x588>
     d1c:	66 c0       	rjmp	.+204    	; 0xdea <_Z7pulseInhh+0x654>
	                  {
		              if (--mAxloops == 0)
		                 return 0;
	                      }
  // wait for the pulse to stop
                while (((PINL) && ((pInno%8))) == vAlue)
     d1e:	f8 01       	movw	r30, r16
     d20:	60 81       	ld	r22, Z
     d22:	66 23       	and	r22, r22
     d24:	59 f0       	breq	.+22     	; 0xd3c <_Z7pulseInhh+0x5a6>
     d26:	e9 80       	ldd	r14, Y+1	; 0x01
     d28:	ff 24       	eor	r15, r15
     d2a:	f7 e0       	ldi	r31, 0x07	; 7
     d2c:	ef 22       	and	r14, r31
     d2e:	ff 24       	eor	r15, r15
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     d30:	6c 2d       	mov	r22, r12
     d32:	e1 14       	cp	r14, r1
     d34:	f1 04       	cpc	r15, r1
     d36:	19 f4       	brne	.+6      	; 0xd3e <_Z7pulseInhh+0x5a8>
     d38:	6d 2d       	mov	r22, r13
     d3a:	01 c0       	rjmp	.+2      	; 0xd3e <_Z7pulseInhh+0x5a8>
	                  {
		              if (--mAxloops == 0)
		                 return 0;
	                      }
  // wait for the pulse to stop
                while (((PINL) && ((pInno%8))) == vAlue)
     d3c:	6d 2d       	mov	r22, r13
     d3e:	70 e0       	ldi	r23, 0x00	; 0
     d40:	a6 16       	cp	r10, r22
     d42:	b7 06       	cpc	r11, r23
     d44:	11 f3       	breq	.-60     	; 0xd0a <_Z7pulseInhh+0x574>
     d46:	54 c0       	rjmp	.+168    	; 0xdf0 <_Z7pulseInhh+0x65a>
     d48:	57 c0       	rjmp	.+174    	; 0xdf8 <_Z7pulseInhh+0x662>
  switch(d[pInno]){
            case'b':
	               { while (((PINB) && ((pInno%8))) == vAlue)
	              {
		          if (--mAxloops == 0)
		            return 0;
     d4a:	20 e0       	ldi	r18, 0x00	; 0
     d4c:	30 e0       	ldi	r19, 0x00	; 0
     d4e:	a9 01       	movw	r20, r18
     d50:	4f c0       	rjmp	.+158    	; 0xdf0 <_Z7pulseInhh+0x65a>
	                }
             // wait for the pulse to start  
              while (((PINB) && ((pInno%8))) != vAlue)
	              {
		     if (--mAxloops == 0) 
		          return 0;
     d52:	20 e0       	ldi	r18, 0x00	; 0
     d54:	30 e0       	ldi	r19, 0x00	; 0
     d56:	a9 01       	movw	r20, r18
     d58:	4b c0       	rjmp	.+150    	; 0xdf0 <_Z7pulseInhh+0x65a>
	           }
            // wait for the pulse to stop
             while (((PINB) && ((pInno%8))) == vAlue)
	                   {
	               	if (++wIdth == mAxloops)
		          return 0;
     d5a:	20 e0       	ldi	r18, 0x00	; 0
     d5c:	30 e0       	ldi	r19, 0x00	; 0
     d5e:	a9 01       	movw	r20, r18
     d60:	47 c0       	rjmp	.+142    	; 0xdf0 <_Z7pulseInhh+0x65a>
                    }  break;
 case'c':
	                 { while (((PINC) && ((pInno%8))) == vAlue)
	                {
		              if (--mAxloops == 0)
		               return 0;
     d62:	20 e0       	ldi	r18, 0x00	; 0
     d64:	30 e0       	ldi	r19, 0x00	; 0
     d66:	a9 01       	movw	r20, r18
     d68:	43 c0       	rjmp	.+134    	; 0xdf0 <_Z7pulseInhh+0x65a>
	                   }
  // wait for the pulse to start  
                  while (((PINC) && ((pInno%8))) != vAlue)
	                  {
		              if (--mAxloops == 0)
		                 return 0;
     d6a:	20 e0       	ldi	r18, 0x00	; 0
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	a9 01       	movw	r20, r18
     d70:	3f c0       	rjmp	.+126    	; 0xdf0 <_Z7pulseInhh+0x65a>
	                      }
  // wait for the pulse to stop
                while (((PINC) && ((pInno%8))) == vAlue)
	                 {
                 		if (++wIdth == mAxloops)
                  		return 0;
     d72:	20 e0       	ldi	r18, 0x00	; 0
     d74:	30 e0       	ldi	r19, 0x00	; 0
     d76:	a9 01       	movw	r20, r18
     d78:	3b c0       	rjmp	.+118    	; 0xdf0 <_Z7pulseInhh+0x65a>
	 case'd':
	     
	                 { while (((PIND) && ((pInno%8))) == vAlue)
	                {
		              if (--mAxloops == 0)
		               return 0;
     d7a:	20 e0       	ldi	r18, 0x00	; 0
     d7c:	30 e0       	ldi	r19, 0x00	; 0
     d7e:	a9 01       	movw	r20, r18
     d80:	37 c0       	rjmp	.+110    	; 0xdf0 <_Z7pulseInhh+0x65a>
	                   }
  // wait for the pulse to start  
                  while (((PIND) && ((pInno%8))) != vAlue)
	                  {
		              if (--mAxloops == 0)
		                 return 0;
     d82:	20 e0       	ldi	r18, 0x00	; 0
     d84:	30 e0       	ldi	r19, 0x00	; 0
     d86:	a9 01       	movw	r20, r18
     d88:	33 c0       	rjmp	.+102    	; 0xdf0 <_Z7pulseInhh+0x65a>
	                      }
  // wait for the pulse to stop
                while (((PIND) && ((pInno%8))) == vAlue)
	                 {
                 		if (++wIdth == mAxloops)
                  		return 0;
     d8a:	20 e0       	ldi	r18, 0x00	; 0
     d8c:	30 e0       	ldi	r19, 0x00	; 0
     d8e:	a9 01       	movw	r20, r18
     d90:	2f c0       	rjmp	.+94     	; 0xdf0 <_Z7pulseInhh+0x65a>
	case'e':
	                  
	                 { while (((PINE) && ((pInno%8))) == vAlue)
	                {
		              if (--mAxloops == 0)
		               return 0;
     d92:	20 e0       	ldi	r18, 0x00	; 0
     d94:	30 e0       	ldi	r19, 0x00	; 0
     d96:	a9 01       	movw	r20, r18
     d98:	2b c0       	rjmp	.+86     	; 0xdf0 <_Z7pulseInhh+0x65a>
	                   }
  // wait for the pulse to start  
                  while (((PINE) && ((pInno%8))) != vAlue)
	                  {
		              if (--mAxloops == 0)
		                 return 0;
     d9a:	20 e0       	ldi	r18, 0x00	; 0
     d9c:	30 e0       	ldi	r19, 0x00	; 0
     d9e:	a9 01       	movw	r20, r18
     da0:	27 c0       	rjmp	.+78     	; 0xdf0 <_Z7pulseInhh+0x65a>
	                      }
  // wait for the pulse to stop
                while (((PINE) && ((pInno%8))) == vAlue)
	                 {
                 		if (++wIdth == mAxloops)
                  		return 0;
     da2:	20 e0       	ldi	r18, 0x00	; 0
     da4:	30 e0       	ldi	r19, 0x00	; 0
     da6:	a9 01       	movw	r20, r18
     da8:	23 c0       	rjmp	.+70     	; 0xdf0 <_Z7pulseInhh+0x65a>
case'h':
	                 
	                 { while (((PINH) && ((pInno%8))) == vAlue)
	                {
		              if (--mAxloops == 0)
		               return 0;
     daa:	20 e0       	ldi	r18, 0x00	; 0
     dac:	30 e0       	ldi	r19, 0x00	; 0
     dae:	a9 01       	movw	r20, r18
     db0:	1f c0       	rjmp	.+62     	; 0xdf0 <_Z7pulseInhh+0x65a>
	                   }
  // wait for the pulse to start  
                  while (((PINH) && ((pInno%8))) != vAlue)
	                  {
		              if (--mAxloops == 0)
		                 return 0;
     db2:	20 e0       	ldi	r18, 0x00	; 0
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	a9 01       	movw	r20, r18
     db8:	1b c0       	rjmp	.+54     	; 0xdf0 <_Z7pulseInhh+0x65a>
	                      }
  // wait for the pulse to stop
                while (((PINH) && ((pInno%8))) == vAlue)
	                 {
                 		if (++wIdth == mAxloops)
                  		return 0;
     dba:	20 e0       	ldi	r18, 0x00	; 0
     dbc:	30 e0       	ldi	r19, 0x00	; 0
     dbe:	a9 01       	movw	r20, r18
     dc0:	17 c0       	rjmp	.+46     	; 0xdf0 <_Z7pulseInhh+0x65a>
case'j':
	                  
	                 { while (((PINJ) && ((pInno%8))) == vAlue)
	                {
		              if (--mAxloops == 0)
		               return 0;
     dc2:	20 e0       	ldi	r18, 0x00	; 0
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	a9 01       	movw	r20, r18
     dc8:	13 c0       	rjmp	.+38     	; 0xdf0 <_Z7pulseInhh+0x65a>
	                   }
  // wait for the pulse to start  
                  while (((PINJ) && ((pInno%8))) != vAlue)
	                  {
		              if (--mAxloops == 0)
		                 return 0;
     dca:	20 e0       	ldi	r18, 0x00	; 0
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	a9 01       	movw	r20, r18
     dd0:	0f c0       	rjmp	.+30     	; 0xdf0 <_Z7pulseInhh+0x65a>
	                      }
  // wait for the pulse to stop
                while (((PINJ) && ((pInno%8))) == vAlue)
	                 {
                 		if (++wIdth == mAxloops)
                  		return 0;
     dd2:	20 e0       	ldi	r18, 0x00	; 0
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	a9 01       	movw	r20, r18
     dd8:	0b c0       	rjmp	.+22     	; 0xdf0 <_Z7pulseInhh+0x65a>
case 'l':
	                  
	                 { while (((PINL) && (((pInno%8)%8))) == vAlue)
	                {
		              if (--mAxloops == 0)
		               return 0;
     dda:	20 e0       	ldi	r18, 0x00	; 0
     ddc:	30 e0       	ldi	r19, 0x00	; 0
     dde:	a9 01       	movw	r20, r18
     de0:	07 c0       	rjmp	.+14     	; 0xdf0 <_Z7pulseInhh+0x65a>
	                   }
  // wait for the pulse to start  
                  while (((PINL) && ((pInno%8))) != vAlue)
	                  {
		              if (--mAxloops == 0)
		                 return 0;
     de2:	20 e0       	ldi	r18, 0x00	; 0
     de4:	30 e0       	ldi	r19, 0x00	; 0
     de6:	a9 01       	movw	r20, r18
     de8:	03 c0       	rjmp	.+6      	; 0xdf0 <_Z7pulseInhh+0x65a>
	                      }
  // wait for the pulse to stop
                while (((PINL) && ((pInno%8))) == vAlue)
	                 {
                 		if (++wIdth == mAxloops)
                  		return 0;
     dea:	20 e0       	ldi	r18, 0x00	; 0
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	a9 01       	movw	r20, r18
                     	    }
                     return wIdth;
                         }  
			           break;	        		   		   	  	  		 		 			 
	     }  
					 }					 	
     df0:	62 2f       	mov	r22, r18
     df2:	73 2f       	mov	r23, r19
     df4:	84 2f       	mov	r24, r20
     df6:	95 2f       	mov	r25, r21
     df8:	0f 90       	pop	r0
     dfa:	cf 91       	pop	r28
     dfc:	df 91       	pop	r29
     dfe:	1f 91       	pop	r17
     e00:	0f 91       	pop	r16
     e02:	ff 90       	pop	r15
     e04:	ef 90       	pop	r14
     e06:	df 90       	pop	r13
     e08:	cf 90       	pop	r12
     e0a:	bf 90       	pop	r11
     e0c:	af 90       	pop	r10
     e0e:	08 95       	ret

00000e10 <_Z7initADCv>:
	}

};
void initADC()
{
	ADMUX=(1<<REFS0);				//Aref=AVcc
     e10:	80 e4       	ldi	r24, 0x40	; 64
     e12:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1);		//ADC enabled, Prescaler 64
     e16:	86 e8       	ldi	r24, 0x86	; 134
     e18:	80 93 7a 00 	sts	0x007A, r24
}
     e1c:	08 95       	ret

00000e1e <_Z10analogReadi>:

int analogRead(int (pInno))
{
     e1e:	cf 93       	push	r28
     e20:	df 93       	push	r29
        //prescalar set to default
  	ADMUX=(1<<REFS0)|(0<<REFS1);
     e22:	cc e7       	ldi	r28, 0x7C	; 124
     e24:	d0 e0       	ldi	r29, 0x00	; 0
     e26:	20 e4       	ldi	r18, 0x40	; 64
     e28:	28 83       	st	Y, r18
  	ADCSRA|=(1<<ADEN);
     e2a:	ea e7       	ldi	r30, 0x7A	; 122
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	20 81       	ld	r18, Z
     e30:	20 68       	ori	r18, 0x80	; 128
     e32:	20 83       	st	Z, r18
        ADMUX|=(pInno%8);//chose value from 0 to 7 to chose adc pin accordingly
<<<<<<< HEAD
     f78:	28 81       	ld	r18, Y
     f7a:	68 e0       	ldi	r22, 0x08	; 8
     f7c:	70 e0       	ldi	r23, 0x00	; 0
<<<<<<< HEAD
     f7e:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <__divmodhi4>
=======
     f7e:	0e 94 ed 14 	call	0x29da	; 0x29da <__divmodhi4>
>>>>>>> parent of 6ea3b60... Sinosudal Wave travelling
     f82:	28 2b       	or	r18, r24
     f84:	28 83       	st	Y, r18
=======
     e34:	28 81       	ld	r18, Y
     e36:	68 e0       	ldi	r22, 0x08	; 8
     e38:	70 e0       	ldi	r23, 0x00	; 0
     e3a:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <__divmodhi4>
     e3e:	28 2b       	or	r18, r24
     e40:	28 83       	st	Y, r18
>>>>>>> parent of 1e7bf21... Included Cytron.h
        ADCSRA|=(1<<ADEN);
     e42:	80 81       	ld	r24, Z
     e44:	80 68       	ori	r24, 0x80	; 128
     e46:	80 83       	st	Z, r24
        ADCSRA|=(1<<ADSC);
     e48:	80 81       	ld	r24, Z
     e4a:	80 64       	ori	r24, 0x40	; 64
     e4c:	80 83       	st	Z, r24
	while(ADCSRA&(1<<ADSC));
     e4e:	80 81       	ld	r24, Z
     e50:	86 fd       	sbrc	r24, 6
     e52:	fd cf       	rjmp	.-6      	; 0xe4e <_Z10analogReadi+0x30>
	return (ADC);
     e54:	20 91 78 00 	lds	r18, 0x0078
     e58:	30 91 79 00 	lds	r19, 0x0079
}
     e5c:	82 2f       	mov	r24, r18
     e5e:	93 2f       	mov	r25, r19
     e60:	df 91       	pop	r29
     e62:	cf 91       	pop	r28
     e64:	08 95       	ret

00000e66 <_Z11analogWritehh>:

void analogWrite(uint8_t pInno,uint8_t dUtycY)
{
  TCCR1B=(1<<CS11)|(1<<CS10);
     e66:	93 e0       	ldi	r25, 0x03	; 3
     e68:	90 93 81 00 	sts	0x0081, r25
  TCCR1A=(1<<WGM10)|(1<<WGM12)|(1<<COM1A1)|(1<<COM1B1);
     e6c:	99 ea       	ldi	r25, 0xA9	; 169
     e6e:	90 93 80 00 	sts	0x0080, r25
	if((pInno%8)==1)
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	87 70       	andi	r24, 0x07	; 7
     e76:	90 70       	andi	r25, 0x00	; 0
     e78:	81 30       	cpi	r24, 0x01	; 1
     e7a:	91 05       	cpc	r25, r1
     e7c:	31 f4       	brne	.+12     	; 0xe8a <_Z11analogWritehh+0x24>
	{
	  OCR1A=dUtycY;
     e7e:	70 e0       	ldi	r23, 0x00	; 0
     e80:	70 93 89 00 	sts	0x0089, r23
     e84:	60 93 88 00 	sts	0x0088, r22
     e88:	08 95       	ret
	}
	if((pInno%8)==2)
     e8a:	82 30       	cpi	r24, 0x02	; 2
     e8c:	91 05       	cpc	r25, r1
     e8e:	29 f4       	brne	.+10     	; 0xe9a <_Z11analogWritehh+0x34>
	{
          OCR1B=dUtycY;
     e90:	70 e0       	ldi	r23, 0x00	; 0
     e92:	70 93 8b 00 	sts	0x008B, r23
     e96:	60 93 8a 00 	sts	0x008A, r22
     e9a:	08 95       	ret

00000e9c <_Z6millisv>:
	}
}

float x=0;
int millis()
{
     e9c:	cf 92       	push	r12
     e9e:	df 92       	push	r13
     ea0:	ef 92       	push	r14
     ea2:	ff 92       	push	r15
     ea4:	1f 93       	push	r17
	float l;
<<<<<<< HEAD
<<<<<<< HEAD
	l=mIlli*0.16+0.00000625*TCNT0;
     fea:	16 b5       	in	r17, 0x26	; 38
     fec:	60 91 b4 02 	lds	r22, 0x02B4
     ff0:	70 91 b5 02 	lds	r23, 0x02B5
     ff4:	80 91 b6 02 	lds	r24, 0x02B6
     ff8:	90 91 b7 02 	lds	r25, 0x02B7
=======
	l=x*0.16+0.00000625*TCNT0;
     fea:	16 b5       	in	r17, 0x26	; 38
     fec:	60 91 b6 02 	lds	r22, 0x02B6
     ff0:	70 91 b7 02 	lds	r23, 0x02B7
     ff4:	80 91 b8 02 	lds	r24, 0x02B8
     ff8:	90 91 b9 02 	lds	r25, 0x02B9
>>>>>>> parent of 6ea3b60... Sinosudal Wave travelling
     ffc:	2a e0       	ldi	r18, 0x0A	; 10
     ffe:	37 ed       	ldi	r19, 0xD7	; 215
    1000:	43 e2       	ldi	r20, 0x23	; 35
    1002:	5e e3       	ldi	r21, 0x3E	; 62
<<<<<<< HEAD
    1004:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <__mulsf3>
=======
    1004:	0e 94 76 14 	call	0x28ec	; 0x28ec <__mulsf3>
>>>>>>> parent of 6ea3b60... Sinosudal Wave travelling
    1008:	6b 01       	movw	r12, r22
    100a:	7c 01       	movw	r14, r24
    100c:	61 2f       	mov	r22, r17
    100e:	70 e0       	ldi	r23, 0x00	; 0
    1010:	88 27       	eor	r24, r24
    1012:	77 fd       	sbrc	r23, 7
    1014:	80 95       	com	r24
    1016:	98 2f       	mov	r25, r24
<<<<<<< HEAD
    1018:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <__floatsisf>
=======
    1018:	0e 94 c2 13 	call	0x2784	; 0x2784 <__floatsisf>
>>>>>>> parent of 6ea3b60... Sinosudal Wave travelling
    101c:	27 e1       	ldi	r18, 0x17	; 23
    101e:	37 eb       	ldi	r19, 0xB7	; 183
    1020:	41 ed       	ldi	r20, 0xD1	; 209
    1022:	56 e3       	ldi	r21, 0x36	; 54
<<<<<<< HEAD
    1024:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <__mulsf3>
=======
    1024:	0e 94 76 14 	call	0x28ec	; 0x28ec <__mulsf3>
>>>>>>> parent of 6ea3b60... Sinosudal Wave travelling
    1028:	9b 01       	movw	r18, r22
    102a:	ac 01       	movw	r20, r24
    102c:	c7 01       	movw	r24, r14
    102e:	b6 01       	movw	r22, r12
<<<<<<< HEAD
    1030:	0e 94 2c 0c 	call	0x1858	; 0x1858 <__addsf3>
        return l;
    1034:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <__fixsfsi>
=======
	l=x*0.16+0.00000625*TCNT0;
     ea6:	16 b5       	in	r17, 0x26	; 38
     ea8:	60 91 b6 02 	lds	r22, 0x02B6
     eac:	70 91 b7 02 	lds	r23, 0x02B7
     eb0:	80 91 b8 02 	lds	r24, 0x02B8
     eb4:	90 91 b9 02 	lds	r25, 0x02B9
     eb8:	2a e0       	ldi	r18, 0x0A	; 10
     eba:	37 ed       	ldi	r19, 0xD7	; 215
     ebc:	43 e2       	ldi	r20, 0x23	; 35
     ebe:	5e e3       	ldi	r21, 0x3E	; 62
     ec0:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <__mulsf3>
     ec4:	6b 01       	movw	r12, r22
     ec6:	7c 01       	movw	r14, r24
     ec8:	61 2f       	mov	r22, r17
     eca:	70 e0       	ldi	r23, 0x00	; 0
     ecc:	88 27       	eor	r24, r24
     ece:	77 fd       	sbrc	r23, 7
     ed0:	80 95       	com	r24
     ed2:	98 2f       	mov	r25, r24
     ed4:	0e 94 57 0c 	call	0x18ae	; 0x18ae <__floatsisf>
     ed8:	27 e1       	ldi	r18, 0x17	; 23
     eda:	37 eb       	ldi	r19, 0xB7	; 183
     edc:	41 ed       	ldi	r20, 0xD1	; 209
     ede:	56 e3       	ldi	r21, 0x36	; 54
     ee0:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <__mulsf3>
     ee4:	9b 01       	movw	r18, r22
     ee6:	ac 01       	movw	r20, r24
     ee8:	c7 01       	movw	r24, r14
     eea:	b6 01       	movw	r22, r12
     eec:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <__addsf3>
        return l;
     ef0:	0e 94 24 0c 	call	0x1848	; 0x1848 <__fixsfsi>
>>>>>>> parent of 1e7bf21... Included Cytron.h
=======
    1030:	0e 94 bf 12 	call	0x257e	; 0x257e <__addsf3>
        return l;
    1034:	0e 94 8f 13 	call	0x271e	; 0x271e <__fixsfsi>
>>>>>>> parent of 6ea3b60... Sinosudal Wave travelling
}
     ef4:	86 2f       	mov	r24, r22
     ef6:	97 2f       	mov	r25, r23
     ef8:	1f 91       	pop	r17
     efa:	ff 90       	pop	r15
     efc:	ef 90       	pop	r14
     efe:	df 90       	pop	r13
     f00:	cf 90       	pop	r12
     f02:	08 95       	ret

00000f04 <_Z5tinitv>:

void tinit(void)
{ 
	TCCR0A|=(1<<WGM01);
     f04:	84 b5       	in	r24, 0x24	; 36
     f06:	82 60       	ori	r24, 0x02	; 2
     f08:	84 bd       	out	0x24, r24	; 36
        TCCR0A|=(1<<CS00);
     f0a:	84 b5       	in	r24, 0x24	; 36
     f0c:	81 60       	ori	r24, 0x01	; 1
     f0e:	84 bd       	out	0x24, r24	; 36
	TIMSK0|=(1<<TOV0);
     f10:	ee e6       	ldi	r30, 0x6E	; 110
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	81 60       	ori	r24, 0x01	; 1
     f18:	80 83       	st	Z, r24
        TCNT0=0;
     f1a:	16 bc       	out	0x26, r1	; 38
}
     f1c:	08 95       	ret

00000f1e <__vector_23>:


ISR(TIMER0_OVF_vect)
{
<<<<<<< HEAD
    1062:	1f 92       	push	r1
    1064:	0f 92       	push	r0
    1066:	0f b6       	in	r0, 0x3f	; 63
    1068:	0f 92       	push	r0
    106a:	0b b6       	in	r0, 0x3b	; 59
    106c:	0f 92       	push	r0
    106e:	11 24       	eor	r1, r1
    1070:	2f 93       	push	r18
    1072:	3f 93       	push	r19
    1074:	4f 93       	push	r20
    1076:	5f 93       	push	r21
    1078:	6f 93       	push	r22
    107a:	7f 93       	push	r23
    107c:	8f 93       	push	r24
    107e:	9f 93       	push	r25
    1080:	af 93       	push	r26
    1082:	bf 93       	push	r27
    1084:	ef 93       	push	r30
    1086:	ff 93       	push	r31
<<<<<<< HEAD
	mIlli++;	
    1088:	60 91 b4 02 	lds	r22, 0x02B4
    108c:	70 91 b5 02 	lds	r23, 0x02B5
    1090:	80 91 b6 02 	lds	r24, 0x02B6
    1094:	90 91 b7 02 	lds	r25, 0x02B7
=======
	x++;	
    1088:	60 91 b6 02 	lds	r22, 0x02B6
    108c:	70 91 b7 02 	lds	r23, 0x02B7
    1090:	80 91 b8 02 	lds	r24, 0x02B8
    1094:	90 91 b9 02 	lds	r25, 0x02B9
>>>>>>> parent of 6ea3b60... Sinosudal Wave travelling
    1098:	20 e0       	ldi	r18, 0x00	; 0
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	40 e8       	ldi	r20, 0x80	; 128
    109e:	5f e3       	ldi	r21, 0x3F	; 63
<<<<<<< HEAD
    10a0:	0e 94 2c 0c 	call	0x1858	; 0x1858 <__addsf3>
    10a4:	60 93 b4 02 	sts	0x02B4, r22
    10a8:	70 93 b5 02 	sts	0x02B5, r23
    10ac:	80 93 b6 02 	sts	0x02B6, r24
    10b0:	90 93 b7 02 	sts	0x02B7, r25
=======
     f1e:	1f 92       	push	r1
     f20:	0f 92       	push	r0
     f22:	0f b6       	in	r0, 0x3f	; 63
     f24:	0f 92       	push	r0
     f26:	0b b6       	in	r0, 0x3b	; 59
     f28:	0f 92       	push	r0
     f2a:	11 24       	eor	r1, r1
     f2c:	2f 93       	push	r18
     f2e:	3f 93       	push	r19
     f30:	4f 93       	push	r20
     f32:	5f 93       	push	r21
     f34:	6f 93       	push	r22
     f36:	7f 93       	push	r23
     f38:	8f 93       	push	r24
     f3a:	9f 93       	push	r25
     f3c:	af 93       	push	r26
     f3e:	bf 93       	push	r27
     f40:	ef 93       	push	r30
     f42:	ff 93       	push	r31
	x++;	
     f44:	60 91 b6 02 	lds	r22, 0x02B6
     f48:	70 91 b7 02 	lds	r23, 0x02B7
     f4c:	80 91 b8 02 	lds	r24, 0x02B8
     f50:	90 91 b9 02 	lds	r25, 0x02B9
     f54:	20 e0       	ldi	r18, 0x00	; 0
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	40 e8       	ldi	r20, 0x80	; 128
     f5a:	5f e3       	ldi	r21, 0x3F	; 63
     f5c:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <__addsf3>
     f60:	60 93 b6 02 	sts	0x02B6, r22
     f64:	70 93 b7 02 	sts	0x02B7, r23
     f68:	80 93 b8 02 	sts	0x02B8, r24
     f6c:	90 93 b9 02 	sts	0x02B9, r25
>>>>>>> parent of 1e7bf21... Included Cytron.h
=======
    10a0:	0e 94 bf 12 	call	0x257e	; 0x257e <__addsf3>
    10a4:	60 93 b6 02 	sts	0x02B6, r22
    10a8:	70 93 b7 02 	sts	0x02B7, r23
    10ac:	80 93 b8 02 	sts	0x02B8, r24
    10b0:	90 93 b9 02 	sts	0x02B9, r25
>>>>>>> parent of 6ea3b60... Sinosudal Wave travelling
}	
     f70:	ff 91       	pop	r31
     f72:	ef 91       	pop	r30
     f74:	bf 91       	pop	r27
     f76:	af 91       	pop	r26
     f78:	9f 91       	pop	r25
     f7a:	8f 91       	pop	r24
     f7c:	7f 91       	pop	r23
     f7e:	6f 91       	pop	r22
     f80:	5f 91       	pop	r21
     f82:	4f 91       	pop	r20
     f84:	3f 91       	pop	r19
     f86:	2f 91       	pop	r18
     f88:	0f 90       	pop	r0
     f8a:	0b be       	out	0x3b, r0	; 59
     f8c:	0f 90       	pop	r0
     f8e:	0f be       	out	0x3f, r0	; 63
     f90:	0f 90       	pop	r0
     f92:	1f 90       	pop	r1
     f94:	18 95       	reti

00000f96 <_Z5delaym>:

void delay(unsigned long mIllisec)
{
     f96:	9b 01       	movw	r18, r22
     f98:	ac 01       	movw	r20, r24
	int i;
	for(i=0;i<mIllisec;i++)
     f9a:	61 15       	cp	r22, r1
     f9c:	71 05       	cpc	r23, r1
     f9e:	81 05       	cpc	r24, r1
     fa0:	91 05       	cpc	r25, r1
     fa2:	a1 f0       	breq	.+40     	; 0xfcc <_Z5delaym+0x36>
     fa4:	60 e0       	ldi	r22, 0x00	; 0
     fa6:	70 e0       	ldi	r23, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
<<<<<<< HEAD
<<<<<<< HEAD
    10ec:	89 ef       	ldi	r24, 0xF9	; 249
    10ee:	90 e0       	ldi	r25, 0x00	; 0
=======
    10ec:	8f e9       	ldi	r24, 0x9F	; 159
    10ee:	9f e0       	ldi	r25, 0x0F	; 15
>>>>>>> parent of 6ea3b60... Sinosudal Wave travelling
    10f0:	01 97       	sbiw	r24, 0x01	; 1
    10f2:	f1 f7       	brne	.-4      	; 0x10f0 <_Z5delaym+0x16>
    10f4:	00 c0       	rjmp	.+0      	; 0x10f6 <_Z5delaym+0x1c>
    10f6:	00 00       	nop
    10f8:	6f 5f       	subi	r22, 0xFF	; 255
    10fa:	7f 4f       	sbci	r23, 0xFF	; 255
    10fc:	cb 01       	movw	r24, r22
    10fe:	aa 27       	eor	r26, r26
    1100:	97 fd       	sbrc	r25, 7
    1102:	a0 95       	com	r26
    1104:	ba 2f       	mov	r27, r26
    1106:	82 17       	cp	r24, r18
    1108:	93 07       	cpc	r25, r19
    110a:	a4 07       	cpc	r26, r20
    110c:	b5 07       	cpc	r27, r21
    110e:	70 f3       	brcs	.-36     	; 0x10ec <_Z5delaym+0x12>
    1110:	08 95       	ret

00001112 <_Z17delayMicrosecondsm>:
=======
     fa8:	8f e9       	ldi	r24, 0x9F	; 159
     faa:	9f e0       	ldi	r25, 0x0F	; 15
     fac:	01 97       	sbiw	r24, 0x01	; 1
     fae:	f1 f7       	brne	.-4      	; 0xfac <_Z5delaym+0x16>
     fb0:	00 c0       	rjmp	.+0      	; 0xfb2 <_Z5delaym+0x1c>
     fb2:	00 00       	nop
     fb4:	6f 5f       	subi	r22, 0xFF	; 255
     fb6:	7f 4f       	sbci	r23, 0xFF	; 255
     fb8:	cb 01       	movw	r24, r22
     fba:	aa 27       	eor	r26, r26
     fbc:	97 fd       	sbrc	r25, 7
     fbe:	a0 95       	com	r26
     fc0:	ba 2f       	mov	r27, r26
     fc2:	82 17       	cp	r24, r18
     fc4:	93 07       	cpc	r25, r19
     fc6:	a4 07       	cpc	r26, r20
     fc8:	b5 07       	cpc	r27, r21
     fca:	70 f3       	brcs	.-36     	; 0xfa8 <_Z5delaym+0x12>
     fcc:	08 95       	ret

00000fce <_Z17delayMicrosecondsm>:
>>>>>>> parent of 1e7bf21... Included Cytron.h
	}
	return;
}

void delayMicroseconds(unsigned long mIcrosec)
{
     fce:	9b 01       	movw	r18, r22
     fd0:	ac 01       	movw	r20, r24
	int i;
	for(i=0;i<mIcrosec;i++)
<<<<<<< HEAD
    1116:	61 15       	cp	r22, r1
    1118:	71 05       	cpc	r23, r1
    111a:	81 05       	cpc	r24, r1
    111c:	91 05       	cpc	r25, r1
    111e:	91 f0       	breq	.+36     	; 0x1144 <_Z17delayMicrosecondsm+0x32>
    1120:	60 e0       	ldi	r22, 0x00	; 0
    1122:	70 e0       	ldi	r23, 0x00	; 0
=======
     fd2:	61 15       	cp	r22, r1
     fd4:	71 05       	cpc	r23, r1
     fd6:	81 05       	cpc	r24, r1
     fd8:	91 05       	cpc	r25, r1
     fda:	91 f0       	breq	.+36     	; 0x1000 <_Z17delayMicrosecondsm+0x32>
     fdc:	60 e0       	ldi	r22, 0x00	; 0
     fde:	70 e0       	ldi	r23, 0x00	; 0
>>>>>>> parent of 1e7bf21... Included Cytron.h
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
<<<<<<< HEAD
<<<<<<< HEAD
    1124:	00 00       	nop
    1126:	6f 5f       	subi	r22, 0xFF	; 255
    1128:	7f 4f       	sbci	r23, 0xFF	; 255
    112a:	cb 01       	movw	r24, r22
    112c:	aa 27       	eor	r26, r26
    112e:	97 fd       	sbrc	r25, 7
    1130:	a0 95       	com	r26
    1132:	ba 2f       	mov	r27, r26
    1134:	82 17       	cp	r24, r18
    1136:	93 07       	cpc	r25, r19
    1138:	a4 07       	cpc	r26, r20
    113a:	b5 07       	cpc	r27, r21
    113c:	98 f3       	brcs	.-26     	; 0x1124 <_Z17delayMicrosecondsm+0x12>
    113e:	08 95       	ret

00001140 <_Z3mapddddd>:
=======
     fe0:	85 e0       	ldi	r24, 0x05	; 5
     fe2:	8a 95       	dec	r24
     fe4:	f1 f7       	brne	.-4      	; 0xfe2 <_Z17delayMicrosecondsm+0x14>
     fe6:	00 00       	nop
     fe8:	6f 5f       	subi	r22, 0xFF	; 255
     fea:	7f 4f       	sbci	r23, 0xFF	; 255
     fec:	cb 01       	movw	r24, r22
     fee:	aa 27       	eor	r26, r26
     ff0:	97 fd       	sbrc	r25, 7
     ff2:	a0 95       	com	r26
     ff4:	ba 2f       	mov	r27, r26
     ff6:	82 17       	cp	r24, r18
     ff8:	93 07       	cpc	r25, r19
     ffa:	a4 07       	cpc	r26, r20
     ffc:	b5 07       	cpc	r27, r21
     ffe:	80 f3       	brcs	.-32     	; 0xfe0 <_Z17delayMicrosecondsm+0x12>
    1000:	08 95       	ret

00001002 <_Z3mapddddd>:
>>>>>>> parent of 1e7bf21... Included Cytron.h
=======
    1124:	85 e0       	ldi	r24, 0x05	; 5
    1126:	8a 95       	dec	r24
    1128:	f1 f7       	brne	.-4      	; 0x1126 <_Z17delayMicrosecondsm+0x14>
    112a:	00 00       	nop
    112c:	6f 5f       	subi	r22, 0xFF	; 255
    112e:	7f 4f       	sbci	r23, 0xFF	; 255
    1130:	cb 01       	movw	r24, r22
    1132:	aa 27       	eor	r26, r26
    1134:	97 fd       	sbrc	r25, 7
    1136:	a0 95       	com	r26
    1138:	ba 2f       	mov	r27, r26
    113a:	82 17       	cp	r24, r18
    113c:	93 07       	cpc	r25, r19
    113e:	a4 07       	cpc	r26, r20
    1140:	b5 07       	cpc	r27, r21
    1142:	80 f3       	brcs	.-32     	; 0x1124 <_Z17delayMicrosecondsm+0x12>
    1144:	08 95       	ret

00001146 <_Z3mapddddd>:
>>>>>>> parent of 6ea3b60... Sinosudal Wave travelling
	}
	return;
}

double map(double vAlue, double fromLow, double fromHigh, double toLow, double toHigh)
{
<<<<<<< HEAD
<<<<<<< HEAD
    1140:	2f 92       	push	r2
    1142:	3f 92       	push	r3
    1144:	4f 92       	push	r4
    1146:	5f 92       	push	r5
    1148:	6f 92       	push	r6
    114a:	7f 92       	push	r7
    114c:	8f 92       	push	r8
    114e:	9f 92       	push	r9
    1150:	af 92       	push	r10
    1152:	bf 92       	push	r11
    1154:	cf 92       	push	r12
    1156:	df 92       	push	r13
    1158:	ef 92       	push	r14
    115a:	ff 92       	push	r15
    115c:	0f 93       	push	r16
    115e:	1f 93       	push	r17
    1160:	df 93       	push	r29
    1162:	cf 93       	push	r28
    1164:	cd b7       	in	r28, 0x3d	; 61
    1166:	de b7       	in	r29, 0x3e	; 62
    1168:	39 01       	movw	r6, r18
    116a:	4a 01       	movw	r8, r20
    116c:	17 01       	movw	r2, r14
    116e:	28 01       	movw	r4, r16
	return ((vAlue-fromLow)/abs(fromHigh-fromLow)*abs(toHigh+toLow));
    1170:	0e 94 2b 0c 	call	0x1856	; 0x1856 <__subsf3>
    1174:	7b 01       	movw	r14, r22
    1176:	8c 01       	movw	r16, r24
    1178:	c2 01       	movw	r24, r4
    117a:	b1 01       	movw	r22, r2
    117c:	a4 01       	movw	r20, r8
    117e:	93 01       	movw	r18, r6
    1180:	0e 94 2b 0c 	call	0x1856	; 0x1856 <__subsf3>
    1184:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <__fixsfsi>
    1188:	86 2f       	mov	r24, r22
    118a:	97 2f       	mov	r25, r23
    118c:	bc 01       	movw	r22, r24
    118e:	77 23       	and	r23, r23
    1190:	24 f4       	brge	.+8      	; 0x119a <_Z3mapddddd+0x5a>
    1192:	66 27       	eor	r22, r22
    1194:	77 27       	eor	r23, r23
    1196:	68 1b       	sub	r22, r24
    1198:	79 0b       	sbc	r23, r25
    119a:	88 27       	eor	r24, r24
    119c:	77 fd       	sbrc	r23, 7
    119e:	80 95       	com	r24
    11a0:	98 2f       	mov	r25, r24
    11a2:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <__floatsisf>
    11a6:	9b 01       	movw	r18, r22
    11a8:	ac 01       	movw	r20, r24
    11aa:	c8 01       	movw	r24, r16
    11ac:	b7 01       	movw	r22, r14
    11ae:	0e 94 94 0c 	call	0x1928	; 0x1928 <__divsf3>
    11b2:	3b 01       	movw	r6, r22
    11b4:	4c 01       	movw	r8, r24
    11b6:	6e 89       	ldd	r22, Y+22	; 0x16
    11b8:	7f 89       	ldd	r23, Y+23	; 0x17
    11ba:	88 8d       	ldd	r24, Y+24	; 0x18
    11bc:	99 8d       	ldd	r25, Y+25	; 0x19
    11be:	a6 01       	movw	r20, r12
    11c0:	95 01       	movw	r18, r10
    11c2:	0e 94 2c 0c 	call	0x1858	; 0x1858 <__addsf3>
    11c6:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <__fixsfsi>
    11ca:	86 2f       	mov	r24, r22
    11cc:	97 2f       	mov	r25, r23
    11ce:	bc 01       	movw	r22, r24
    11d0:	77 23       	and	r23, r23
    11d2:	24 f4       	brge	.+8      	; 0x11dc <_Z3mapddddd+0x9c>
    11d4:	66 27       	eor	r22, r22
    11d6:	77 27       	eor	r23, r23
    11d8:	68 1b       	sub	r22, r24
    11da:	79 0b       	sbc	r23, r25
    11dc:	88 27       	eor	r24, r24
    11de:	77 fd       	sbrc	r23, 7
    11e0:	80 95       	com	r24
    11e2:	98 2f       	mov	r25, r24
    11e4:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <__floatsisf>
    11e8:	9b 01       	movw	r18, r22
    11ea:	ac 01       	movw	r20, r24
    11ec:	c4 01       	movw	r24, r8
    11ee:	b3 01       	movw	r22, r6
    11f0:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <__mulsf3>
=======
    1146:	2f 92       	push	r2
    1148:	3f 92       	push	r3
    114a:	4f 92       	push	r4
    114c:	5f 92       	push	r5
    114e:	6f 92       	push	r6
    1150:	7f 92       	push	r7
    1152:	8f 92       	push	r8
    1154:	9f 92       	push	r9
    1156:	af 92       	push	r10
    1158:	bf 92       	push	r11
    115a:	cf 92       	push	r12
    115c:	df 92       	push	r13
    115e:	ef 92       	push	r14
    1160:	ff 92       	push	r15
    1162:	0f 93       	push	r16
    1164:	1f 93       	push	r17
    1166:	df 93       	push	r29
    1168:	cf 93       	push	r28
    116a:	cd b7       	in	r28, 0x3d	; 61
    116c:	de b7       	in	r29, 0x3e	; 62
    116e:	39 01       	movw	r6, r18
    1170:	4a 01       	movw	r8, r20
    1172:	17 01       	movw	r2, r14
    1174:	28 01       	movw	r4, r16
	return ((vAlue-fromLow)/abs(fromHigh-fromLow)*abs(toHigh+toLow));
    1176:	0e 94 be 12 	call	0x257c	; 0x257c <__subsf3>
    117a:	7b 01       	movw	r14, r22
    117c:	8c 01       	movw	r16, r24
    117e:	c2 01       	movw	r24, r4
    1180:	b1 01       	movw	r22, r2
    1182:	a4 01       	movw	r20, r8
    1184:	93 01       	movw	r18, r6
    1186:	0e 94 be 12 	call	0x257c	; 0x257c <__subsf3>
    118a:	0e 94 8f 13 	call	0x271e	; 0x271e <__fixsfsi>
    118e:	86 2f       	mov	r24, r22
    1190:	97 2f       	mov	r25, r23
    1192:	bc 01       	movw	r22, r24
    1194:	77 23       	and	r23, r23
    1196:	24 f4       	brge	.+8      	; 0x11a0 <_Z3mapddddd+0x5a>
    1198:	66 27       	eor	r22, r22
    119a:	77 27       	eor	r23, r23
    119c:	68 1b       	sub	r22, r24
    119e:	79 0b       	sbc	r23, r25
    11a0:	88 27       	eor	r24, r24
    11a2:	77 fd       	sbrc	r23, 7
    11a4:	80 95       	com	r24
    11a6:	98 2f       	mov	r25, r24
    11a8:	0e 94 c2 13 	call	0x2784	; 0x2784 <__floatsisf>
    11ac:	9b 01       	movw	r18, r22
    11ae:	ac 01       	movw	r20, r24
    11b0:	c8 01       	movw	r24, r16
    11b2:	b7 01       	movw	r22, r14
    11b4:	0e 94 27 13 	call	0x264e	; 0x264e <__divsf3>
    11b8:	3b 01       	movw	r6, r22
    11ba:	4c 01       	movw	r8, r24
    11bc:	6e 89       	ldd	r22, Y+22	; 0x16
    11be:	7f 89       	ldd	r23, Y+23	; 0x17
    11c0:	88 8d       	ldd	r24, Y+24	; 0x18
    11c2:	99 8d       	ldd	r25, Y+25	; 0x19
    11c4:	a6 01       	movw	r20, r12
    11c6:	95 01       	movw	r18, r10
    11c8:	0e 94 bf 12 	call	0x257e	; 0x257e <__addsf3>
    11cc:	0e 94 8f 13 	call	0x271e	; 0x271e <__fixsfsi>
    11d0:	86 2f       	mov	r24, r22
    11d2:	97 2f       	mov	r25, r23
    11d4:	bc 01       	movw	r22, r24
    11d6:	77 23       	and	r23, r23
    11d8:	24 f4       	brge	.+8      	; 0x11e2 <_Z3mapddddd+0x9c>
    11da:	66 27       	eor	r22, r22
    11dc:	77 27       	eor	r23, r23
    11de:	68 1b       	sub	r22, r24
    11e0:	79 0b       	sbc	r23, r25
    11e2:	88 27       	eor	r24, r24
    11e4:	77 fd       	sbrc	r23, 7
    11e6:	80 95       	com	r24
    11e8:	98 2f       	mov	r25, r24
    11ea:	0e 94 c2 13 	call	0x2784	; 0x2784 <__floatsisf>
    11ee:	9b 01       	movw	r18, r22
    11f0:	ac 01       	movw	r20, r24
    11f2:	c4 01       	movw	r24, r8
    11f4:	b3 01       	movw	r22, r6
    11f6:	0e 94 76 14 	call	0x28ec	; 0x28ec <__mulsf3>
>>>>>>> parent of 6ea3b60... Sinosudal Wave travelling
}
    11fa:	cf 91       	pop	r28
    11fc:	df 91       	pop	r29
    11fe:	1f 91       	pop	r17
    1200:	0f 91       	pop	r16
    1202:	ff 90       	pop	r15
    1204:	ef 90       	pop	r14
    1206:	df 90       	pop	r13
    1208:	cf 90       	pop	r12
    120a:	bf 90       	pop	r11
    120c:	af 90       	pop	r10
    120e:	9f 90       	pop	r9
    1210:	8f 90       	pop	r8
    1212:	7f 90       	pop	r7
    1214:	6f 90       	pop	r6
    1216:	5f 90       	pop	r5
    1218:	4f 90       	pop	r4
    121a:	3f 90       	pop	r3
    121c:	2f 90       	pop	r2
    121e:	08 95       	ret

00001220 <_Z9constrainddd>:

double constrain(double nUm,double uPper,double lOwer)
{
    1220:	6f 92       	push	r6
    1222:	7f 92       	push	r7
    1224:	8f 92       	push	r8
    1226:	9f 92       	push	r9
    1228:	af 92       	push	r10
    122a:	bf 92       	push	r11
    122c:	cf 92       	push	r12
    122e:	df 92       	push	r13
    1230:	ef 92       	push	r14
    1232:	ff 92       	push	r15
    1234:	0f 93       	push	r16
    1236:	1f 93       	push	r17
    1238:	96 2e       	mov	r9, r22
    123a:	87 2e       	mov	r8, r23
    123c:	78 2e       	mov	r7, r24
    123e:	69 2e       	mov	r6, r25
    1240:	d2 2e       	mov	r13, r18
    1242:	c3 2e       	mov	r12, r19
    1244:	b4 2e       	mov	r11, r20
    1246:	a5 2e       	mov	r10, r21
	if(nUm<uPper){
<<<<<<< HEAD
    1242:	2d 2d       	mov	r18, r13
    1244:	3c 2d       	mov	r19, r12
    1246:	4b 2d       	mov	r20, r11
    1248:	5a 2d       	mov	r21, r10
    124a:	0e 94 90 0c 	call	0x1920	; 0x1920 <__cmpsf2>
    124e:	88 23       	and	r24, r24
    1250:	ac f0       	brlt	.+42     	; 0x127c <_Z9constrainddd+0x62>
		return uPper;}
	else if(nUm>lOwer){
    1252:	69 2d       	mov	r22, r9
    1254:	78 2d       	mov	r23, r8
    1256:	87 2d       	mov	r24, r7
    1258:	96 2d       	mov	r25, r6
    125a:	2e 2d       	mov	r18, r14
    125c:	3f 2d       	mov	r19, r15
    125e:	40 2f       	mov	r20, r16
    1260:	51 2f       	mov	r21, r17
    1262:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <__gesf2>
    1266:	18 16       	cp	r1, r24
    1268:	2c f4       	brge	.+10     	; 0x1274 <_Z9constrainddd+0x5a>
=======
    1248:	2d 2d       	mov	r18, r13
    124a:	3c 2d       	mov	r19, r12
    124c:	4b 2d       	mov	r20, r11
    124e:	5a 2d       	mov	r21, r10
    1250:	0e 94 23 13 	call	0x2646	; 0x2646 <__cmpsf2>
    1254:	88 23       	and	r24, r24
    1256:	ac f0       	brlt	.+42     	; 0x1282 <_Z9constrainddd+0x62>
		return uPper;}
	else if(nUm>lOwer){
    1258:	69 2d       	mov	r22, r9
    125a:	78 2d       	mov	r23, r8
    125c:	87 2d       	mov	r24, r7
    125e:	96 2d       	mov	r25, r6
    1260:	2e 2d       	mov	r18, r14
    1262:	3f 2d       	mov	r19, r15
    1264:	40 2f       	mov	r20, r16
    1266:	51 2f       	mov	r21, r17
    1268:	0e 94 72 14 	call	0x28e4	; 0x28e4 <__gesf2>
    126c:	18 16       	cp	r1, r24
    126e:	2c f4       	brge	.+10     	; 0x127a <_Z9constrainddd+0x5a>
>>>>>>> parent of 6ea3b60... Sinosudal Wave travelling
		return lOwer;}
    1270:	de 2c       	mov	r13, r14
    1272:	cf 2c       	mov	r12, r15
    1274:	b0 2e       	mov	r11, r16
    1276:	a1 2e       	mov	r10, r17
    1278:	04 c0       	rjmp	.+8      	; 0x1282 <_Z9constrainddd+0x62>
	else 
	return nUm;	
    127a:	d9 2c       	mov	r13, r9
    127c:	c8 2c       	mov	r12, r8
    127e:	b7 2c       	mov	r11, r7
    1280:	a6 2c       	mov	r10, r6
}
    1282:	6d 2d       	mov	r22, r13
    1284:	7c 2d       	mov	r23, r12
    1286:	8b 2d       	mov	r24, r11
    1288:	9a 2d       	mov	r25, r10
    128a:	1f 91       	pop	r17
    128c:	0f 91       	pop	r16
    128e:	ff 90       	pop	r15
    1290:	ef 90       	pop	r14
    1292:	df 90       	pop	r13
    1294:	cf 90       	pop	r12
    1296:	bf 90       	pop	r11
    1298:	af 90       	pop	r10
    129a:	9f 90       	pop	r9
    129c:	8f 90       	pop	r8
    129e:	7f 90       	pop	r7
    12a0:	6f 90       	pop	r6
    12a2:	08 95       	ret

000012a4 <_Z15attachIntteruptiPFvvEi>:
void attachIntterupt(int pIn, void (*iSrfunc)(void), int cOmpare)		//cOmpare:LOW=0,HIGH1,RISING=2,FALLING=3
{
	sei();
    12a4:	78 94       	sei
	cAllisr=iSrfunc;
<<<<<<< HEAD
    12a0:	70 93 b9 02 	sts	0x02B9, r23
    12a4:	60 93 b8 02 	sts	0x02B8, r22
=======
    12a6:	70 93 b5 02 	sts	0x02B5, r23
    12aa:	60 93 b4 02 	sts	0x02B4, r22
>>>>>>> parent of 6ea3b60... Sinosudal Wave travelling
	switch(pIn)	  //enabling interrupt pin
    12ae:	83 30       	cpi	r24, 0x03	; 3
    12b0:	91 05       	cpc	r25, r1
    12b2:	09 f4       	brne	.+2      	; 0x12b6 <_Z15attachIntteruptiPFvvEi+0x12>
    12b4:	7d c0       	rjmp	.+250    	; 0x13b0 <_Z15attachIntteruptiPFvvEi+0x10c>
    12b6:	84 30       	cpi	r24, 0x04	; 4
    12b8:	91 05       	cpc	r25, r1
    12ba:	54 f4       	brge	.+20     	; 0x12d0 <_Z15attachIntteruptiPFvvEi+0x2c>
    12bc:	81 30       	cpi	r24, 0x01	; 1
    12be:	91 05       	cpc	r25, r1
    12c0:	c9 f1       	breq	.+114    	; 0x1334 <_Z15attachIntteruptiPFvvEi+0x90>
    12c2:	82 30       	cpi	r24, 0x02	; 2
    12c4:	91 05       	cpc	r25, r1
    12c6:	0c f0       	brlt	.+2      	; 0x12ca <_Z15attachIntteruptiPFvvEi+0x26>
    12c8:	54 c0       	rjmp	.+168    	; 0x1372 <_Z15attachIntteruptiPFvvEi+0xce>
    12ca:	00 97       	sbiw	r24, 0x00	; 0
    12cc:	91 f0       	breq	.+36     	; 0x12f2 <_Z15attachIntteruptiPFvvEi+0x4e>
    12ce:	0b c1       	rjmp	.+534    	; 0x14e6 <_Z15attachIntteruptiPFvvEi+0x242>
    12d0:	85 30       	cpi	r24, 0x05	; 5
    12d2:	91 05       	cpc	r25, r1
    12d4:	09 f4       	brne	.+2      	; 0x12d8 <_Z15attachIntteruptiPFvvEi+0x34>
    12d6:	aa c0       	rjmp	.+340    	; 0x142c <_Z15attachIntteruptiPFvvEi+0x188>
    12d8:	85 30       	cpi	r24, 0x05	; 5
    12da:	91 05       	cpc	r25, r1
    12dc:	0c f4       	brge	.+2      	; 0x12e0 <_Z15attachIntteruptiPFvvEi+0x3c>
    12de:	87 c0       	rjmp	.+270    	; 0x13ee <_Z15attachIntteruptiPFvvEi+0x14a>
    12e0:	86 30       	cpi	r24, 0x06	; 6
    12e2:	91 05       	cpc	r25, r1
    12e4:	09 f4       	brne	.+2      	; 0x12e8 <_Z15attachIntteruptiPFvvEi+0x44>
    12e6:	c1 c0       	rjmp	.+386    	; 0x146a <_Z15attachIntteruptiPFvvEi+0x1c6>
    12e8:	87 30       	cpi	r24, 0x07	; 7
    12ea:	91 05       	cpc	r25, r1
    12ec:	09 f0       	breq	.+2      	; 0x12f0 <_Z15attachIntteruptiPFvvEi+0x4c>
    12ee:	fb c0       	rjmp	.+502    	; 0x14e6 <_Z15attachIntteruptiPFvvEi+0x242>
    12f0:	db c0       	rjmp	.+438    	; 0x14a8 <_Z15attachIntteruptiPFvvEi+0x204>
	{
		case 0:
		EIMSK|=1<<INT0;
    12f2:	e8 9a       	sbi	0x1d, 0	; 29
		switch(cOmpare){
    12f4:	43 30       	cpi	r20, 0x03	; 3
    12f6:	51 05       	cpc	r21, r1
    12f8:	61 f0       	breq	.+24     	; 0x1312 <_Z15attachIntteruptiPFvvEi+0x6e>
    12fa:	44 30       	cpi	r20, 0x04	; 4
    12fc:	51 05       	cpc	r21, r1
    12fe:	79 f0       	breq	.+30     	; 0x131e <_Z15attachIntteruptiPFvvEi+0x7a>
    1300:	42 30       	cpi	r20, 0x02	; 2
    1302:	51 05       	cpc	r21, r1
    1304:	91 f4       	brne	.+36     	; 0x132a <_Z15attachIntteruptiPFvvEi+0x86>
			case 2:
			EICRA|=(1<<ISC00)|(1<<ISC01);
    1306:	e9 e6       	ldi	r30, 0x69	; 105
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	80 81       	ld	r24, Z
    130c:	83 60       	ori	r24, 0x03	; 3
    130e:	80 83       	st	Z, r24
			break;
    1310:	08 95       	ret
			case 3:
			EICRA|=(0<<ISC00)|(1<<ISC01);
    1312:	e9 e6       	ldi	r30, 0x69	; 105
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	80 81       	ld	r24, Z
    1318:	82 60       	ori	r24, 0x02	; 2
    131a:	80 83       	st	Z, r24
			break;
    131c:	08 95       	ret
			case 4:
			EICRA|=(1<<ISC00)|(0<<ISC01);
    131e:	e9 e6       	ldi	r30, 0x69	; 105
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	80 81       	ld	r24, Z
    1324:	81 60       	ori	r24, 0x01	; 1
    1326:	80 83       	st	Z, r24
			break;
    1328:	08 95       	ret
			default:
			EICRA|=(0<<ISC00)|(0<<ISC01);
<<<<<<< HEAD
    1324:	e9 e6       	ldi	r30, 0x69	; 105
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	80 81       	ld	r24, Z
    132a:	80 83       	st	Z, r24
    132c:	08 95       	ret
=======
    1002:	2f 92       	push	r2
    1004:	3f 92       	push	r3
    1006:	4f 92       	push	r4
    1008:	5f 92       	push	r5
    100a:	6f 92       	push	r6
    100c:	7f 92       	push	r7
    100e:	8f 92       	push	r8
    1010:	9f 92       	push	r9
    1012:	af 92       	push	r10
    1014:	bf 92       	push	r11
    1016:	cf 92       	push	r12
    1018:	df 92       	push	r13
    101a:	ef 92       	push	r14
    101c:	ff 92       	push	r15
    101e:	0f 93       	push	r16
    1020:	1f 93       	push	r17
    1022:	df 93       	push	r29
    1024:	cf 93       	push	r28
    1026:	cd b7       	in	r28, 0x3d	; 61
    1028:	de b7       	in	r29, 0x3e	; 62
    102a:	39 01       	movw	r6, r18
    102c:	4a 01       	movw	r8, r20
    102e:	17 01       	movw	r2, r14
    1030:	28 01       	movw	r4, r16
	return ((vAlue-fromLow)/abs(fromHigh-fromLow)*abs(toHigh+toLow));
    1032:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <__subsf3>
    1036:	7b 01       	movw	r14, r22
    1038:	8c 01       	movw	r16, r24
    103a:	c2 01       	movw	r24, r4
    103c:	b1 01       	movw	r22, r2
    103e:	a4 01       	movw	r20, r8
    1040:	93 01       	movw	r18, r6
    1042:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <__subsf3>
    1046:	0e 94 24 0c 	call	0x1848	; 0x1848 <__fixsfsi>
    104a:	86 2f       	mov	r24, r22
    104c:	97 2f       	mov	r25, r23
    104e:	bc 01       	movw	r22, r24
    1050:	77 23       	and	r23, r23
    1052:	24 f4       	brge	.+8      	; 0x105c <_Z3mapddddd+0x5a>
    1054:	66 27       	eor	r22, r22
    1056:	77 27       	eor	r23, r23
    1058:	68 1b       	sub	r22, r24
    105a:	79 0b       	sbc	r23, r25
    105c:	88 27       	eor	r24, r24
    105e:	77 fd       	sbrc	r23, 7
    1060:	80 95       	com	r24
    1062:	98 2f       	mov	r25, r24
    1064:	0e 94 57 0c 	call	0x18ae	; 0x18ae <__floatsisf>
    1068:	9b 01       	movw	r18, r22
    106a:	ac 01       	movw	r20, r24
    106c:	c8 01       	movw	r24, r16
    106e:	b7 01       	movw	r22, r14
    1070:	0e 94 bc 0b 	call	0x1778	; 0x1778 <__divsf3>
    1074:	3b 01       	movw	r6, r22
    1076:	4c 01       	movw	r8, r24
    1078:	6e 89       	ldd	r22, Y+22	; 0x16
    107a:	7f 89       	ldd	r23, Y+23	; 0x17
    107c:	88 8d       	ldd	r24, Y+24	; 0x18
    107e:	99 8d       	ldd	r25, Y+25	; 0x19
    1080:	a6 01       	movw	r20, r12
    1082:	95 01       	movw	r18, r10
    1084:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <__addsf3>
    1088:	0e 94 24 0c 	call	0x1848	; 0x1848 <__fixsfsi>
    108c:	86 2f       	mov	r24, r22
    108e:	97 2f       	mov	r25, r23
    1090:	bc 01       	movw	r22, r24
    1092:	77 23       	and	r23, r23
    1094:	24 f4       	brge	.+8      	; 0x109e <_Z3mapddddd+0x9c>
    1096:	66 27       	eor	r22, r22
    1098:	77 27       	eor	r23, r23
    109a:	68 1b       	sub	r22, r24
    109c:	79 0b       	sbc	r23, r25
    109e:	88 27       	eor	r24, r24
    10a0:	77 fd       	sbrc	r23, 7
    10a2:	80 95       	com	r24
    10a4:	98 2f       	mov	r25, r24
    10a6:	0e 94 57 0c 	call	0x18ae	; 0x18ae <__floatsisf>
    10aa:	9b 01       	movw	r18, r22
    10ac:	ac 01       	movw	r20, r24
    10ae:	c4 01       	movw	r24, r8
    10b0:	b3 01       	movw	r22, r6
    10b2:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <__mulsf3>
}
    10b6:	cf 91       	pop	r28
    10b8:	df 91       	pop	r29
    10ba:	1f 91       	pop	r17
    10bc:	0f 91       	pop	r16
    10be:	ff 90       	pop	r15
    10c0:	ef 90       	pop	r14
    10c2:	df 90       	pop	r13
    10c4:	cf 90       	pop	r12
    10c6:	bf 90       	pop	r11
    10c8:	af 90       	pop	r10
    10ca:	9f 90       	pop	r9
    10cc:	8f 90       	pop	r8
    10ce:	7f 90       	pop	r7
    10d0:	6f 90       	pop	r6
    10d2:	5f 90       	pop	r5
    10d4:	4f 90       	pop	r4
    10d6:	3f 90       	pop	r3
    10d8:	2f 90       	pop	r2
    10da:	08 95       	ret

000010dc <_Z9constrainddd>:

double constrain(double nUm,double uPper,double lOwer)
{
    10dc:	6f 92       	push	r6
    10de:	7f 92       	push	r7
    10e0:	8f 92       	push	r8
    10e2:	9f 92       	push	r9
    10e4:	af 92       	push	r10
    10e6:	bf 92       	push	r11
    10e8:	cf 92       	push	r12
    10ea:	df 92       	push	r13
    10ec:	ef 92       	push	r14
    10ee:	ff 92       	push	r15
    10f0:	0f 93       	push	r16
    10f2:	1f 93       	push	r17
    10f4:	96 2e       	mov	r9, r22
    10f6:	87 2e       	mov	r8, r23
    10f8:	78 2e       	mov	r7, r24
    10fa:	69 2e       	mov	r6, r25
    10fc:	d2 2e       	mov	r13, r18
    10fe:	c3 2e       	mov	r12, r19
    1100:	b4 2e       	mov	r11, r20
    1102:	a5 2e       	mov	r10, r21
	if(nUm<uPper){
    1104:	2d 2d       	mov	r18, r13
    1106:	3c 2d       	mov	r19, r12
    1108:	4b 2d       	mov	r20, r11
    110a:	5a 2d       	mov	r21, r10
    110c:	0e 94 b8 0b 	call	0x1770	; 0x1770 <__cmpsf2>
    1110:	88 23       	and	r24, r24
    1112:	ac f0       	brlt	.+42     	; 0x113e <_Z9constrainddd+0x62>
		return uPper;}
	else if(nUm>lOwer){
    1114:	69 2d       	mov	r22, r9
    1116:	78 2d       	mov	r23, r8
    1118:	87 2d       	mov	r24, r7
    111a:	96 2d       	mov	r25, r6
    111c:	2e 2d       	mov	r18, r14
    111e:	3f 2d       	mov	r19, r15
    1120:	40 2f       	mov	r20, r16
    1122:	51 2f       	mov	r21, r17
    1124:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <__gesf2>
    1128:	18 16       	cp	r1, r24
    112a:	2c f4       	brge	.+10     	; 0x1136 <_Z9constrainddd+0x5a>
		return lOwer;}
    112c:	de 2c       	mov	r13, r14
    112e:	cf 2c       	mov	r12, r15
    1130:	b0 2e       	mov	r11, r16
    1132:	a1 2e       	mov	r10, r17
    1134:	04 c0       	rjmp	.+8      	; 0x113e <_Z9constrainddd+0x62>
	else 
	return nUm;	
    1136:	d9 2c       	mov	r13, r9
    1138:	c8 2c       	mov	r12, r8
    113a:	b7 2c       	mov	r11, r7
    113c:	a6 2c       	mov	r10, r6
}
    113e:	6d 2d       	mov	r22, r13
    1140:	7c 2d       	mov	r23, r12
    1142:	8b 2d       	mov	r24, r11
    1144:	9a 2d       	mov	r25, r10
    1146:	1f 91       	pop	r17
    1148:	0f 91       	pop	r16
    114a:	ff 90       	pop	r15
    114c:	ef 90       	pop	r14
    114e:	df 90       	pop	r13
    1150:	cf 90       	pop	r12
    1152:	bf 90       	pop	r11
    1154:	af 90       	pop	r10
    1156:	9f 90       	pop	r9
    1158:	8f 90       	pop	r8
    115a:	7f 90       	pop	r7
    115c:	6f 90       	pop	r6
    115e:	08 95       	ret

00001160 <_Z15attachIntteruptiPFvvEi>:
void attachIntterupt(int pIn, void (*iSrfunc)(void), int cOmpare)		//cOmpare:LOW=0,HIGH1,RISING=2,FALLING=3
{
	sei();
    1160:	78 94       	sei
	cAllisr=iSrfunc;
    1162:	70 93 b5 02 	sts	0x02B5, r23
    1166:	60 93 b4 02 	sts	0x02B4, r22
	switch(pIn)	  //enabling interrupt pin
    116a:	83 30       	cpi	r24, 0x03	; 3
    116c:	91 05       	cpc	r25, r1
    116e:	09 f4       	brne	.+2      	; 0x1172 <_Z15attachIntteruptiPFvvEi+0x12>
    1170:	7d c0       	rjmp	.+250    	; 0x126c <_Z15attachIntteruptiPFvvEi+0x10c>
    1172:	84 30       	cpi	r24, 0x04	; 4
    1174:	91 05       	cpc	r25, r1
    1176:	54 f4       	brge	.+20     	; 0x118c <_Z15attachIntteruptiPFvvEi+0x2c>
    1178:	81 30       	cpi	r24, 0x01	; 1
    117a:	91 05       	cpc	r25, r1
    117c:	c9 f1       	breq	.+114    	; 0x11f0 <_Z15attachIntteruptiPFvvEi+0x90>
    117e:	82 30       	cpi	r24, 0x02	; 2
    1180:	91 05       	cpc	r25, r1
    1182:	0c f0       	brlt	.+2      	; 0x1186 <_Z15attachIntteruptiPFvvEi+0x26>
    1184:	54 c0       	rjmp	.+168    	; 0x122e <_Z15attachIntteruptiPFvvEi+0xce>
    1186:	00 97       	sbiw	r24, 0x00	; 0
    1188:	91 f0       	breq	.+36     	; 0x11ae <_Z15attachIntteruptiPFvvEi+0x4e>
    118a:	0b c1       	rjmp	.+534    	; 0x13a2 <_Z15attachIntteruptiPFvvEi+0x242>
    118c:	85 30       	cpi	r24, 0x05	; 5
    118e:	91 05       	cpc	r25, r1
    1190:	09 f4       	brne	.+2      	; 0x1194 <_Z15attachIntteruptiPFvvEi+0x34>
    1192:	aa c0       	rjmp	.+340    	; 0x12e8 <_Z15attachIntteruptiPFvvEi+0x188>
    1194:	85 30       	cpi	r24, 0x05	; 5
    1196:	91 05       	cpc	r25, r1
    1198:	0c f4       	brge	.+2      	; 0x119c <_Z15attachIntteruptiPFvvEi+0x3c>
    119a:	87 c0       	rjmp	.+270    	; 0x12aa <_Z15attachIntteruptiPFvvEi+0x14a>
    119c:	86 30       	cpi	r24, 0x06	; 6
    119e:	91 05       	cpc	r25, r1
    11a0:	09 f4       	brne	.+2      	; 0x11a4 <_Z15attachIntteruptiPFvvEi+0x44>
    11a2:	c1 c0       	rjmp	.+386    	; 0x1326 <_Z15attachIntteruptiPFvvEi+0x1c6>
    11a4:	87 30       	cpi	r24, 0x07	; 7
    11a6:	91 05       	cpc	r25, r1
    11a8:	09 f0       	breq	.+2      	; 0x11ac <_Z15attachIntteruptiPFvvEi+0x4c>
    11aa:	fb c0       	rjmp	.+502    	; 0x13a2 <_Z15attachIntteruptiPFvvEi+0x242>
    11ac:	db c0       	rjmp	.+438    	; 0x1364 <_Z15attachIntteruptiPFvvEi+0x204>
	{
		case 0:
		EIMSK|=1<<INT0;
    11ae:	e8 9a       	sbi	0x1d, 0	; 29
		switch(cOmpare){
    11b0:	43 30       	cpi	r20, 0x03	; 3
    11b2:	51 05       	cpc	r21, r1
    11b4:	61 f0       	breq	.+24     	; 0x11ce <_Z15attachIntteruptiPFvvEi+0x6e>
    11b6:	44 30       	cpi	r20, 0x04	; 4
    11b8:	51 05       	cpc	r21, r1
    11ba:	79 f0       	breq	.+30     	; 0x11da <_Z15attachIntteruptiPFvvEi+0x7a>
    11bc:	42 30       	cpi	r20, 0x02	; 2
    11be:	51 05       	cpc	r21, r1
    11c0:	91 f4       	brne	.+36     	; 0x11e6 <_Z15attachIntteruptiPFvvEi+0x86>
			case 2:
			EICRA|=(1<<ISC00)|(1<<ISC01);
    11c2:	e9 e6       	ldi	r30, 0x69	; 105
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	80 81       	ld	r24, Z
    11c8:	83 60       	ori	r24, 0x03	; 3
    11ca:	80 83       	st	Z, r24
			break;
    11cc:	08 95       	ret
			case 3:
			EICRA|=(0<<ISC00)|(1<<ISC01);
    11ce:	e9 e6       	ldi	r30, 0x69	; 105
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	80 81       	ld	r24, Z
    11d4:	82 60       	ori	r24, 0x02	; 2
    11d6:	80 83       	st	Z, r24
			break;
    11d8:	08 95       	ret
			case 4:
			EICRA|=(1<<ISC00)|(0<<ISC01);
    11da:	e9 e6       	ldi	r30, 0x69	; 105
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	80 81       	ld	r24, Z
    11e0:	81 60       	ori	r24, 0x01	; 1
    11e2:	80 83       	st	Z, r24
			break;
    11e4:	08 95       	ret
			default:
			EICRA|=(0<<ISC00)|(0<<ISC01);
    11e6:	e9 e6       	ldi	r30, 0x69	; 105
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	80 81       	ld	r24, Z
    11ec:	80 83       	st	Z, r24
    11ee:	08 95       	ret
>>>>>>> parent of 1e7bf21... Included Cytron.h
=======
    132a:	e9 e6       	ldi	r30, 0x69	; 105
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	80 81       	ld	r24, Z
    1330:	80 83       	st	Z, r24
    1332:	08 95       	ret
>>>>>>> parent of 6ea3b60... Sinosudal Wave travelling
		}
		break;

		case 1:
		EIMSK|=1<<INT1;
<<<<<<< HEAD
<<<<<<< HEAD
    132e:	e9 9a       	sbi	0x1d, 1	; 29
=======
    1334:	e9 9a       	sbi	0x1d, 1	; 29
>>>>>>> parent of 6ea3b60... Sinosudal Wave travelling
                switch(cOmpare)
    1336:	43 30       	cpi	r20, 0x03	; 3
    1338:	51 05       	cpc	r21, r1
    133a:	61 f0       	breq	.+24     	; 0x1354 <_Z15attachIntteruptiPFvvEi+0xb0>
    133c:	44 30       	cpi	r20, 0x04	; 4
    133e:	51 05       	cpc	r21, r1
    1340:	69 f0       	breq	.+26     	; 0x135c <_Z15attachIntteruptiPFvvEi+0xb8>
    1342:	42 30       	cpi	r20, 0x02	; 2
    1344:	51 05       	cpc	r21, r1
    1346:	81 f4       	brne	.+32     	; 0x1368 <_Z15attachIntteruptiPFvvEi+0xc4>
		{
			case 2:
			EICRA|=(1<<ISC10)|(1<<ISC11);
    1348:	e9 e6       	ldi	r30, 0x69	; 105
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	80 81       	ld	r24, Z
    134e:	8c 60       	ori	r24, 0x0C	; 12
    1350:	80 83       	st	Z, r24
			break;
    1352:	08 95       	ret
			case 3:
			EICRA=(0<<ISC10)|(1<<ISC11);
    1354:	88 e0       	ldi	r24, 0x08	; 8
    1356:	80 93 69 00 	sts	0x0069, r24
			break;
    135a:	08 95       	ret
			case 4:
			EICRA|=(1<<ISC10)|(0<<ISC11);
    135c:	e9 e6       	ldi	r30, 0x69	; 105
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	80 81       	ld	r24, Z
    1362:	84 60       	ori	r24, 0x04	; 4
    1364:	80 83       	st	Z, r24
			break;
    1366:	08 95       	ret
			default:
			EICRA|=(0<<ISC10)|(0<<ISC11);
<<<<<<< HEAD
    1362:	e9 e6       	ldi	r30, 0x69	; 105
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	80 81       	ld	r24, Z
    1368:	80 83       	st	Z, r24
    136a:	08 95       	ret
=======
    11f0:	e9 9a       	sbi	0x1d, 1	; 29
                switch(cOmpare)
    11f2:	43 30       	cpi	r20, 0x03	; 3
    11f4:	51 05       	cpc	r21, r1
    11f6:	61 f0       	breq	.+24     	; 0x1210 <_Z15attachIntteruptiPFvvEi+0xb0>
    11f8:	44 30       	cpi	r20, 0x04	; 4
    11fa:	51 05       	cpc	r21, r1
    11fc:	69 f0       	breq	.+26     	; 0x1218 <_Z15attachIntteruptiPFvvEi+0xb8>
    11fe:	42 30       	cpi	r20, 0x02	; 2
    1200:	51 05       	cpc	r21, r1
    1202:	81 f4       	brne	.+32     	; 0x1224 <_Z15attachIntteruptiPFvvEi+0xc4>
		{
			case 2:
			EICRA|=(1<<ISC10)|(1<<ISC11);
    1204:	e9 e6       	ldi	r30, 0x69	; 105
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	80 81       	ld	r24, Z
    120a:	8c 60       	ori	r24, 0x0C	; 12
    120c:	80 83       	st	Z, r24
			break;
    120e:	08 95       	ret
			case 3:
			EICRA=(0<<ISC10)|(1<<ISC11);
    1210:	88 e0       	ldi	r24, 0x08	; 8
    1212:	80 93 69 00 	sts	0x0069, r24
			break;
    1216:	08 95       	ret
			case 4:
			EICRA|=(1<<ISC10)|(0<<ISC11);
    1218:	e9 e6       	ldi	r30, 0x69	; 105
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	80 81       	ld	r24, Z
    121e:	84 60       	ori	r24, 0x04	; 4
    1220:	80 83       	st	Z, r24
			break;
    1222:	08 95       	ret
			default:
			EICRA|=(0<<ISC10)|(0<<ISC11);
    1224:	e9 e6       	ldi	r30, 0x69	; 105
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	80 81       	ld	r24, Z
    122a:	80 83       	st	Z, r24
    122c:	08 95       	ret
>>>>>>> parent of 1e7bf21... Included Cytron.h
=======
    1368:	e9 e6       	ldi	r30, 0x69	; 105
    136a:	f0 e0       	ldi	r31, 0x00	; 0
    136c:	80 81       	ld	r24, Z
    136e:	80 83       	st	Z, r24
    1370:	08 95       	ret
>>>>>>> parent of 6ea3b60... Sinosudal Wave travelling
		}
		break;
		
		case 2:
		EIMSK|=1<<INT2;
<<<<<<< HEAD
<<<<<<< HEAD
    136c:	ea 9a       	sbi	0x1d, 2	; 29
=======
    1372:	ea 9a       	sbi	0x1d, 2	; 29
>>>>>>> parent of 6ea3b60... Sinosudal Wave travelling
		switch(cOmpare)
    1374:	43 30       	cpi	r20, 0x03	; 3
    1376:	51 05       	cpc	r21, r1
    1378:	61 f0       	breq	.+24     	; 0x1392 <_Z15attachIntteruptiPFvvEi+0xee>
    137a:	44 30       	cpi	r20, 0x04	; 4
    137c:	51 05       	cpc	r21, r1
    137e:	69 f0       	breq	.+26     	; 0x139a <_Z15attachIntteruptiPFvvEi+0xf6>
    1380:	42 30       	cpi	r20, 0x02	; 2
    1382:	51 05       	cpc	r21, r1
    1384:	81 f4       	brne	.+32     	; 0x13a6 <_Z15attachIntteruptiPFvvEi+0x102>
		{
			case 2:
			EICRA|=(1<<ISC20)|(1<<ISC21);
    1386:	e9 e6       	ldi	r30, 0x69	; 105
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	80 81       	ld	r24, Z
    138c:	80 63       	ori	r24, 0x30	; 48
    138e:	80 83       	st	Z, r24
			break;
    1390:	08 95       	ret
			case 3:
			EICRA=(0<<ISC20)|(1<<ISC21);
    1392:	80 e2       	ldi	r24, 0x20	; 32
    1394:	80 93 69 00 	sts	0x0069, r24
			break;
    1398:	08 95       	ret
			case 4:
			EICRA|=(1<<ISC20)|(0<<ISC21);
    139a:	e9 e6       	ldi	r30, 0x69	; 105
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	80 81       	ld	r24, Z
    13a0:	80 61       	ori	r24, 0x10	; 16
    13a2:	80 83       	st	Z, r24
			break;
    13a4:	08 95       	ret
			default:
			EICRA|=(0<<ISC20)|(0<<ISC21);
<<<<<<< HEAD
    13a0:	e9 e6       	ldi	r30, 0x69	; 105
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	80 81       	ld	r24, Z
    13a6:	80 83       	st	Z, r24
    13a8:	08 95       	ret
=======
    122e:	ea 9a       	sbi	0x1d, 2	; 29
		switch(cOmpare)
    1230:	43 30       	cpi	r20, 0x03	; 3
    1232:	51 05       	cpc	r21, r1
    1234:	61 f0       	breq	.+24     	; 0x124e <_Z15attachIntteruptiPFvvEi+0xee>
    1236:	44 30       	cpi	r20, 0x04	; 4
    1238:	51 05       	cpc	r21, r1
    123a:	69 f0       	breq	.+26     	; 0x1256 <_Z15attachIntteruptiPFvvEi+0xf6>
    123c:	42 30       	cpi	r20, 0x02	; 2
    123e:	51 05       	cpc	r21, r1
    1240:	81 f4       	brne	.+32     	; 0x1262 <_Z15attachIntteruptiPFvvEi+0x102>
		{
			case 2:
			EICRA|=(1<<ISC20)|(1<<ISC21);
    1242:	e9 e6       	ldi	r30, 0x69	; 105
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	80 81       	ld	r24, Z
    1248:	80 63       	ori	r24, 0x30	; 48
    124a:	80 83       	st	Z, r24
			break;
    124c:	08 95       	ret
			case 3:
			EICRA=(0<<ISC20)|(1<<ISC21);
    124e:	80 e2       	ldi	r24, 0x20	; 32
    1250:	80 93 69 00 	sts	0x0069, r24
			break;
    1254:	08 95       	ret
			case 4:
			EICRA|=(1<<ISC20)|(0<<ISC21);
    1256:	e9 e6       	ldi	r30, 0x69	; 105
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	80 81       	ld	r24, Z
    125c:	80 61       	ori	r24, 0x10	; 16
    125e:	80 83       	st	Z, r24
			break;
    1260:	08 95       	ret
			default:
			EICRA|=(0<<ISC20)|(0<<ISC21);
    1262:	e9 e6       	ldi	r30, 0x69	; 105
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	80 81       	ld	r24, Z
    1268:	80 83       	st	Z, r24
    126a:	08 95       	ret
>>>>>>> parent of 1e7bf21... Included Cytron.h
=======
    13a6:	e9 e6       	ldi	r30, 0x69	; 105
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	80 81       	ld	r24, Z
    13ac:	80 83       	st	Z, r24
    13ae:	08 95       	ret
>>>>>>> parent of 6ea3b60... Sinosudal Wave travelling
		}
		break;
		
		case 3:
		EIMSK|=1<<INT3;
<<<<<<< HEAD
<<<<<<< HEAD
    13aa:	eb 9a       	sbi	0x1d, 3	; 29
=======
    13b0:	eb 9a       	sbi	0x1d, 3	; 29
>>>>>>> parent of 6ea3b60... Sinosudal Wave travelling
		switch(cOmpare)
    13b2:	43 30       	cpi	r20, 0x03	; 3
    13b4:	51 05       	cpc	r21, r1
    13b6:	61 f0       	breq	.+24     	; 0x13d0 <_Z15attachIntteruptiPFvvEi+0x12c>
    13b8:	44 30       	cpi	r20, 0x04	; 4
    13ba:	51 05       	cpc	r21, r1
    13bc:	69 f0       	breq	.+26     	; 0x13d8 <_Z15attachIntteruptiPFvvEi+0x134>
    13be:	42 30       	cpi	r20, 0x02	; 2
    13c0:	51 05       	cpc	r21, r1
    13c2:	81 f4       	brne	.+32     	; 0x13e4 <_Z15attachIntteruptiPFvvEi+0x140>
		{
			case 2:
			EICRA|=(1<<ISC30)|(1<<ISC31);
    13c4:	e9 e6       	ldi	r30, 0x69	; 105
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	80 81       	ld	r24, Z
    13ca:	80 6c       	ori	r24, 0xC0	; 192
    13cc:	80 83       	st	Z, r24
			break;
    13ce:	08 95       	ret
			case 3:
			EICRA=(0<<ISC30)|(1<<ISC31);
    13d0:	80 e8       	ldi	r24, 0x80	; 128
    13d2:	80 93 69 00 	sts	0x0069, r24
			break;
    13d6:	08 95       	ret
			case 4:
			EICRA|=(1<<ISC30)|(0<<ISC31);
    13d8:	e9 e6       	ldi	r30, 0x69	; 105
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	80 81       	ld	r24, Z
    13de:	80 64       	ori	r24, 0x40	; 64
    13e0:	80 83       	st	Z, r24
			break;
    13e2:	08 95       	ret
			default:
			EICRA|=(0<<ISC30)|(0<<ISC31);
<<<<<<< HEAD
    13de:	e9 e6       	ldi	r30, 0x69	; 105
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	80 81       	ld	r24, Z
    13e4:	80 83       	st	Z, r24
    13e6:	08 95       	ret
=======
    126c:	eb 9a       	sbi	0x1d, 3	; 29
		switch(cOmpare)
    126e:	43 30       	cpi	r20, 0x03	; 3
    1270:	51 05       	cpc	r21, r1
    1272:	61 f0       	breq	.+24     	; 0x128c <_Z15attachIntteruptiPFvvEi+0x12c>
    1274:	44 30       	cpi	r20, 0x04	; 4
    1276:	51 05       	cpc	r21, r1
    1278:	69 f0       	breq	.+26     	; 0x1294 <_Z15attachIntteruptiPFvvEi+0x134>
    127a:	42 30       	cpi	r20, 0x02	; 2
    127c:	51 05       	cpc	r21, r1
    127e:	81 f4       	brne	.+32     	; 0x12a0 <_Z15attachIntteruptiPFvvEi+0x140>
		{
			case 2:
			EICRA|=(1<<ISC30)|(1<<ISC31);
    1280:	e9 e6       	ldi	r30, 0x69	; 105
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	80 81       	ld	r24, Z
    1286:	80 6c       	ori	r24, 0xC0	; 192
    1288:	80 83       	st	Z, r24
			break;
    128a:	08 95       	ret
			case 3:
			EICRA=(0<<ISC30)|(1<<ISC31);
    128c:	80 e8       	ldi	r24, 0x80	; 128
    128e:	80 93 69 00 	sts	0x0069, r24
			break;
    1292:	08 95       	ret
			case 4:
			EICRA|=(1<<ISC30)|(0<<ISC31);
    1294:	e9 e6       	ldi	r30, 0x69	; 105
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	80 81       	ld	r24, Z
    129a:	80 64       	ori	r24, 0x40	; 64
    129c:	80 83       	st	Z, r24
			break;
    129e:	08 95       	ret
			default:
			EICRA|=(0<<ISC30)|(0<<ISC31);
    12a0:	e9 e6       	ldi	r30, 0x69	; 105
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	80 83       	st	Z, r24
    12a8:	08 95       	ret
>>>>>>> parent of 1e7bf21... Included Cytron.h
=======
    13e4:	e9 e6       	ldi	r30, 0x69	; 105
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	80 81       	ld	r24, Z
    13ea:	80 83       	st	Z, r24
    13ec:	08 95       	ret
>>>>>>> parent of 6ea3b60... Sinosudal Wave travelling
		}
		break;
		
		case 4:
		EIMSK|=1<<INT4;
<<<<<<< HEAD
<<<<<<< HEAD
    13e8:	ec 9a       	sbi	0x1d, 4	; 29
=======
    13ee:	ec 9a       	sbi	0x1d, 4	; 29
>>>>>>> parent of 6ea3b60... Sinosudal Wave travelling
                switch(cOmpare)
    13f0:	43 30       	cpi	r20, 0x03	; 3
    13f2:	51 05       	cpc	r21, r1
    13f4:	61 f0       	breq	.+24     	; 0x140e <_Z15attachIntteruptiPFvvEi+0x16a>
    13f6:	44 30       	cpi	r20, 0x04	; 4
    13f8:	51 05       	cpc	r21, r1
    13fa:	69 f0       	breq	.+26     	; 0x1416 <_Z15attachIntteruptiPFvvEi+0x172>
    13fc:	42 30       	cpi	r20, 0x02	; 2
    13fe:	51 05       	cpc	r21, r1
    1400:	81 f4       	brne	.+32     	; 0x1422 <_Z15attachIntteruptiPFvvEi+0x17e>
		{
			case 2:
			EICRB|=(1<<ISC40)|(1<<ISC41);
    1402:	ea e6       	ldi	r30, 0x6A	; 106
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	80 81       	ld	r24, Z
    1408:	83 60       	ori	r24, 0x03	; 3
    140a:	80 83       	st	Z, r24
			break;
    140c:	08 95       	ret
			case 3:
			EICRB=(0<<ISC40)|(1<<ISC41);
    140e:	82 e0       	ldi	r24, 0x02	; 2
    1410:	80 93 6a 00 	sts	0x006A, r24
			break;
    1414:	08 95       	ret
			case 4:
			EICRB|=(1<<ISC40)|(0<<ISC41);
    1416:	ea e6       	ldi	r30, 0x6A	; 106
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	80 81       	ld	r24, Z
    141c:	81 60       	ori	r24, 0x01	; 1
    141e:	80 83       	st	Z, r24
			break;
    1420:	08 95       	ret
			default:
			EICRB|=(0<<ISC40)|(0<<ISC41);
<<<<<<< HEAD
    141c:	ea e6       	ldi	r30, 0x6A	; 106
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	80 81       	ld	r24, Z
    1422:	80 83       	st	Z, r24
    1424:	08 95       	ret
=======
    12aa:	ec 9a       	sbi	0x1d, 4	; 29
                switch(cOmpare)
    12ac:	43 30       	cpi	r20, 0x03	; 3
    12ae:	51 05       	cpc	r21, r1
    12b0:	61 f0       	breq	.+24     	; 0x12ca <_Z15attachIntteruptiPFvvEi+0x16a>
    12b2:	44 30       	cpi	r20, 0x04	; 4
    12b4:	51 05       	cpc	r21, r1
    12b6:	69 f0       	breq	.+26     	; 0x12d2 <_Z15attachIntteruptiPFvvEi+0x172>
    12b8:	42 30       	cpi	r20, 0x02	; 2
    12ba:	51 05       	cpc	r21, r1
    12bc:	81 f4       	brne	.+32     	; 0x12de <_Z15attachIntteruptiPFvvEi+0x17e>
		{
			case 2:
			EICRB|=(1<<ISC40)|(1<<ISC41);
    12be:	ea e6       	ldi	r30, 0x6A	; 106
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	80 81       	ld	r24, Z
    12c4:	83 60       	ori	r24, 0x03	; 3
    12c6:	80 83       	st	Z, r24
			break;
    12c8:	08 95       	ret
			case 3:
			EICRB=(0<<ISC40)|(1<<ISC41);
    12ca:	82 e0       	ldi	r24, 0x02	; 2
    12cc:	80 93 6a 00 	sts	0x006A, r24
			break;
    12d0:	08 95       	ret
			case 4:
			EICRB|=(1<<ISC40)|(0<<ISC41);
    12d2:	ea e6       	ldi	r30, 0x6A	; 106
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	80 81       	ld	r24, Z
    12d8:	81 60       	ori	r24, 0x01	; 1
    12da:	80 83       	st	Z, r24
			break;
    12dc:	08 95       	ret
			default:
			EICRB|=(0<<ISC40)|(0<<ISC41);
    12de:	ea e6       	ldi	r30, 0x6A	; 106
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	80 81       	ld	r24, Z
    12e4:	80 83       	st	Z, r24
    12e6:	08 95       	ret
>>>>>>> parent of 1e7bf21... Included Cytron.h
=======
    1422:	ea e6       	ldi	r30, 0x6A	; 106
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	80 81       	ld	r24, Z
    1428:	80 83       	st	Z, r24
    142a:	08 95       	ret
>>>>>>> parent of 6ea3b60... Sinosudal Wave travelling
		}
		break;
		
		case 5:
		EIMSK|=1<<INT5;
<<<<<<< HEAD
<<<<<<< HEAD
    1426:	ed 9a       	sbi	0x1d, 5	; 29
=======
    142c:	ed 9a       	sbi	0x1d, 5	; 29
>>>>>>> parent of 6ea3b60... Sinosudal Wave travelling
		switch(cOmpare)
    142e:	43 30       	cpi	r20, 0x03	; 3
    1430:	51 05       	cpc	r21, r1
    1432:	61 f0       	breq	.+24     	; 0x144c <_Z15attachIntteruptiPFvvEi+0x1a8>
    1434:	44 30       	cpi	r20, 0x04	; 4
    1436:	51 05       	cpc	r21, r1
    1438:	69 f0       	breq	.+26     	; 0x1454 <_Z15attachIntteruptiPFvvEi+0x1b0>
    143a:	42 30       	cpi	r20, 0x02	; 2
    143c:	51 05       	cpc	r21, r1
    143e:	81 f4       	brne	.+32     	; 0x1460 <_Z15attachIntteruptiPFvvEi+0x1bc>
		{
			case 2:
			EICRB|=(1<<ISC50)|(1<<ISC51);
    1440:	ea e6       	ldi	r30, 0x6A	; 106
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	80 81       	ld	r24, Z
    1446:	8c 60       	ori	r24, 0x0C	; 12
    1448:	80 83       	st	Z, r24
			break;
    144a:	08 95       	ret
			case 3:
			EICRB=(0<<ISC50)|(1<<ISC51);
    144c:	88 e0       	ldi	r24, 0x08	; 8
    144e:	80 93 6a 00 	sts	0x006A, r24
			break;
    1452:	08 95       	ret
			case 4:
			EICRB|=(1<<ISC50)|(0<<ISC51);
    1454:	ea e6       	ldi	r30, 0x6A	; 106
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	80 81       	ld	r24, Z
    145a:	84 60       	ori	r24, 0x04	; 4
    145c:	80 83       	st	Z, r24
			break;
    145e:	08 95       	ret
			default:
                 	EICRB|=(0<<ISC40)|(0<<ISC41);
<<<<<<< HEAD
    145a:	ea e6       	ldi	r30, 0x6A	; 106
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	80 81       	ld	r24, Z
    1460:	80 83       	st	Z, r24
    1462:	08 95       	ret
=======
    12e8:	ed 9a       	sbi	0x1d, 5	; 29
		switch(cOmpare)
    12ea:	43 30       	cpi	r20, 0x03	; 3
    12ec:	51 05       	cpc	r21, r1
    12ee:	61 f0       	breq	.+24     	; 0x1308 <_Z15attachIntteruptiPFvvEi+0x1a8>
    12f0:	44 30       	cpi	r20, 0x04	; 4
    12f2:	51 05       	cpc	r21, r1
    12f4:	69 f0       	breq	.+26     	; 0x1310 <_Z15attachIntteruptiPFvvEi+0x1b0>
    12f6:	42 30       	cpi	r20, 0x02	; 2
    12f8:	51 05       	cpc	r21, r1
    12fa:	81 f4       	brne	.+32     	; 0x131c <_Z15attachIntteruptiPFvvEi+0x1bc>
		{
			case 2:
			EICRB|=(1<<ISC50)|(1<<ISC51);
    12fc:	ea e6       	ldi	r30, 0x6A	; 106
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	80 81       	ld	r24, Z
    1302:	8c 60       	ori	r24, 0x0C	; 12
    1304:	80 83       	st	Z, r24
			break;
    1306:	08 95       	ret
			case 3:
			EICRB=(0<<ISC50)|(1<<ISC51);
    1308:	88 e0       	ldi	r24, 0x08	; 8
    130a:	80 93 6a 00 	sts	0x006A, r24
			break;
    130e:	08 95       	ret
			case 4:
			EICRB|=(1<<ISC50)|(0<<ISC51);
    1310:	ea e6       	ldi	r30, 0x6A	; 106
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	80 81       	ld	r24, Z
    1316:	84 60       	ori	r24, 0x04	; 4
    1318:	80 83       	st	Z, r24
			break;
    131a:	08 95       	ret
			default:
                 	EICRB|=(0<<ISC40)|(0<<ISC41);
    131c:	ea e6       	ldi	r30, 0x6A	; 106
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	80 81       	ld	r24, Z
    1322:	80 83       	st	Z, r24
    1324:	08 95       	ret
>>>>>>> parent of 1e7bf21... Included Cytron.h
=======
    1460:	ea e6       	ldi	r30, 0x6A	; 106
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	80 81       	ld	r24, Z
    1466:	80 83       	st	Z, r24
    1468:	08 95       	ret
>>>>>>> parent of 6ea3b60... Sinosudal Wave travelling
			
		}
		break;
		
		case 6:
		EIMSK|=1<<INT6;
<<<<<<< HEAD
<<<<<<< HEAD
    1464:	ee 9a       	sbi	0x1d, 6	; 29
=======
    146a:	ee 9a       	sbi	0x1d, 6	; 29
>>>>>>> parent of 6ea3b60... Sinosudal Wave travelling
	        switch(cOmpare)
    146c:	43 30       	cpi	r20, 0x03	; 3
    146e:	51 05       	cpc	r21, r1
    1470:	61 f0       	breq	.+24     	; 0x148a <_Z15attachIntteruptiPFvvEi+0x1e6>
    1472:	44 30       	cpi	r20, 0x04	; 4
    1474:	51 05       	cpc	r21, r1
    1476:	69 f0       	breq	.+26     	; 0x1492 <_Z15attachIntteruptiPFvvEi+0x1ee>
    1478:	42 30       	cpi	r20, 0x02	; 2
    147a:	51 05       	cpc	r21, r1
    147c:	81 f4       	brne	.+32     	; 0x149e <_Z15attachIntteruptiPFvvEi+0x1fa>
		{
			case 2:
			EICRB|=(1<<ISC60)|(1<<ISC61);
    147e:	ea e6       	ldi	r30, 0x6A	; 106
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	80 81       	ld	r24, Z
    1484:	80 63       	ori	r24, 0x30	; 48
    1486:	80 83       	st	Z, r24
			break;
    1488:	08 95       	ret
			case 3:
			EICRB=(0<<ISC60)|(1<<ISC61);
    148a:	80 e2       	ldi	r24, 0x20	; 32
    148c:	80 93 6a 00 	sts	0x006A, r24
			break;
    1490:	08 95       	ret
			case 4:
			EICRB|=(1<<ISC60)|(0<<ISC61);
    1492:	ea e6       	ldi	r30, 0x6A	; 106
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	80 81       	ld	r24, Z
    1498:	80 61       	ori	r24, 0x10	; 16
    149a:	80 83       	st	Z, r24
			break;
    149c:	08 95       	ret
			default:
			EICRB|=(0<<ISC60)|(0<<ISC61);
<<<<<<< HEAD
    1498:	ea e6       	ldi	r30, 0x6A	; 106
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	80 81       	ld	r24, Z
    149e:	80 83       	st	Z, r24
    14a0:	08 95       	ret
=======
    1326:	ee 9a       	sbi	0x1d, 6	; 29
	        switch(cOmpare)
    1328:	43 30       	cpi	r20, 0x03	; 3
    132a:	51 05       	cpc	r21, r1
    132c:	61 f0       	breq	.+24     	; 0x1346 <_Z15attachIntteruptiPFvvEi+0x1e6>
    132e:	44 30       	cpi	r20, 0x04	; 4
    1330:	51 05       	cpc	r21, r1
    1332:	69 f0       	breq	.+26     	; 0x134e <_Z15attachIntteruptiPFvvEi+0x1ee>
    1334:	42 30       	cpi	r20, 0x02	; 2
    1336:	51 05       	cpc	r21, r1
    1338:	81 f4       	brne	.+32     	; 0x135a <_Z15attachIntteruptiPFvvEi+0x1fa>
		{
			case 2:
			EICRB|=(1<<ISC60)|(1<<ISC61);
    133a:	ea e6       	ldi	r30, 0x6A	; 106
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	80 81       	ld	r24, Z
    1340:	80 63       	ori	r24, 0x30	; 48
    1342:	80 83       	st	Z, r24
			break;
    1344:	08 95       	ret
			case 3:
			EICRB=(0<<ISC60)|(1<<ISC61);
    1346:	80 e2       	ldi	r24, 0x20	; 32
    1348:	80 93 6a 00 	sts	0x006A, r24
			break;
    134c:	08 95       	ret
			case 4:
			EICRB|=(1<<ISC60)|(0<<ISC61);
    134e:	ea e6       	ldi	r30, 0x6A	; 106
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	80 81       	ld	r24, Z
    1354:	80 61       	ori	r24, 0x10	; 16
    1356:	80 83       	st	Z, r24
			break;
    1358:	08 95       	ret
			default:
			EICRB|=(0<<ISC60)|(0<<ISC61);
    135a:	ea e6       	ldi	r30, 0x6A	; 106
    135c:	f0 e0       	ldi	r31, 0x00	; 0
    135e:	80 81       	ld	r24, Z
    1360:	80 83       	st	Z, r24
    1362:	08 95       	ret
>>>>>>> parent of 1e7bf21... Included Cytron.h
=======
    149e:	ea e6       	ldi	r30, 0x6A	; 106
    14a0:	f0 e0       	ldi	r31, 0x00	; 0
    14a2:	80 81       	ld	r24, Z
    14a4:	80 83       	st	Z, r24
    14a6:	08 95       	ret
>>>>>>> parent of 6ea3b60... Sinosudal Wave travelling
			
		}
		break;
		
		case 7:
		EIMSK|=1<<INT7;
<<<<<<< HEAD
<<<<<<< HEAD
    14a2:	ef 9a       	sbi	0x1d, 7	; 29
=======
    14a8:	ef 9a       	sbi	0x1d, 7	; 29
>>>>>>> parent of 6ea3b60... Sinosudal Wave travelling
		switch(cOmpare)
    14aa:	43 30       	cpi	r20, 0x03	; 3
    14ac:	51 05       	cpc	r21, r1
    14ae:	61 f0       	breq	.+24     	; 0x14c8 <_Z15attachIntteruptiPFvvEi+0x224>
    14b0:	44 30       	cpi	r20, 0x04	; 4
    14b2:	51 05       	cpc	r21, r1
    14b4:	69 f0       	breq	.+26     	; 0x14d0 <_Z15attachIntteruptiPFvvEi+0x22c>
    14b6:	42 30       	cpi	r20, 0x02	; 2
    14b8:	51 05       	cpc	r21, r1
    14ba:	81 f4       	brne	.+32     	; 0x14dc <_Z15attachIntteruptiPFvvEi+0x238>
		{
			case 2:
			EICRB|=(1<<ISC70)|(1<<ISC71);
    14bc:	ea e6       	ldi	r30, 0x6A	; 106
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	80 81       	ld	r24, Z
    14c2:	80 6c       	ori	r24, 0xC0	; 192
    14c4:	80 83       	st	Z, r24
			break;
    14c6:	08 95       	ret
			case 3:
			EICRB=(0<<ISC70)|(1<<ISC71);
    14c8:	80 e8       	ldi	r24, 0x80	; 128
    14ca:	80 93 6a 00 	sts	0x006A, r24
			break;
    14ce:	08 95       	ret
			case 4:
			EICRB|=(1<<ISC70)|(0<<ISC71);
    14d0:	ea e6       	ldi	r30, 0x6A	; 106
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	80 81       	ld	r24, Z
    14d6:	80 64       	ori	r24, 0x40	; 64
    14d8:	80 83       	st	Z, r24
			break;
    14da:	08 95       	ret
			default:
			EICRB|=(0<<ISC70)|(0<<ISC71);
<<<<<<< HEAD
    14d6:	ea e6       	ldi	r30, 0x6A	; 106
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	80 81       	ld	r24, Z
    14dc:	80 83       	st	Z, r24
    14de:	08 95       	ret
=======
    1364:	ef 9a       	sbi	0x1d, 7	; 29
		switch(cOmpare)
    1366:	43 30       	cpi	r20, 0x03	; 3
    1368:	51 05       	cpc	r21, r1
    136a:	61 f0       	breq	.+24     	; 0x1384 <_Z15attachIntteruptiPFvvEi+0x224>
    136c:	44 30       	cpi	r20, 0x04	; 4
    136e:	51 05       	cpc	r21, r1
    1370:	69 f0       	breq	.+26     	; 0x138c <_Z15attachIntteruptiPFvvEi+0x22c>
    1372:	42 30       	cpi	r20, 0x02	; 2
    1374:	51 05       	cpc	r21, r1
    1376:	81 f4       	brne	.+32     	; 0x1398 <_Z15attachIntteruptiPFvvEi+0x238>
		{
			case 2:
			EICRB|=(1<<ISC70)|(1<<ISC71);
    1378:	ea e6       	ldi	r30, 0x6A	; 106
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	80 81       	ld	r24, Z
    137e:	80 6c       	ori	r24, 0xC0	; 192
    1380:	80 83       	st	Z, r24
			break;
    1382:	08 95       	ret
			case 3:
			EICRB=(0<<ISC70)|(1<<ISC71);
    1384:	80 e8       	ldi	r24, 0x80	; 128
    1386:	80 93 6a 00 	sts	0x006A, r24
			break;
    138a:	08 95       	ret
			case 4:
			EICRB|=(1<<ISC70)|(0<<ISC71);
    138c:	ea e6       	ldi	r30, 0x6A	; 106
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	80 81       	ld	r24, Z
    1392:	80 64       	ori	r24, 0x40	; 64
    1394:	80 83       	st	Z, r24
			break;
    1396:	08 95       	ret
			default:
			EICRB|=(0<<ISC70)|(0<<ISC71);
    1398:	ea e6       	ldi	r30, 0x6A	; 106
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	80 81       	ld	r24, Z
    139e:	80 83       	st	Z, r24
    13a0:	08 95       	ret
>>>>>>> parent of 1e7bf21... Included Cytron.h
=======
    14dc:	ea e6       	ldi	r30, 0x6A	; 106
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 81       	ld	r24, Z
    14e2:	80 83       	st	Z, r24
    14e4:	08 95       	ret
>>>>>>> parent of 6ea3b60... Sinosudal Wave travelling
		}
		break;
		
	        default:EICRA|=(0<<ISC01)|(0<<ISC00);
<<<<<<< HEAD
<<<<<<< HEAD
    14e0:	e9 e6       	ldi	r30, 0x69	; 105
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	80 81       	ld	r24, Z
    14e6:	80 83       	st	Z, r24
    14e8:	08 95       	ret

000014ea <__vector_2>:
/*ISR(INT0_vect)
{
   cAllisr();
}*/
ISR(INT1_vect)
=======
    14e6:	e9 e6       	ldi	r30, 0x69	; 105
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	80 81       	ld	r24, Z
    14ec:	80 83       	st	Z, r24
    14ee:	08 95       	ret

000014f0 <__vector_1>:
	}
}
ISR(INT0_vect)
>>>>>>> parent of 6ea3b60... Sinosudal Wave travelling
{
    14f0:	1f 92       	push	r1
    14f2:	0f 92       	push	r0
    14f4:	0f b6       	in	r0, 0x3f	; 63
    14f6:	0f 92       	push	r0
    14f8:	0b b6       	in	r0, 0x3b	; 59
    14fa:	0f 92       	push	r0
    14fc:	11 24       	eor	r1, r1
    14fe:	2f 93       	push	r18
    1500:	3f 93       	push	r19
    1502:	4f 93       	push	r20
    1504:	5f 93       	push	r21
    1506:	6f 93       	push	r22
    1508:	7f 93       	push	r23
    150a:	8f 93       	push	r24
    150c:	9f 93       	push	r25
    150e:	af 93       	push	r26
    1510:	bf 93       	push	r27
    1512:	ef 93       	push	r30
    1514:	ff 93       	push	r31
   cAllisr();
<<<<<<< HEAD
    1510:	e0 91 b8 02 	lds	r30, 0x02B8
    1514:	f0 91 b9 02 	lds	r31, 0x02B9
    1518:	19 95       	eicall
}
    151a:	ff 91       	pop	r31
    151c:	ef 91       	pop	r30
    151e:	bf 91       	pop	r27
    1520:	af 91       	pop	r26
    1522:	9f 91       	pop	r25
    1524:	8f 91       	pop	r24
    1526:	7f 91       	pop	r23
    1528:	6f 91       	pop	r22
    152a:	5f 91       	pop	r21
    152c:	4f 91       	pop	r20
    152e:	3f 91       	pop	r19
    1530:	2f 91       	pop	r18
    1532:	0f 90       	pop	r0
    1534:	0b be       	out	0x3b, r0	; 59
    1536:	0f 90       	pop	r0
    1538:	0f be       	out	0x3f, r0	; 63
    153a:	0f 90       	pop	r0
    153c:	1f 90       	pop	r1
    153e:	18 95       	reti

00001540 <__vector_3>:
ISR(INT2_vect)
=======
    1516:	e0 91 b4 02 	lds	r30, 0x02B4
    151a:	f0 91 b5 02 	lds	r31, 0x02B5
    151e:	19 95       	eicall
}
    1520:	ff 91       	pop	r31
    1522:	ef 91       	pop	r30
    1524:	bf 91       	pop	r27
    1526:	af 91       	pop	r26
    1528:	9f 91       	pop	r25
    152a:	8f 91       	pop	r24
    152c:	7f 91       	pop	r23
    152e:	6f 91       	pop	r22
    1530:	5f 91       	pop	r21
    1532:	4f 91       	pop	r20
    1534:	3f 91       	pop	r19
    1536:	2f 91       	pop	r18
    1538:	0f 90       	pop	r0
    153a:	0b be       	out	0x3b, r0	; 59
    153c:	0f 90       	pop	r0
    153e:	0f be       	out	0x3f, r0	; 63
    1540:	0f 90       	pop	r0
    1542:	1f 90       	pop	r1
    1544:	18 95       	reti

00001546 <__vector_2>:
ISR(INT1_vect)
>>>>>>> parent of 6ea3b60... Sinosudal Wave travelling
{
    1546:	1f 92       	push	r1
    1548:	0f 92       	push	r0
    154a:	0f b6       	in	r0, 0x3f	; 63
    154c:	0f 92       	push	r0
    154e:	0b b6       	in	r0, 0x3b	; 59
    1550:	0f 92       	push	r0
    1552:	11 24       	eor	r1, r1
    1554:	2f 93       	push	r18
    1556:	3f 93       	push	r19
    1558:	4f 93       	push	r20
    155a:	5f 93       	push	r21
    155c:	6f 93       	push	r22
    155e:	7f 93       	push	r23
    1560:	8f 93       	push	r24
    1562:	9f 93       	push	r25
    1564:	af 93       	push	r26
    1566:	bf 93       	push	r27
    1568:	ef 93       	push	r30
    156a:	ff 93       	push	r31
   cAllisr();
<<<<<<< HEAD
    1566:	e0 91 b8 02 	lds	r30, 0x02B8
    156a:	f0 91 b9 02 	lds	r31, 0x02B9
    156e:	19 95       	eicall
}
    1570:	ff 91       	pop	r31
    1572:	ef 91       	pop	r30
    1574:	bf 91       	pop	r27
    1576:	af 91       	pop	r26
    1578:	9f 91       	pop	r25
    157a:	8f 91       	pop	r24
    157c:	7f 91       	pop	r23
    157e:	6f 91       	pop	r22
    1580:	5f 91       	pop	r21
    1582:	4f 91       	pop	r20
    1584:	3f 91       	pop	r19
    1586:	2f 91       	pop	r18
    1588:	0f 90       	pop	r0
    158a:	0b be       	out	0x3b, r0	; 59
    158c:	0f 90       	pop	r0
    158e:	0f be       	out	0x3f, r0	; 63
    1590:	0f 90       	pop	r0
    1592:	1f 90       	pop	r1
    1594:	18 95       	reti

00001596 <__vector_4>:
ISR(INT3_vect)
=======
    156c:	e0 91 b4 02 	lds	r30, 0x02B4
    1570:	f0 91 b5 02 	lds	r31, 0x02B5
    1574:	19 95       	eicall
}
    1576:	ff 91       	pop	r31
    1578:	ef 91       	pop	r30
    157a:	bf 91       	pop	r27
    157c:	af 91       	pop	r26
    157e:	9f 91       	pop	r25
    1580:	8f 91       	pop	r24
    1582:	7f 91       	pop	r23
    1584:	6f 91       	pop	r22
    1586:	5f 91       	pop	r21
    1588:	4f 91       	pop	r20
    158a:	3f 91       	pop	r19
    158c:	2f 91       	pop	r18
    158e:	0f 90       	pop	r0
    1590:	0b be       	out	0x3b, r0	; 59
    1592:	0f 90       	pop	r0
    1594:	0f be       	out	0x3f, r0	; 63
    1596:	0f 90       	pop	r0
    1598:	1f 90       	pop	r1
    159a:	18 95       	reti

0000159c <__vector_3>:
ISR(INT2_vect)
>>>>>>> parent of 6ea3b60... Sinosudal Wave travelling
{
    159c:	1f 92       	push	r1
    159e:	0f 92       	push	r0
    15a0:	0f b6       	in	r0, 0x3f	; 63
    15a2:	0f 92       	push	r0
    15a4:	0b b6       	in	r0, 0x3b	; 59
    15a6:	0f 92       	push	r0
    15a8:	11 24       	eor	r1, r1
    15aa:	2f 93       	push	r18
    15ac:	3f 93       	push	r19
    15ae:	4f 93       	push	r20
    15b0:	5f 93       	push	r21
    15b2:	6f 93       	push	r22
    15b4:	7f 93       	push	r23
    15b6:	8f 93       	push	r24
    15b8:	9f 93       	push	r25
    15ba:	af 93       	push	r26
    15bc:	bf 93       	push	r27
    15be:	ef 93       	push	r30
    15c0:	ff 93       	push	r31
   cAllisr();
<<<<<<< HEAD
    15bc:	e0 91 b8 02 	lds	r30, 0x02B8
    15c0:	f0 91 b9 02 	lds	r31, 0x02B9
    15c4:	19 95       	eicall
}
    15c6:	ff 91       	pop	r31
    15c8:	ef 91       	pop	r30
    15ca:	bf 91       	pop	r27
    15cc:	af 91       	pop	r26
    15ce:	9f 91       	pop	r25
    15d0:	8f 91       	pop	r24
    15d2:	7f 91       	pop	r23
    15d4:	6f 91       	pop	r22
    15d6:	5f 91       	pop	r21
    15d8:	4f 91       	pop	r20
    15da:	3f 91       	pop	r19
    15dc:	2f 91       	pop	r18
    15de:	0f 90       	pop	r0
    15e0:	0b be       	out	0x3b, r0	; 59
    15e2:	0f 90       	pop	r0
    15e4:	0f be       	out	0x3f, r0	; 63
    15e6:	0f 90       	pop	r0
    15e8:	1f 90       	pop	r1
    15ea:	18 95       	reti

000015ec <__vector_5>:
ISR(INT4_vect)
{
    15ec:	1f 92       	push	r1
    15ee:	0f 92       	push	r0
    15f0:	0f b6       	in	r0, 0x3f	; 63
    15f2:	0f 92       	push	r0
    15f4:	0b b6       	in	r0, 0x3b	; 59
    15f6:	0f 92       	push	r0
    15f8:	11 24       	eor	r1, r1
    15fa:	2f 93       	push	r18
    15fc:	3f 93       	push	r19
    15fe:	4f 93       	push	r20
    1600:	5f 93       	push	r21
    1602:	6f 93       	push	r22
    1604:	7f 93       	push	r23
    1606:	8f 93       	push	r24
    1608:	9f 93       	push	r25
    160a:	af 93       	push	r26
    160c:	bf 93       	push	r27
    160e:	ef 93       	push	r30
    1610:	ff 93       	push	r31
    cAllisr();
    1612:	e0 91 b8 02 	lds	r30, 0x02B8
    1616:	f0 91 b9 02 	lds	r31, 0x02B9
    161a:	19 95       	eicall
}
    161c:	ff 91       	pop	r31
    161e:	ef 91       	pop	r30
    1620:	bf 91       	pop	r27
    1622:	af 91       	pop	r26
    1624:	9f 91       	pop	r25
    1626:	8f 91       	pop	r24
    1628:	7f 91       	pop	r23
    162a:	6f 91       	pop	r22
    162c:	5f 91       	pop	r21
    162e:	4f 91       	pop	r20
    1630:	3f 91       	pop	r19
    1632:	2f 91       	pop	r18
    1634:	0f 90       	pop	r0
    1636:	0b be       	out	0x3b, r0	; 59
    1638:	0f 90       	pop	r0
    163a:	0f be       	out	0x3f, r0	; 63
    163c:	0f 90       	pop	r0
    163e:	1f 90       	pop	r1
    1640:	18 95       	reti

00001642 <__vector_6>:
ISR(INT5_vect)
=======
    15c2:	e0 91 b4 02 	lds	r30, 0x02B4
    15c6:	f0 91 b5 02 	lds	r31, 0x02B5
    15ca:	19 95       	eicall
}
    15cc:	ff 91       	pop	r31
    15ce:	ef 91       	pop	r30
    15d0:	bf 91       	pop	r27
    15d2:	af 91       	pop	r26
    15d4:	9f 91       	pop	r25
    15d6:	8f 91       	pop	r24
    15d8:	7f 91       	pop	r23
    15da:	6f 91       	pop	r22
    15dc:	5f 91       	pop	r21
    15de:	4f 91       	pop	r20
    15e0:	3f 91       	pop	r19
    15e2:	2f 91       	pop	r18
    15e4:	0f 90       	pop	r0
    15e6:	0b be       	out	0x3b, r0	; 59
    15e8:	0f 90       	pop	r0
    15ea:	0f be       	out	0x3f, r0	; 63
    15ec:	0f 90       	pop	r0
    15ee:	1f 90       	pop	r1
    15f0:	18 95       	reti

000015f2 <__vector_4>:
ISR(INT3_vect)
{
    15f2:	1f 92       	push	r1
    15f4:	0f 92       	push	r0
    15f6:	0f b6       	in	r0, 0x3f	; 63
    15f8:	0f 92       	push	r0
    15fa:	0b b6       	in	r0, 0x3b	; 59
    15fc:	0f 92       	push	r0
    15fe:	11 24       	eor	r1, r1
    1600:	2f 93       	push	r18
    1602:	3f 93       	push	r19
    1604:	4f 93       	push	r20
    1606:	5f 93       	push	r21
    1608:	6f 93       	push	r22
    160a:	7f 93       	push	r23
    160c:	8f 93       	push	r24
    160e:	9f 93       	push	r25
    1610:	af 93       	push	r26
    1612:	bf 93       	push	r27
    1614:	ef 93       	push	r30
    1616:	ff 93       	push	r31
   cAllisr();
    1618:	e0 91 b4 02 	lds	r30, 0x02B4
    161c:	f0 91 b5 02 	lds	r31, 0x02B5
    1620:	19 95       	eicall
}
    1622:	ff 91       	pop	r31
    1624:	ef 91       	pop	r30
    1626:	bf 91       	pop	r27
    1628:	af 91       	pop	r26
    162a:	9f 91       	pop	r25
    162c:	8f 91       	pop	r24
    162e:	7f 91       	pop	r23
    1630:	6f 91       	pop	r22
    1632:	5f 91       	pop	r21
    1634:	4f 91       	pop	r20
    1636:	3f 91       	pop	r19
    1638:	2f 91       	pop	r18
    163a:	0f 90       	pop	r0
    163c:	0b be       	out	0x3b, r0	; 59
    163e:	0f 90       	pop	r0
    1640:	0f be       	out	0x3f, r0	; 63
    1642:	0f 90       	pop	r0
    1644:	1f 90       	pop	r1
    1646:	18 95       	reti

00001648 <__vector_5>:
ISR(INT4_vect)
>>>>>>> parent of 6ea3b60... Sinosudal Wave travelling
{
    1648:	1f 92       	push	r1
    164a:	0f 92       	push	r0
    164c:	0f b6       	in	r0, 0x3f	; 63
    164e:	0f 92       	push	r0
    1650:	0b b6       	in	r0, 0x3b	; 59
    1652:	0f 92       	push	r0
    1654:	11 24       	eor	r1, r1
    1656:	2f 93       	push	r18
    1658:	3f 93       	push	r19
    165a:	4f 93       	push	r20
    165c:	5f 93       	push	r21
    165e:	6f 93       	push	r22
    1660:	7f 93       	push	r23
    1662:	8f 93       	push	r24
    1664:	9f 93       	push	r25
    1666:	af 93       	push	r26
    1668:	bf 93       	push	r27
    166a:	ef 93       	push	r30
    166c:	ff 93       	push	r31
    cAllisr();
<<<<<<< HEAD
    1668:	e0 91 b8 02 	lds	r30, 0x02B8
    166c:	f0 91 b9 02 	lds	r31, 0x02B9
    1670:	19 95       	eicall
}
    1672:	ff 91       	pop	r31
    1674:	ef 91       	pop	r30
    1676:	bf 91       	pop	r27
    1678:	af 91       	pop	r26
    167a:	9f 91       	pop	r25
    167c:	8f 91       	pop	r24
    167e:	7f 91       	pop	r23
    1680:	6f 91       	pop	r22
    1682:	5f 91       	pop	r21
    1684:	4f 91       	pop	r20
    1686:	3f 91       	pop	r19
    1688:	2f 91       	pop	r18
    168a:	0f 90       	pop	r0
    168c:	0b be       	out	0x3b, r0	; 59
    168e:	0f 90       	pop	r0
    1690:	0f be       	out	0x3f, r0	; 63
    1692:	0f 90       	pop	r0
    1694:	1f 90       	pop	r1
    1696:	18 95       	reti

00001698 <__vector_7>:
ISR(INT6_vect)
=======
    166e:	e0 91 b4 02 	lds	r30, 0x02B4
    1672:	f0 91 b5 02 	lds	r31, 0x02B5
    1676:	19 95       	eicall
}
    1678:	ff 91       	pop	r31
    167a:	ef 91       	pop	r30
    167c:	bf 91       	pop	r27
    167e:	af 91       	pop	r26
    1680:	9f 91       	pop	r25
    1682:	8f 91       	pop	r24
    1684:	7f 91       	pop	r23
    1686:	6f 91       	pop	r22
    1688:	5f 91       	pop	r21
    168a:	4f 91       	pop	r20
    168c:	3f 91       	pop	r19
    168e:	2f 91       	pop	r18
    1690:	0f 90       	pop	r0
    1692:	0b be       	out	0x3b, r0	; 59
    1694:	0f 90       	pop	r0
    1696:	0f be       	out	0x3f, r0	; 63
    1698:	0f 90       	pop	r0
    169a:	1f 90       	pop	r1
    169c:	18 95       	reti

0000169e <__vector_6>:
ISR(INT5_vect)
>>>>>>> parent of 6ea3b60... Sinosudal Wave travelling
{
    169e:	1f 92       	push	r1
    16a0:	0f 92       	push	r0
    16a2:	0f b6       	in	r0, 0x3f	; 63
    16a4:	0f 92       	push	r0
    16a6:	0b b6       	in	r0, 0x3b	; 59
    16a8:	0f 92       	push	r0
    16aa:	11 24       	eor	r1, r1
    16ac:	2f 93       	push	r18
    16ae:	3f 93       	push	r19
    16b0:	4f 93       	push	r20
    16b2:	5f 93       	push	r21
    16b4:	6f 93       	push	r22
    16b6:	7f 93       	push	r23
    16b8:	8f 93       	push	r24
    16ba:	9f 93       	push	r25
    16bc:	af 93       	push	r26
    16be:	bf 93       	push	r27
    16c0:	ef 93       	push	r30
    16c2:	ff 93       	push	r31
    cAllisr();
<<<<<<< HEAD
    16be:	e0 91 b8 02 	lds	r30, 0x02B8
    16c2:	f0 91 b9 02 	lds	r31, 0x02B9
    16c6:	19 95       	eicall
}
    16c8:	ff 91       	pop	r31
    16ca:	ef 91       	pop	r30
    16cc:	bf 91       	pop	r27
    16ce:	af 91       	pop	r26
    16d0:	9f 91       	pop	r25
    16d2:	8f 91       	pop	r24
    16d4:	7f 91       	pop	r23
    16d6:	6f 91       	pop	r22
    16d8:	5f 91       	pop	r21
    16da:	4f 91       	pop	r20
    16dc:	3f 91       	pop	r19
    16de:	2f 91       	pop	r18
    16e0:	0f 90       	pop	r0
    16e2:	0b be       	out	0x3b, r0	; 59
    16e4:	0f 90       	pop	r0
    16e6:	0f be       	out	0x3f, r0	; 63
    16e8:	0f 90       	pop	r0
    16ea:	1f 90       	pop	r1
    16ec:	18 95       	reti

000016ee <__vector_8>:
ISR(INT7_vect)
{ 
    16ee:	1f 92       	push	r1
    16f0:	0f 92       	push	r0
    16f2:	0f b6       	in	r0, 0x3f	; 63
    16f4:	0f 92       	push	r0
    16f6:	0b b6       	in	r0, 0x3b	; 59
    16f8:	0f 92       	push	r0
    16fa:	11 24       	eor	r1, r1
    16fc:	2f 93       	push	r18
    16fe:	3f 93       	push	r19
    1700:	4f 93       	push	r20
    1702:	5f 93       	push	r21
    1704:	6f 93       	push	r22
    1706:	7f 93       	push	r23
    1708:	8f 93       	push	r24
    170a:	9f 93       	push	r25
    170c:	af 93       	push	r26
    170e:	bf 93       	push	r27
    1710:	ef 93       	push	r30
    1712:	ff 93       	push	r31
    cAllisr();
    1714:	e0 91 b8 02 	lds	r30, 0x02B8
    1718:	f0 91 b9 02 	lds	r31, 0x02B9
    171c:	19 95       	eicall
}
    171e:	ff 91       	pop	r31
    1720:	ef 91       	pop	r30
    1722:	bf 91       	pop	r27
    1724:	af 91       	pop	r26
    1726:	9f 91       	pop	r25
    1728:	8f 91       	pop	r24
    172a:	7f 91       	pop	r23
    172c:	6f 91       	pop	r22
    172e:	5f 91       	pop	r21
    1730:	4f 91       	pop	r20
    1732:	3f 91       	pop	r19
    1734:	2f 91       	pop	r18
    1736:	0f 90       	pop	r0
    1738:	0b be       	out	0x3b, r0	; 59
    173a:	0f 90       	pop	r0
    173c:	0f be       	out	0x3f, r0	; 63
    173e:	0f 90       	pop	r0
    1740:	1f 90       	pop	r1
    1742:	18 95       	reti

00001744 <_Z5setupv>:

static volatile int pulse = 0;
static volatile int i = 0;
uint8_t COUNTA = 0;//storing digital output 	
void setup(){
	DDRA = 0xFF;
    1744:	8f ef       	ldi	r24, 0xFF	; 255
    1746:	81 b9       	out	0x01, r24	; 1
    DDRD = 0b11111011;
    1748:	8b ef       	ldi	r24, 0xFB	; 251
    174a:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    174c:	83 ed       	ldi	r24, 0xD3	; 211
    174e:	90 e3       	ldi	r25, 0x30	; 48
    1750:	01 97       	sbiw	r24, 0x01	; 1
    1752:	f1 f7       	brne	.-4      	; 0x1750 <_Z5setupv+0xc>
    1754:	00 c0       	rjmp	.+0      	; 0x1756 <_Z5setupv+0x12>
    1756:	00 00       	nop
    _delay_ms(50);
	EIMSK|=(1<<INT0);//enabling interrupt0
    1758:	e8 9a       	sbi	0x1d, 0	; 29
	EICRA|=(1<<ISC00);//setting interrupt triggering logic change
    175a:	e9 e6       	ldi	r30, 0x69	; 105
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	80 81       	ld	r24, Z
    1760:	81 60       	ori	r24, 0x01	; 1
    1762:	80 83       	st	Z, r24
	
	sei();
    1764:	78 94       	sei
{
	public:
	void begin( unsigned int BAUD){
		/*Set baud rate */int uBrr;
		uBrr=(F_CPU/16UL/BAUD-1);
		UBRR0H = (unsigned char)(uBrr>>8);
    1766:	10 92 c5 00 	sts	0x00C5, r1
		UBRR0L = (unsigned char)uBrr;
    176a:	8c e0       	ldi	r24, 0x0C	; 12
    176c:	80 93 c4 00 	sts	0x00C4, r24
		/*Enable receiver and transmitter */
		UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    1770:	88 e1       	ldi	r24, 0x18	; 24
    1772:	80 93 c1 00 	sts	0x00C1, r24
	}
	/* Set frame format: 8data, 2stop bit */
	void write( unsigned char dAta ){
		/* Wait for empty transmit buffer */
		while ((UCSR0A & (1<<UDRE0))==0);
    1776:	e0 ec       	ldi	r30, 0xC0	; 192
    1778:	f0 e0       	ldi	r31, 0x00	; 0
    177a:	80 81       	ld	r24, Z
    177c:	85 ff       	sbrs	r24, 5
    177e:	fd cf       	rjmp	.-6      	; 0x177a <_Z5setupv+0x36>
		/* Put data into buffer, sends the data */
		UDR0 = dAta;
    1780:	81 e0       	ldi	r24, 0x01	; 1
    1782:	80 93 c6 00 	sts	0x00C6, r24
    1786:	87 ea       	ldi	r24, 0xA7	; 167
    1788:	91 e6       	ldi	r25, 0x61	; 97
    178a:	01 97       	sbiw	r24, 0x01	; 1
    178c:	f1 f7       	brne	.-4      	; 0x178a <_Z5setupv+0x46>
    178e:	00 c0       	rjmp	.+0      	; 0x1790 <_Z5setupv+0x4c>
    1790:	00 00       	nop
	Serial.begin(4800);
	Serial.write(1);
}	
    1792:	08 95       	ret

00001794 <_Z4loopv>:
void loop(){
	//Serial.write(2);
	PORTD|=(1<<PIND0);
    1794:	58 9a       	sbi	0x0b, 0	; 11
=======
    16c4:	e0 91 b4 02 	lds	r30, 0x02B4
    16c8:	f0 91 b5 02 	lds	r31, 0x02B5
    16cc:	19 95       	eicall
}
    16ce:	ff 91       	pop	r31
    16d0:	ef 91       	pop	r30
    16d2:	bf 91       	pop	r27
    16d4:	af 91       	pop	r26
    16d6:	9f 91       	pop	r25
    16d8:	8f 91       	pop	r24
    16da:	7f 91       	pop	r23
    16dc:	6f 91       	pop	r22
    16de:	5f 91       	pop	r21
    16e0:	4f 91       	pop	r20
    16e2:	3f 91       	pop	r19
    16e4:	2f 91       	pop	r18
    16e6:	0f 90       	pop	r0
    16e8:	0b be       	out	0x3b, r0	; 59
    16ea:	0f 90       	pop	r0
    16ec:	0f be       	out	0x3f, r0	; 63
    16ee:	0f 90       	pop	r0
    16f0:	1f 90       	pop	r1
    16f2:	18 95       	reti

000016f4 <__vector_7>:
ISR(INT6_vect)
{
    16f4:	1f 92       	push	r1
    16f6:	0f 92       	push	r0
    16f8:	0f b6       	in	r0, 0x3f	; 63
    16fa:	0f 92       	push	r0
    16fc:	0b b6       	in	r0, 0x3b	; 59
    16fe:	0f 92       	push	r0
    1700:	11 24       	eor	r1, r1
    1702:	2f 93       	push	r18
    1704:	3f 93       	push	r19
    1706:	4f 93       	push	r20
    1708:	5f 93       	push	r21
    170a:	6f 93       	push	r22
    170c:	7f 93       	push	r23
    170e:	8f 93       	push	r24
    1710:	9f 93       	push	r25
    1712:	af 93       	push	r26
    1714:	bf 93       	push	r27
    1716:	ef 93       	push	r30
    1718:	ff 93       	push	r31
    cAllisr();
    171a:	e0 91 b4 02 	lds	r30, 0x02B4
    171e:	f0 91 b5 02 	lds	r31, 0x02B5
    1722:	19 95       	eicall
}
    1724:	ff 91       	pop	r31
    1726:	ef 91       	pop	r30
    1728:	bf 91       	pop	r27
    172a:	af 91       	pop	r26
    172c:	9f 91       	pop	r25
    172e:	8f 91       	pop	r24
    1730:	7f 91       	pop	r23
    1732:	6f 91       	pop	r22
    1734:	5f 91       	pop	r21
    1736:	4f 91       	pop	r20
    1738:	3f 91       	pop	r19
    173a:	2f 91       	pop	r18
    173c:	0f 90       	pop	r0
    173e:	0b be       	out	0x3b, r0	; 59
    1740:	0f 90       	pop	r0
    1742:	0f be       	out	0x3f, r0	; 63
    1744:	0f 90       	pop	r0
    1746:	1f 90       	pop	r1
    1748:	18 95       	reti

0000174a <__vector_8>:
ISR(INT7_vect)
{ 
    174a:	1f 92       	push	r1
    174c:	0f 92       	push	r0
    174e:	0f b6       	in	r0, 0x3f	; 63
    1750:	0f 92       	push	r0
    1752:	0b b6       	in	r0, 0x3b	; 59
    1754:	0f 92       	push	r0
    1756:	11 24       	eor	r1, r1
    1758:	2f 93       	push	r18
    175a:	3f 93       	push	r19
    175c:	4f 93       	push	r20
    175e:	5f 93       	push	r21
    1760:	6f 93       	push	r22
    1762:	7f 93       	push	r23
    1764:	8f 93       	push	r24
    1766:	9f 93       	push	r25
    1768:	af 93       	push	r26
    176a:	bf 93       	push	r27
    176c:	ef 93       	push	r30
    176e:	ff 93       	push	r31
    cAllisr();
    1770:	e0 91 b4 02 	lds	r30, 0x02B4
    1774:	f0 91 b5 02 	lds	r31, 0x02B5
    1778:	19 95       	eicall
}
    177a:	ff 91       	pop	r31
    177c:	ef 91       	pop	r30
    177e:	bf 91       	pop	r27
    1780:	af 91       	pop	r26
    1782:	9f 91       	pop	r25
    1784:	8f 91       	pop	r24
    1786:	7f 91       	pop	r23
    1788:	6f 91       	pop	r22
    178a:	5f 91       	pop	r21
    178c:	4f 91       	pop	r20
    178e:	3f 91       	pop	r19
    1790:	2f 91       	pop	r18
    1792:	0f 90       	pop	r0
    1794:	0b be       	out	0x3b, r0	; 59
    1796:	0f 90       	pop	r0
    1798:	0f be       	out	0x3f, r0	; 63
    179a:	0f 90       	pop	r0
    179c:	1f 90       	pop	r1
    179e:	18 95       	reti

000017a0 <_Z11servoattachsi>:
#include<avr/io.h>
#include<math.h>
void servoattach(short int num,int value)       //value=clock frequency and num=pin no.to be attached
{
  switch(num)
    17a0:	88 30       	cpi	r24, 0x08	; 8
    17a2:	91 05       	cpc	r25, r1
    17a4:	09 f4       	brne	.+2      	; 0x17a8 <_Z11servoattachsi+0x8>
    17a6:	38 c1       	rjmp	.+624    	; 0x1a18 <_Z11servoattachsi+0x278>
    17a8:	89 30       	cpi	r24, 0x09	; 9
    17aa:	91 05       	cpc	r25, r1
    17ac:	cc f4       	brge	.+50     	; 0x17e0 <_Z11servoattachsi+0x40>
    17ae:	85 30       	cpi	r24, 0x05	; 5
    17b0:	91 05       	cpc	r25, r1
    17b2:	09 f4       	brne	.+2      	; 0x17b6 <_Z11servoattachsi+0x16>
    17b4:	75 c0       	rjmp	.+234    	; 0x18a0 <_Z11servoattachsi+0x100>
    17b6:	86 30       	cpi	r24, 0x06	; 6
    17b8:	91 05       	cpc	r25, r1
    17ba:	4c f4       	brge	.+18     	; 0x17ce <_Z11servoattachsi+0x2e>
    17bc:	82 30       	cpi	r24, 0x02	; 2
    17be:	91 05       	cpc	r25, r1
    17c0:	09 f4       	brne	.+2      	; 0x17c4 <_Z11servoattachsi+0x24>
    17c2:	92 c0       	rjmp	.+292    	; 0x18e8 <_Z11servoattachsi+0x148>
    17c4:	83 30       	cpi	r24, 0x03	; 3
    17c6:	91 05       	cpc	r25, r1
    17c8:	09 f0       	breq	.+2      	; 0x17cc <_Z11servoattachsi+0x2c>
    17ca:	c0 c1       	rjmp	.+896    	; 0x1b4c <_Z11servoattachsi+0x3ac>
    17cc:	b1 c0       	rjmp	.+354    	; 0x1930 <_Z11servoattachsi+0x190>
    17ce:	86 30       	cpi	r24, 0x06	; 6
    17d0:	91 05       	cpc	r25, r1
    17d2:	09 f4       	brne	.+2      	; 0x17d6 <_Z11servoattachsi+0x36>
    17d4:	d1 c0       	rjmp	.+418    	; 0x1978 <_Z11servoattachsi+0x1d8>
    17d6:	87 30       	cpi	r24, 0x07	; 7
    17d8:	91 05       	cpc	r25, r1
    17da:	09 f0       	breq	.+2      	; 0x17de <_Z11servoattachsi+0x3e>
    17dc:	b7 c1       	rjmp	.+878    	; 0x1b4c <_Z11servoattachsi+0x3ac>
    17de:	f4 c0       	rjmp	.+488    	; 0x19c8 <_Z11servoattachsi+0x228>
    17e0:	8c 32       	cpi	r24, 0x2C	; 44
    17e2:	91 05       	cpc	r25, r1
    17e4:	09 f4       	brne	.+2      	; 0x17e8 <_Z11servoattachsi+0x48>
    17e6:	8b c1       	rjmp	.+790    	; 0x1afe <_Z11servoattachsi+0x35e>
    17e8:	8d 32       	cpi	r24, 0x2D	; 45
    17ea:	91 05       	cpc	r25, r1
    17ec:	44 f4       	brge	.+16     	; 0x17fe <_Z11servoattachsi+0x5e>
    17ee:	8b 30       	cpi	r24, 0x0B	; 11
    17f0:	91 05       	cpc	r25, r1
    17f2:	71 f0       	breq	.+28     	; 0x1810 <_Z11servoattachsi+0x70>
    17f4:	8c 30       	cpi	r24, 0x0C	; 12
    17f6:	91 05       	cpc	r25, r1
    17f8:	09 f0       	breq	.+2      	; 0x17fc <_Z11servoattachsi+0x5c>
    17fa:	a8 c1       	rjmp	.+848    	; 0x1b4c <_Z11servoattachsi+0x3ac>
    17fc:	2d c0       	rjmp	.+90     	; 0x1858 <_Z11servoattachsi+0xb8>
    17fe:	8d 32       	cpi	r24, 0x2D	; 45
    1800:	91 05       	cpc	r25, r1
    1802:	09 f4       	brne	.+2      	; 0x1806 <_Z11servoattachsi+0x66>
    1804:	59 c1       	rjmp	.+690    	; 0x1ab8 <_Z11servoattachsi+0x318>
    1806:	8e 32       	cpi	r24, 0x2E	; 46
    1808:	91 05       	cpc	r25, r1
    180a:	09 f0       	breq	.+2      	; 0x180e <_Z11servoattachsi+0x6e>
    180c:	9f c1       	rjmp	.+830    	; 0x1b4c <_Z11servoattachsi+0x3ac>
    180e:	2c c1       	rjmp	.+600    	; 0x1a68 <_Z11servoattachsi+0x2c8>
  {
   case 11 :                            //OC1A
      DDRB|=(1<<PB5); // PORTB as OUTPUT
    1810:	25 9a       	sbi	0x04, 5	; 4
      TCCR1A|=(1<<WGM11)|(1<<COM1A1)|(1<<COM1A0);  //SETTING PRESCALAR AS 64 
    1812:	e0 e8       	ldi	r30, 0x80	; 128
    1814:	f0 e0       	ldi	r31, 0x00	; 0
    1816:	80 81       	ld	r24, Z
    1818:	82 6c       	ori	r24, 0xC2	; 194
    181a:	80 83       	st	Z, r24
      TCCR1B|=(1<<WGM12)|(1<<WGM13)|(1<<CS10)|(1<<CS11); //FAST PWM MODE
    181c:	e1 e8       	ldi	r30, 0x81	; 129
    181e:	f0 e0       	ldi	r31, 0x00	; 0
    1820:	80 81       	ld	r24, Z
    1822:	8b 61       	ori	r24, 0x1B	; 27
    1824:	80 83       	st	Z, r24
      ICR1=312.5*value-1;                    //generating 20msec pulse (pwm method)
    1826:	88 27       	eor	r24, r24
    1828:	77 fd       	sbrc	r23, 7
    182a:	80 95       	com	r24
    182c:	98 2f       	mov	r25, r24
    182e:	0e 94 c2 13 	call	0x2784	; 0x2784 <__floatsisf>
    1832:	20 e0       	ldi	r18, 0x00	; 0
    1834:	30 e4       	ldi	r19, 0x40	; 64
    1836:	4c e9       	ldi	r20, 0x9C	; 156
    1838:	53 e4       	ldi	r21, 0x43	; 67
    183a:	0e 94 76 14 	call	0x28ec	; 0x28ec <__mulsf3>
    183e:	20 e0       	ldi	r18, 0x00	; 0
    1840:	30 e0       	ldi	r19, 0x00	; 0
    1842:	40 e8       	ldi	r20, 0x80	; 128
    1844:	5f e3       	ldi	r21, 0x3F	; 63
    1846:	0e 94 be 12 	call	0x257c	; 0x257c <__subsf3>
    184a:	0e 94 94 13 	call	0x2728	; 0x2728 <__fixunssfsi>
    184e:	70 93 87 00 	sts	0x0087, r23
    1852:	60 93 86 00 	sts	0x0086, r22
      break; 
    1856:	08 95       	ret

   case 12 :                            //OC1B
      DDRB|=(1<<PB6); // PORTB as OUTPUT
    1858:	26 9a       	sbi	0x04, 6	; 4
      TCCR1A|=(1<<WGM11)|(1<<COM1B1)|(1<<COM1B0);  //SETTING PRESCALAR AS 64 
    185a:	e0 e8       	ldi	r30, 0x80	; 128
    185c:	f0 e0       	ldi	r31, 0x00	; 0
    185e:	80 81       	ld	r24, Z
    1860:	82 63       	ori	r24, 0x32	; 50
    1862:	80 83       	st	Z, r24
      TCCR1B|=(1<<WGM12)|(1<<WGM13)|(1<<CS10)|(1<<CS11); //FAST PWM MODE
    1864:	e1 e8       	ldi	r30, 0x81	; 129
    1866:	f0 e0       	ldi	r31, 0x00	; 0
    1868:	80 81       	ld	r24, Z
    186a:	8b 61       	ori	r24, 0x1B	; 27
    186c:	80 83       	st	Z, r24
      ICR1=312.5*value-1;                    //generating 20msec pulse (pwm method)
    186e:	88 27       	eor	r24, r24
    1870:	77 fd       	sbrc	r23, 7
    1872:	80 95       	com	r24
    1874:	98 2f       	mov	r25, r24
    1876:	0e 94 c2 13 	call	0x2784	; 0x2784 <__floatsisf>
    187a:	20 e0       	ldi	r18, 0x00	; 0
    187c:	30 e4       	ldi	r19, 0x40	; 64
    187e:	4c e9       	ldi	r20, 0x9C	; 156
    1880:	53 e4       	ldi	r21, 0x43	; 67
    1882:	0e 94 76 14 	call	0x28ec	; 0x28ec <__mulsf3>
    1886:	20 e0       	ldi	r18, 0x00	; 0
    1888:	30 e0       	ldi	r19, 0x00	; 0
    188a:	40 e8       	ldi	r20, 0x80	; 128
    188c:	5f e3       	ldi	r21, 0x3F	; 63
    188e:	0e 94 be 12 	call	0x257c	; 0x257c <__subsf3>
    1892:	0e 94 94 13 	call	0x2728	; 0x2728 <__fixunssfsi>
    1896:	70 93 87 00 	sts	0x0087, r23
    189a:	60 93 86 00 	sts	0x0086, r22
      break;
    189e:	08 95       	ret

    case 5 :                            //OC3A
      DDRE|=(1<<PE3); // PORTB as OUTPUT
    18a0:	6b 9a       	sbi	0x0d, 3	; 13
      TCCR3A|=(1<<WGM31)|(1<<COM3A1)|(1<<COM3A0);  //SETTING PRESCALAR AS 64 
    18a2:	e0 e9       	ldi	r30, 0x90	; 144
    18a4:	f0 e0       	ldi	r31, 0x00	; 0
    18a6:	80 81       	ld	r24, Z
    18a8:	82 6c       	ori	r24, 0xC2	; 194
    18aa:	80 83       	st	Z, r24
      TCCR3B|=(1<<WGM12)|(1<<WGM13)|(1<<CS30)|(1<<CS31); //FAST PWM MODE
    18ac:	e1 e9       	ldi	r30, 0x91	; 145
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	80 81       	ld	r24, Z
    18b2:	8b 61       	ori	r24, 0x1B	; 27
    18b4:	80 83       	st	Z, r24
      ICR3=312.5*value-1;                    //generating 20msec pulse (pwm method)
    18b6:	88 27       	eor	r24, r24
    18b8:	77 fd       	sbrc	r23, 7
    18ba:	80 95       	com	r24
    18bc:	98 2f       	mov	r25, r24
    18be:	0e 94 c2 13 	call	0x2784	; 0x2784 <__floatsisf>
    18c2:	20 e0       	ldi	r18, 0x00	; 0
    18c4:	30 e4       	ldi	r19, 0x40	; 64
    18c6:	4c e9       	ldi	r20, 0x9C	; 156
    18c8:	53 e4       	ldi	r21, 0x43	; 67
    18ca:	0e 94 76 14 	call	0x28ec	; 0x28ec <__mulsf3>
    18ce:	20 e0       	ldi	r18, 0x00	; 0
    18d0:	30 e0       	ldi	r19, 0x00	; 0
    18d2:	40 e8       	ldi	r20, 0x80	; 128
    18d4:	5f e3       	ldi	r21, 0x3F	; 63
    18d6:	0e 94 be 12 	call	0x257c	; 0x257c <__subsf3>
    18da:	0e 94 94 13 	call	0x2728	; 0x2728 <__fixunssfsi>
    18de:	70 93 97 00 	sts	0x0097, r23
    18e2:	60 93 96 00 	sts	0x0096, r22
      break;
    18e6:	08 95       	ret

    case 2 :                            //OC3B
      DDRE|=(1<<PE4); // PORTB as OUTPUT
    18e8:	6c 9a       	sbi	0x0d, 4	; 13
      TCCR3A|=(1<<WGM31)|(1<<COM3B1)|(1<<COM3B0);  //SETTING PRESCALAR AS 64 
    18ea:	e0 e9       	ldi	r30, 0x90	; 144
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	80 81       	ld	r24, Z
    18f0:	82 63       	ori	r24, 0x32	; 50
    18f2:	80 83       	st	Z, r24
      TCCR3B|=(1<<WGM32)|(1<<WGM33)|(1<<CS30)|(1<<CS31); //FAST PWM MODE
    18f4:	e1 e9       	ldi	r30, 0x91	; 145
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	80 81       	ld	r24, Z
    18fa:	8b 61       	ori	r24, 0x1B	; 27
    18fc:	80 83       	st	Z, r24
      ICR3=312.5*value-1;                    //generating 20msec pulse (pwm method)
    18fe:	88 27       	eor	r24, r24
    1900:	77 fd       	sbrc	r23, 7
    1902:	80 95       	com	r24
    1904:	98 2f       	mov	r25, r24
    1906:	0e 94 c2 13 	call	0x2784	; 0x2784 <__floatsisf>
    190a:	20 e0       	ldi	r18, 0x00	; 0
    190c:	30 e4       	ldi	r19, 0x40	; 64
    190e:	4c e9       	ldi	r20, 0x9C	; 156
    1910:	53 e4       	ldi	r21, 0x43	; 67
    1912:	0e 94 76 14 	call	0x28ec	; 0x28ec <__mulsf3>
    1916:	20 e0       	ldi	r18, 0x00	; 0
    1918:	30 e0       	ldi	r19, 0x00	; 0
    191a:	40 e8       	ldi	r20, 0x80	; 128
    191c:	5f e3       	ldi	r21, 0x3F	; 63
    191e:	0e 94 be 12 	call	0x257c	; 0x257c <__subsf3>
    1922:	0e 94 94 13 	call	0x2728	; 0x2728 <__fixunssfsi>
    1926:	70 93 97 00 	sts	0x0097, r23
    192a:	60 93 96 00 	sts	0x0096, r22
      break;
    192e:	08 95       	ret
   
    case 3 :                            //OC3C
      DDRE|=(1<<PE5); // PORTB as OUTPUT
    1930:	6d 9a       	sbi	0x0d, 5	; 13
      TCCR3A|=(1<<WGM31)|(1<<COM3C1)|(1<<COM3C0);  //SETTING PRESCALAR AS 64 
    1932:	e0 e9       	ldi	r30, 0x90	; 144
    1934:	f0 e0       	ldi	r31, 0x00	; 0
    1936:	80 81       	ld	r24, Z
    1938:	8e 60       	ori	r24, 0x0E	; 14
    193a:	80 83       	st	Z, r24
      TCCR3B|=(1<<WGM32)|(1<<WGM33)|(1<<CS30)|(1<<CS31); //FAST PWM MODE
    193c:	e1 e9       	ldi	r30, 0x91	; 145
    193e:	f0 e0       	ldi	r31, 0x00	; 0
    1940:	80 81       	ld	r24, Z
    1942:	8b 61       	ori	r24, 0x1B	; 27
    1944:	80 83       	st	Z, r24
      ICR3=312.5*value-1;                    //generating 20msec pulse (pwm method)
    1946:	88 27       	eor	r24, r24
    1948:	77 fd       	sbrc	r23, 7
    194a:	80 95       	com	r24
    194c:	98 2f       	mov	r25, r24
    194e:	0e 94 c2 13 	call	0x2784	; 0x2784 <__floatsisf>
    1952:	20 e0       	ldi	r18, 0x00	; 0
    1954:	30 e4       	ldi	r19, 0x40	; 64
    1956:	4c e9       	ldi	r20, 0x9C	; 156
    1958:	53 e4       	ldi	r21, 0x43	; 67
    195a:	0e 94 76 14 	call	0x28ec	; 0x28ec <__mulsf3>
    195e:	20 e0       	ldi	r18, 0x00	; 0
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	40 e8       	ldi	r20, 0x80	; 128
    1964:	5f e3       	ldi	r21, 0x3F	; 63
    1966:	0e 94 be 12 	call	0x257c	; 0x257c <__subsf3>
    196a:	0e 94 94 13 	call	0x2728	; 0x2728 <__fixunssfsi>
    196e:	70 93 97 00 	sts	0x0097, r23
    1972:	60 93 96 00 	sts	0x0096, r22
      break;
    1976:	08 95       	ret

    case 6 :                            //OC4A
      DDRH|=(1<<PH3); // PORTB as OUTPUT
    1978:	e1 e0       	ldi	r30, 0x01	; 1
    197a:	f1 e0       	ldi	r31, 0x01	; 1
    197c:	80 81       	ld	r24, Z
    197e:	88 60       	ori	r24, 0x08	; 8
    1980:	80 83       	st	Z, r24
      TCCR4A|=(1<<WGM41)|(1<<COM4A1)|(1<<COM4A0);  //SETTING PRESCALAR AS 64 
    1982:	e0 ea       	ldi	r30, 0xA0	; 160
    1984:	f0 e0       	ldi	r31, 0x00	; 0
    1986:	80 81       	ld	r24, Z
    1988:	82 6c       	ori	r24, 0xC2	; 194
    198a:	80 83       	st	Z, r24
      TCCR4B|=(1<<WGM42)|(1<<WGM43)|(1<<CS40)|(1<<CS41); //FAST PWM MODE
    198c:	e1 ea       	ldi	r30, 0xA1	; 161
    198e:	f0 e0       	ldi	r31, 0x00	; 0
    1990:	80 81       	ld	r24, Z
    1992:	8b 61       	ori	r24, 0x1B	; 27
    1994:	80 83       	st	Z, r24
      ICR4=312.5*value-1;                    //generating 20msec pulse (pwm method)
    1996:	88 27       	eor	r24, r24
    1998:	77 fd       	sbrc	r23, 7
    199a:	80 95       	com	r24
    199c:	98 2f       	mov	r25, r24
    199e:	0e 94 c2 13 	call	0x2784	; 0x2784 <__floatsisf>
    19a2:	20 e0       	ldi	r18, 0x00	; 0
    19a4:	30 e4       	ldi	r19, 0x40	; 64
    19a6:	4c e9       	ldi	r20, 0x9C	; 156
    19a8:	53 e4       	ldi	r21, 0x43	; 67
    19aa:	0e 94 76 14 	call	0x28ec	; 0x28ec <__mulsf3>
    19ae:	20 e0       	ldi	r18, 0x00	; 0
    19b0:	30 e0       	ldi	r19, 0x00	; 0
    19b2:	40 e8       	ldi	r20, 0x80	; 128
    19b4:	5f e3       	ldi	r21, 0x3F	; 63
    19b6:	0e 94 be 12 	call	0x257c	; 0x257c <__subsf3>
    19ba:	0e 94 94 13 	call	0x2728	; 0x2728 <__fixunssfsi>
    19be:	70 93 a7 00 	sts	0x00A7, r23
    19c2:	60 93 a6 00 	sts	0x00A6, r22
      break;
    19c6:	08 95       	ret

    case 7 :                            //OC4B
      DDRH|=(1<<PH4); // PORTB as OUTPUT
    19c8:	e1 e0       	ldi	r30, 0x01	; 1
    19ca:	f1 e0       	ldi	r31, 0x01	; 1
    19cc:	80 81       	ld	r24, Z
    19ce:	80 61       	ori	r24, 0x10	; 16
    19d0:	80 83       	st	Z, r24
      TCCR4A|=(1<<WGM41)|(1<<COM4B1)|(1<<COM4B0);  //SETTING PRESCALAR AS 64 
    19d2:	e0 ea       	ldi	r30, 0xA0	; 160
    19d4:	f0 e0       	ldi	r31, 0x00	; 0
    19d6:	80 81       	ld	r24, Z
    19d8:	82 63       	ori	r24, 0x32	; 50
    19da:	80 83       	st	Z, r24
      TCCR4B|=(1<<WGM42)|(1<<WGM43)|(1<<CS40)|(1<<CS41); //FAST PWM MODE
    19dc:	e1 ea       	ldi	r30, 0xA1	; 161
    19de:	f0 e0       	ldi	r31, 0x00	; 0
    19e0:	80 81       	ld	r24, Z
    19e2:	8b 61       	ori	r24, 0x1B	; 27
    19e4:	80 83       	st	Z, r24
      ICR4=312.5*value-1;                    //generating 20msec pulse (pwm method)
    19e6:	88 27       	eor	r24, r24
    19e8:	77 fd       	sbrc	r23, 7
    19ea:	80 95       	com	r24
    19ec:	98 2f       	mov	r25, r24
    19ee:	0e 94 c2 13 	call	0x2784	; 0x2784 <__floatsisf>
    19f2:	20 e0       	ldi	r18, 0x00	; 0
    19f4:	30 e4       	ldi	r19, 0x40	; 64
    19f6:	4c e9       	ldi	r20, 0x9C	; 156
    19f8:	53 e4       	ldi	r21, 0x43	; 67
    19fa:	0e 94 76 14 	call	0x28ec	; 0x28ec <__mulsf3>
    19fe:	20 e0       	ldi	r18, 0x00	; 0
    1a00:	30 e0       	ldi	r19, 0x00	; 0
    1a02:	40 e8       	ldi	r20, 0x80	; 128
    1a04:	5f e3       	ldi	r21, 0x3F	; 63
    1a06:	0e 94 be 12 	call	0x257c	; 0x257c <__subsf3>
    1a0a:	0e 94 94 13 	call	0x2728	; 0x2728 <__fixunssfsi>
    1a0e:	70 93 a7 00 	sts	0x00A7, r23
    1a12:	60 93 a6 00 	sts	0x00A6, r22
      break;
    1a16:	08 95       	ret

    case 8 :                            //OC4C
      DDRH|=(1<<PH5); // PORTB as OUTPUT
    1a18:	e1 e0       	ldi	r30, 0x01	; 1
    1a1a:	f1 e0       	ldi	r31, 0x01	; 1
    1a1c:	80 81       	ld	r24, Z
    1a1e:	80 62       	ori	r24, 0x20	; 32
    1a20:	80 83       	st	Z, r24
      TCCR4A|=(1<<WGM41)|(1<<COM4C1)|(1<<COM4C0);  //SETTING PRESCALAR AS 64 
    1a22:	e0 ea       	ldi	r30, 0xA0	; 160
    1a24:	f0 e0       	ldi	r31, 0x00	; 0
    1a26:	80 81       	ld	r24, Z
    1a28:	8e 60       	ori	r24, 0x0E	; 14
    1a2a:	80 83       	st	Z, r24
      TCCR4B|=(1<<WGM42)|(1<<WGM43)|(1<<CS40)|(1<<CS41); //FAST PWM MODE
    1a2c:	e1 ea       	ldi	r30, 0xA1	; 161
    1a2e:	f0 e0       	ldi	r31, 0x00	; 0
    1a30:	80 81       	ld	r24, Z
    1a32:	8b 61       	ori	r24, 0x1B	; 27
    1a34:	80 83       	st	Z, r24
      ICR4=312.5*value-1;                    //generating 20msec pulse (pwm method)
    1a36:	88 27       	eor	r24, r24
    1a38:	77 fd       	sbrc	r23, 7
    1a3a:	80 95       	com	r24
    1a3c:	98 2f       	mov	r25, r24
    1a3e:	0e 94 c2 13 	call	0x2784	; 0x2784 <__floatsisf>
    1a42:	20 e0       	ldi	r18, 0x00	; 0
    1a44:	30 e4       	ldi	r19, 0x40	; 64
    1a46:	4c e9       	ldi	r20, 0x9C	; 156
    1a48:	53 e4       	ldi	r21, 0x43	; 67
    1a4a:	0e 94 76 14 	call	0x28ec	; 0x28ec <__mulsf3>
    1a4e:	20 e0       	ldi	r18, 0x00	; 0
    1a50:	30 e0       	ldi	r19, 0x00	; 0
    1a52:	40 e8       	ldi	r20, 0x80	; 128
    1a54:	5f e3       	ldi	r21, 0x3F	; 63
    1a56:	0e 94 be 12 	call	0x257c	; 0x257c <__subsf3>
    1a5a:	0e 94 94 13 	call	0x2728	; 0x2728 <__fixunssfsi>
    1a5e:	70 93 a7 00 	sts	0x00A7, r23
    1a62:	60 93 a6 00 	sts	0x00A6, r22
      break;
    1a66:	08 95       	ret

    case 46 :                           //OC5A 
      DDRL|=(1<<PL3); // PORTB as OUTPUT
    1a68:	ea e0       	ldi	r30, 0x0A	; 10
    1a6a:	f1 e0       	ldi	r31, 0x01	; 1
    1a6c:	80 81       	ld	r24, Z
    1a6e:	88 60       	ori	r24, 0x08	; 8
    1a70:	80 83       	st	Z, r24
      TCCR5A|=(1<<WGM51)|(1<<COM5A1)|(1<<COM5A0);  //SETTING PRESCALAR AS 64 
    1a72:	e0 e2       	ldi	r30, 0x20	; 32
    1a74:	f1 e0       	ldi	r31, 0x01	; 1
    1a76:	80 81       	ld	r24, Z
    1a78:	82 6c       	ori	r24, 0xC2	; 194
    1a7a:	80 83       	st	Z, r24
      TCCR5B|=(1<<WGM52)|(1<<WGM53)|(1<<CS50)|(1<<CS51); //FAST PWM MODE
    1a7c:	e1 e2       	ldi	r30, 0x21	; 33
    1a7e:	f1 e0       	ldi	r31, 0x01	; 1
    1a80:	80 81       	ld	r24, Z
    1a82:	8b 61       	ori	r24, 0x1B	; 27
    1a84:	80 83       	st	Z, r24
      ICR5=312.5*value-1;                    //generating 20msec pulse (pwm method)
    1a86:	88 27       	eor	r24, r24
    1a88:	77 fd       	sbrc	r23, 7
    1a8a:	80 95       	com	r24
    1a8c:	98 2f       	mov	r25, r24
    1a8e:	0e 94 c2 13 	call	0x2784	; 0x2784 <__floatsisf>
    1a92:	20 e0       	ldi	r18, 0x00	; 0
    1a94:	30 e4       	ldi	r19, 0x40	; 64
    1a96:	4c e9       	ldi	r20, 0x9C	; 156
    1a98:	53 e4       	ldi	r21, 0x43	; 67
    1a9a:	0e 94 76 14 	call	0x28ec	; 0x28ec <__mulsf3>
    1a9e:	20 e0       	ldi	r18, 0x00	; 0
    1aa0:	30 e0       	ldi	r19, 0x00	; 0
    1aa2:	40 e8       	ldi	r20, 0x80	; 128
    1aa4:	5f e3       	ldi	r21, 0x3F	; 63
    1aa6:	0e 94 be 12 	call	0x257c	; 0x257c <__subsf3>
    1aaa:	0e 94 94 13 	call	0x2728	; 0x2728 <__fixunssfsi>
    1aae:	70 93 27 01 	sts	0x0127, r23
    1ab2:	60 93 26 01 	sts	0x0126, r22
      break;
    1ab6:	08 95       	ret

    case 45 :                           //OC5B      DDRL|=(1<<PL4); // PORTB as OUTPUT
      TCCR5A|=(1<<WGM51)|(1<<COM5B1)|(1<<COM5B0);  //SETTING PRESCALAR AS 64 
    1ab8:	e0 e2       	ldi	r30, 0x20	; 32
    1aba:	f1 e0       	ldi	r31, 0x01	; 1
    1abc:	80 81       	ld	r24, Z
    1abe:	82 63       	ori	r24, 0x32	; 50
    1ac0:	80 83       	st	Z, r24
      TCCR5B|=(1<<WGM52)|(1<<WGM53)|(1<<CS50)|(1<<CS51); //FAST PWM MODE
    1ac2:	e1 e2       	ldi	r30, 0x21	; 33
    1ac4:	f1 e0       	ldi	r31, 0x01	; 1
    1ac6:	80 81       	ld	r24, Z
    1ac8:	8b 61       	ori	r24, 0x1B	; 27
    1aca:	80 83       	st	Z, r24
      ICR5=312.5*value-1;                    //generating 20msec pulse (pwm met)
    1acc:	88 27       	eor	r24, r24
    1ace:	77 fd       	sbrc	r23, 7
    1ad0:	80 95       	com	r24
    1ad2:	98 2f       	mov	r25, r24
    1ad4:	0e 94 c2 13 	call	0x2784	; 0x2784 <__floatsisf>
    1ad8:	20 e0       	ldi	r18, 0x00	; 0
    1ada:	30 e4       	ldi	r19, 0x40	; 64
    1adc:	4c e9       	ldi	r20, 0x9C	; 156
    1ade:	53 e4       	ldi	r21, 0x43	; 67
    1ae0:	0e 94 76 14 	call	0x28ec	; 0x28ec <__mulsf3>
    1ae4:	20 e0       	ldi	r18, 0x00	; 0
    1ae6:	30 e0       	ldi	r19, 0x00	; 0
    1ae8:	40 e8       	ldi	r20, 0x80	; 128
    1aea:	5f e3       	ldi	r21, 0x3F	; 63
    1aec:	0e 94 be 12 	call	0x257c	; 0x257c <__subsf3>
    1af0:	0e 94 94 13 	call	0x2728	; 0x2728 <__fixunssfsi>
    1af4:	70 93 27 01 	sts	0x0127, r23
    1af8:	60 93 26 01 	sts	0x0126, r22
      break;
    1afc:	08 95       	ret

    case 44 :                           //OC5C
      DDRL|=(1<<PL5); // PORTB as OUTPUT
    1afe:	ea e0       	ldi	r30, 0x0A	; 10
    1b00:	f1 e0       	ldi	r31, 0x01	; 1
    1b02:	80 81       	ld	r24, Z
    1b04:	80 62       	ori	r24, 0x20	; 32
    1b06:	80 83       	st	Z, r24
      TCCR5A|=(1<<WGM51)|(1<<COM5C1)|(1<<COM5C0);  //SETTING PRESCALAR AS 64 
    1b08:	e0 e2       	ldi	r30, 0x20	; 32
    1b0a:	f1 e0       	ldi	r31, 0x01	; 1
    1b0c:	80 81       	ld	r24, Z
    1b0e:	8e 60       	ori	r24, 0x0E	; 14
    1b10:	80 83       	st	Z, r24
      TCCR5B|=(1<<WGM52)|(1<<WGM53)|(1<<CS50)|(1<<CS51); //FAST PWM MODE
    1b12:	e1 e2       	ldi	r30, 0x21	; 33
    1b14:	f1 e0       	ldi	r31, 0x01	; 1
    1b16:	80 81       	ld	r24, Z
    1b18:	8b 61       	ori	r24, 0x1B	; 27
    1b1a:	80 83       	st	Z, r24
      ICR5=312.5*value-1;                    //generating 20msec pulse (pwm method)
    1b1c:	88 27       	eor	r24, r24
    1b1e:	77 fd       	sbrc	r23, 7
    1b20:	80 95       	com	r24
    1b22:	98 2f       	mov	r25, r24
    1b24:	0e 94 c2 13 	call	0x2784	; 0x2784 <__floatsisf>
    1b28:	20 e0       	ldi	r18, 0x00	; 0
    1b2a:	30 e4       	ldi	r19, 0x40	; 64
    1b2c:	4c e9       	ldi	r20, 0x9C	; 156
    1b2e:	53 e4       	ldi	r21, 0x43	; 67
    1b30:	0e 94 76 14 	call	0x28ec	; 0x28ec <__mulsf3>
    1b34:	20 e0       	ldi	r18, 0x00	; 0
    1b36:	30 e0       	ldi	r19, 0x00	; 0
    1b38:	40 e8       	ldi	r20, 0x80	; 128
    1b3a:	5f e3       	ldi	r21, 0x3F	; 63
    1b3c:	0e 94 be 12 	call	0x257c	; 0x257c <__subsf3>
    1b40:	0e 94 94 13 	call	0x2728	; 0x2728 <__fixunssfsi>
    1b44:	70 93 27 01 	sts	0x0127, r23
    1b48:	60 93 26 01 	sts	0x0126, r22
    1b4c:	08 95       	ret

00001b4e <_Z13servoPSPwritesi>:
      break;
   }
}

void servoPSPwrite(short int pin,int val)           //PIN=servo pin no. on mega,val=angle value for the servo at pin
{
    1b4e:	4f 92       	push	r4
    1b50:	5f 92       	push	r5
    1b52:	6f 92       	push	r6
    1b54:	7f 92       	push	r7
    1b56:	8f 92       	push	r8
    1b58:	9f 92       	push	r9
    1b5a:	af 92       	push	r10
    1b5c:	bf 92       	push	r11
    1b5e:	cf 92       	push	r12
    1b60:	df 92       	push	r13
    1b62:	ef 92       	push	r14
    1b64:	ff 92       	push	r15
    1b66:	0f 93       	push	r16
    1b68:	1f 93       	push	r17
    1b6a:	cf 93       	push	r28
    1b6c:	df 93       	push	r29
  switch(pin)
    1b6e:	88 30       	cpi	r24, 0x08	; 8
    1b70:	91 05       	cpc	r25, r1
    1b72:	09 f4       	brne	.+2      	; 0x1b76 <_Z13servoPSPwritesi+0x28>
    1b74:	70 c2       	rjmp	.+1248   	; 0x2056 <_Z13servoPSPwritesi+0x508>
    1b76:	89 30       	cpi	r24, 0x09	; 9
    1b78:	91 05       	cpc	r25, r1
    1b7a:	cc f4       	brge	.+50     	; 0x1bae <_Z13servoPSPwritesi+0x60>
    1b7c:	85 30       	cpi	r24, 0x05	; 5
    1b7e:	91 05       	cpc	r25, r1
    1b80:	09 f4       	brne	.+2      	; 0x1b84 <_Z13servoPSPwritesi+0x36>
    1b82:	cf c0       	rjmp	.+414    	; 0x1d22 <_Z13servoPSPwritesi+0x1d4>
    1b84:	86 30       	cpi	r24, 0x06	; 6
    1b86:	91 05       	cpc	r25, r1
    1b88:	4c f4       	brge	.+18     	; 0x1b9c <_Z13servoPSPwritesi+0x4e>
    1b8a:	82 30       	cpi	r24, 0x02	; 2
    1b8c:	91 05       	cpc	r25, r1
    1b8e:	09 f4       	brne	.+2      	; 0x1b92 <_Z13servoPSPwritesi+0x44>
    1b90:	1a c1       	rjmp	.+564    	; 0x1dc6 <_Z13servoPSPwritesi+0x278>
    1b92:	83 30       	cpi	r24, 0x03	; 3
    1b94:	91 05       	cpc	r25, r1
    1b96:	09 f0       	breq	.+2      	; 0x1b9a <_Z13servoPSPwritesi+0x4c>
    1b98:	a5 c3       	rjmp	.+1866   	; 0x22e4 <__stack+0xe5>
    1b9a:	67 c1       	rjmp	.+718    	; 0x1e6a <_Z13servoPSPwritesi+0x31c>
    1b9c:	86 30       	cpi	r24, 0x06	; 6
    1b9e:	91 05       	cpc	r25, r1
    1ba0:	09 f4       	brne	.+2      	; 0x1ba4 <_Z13servoPSPwritesi+0x56>
    1ba2:	b5 c1       	rjmp	.+874    	; 0x1f0e <_Z13servoPSPwritesi+0x3c0>
    1ba4:	87 30       	cpi	r24, 0x07	; 7
    1ba6:	91 05       	cpc	r25, r1
    1ba8:	09 f0       	breq	.+2      	; 0x1bac <_Z13servoPSPwritesi+0x5e>
    1baa:	9c c3       	rjmp	.+1848   	; 0x22e4 <__stack+0xe5>
    1bac:	02 c2       	rjmp	.+1028   	; 0x1fb2 <_Z13servoPSPwritesi+0x464>
    1bae:	8c 32       	cpi	r24, 0x2C	; 44
    1bb0:	91 05       	cpc	r25, r1
    1bb2:	09 f4       	brne	.+2      	; 0x1bb6 <_Z13servoPSPwritesi+0x68>
    1bb4:	46 c3       	rjmp	.+1676   	; 0x2242 <__stack+0x43>
    1bb6:	8d 32       	cpi	r24, 0x2D	; 45
    1bb8:	91 05       	cpc	r25, r1
    1bba:	44 f4       	brge	.+16     	; 0x1bcc <_Z13servoPSPwritesi+0x7e>
    1bbc:	8b 30       	cpi	r24, 0x0B	; 11
    1bbe:	91 05       	cpc	r25, r1
    1bc0:	71 f0       	breq	.+28     	; 0x1bde <_Z13servoPSPwritesi+0x90>
    1bc2:	8c 30       	cpi	r24, 0x0C	; 12
    1bc4:	91 05       	cpc	r25, r1
    1bc6:	09 f0       	breq	.+2      	; 0x1bca <_Z13servoPSPwritesi+0x7c>
    1bc8:	8d c3       	rjmp	.+1818   	; 0x22e4 <__stack+0xe5>
    1bca:	5a c0       	rjmp	.+180    	; 0x1c80 <_Z13servoPSPwritesi+0x132>
    1bcc:	8d 32       	cpi	r24, 0x2D	; 45
    1bce:	91 05       	cpc	r25, r1
    1bd0:	09 f4       	brne	.+2      	; 0x1bd4 <_Z13servoPSPwritesi+0x86>
    1bd2:	e5 c2       	rjmp	.+1482   	; 0x219e <_Z13servoPSPwritesi+0x650>
    1bd4:	8e 32       	cpi	r24, 0x2E	; 46
    1bd6:	91 05       	cpc	r25, r1
    1bd8:	09 f0       	breq	.+2      	; 0x1bdc <_Z13servoPSPwritesi+0x8e>
    1bda:	84 c3       	rjmp	.+1800   	; 0x22e4 <__stack+0xe5>
    1bdc:	8e c2       	rjmp	.+1308   	; 0x20fa <_Z13servoPSPwritesi+0x5ac>
  {
   case 11:
      val=map(val,0,180,ICR1/40,ICR1/8);
    1bde:	c6 e8       	ldi	r28, 0x86	; 134
    1be0:	d0 e0       	ldi	r29, 0x00	; 0
    1be2:	a8 80       	ld	r10, Y
    1be4:	b9 80       	ldd	r11, Y+1	; 0x01
    1be6:	e8 80       	ld	r14, Y
    1be8:	f9 80       	ldd	r15, Y+1	; 0x01
    1bea:	00 d0       	rcall	.+0      	; 0x1bec <_Z13servoPSPwritesi+0x9e>
    1bec:	0f 92       	push	r0
    1bee:	4d b6       	in	r4, 0x3d	; 61
    1bf0:	5e b6       	in	r5, 0x3e	; 62
    1bf2:	08 94       	sec
    1bf4:	41 1c       	adc	r4, r1
    1bf6:	51 1c       	adc	r5, r1
    1bf8:	88 27       	eor	r24, r24
    1bfa:	77 fd       	sbrc	r23, 7
    1bfc:	80 95       	com	r24
    1bfe:	98 2f       	mov	r25, r24
    1c00:	0e 94 c2 13 	call	0x2784	; 0x2784 <__floatsisf>
    1c04:	3b 01       	movw	r6, r22
    1c06:	4c 01       	movw	r8, r24
    1c08:	c5 01       	movw	r24, r10
    1c0a:	68 e2       	ldi	r22, 0x28	; 40
    1c0c:	70 e0       	ldi	r23, 0x00	; 0
    1c0e:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <__udivmodhi4>
    1c12:	80 e0       	ldi	r24, 0x00	; 0
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	0e 94 c0 13 	call	0x2780	; 0x2780 <__floatunsisf>
    1c1a:	5b 01       	movw	r10, r22
    1c1c:	6c 01       	movw	r12, r24
    1c1e:	f6 94       	lsr	r15
    1c20:	e7 94       	ror	r14
    1c22:	f6 94       	lsr	r15
    1c24:	e7 94       	ror	r14
    1c26:	f6 94       	lsr	r15
    1c28:	e7 94       	ror	r14
    1c2a:	b7 01       	movw	r22, r14
    1c2c:	80 e0       	ldi	r24, 0x00	; 0
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	0e 94 c0 13 	call	0x2780	; 0x2780 <__floatunsisf>
    1c34:	f2 01       	movw	r30, r4
    1c36:	60 83       	st	Z, r22
    1c38:	71 83       	std	Z+1, r23	; 0x01
    1c3a:	82 83       	std	Z+2, r24	; 0x02
    1c3c:	93 83       	std	Z+3, r25	; 0x03
    1c3e:	c4 01       	movw	r24, r8
    1c40:	b3 01       	movw	r22, r6
    1c42:	20 e0       	ldi	r18, 0x00	; 0
    1c44:	30 e0       	ldi	r19, 0x00	; 0
    1c46:	a9 01       	movw	r20, r18
    1c48:	0f 2e       	mov	r0, r31
    1c4a:	f0 e0       	ldi	r31, 0x00	; 0
    1c4c:	ef 2e       	mov	r14, r31
    1c4e:	f0 e0       	ldi	r31, 0x00	; 0
    1c50:	ff 2e       	mov	r15, r31
    1c52:	f4 e3       	ldi	r31, 0x34	; 52
    1c54:	0f 2f       	mov	r16, r31
    1c56:	f3 e4       	ldi	r31, 0x43	; 67
    1c58:	1f 2f       	mov	r17, r31
    1c5a:	f0 2d       	mov	r31, r0
    1c5c:	0e 94 a3 08 	call	0x1146	; 0x1146 <_Z3mapddddd>
    1c60:	0f 90       	pop	r0
    1c62:	0f 90       	pop	r0
    1c64:	0f 90       	pop	r0
    1c66:	0f 90       	pop	r0
      OCR1A=ICR1-val;
    1c68:	09 90       	ld	r0, Y+
    1c6a:	d8 81       	ld	r29, Y
    1c6c:	c0 2d       	mov	r28, r0
void servoPSPwrite(short int pin,int val)           //PIN=servo pin no. on mega,val=angle value for the servo at pin
{
  switch(pin)
  {
   case 11:
      val=map(val,0,180,ICR1/40,ICR1/8);
    1c6e:	0e 94 8f 13 	call	0x271e	; 0x271e <__fixsfsi>
      OCR1A=ICR1-val;
    1c72:	c6 1b       	sub	r28, r22
    1c74:	d7 0b       	sbc	r29, r23
    1c76:	d0 93 89 00 	sts	0x0089, r29
    1c7a:	c0 93 88 00 	sts	0x0088, r28
      break;
    1c7e:	32 c3       	rjmp	.+1636   	; 0x22e4 <__stack+0xe5>
    case 12:
      val=map(val,0,180,ICR1/40,ICR1/8);
    1c80:	c6 e8       	ldi	r28, 0x86	; 134
    1c82:	d0 e0       	ldi	r29, 0x00	; 0
    1c84:	a8 80       	ld	r10, Y
    1c86:	b9 80       	ldd	r11, Y+1	; 0x01
    1c88:	e8 80       	ld	r14, Y
    1c8a:	f9 80       	ldd	r15, Y+1	; 0x01
    1c8c:	00 d0       	rcall	.+0      	; 0x1c8e <_Z13servoPSPwritesi+0x140>
    1c8e:	0f 92       	push	r0
    1c90:	4d b6       	in	r4, 0x3d	; 61
    1c92:	5e b6       	in	r5, 0x3e	; 62
    1c94:	08 94       	sec
    1c96:	41 1c       	adc	r4, r1
    1c98:	51 1c       	adc	r5, r1
    1c9a:	88 27       	eor	r24, r24
    1c9c:	77 fd       	sbrc	r23, 7
    1c9e:	80 95       	com	r24
    1ca0:	98 2f       	mov	r25, r24
    1ca2:	0e 94 c2 13 	call	0x2784	; 0x2784 <__floatsisf>
    1ca6:	3b 01       	movw	r6, r22
    1ca8:	4c 01       	movw	r8, r24
    1caa:	c5 01       	movw	r24, r10
    1cac:	68 e2       	ldi	r22, 0x28	; 40
    1cae:	70 e0       	ldi	r23, 0x00	; 0
    1cb0:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <__udivmodhi4>
    1cb4:	80 e0       	ldi	r24, 0x00	; 0
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	0e 94 c0 13 	call	0x2780	; 0x2780 <__floatunsisf>
    1cbc:	5b 01       	movw	r10, r22
    1cbe:	6c 01       	movw	r12, r24
    1cc0:	f6 94       	lsr	r15
    1cc2:	e7 94       	ror	r14
    1cc4:	f6 94       	lsr	r15
    1cc6:	e7 94       	ror	r14
    1cc8:	f6 94       	lsr	r15
    1cca:	e7 94       	ror	r14
    1ccc:	b7 01       	movw	r22, r14
    1cce:	80 e0       	ldi	r24, 0x00	; 0
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	0e 94 c0 13 	call	0x2780	; 0x2780 <__floatunsisf>
    1cd6:	f2 01       	movw	r30, r4
    1cd8:	60 83       	st	Z, r22
    1cda:	71 83       	std	Z+1, r23	; 0x01
    1cdc:	82 83       	std	Z+2, r24	; 0x02
    1cde:	93 83       	std	Z+3, r25	; 0x03
    1ce0:	c4 01       	movw	r24, r8
    1ce2:	b3 01       	movw	r22, r6
    1ce4:	20 e0       	ldi	r18, 0x00	; 0
    1ce6:	30 e0       	ldi	r19, 0x00	; 0
    1ce8:	a9 01       	movw	r20, r18
    1cea:	0f 2e       	mov	r0, r31
    1cec:	f0 e0       	ldi	r31, 0x00	; 0
    1cee:	ef 2e       	mov	r14, r31
    1cf0:	f0 e0       	ldi	r31, 0x00	; 0
    1cf2:	ff 2e       	mov	r15, r31
    1cf4:	f4 e3       	ldi	r31, 0x34	; 52
    1cf6:	0f 2f       	mov	r16, r31
    1cf8:	f3 e4       	ldi	r31, 0x43	; 67
    1cfa:	1f 2f       	mov	r17, r31
    1cfc:	f0 2d       	mov	r31, r0
    1cfe:	0e 94 a3 08 	call	0x1146	; 0x1146 <_Z3mapddddd>
    1d02:	0f 90       	pop	r0
    1d04:	0f 90       	pop	r0
    1d06:	0f 90       	pop	r0
    1d08:	0f 90       	pop	r0
      OCR1B=ICR1-val;
    1d0a:	09 90       	ld	r0, Y+
    1d0c:	d8 81       	ld	r29, Y
    1d0e:	c0 2d       	mov	r28, r0
   case 11:
      val=map(val,0,180,ICR1/40,ICR1/8);
      OCR1A=ICR1-val;
      break;
    case 12:
      val=map(val,0,180,ICR1/40,ICR1/8);
    1d10:	0e 94 8f 13 	call	0x271e	; 0x271e <__fixsfsi>
      OCR1B=ICR1-val;
    1d14:	c6 1b       	sub	r28, r22
    1d16:	d7 0b       	sbc	r29, r23
    1d18:	d0 93 8b 00 	sts	0x008B, r29
    1d1c:	c0 93 8a 00 	sts	0x008A, r28
      break;
    1d20:	e1 c2       	rjmp	.+1474   	; 0x22e4 <__stack+0xe5>
    case 5:
      val=map(val,0,180,ICR1/40,ICR1/8);
    1d22:	e6 e8       	ldi	r30, 0x86	; 134
    1d24:	f0 e0       	ldi	r31, 0x00	; 0
    1d26:	c0 81       	ld	r28, Z
    1d28:	d1 81       	ldd	r29, Z+1	; 0x01
    1d2a:	80 80       	ld	r8, Z
    1d2c:	91 80       	ldd	r9, Z+1	; 0x01
    1d2e:	00 d0       	rcall	.+0      	; 0x1d30 <_Z13servoPSPwritesi+0x1e2>
    1d30:	0f 92       	push	r0
    1d32:	6d b6       	in	r6, 0x3d	; 61
    1d34:	7e b6       	in	r7, 0x3e	; 62
    1d36:	08 94       	sec
    1d38:	61 1c       	adc	r6, r1
    1d3a:	71 1c       	adc	r7, r1
    1d3c:	88 27       	eor	r24, r24
    1d3e:	77 fd       	sbrc	r23, 7
    1d40:	80 95       	com	r24
    1d42:	98 2f       	mov	r25, r24
    1d44:	0e 94 c2 13 	call	0x2784	; 0x2784 <__floatsisf>
    1d48:	7b 01       	movw	r14, r22
    1d4a:	8c 01       	movw	r16, r24
    1d4c:	ce 01       	movw	r24, r28
    1d4e:	68 e2       	ldi	r22, 0x28	; 40
    1d50:	70 e0       	ldi	r23, 0x00	; 0
    1d52:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <__udivmodhi4>
    1d56:	80 e0       	ldi	r24, 0x00	; 0
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	0e 94 c0 13 	call	0x2780	; 0x2780 <__floatunsisf>
    1d5e:	5b 01       	movw	r10, r22
    1d60:	6c 01       	movw	r12, r24
    1d62:	96 94       	lsr	r9
    1d64:	87 94       	ror	r8
    1d66:	96 94       	lsr	r9
    1d68:	87 94       	ror	r8
    1d6a:	96 94       	lsr	r9
    1d6c:	87 94       	ror	r8
    1d6e:	b4 01       	movw	r22, r8
    1d70:	80 e0       	ldi	r24, 0x00	; 0
    1d72:	90 e0       	ldi	r25, 0x00	; 0
    1d74:	0e 94 c0 13 	call	0x2780	; 0x2780 <__floatunsisf>
    1d78:	f3 01       	movw	r30, r6
    1d7a:	60 83       	st	Z, r22
    1d7c:	71 83       	std	Z+1, r23	; 0x01
    1d7e:	82 83       	std	Z+2, r24	; 0x02
    1d80:	93 83       	std	Z+3, r25	; 0x03
    1d82:	c8 01       	movw	r24, r16
    1d84:	b7 01       	movw	r22, r14
    1d86:	20 e0       	ldi	r18, 0x00	; 0
    1d88:	30 e0       	ldi	r19, 0x00	; 0
    1d8a:	a9 01       	movw	r20, r18
    1d8c:	0f 2e       	mov	r0, r31
    1d8e:	f0 e0       	ldi	r31, 0x00	; 0
    1d90:	ef 2e       	mov	r14, r31
    1d92:	f0 e0       	ldi	r31, 0x00	; 0
    1d94:	ff 2e       	mov	r15, r31
    1d96:	f4 e3       	ldi	r31, 0x34	; 52
    1d98:	0f 2f       	mov	r16, r31
    1d9a:	f3 e4       	ldi	r31, 0x43	; 67
    1d9c:	1f 2f       	mov	r17, r31
    1d9e:	f0 2d       	mov	r31, r0
    1da0:	0e 94 a3 08 	call	0x1146	; 0x1146 <_Z3mapddddd>
    1da4:	0f 90       	pop	r0
    1da6:	0f 90       	pop	r0
    1da8:	0f 90       	pop	r0
    1daa:	0f 90       	pop	r0
      OCR3A=ICR3-val;
    1dac:	c0 91 96 00 	lds	r28, 0x0096
    1db0:	d0 91 97 00 	lds	r29, 0x0097
    case 12:
      val=map(val,0,180,ICR1/40,ICR1/8);
      OCR1B=ICR1-val;
      break;
    case 5:
      val=map(val,0,180,ICR1/40,ICR1/8);
    1db4:	0e 94 8f 13 	call	0x271e	; 0x271e <__fixsfsi>
      OCR3A=ICR3-val;
    1db8:	c6 1b       	sub	r28, r22
    1dba:	d7 0b       	sbc	r29, r23
    1dbc:	d0 93 99 00 	sts	0x0099, r29
    1dc0:	c0 93 98 00 	sts	0x0098, r28
      break;
    1dc4:	8f c2       	rjmp	.+1310   	; 0x22e4 <__stack+0xe5>
    case 2:
      val=map(val,0,180,ICR1/40,ICR1/8);
    1dc6:	e6 e8       	ldi	r30, 0x86	; 134
    1dc8:	f0 e0       	ldi	r31, 0x00	; 0
    1dca:	c0 81       	ld	r28, Z
    1dcc:	d1 81       	ldd	r29, Z+1	; 0x01
    1dce:	80 80       	ld	r8, Z
    1dd0:	91 80       	ldd	r9, Z+1	; 0x01
    1dd2:	00 d0       	rcall	.+0      	; 0x1dd4 <_Z13servoPSPwritesi+0x286>
    1dd4:	0f 92       	push	r0
    1dd6:	6d b6       	in	r6, 0x3d	; 61
    1dd8:	7e b6       	in	r7, 0x3e	; 62
    1dda:	08 94       	sec
    1ddc:	61 1c       	adc	r6, r1
    1dde:	71 1c       	adc	r7, r1
    1de0:	88 27       	eor	r24, r24
    1de2:	77 fd       	sbrc	r23, 7
    1de4:	80 95       	com	r24
    1de6:	98 2f       	mov	r25, r24
    1de8:	0e 94 c2 13 	call	0x2784	; 0x2784 <__floatsisf>
    1dec:	7b 01       	movw	r14, r22
    1dee:	8c 01       	movw	r16, r24
    1df0:	ce 01       	movw	r24, r28
    1df2:	68 e2       	ldi	r22, 0x28	; 40
    1df4:	70 e0       	ldi	r23, 0x00	; 0
    1df6:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <__udivmodhi4>
    1dfa:	80 e0       	ldi	r24, 0x00	; 0
    1dfc:	90 e0       	ldi	r25, 0x00	; 0
    1dfe:	0e 94 c0 13 	call	0x2780	; 0x2780 <__floatunsisf>
    1e02:	5b 01       	movw	r10, r22
    1e04:	6c 01       	movw	r12, r24
    1e06:	96 94       	lsr	r9
    1e08:	87 94       	ror	r8
    1e0a:	96 94       	lsr	r9
    1e0c:	87 94       	ror	r8
    1e0e:	96 94       	lsr	r9
    1e10:	87 94       	ror	r8
    1e12:	b4 01       	movw	r22, r8
    1e14:	80 e0       	ldi	r24, 0x00	; 0
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	0e 94 c0 13 	call	0x2780	; 0x2780 <__floatunsisf>
    1e1c:	f3 01       	movw	r30, r6
    1e1e:	60 83       	st	Z, r22
    1e20:	71 83       	std	Z+1, r23	; 0x01
    1e22:	82 83       	std	Z+2, r24	; 0x02
    1e24:	93 83       	std	Z+3, r25	; 0x03
    1e26:	c8 01       	movw	r24, r16
    1e28:	b7 01       	movw	r22, r14
    1e2a:	20 e0       	ldi	r18, 0x00	; 0
    1e2c:	30 e0       	ldi	r19, 0x00	; 0
    1e2e:	a9 01       	movw	r20, r18
    1e30:	0f 2e       	mov	r0, r31
    1e32:	f0 e0       	ldi	r31, 0x00	; 0
    1e34:	ef 2e       	mov	r14, r31
    1e36:	f0 e0       	ldi	r31, 0x00	; 0
    1e38:	ff 2e       	mov	r15, r31
    1e3a:	f4 e3       	ldi	r31, 0x34	; 52
    1e3c:	0f 2f       	mov	r16, r31
    1e3e:	f3 e4       	ldi	r31, 0x43	; 67
    1e40:	1f 2f       	mov	r17, r31
    1e42:	f0 2d       	mov	r31, r0
    1e44:	0e 94 a3 08 	call	0x1146	; 0x1146 <_Z3mapddddd>
    1e48:	0f 90       	pop	r0
    1e4a:	0f 90       	pop	r0
    1e4c:	0f 90       	pop	r0
    1e4e:	0f 90       	pop	r0
      OCR3B=ICR3-val;
    1e50:	c0 91 96 00 	lds	r28, 0x0096
    1e54:	d0 91 97 00 	lds	r29, 0x0097
    case 5:
      val=map(val,0,180,ICR1/40,ICR1/8);
      OCR3A=ICR3-val;
      break;
    case 2:
      val=map(val,0,180,ICR1/40,ICR1/8);
    1e58:	0e 94 8f 13 	call	0x271e	; 0x271e <__fixsfsi>
      OCR3B=ICR3-val;
    1e5c:	c6 1b       	sub	r28, r22
    1e5e:	d7 0b       	sbc	r29, r23
    1e60:	d0 93 9b 00 	sts	0x009B, r29
    1e64:	c0 93 9a 00 	sts	0x009A, r28
      break;
    1e68:	3d c2       	rjmp	.+1146   	; 0x22e4 <__stack+0xe5>
    case 3:
      val=map(val,0,180,ICR1/40,ICR1/8);
    1e6a:	e6 e8       	ldi	r30, 0x86	; 134
    1e6c:	f0 e0       	ldi	r31, 0x00	; 0
    1e6e:	c0 81       	ld	r28, Z
    1e70:	d1 81       	ldd	r29, Z+1	; 0x01
    1e72:	80 80       	ld	r8, Z
    1e74:	91 80       	ldd	r9, Z+1	; 0x01
    1e76:	00 d0       	rcall	.+0      	; 0x1e78 <_Z13servoPSPwritesi+0x32a>
    1e78:	0f 92       	push	r0
    1e7a:	6d b6       	in	r6, 0x3d	; 61
    1e7c:	7e b6       	in	r7, 0x3e	; 62
    1e7e:	08 94       	sec
    1e80:	61 1c       	adc	r6, r1
    1e82:	71 1c       	adc	r7, r1
    1e84:	88 27       	eor	r24, r24
    1e86:	77 fd       	sbrc	r23, 7
    1e88:	80 95       	com	r24
    1e8a:	98 2f       	mov	r25, r24
    1e8c:	0e 94 c2 13 	call	0x2784	; 0x2784 <__floatsisf>
    1e90:	7b 01       	movw	r14, r22
    1e92:	8c 01       	movw	r16, r24
    1e94:	ce 01       	movw	r24, r28
    1e96:	68 e2       	ldi	r22, 0x28	; 40
    1e98:	70 e0       	ldi	r23, 0x00	; 0
    1e9a:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <__udivmodhi4>
    1e9e:	80 e0       	ldi	r24, 0x00	; 0
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	0e 94 c0 13 	call	0x2780	; 0x2780 <__floatunsisf>
    1ea6:	5b 01       	movw	r10, r22
    1ea8:	6c 01       	movw	r12, r24
    1eaa:	96 94       	lsr	r9
    1eac:	87 94       	ror	r8
    1eae:	96 94       	lsr	r9
    1eb0:	87 94       	ror	r8
    1eb2:	96 94       	lsr	r9
    1eb4:	87 94       	ror	r8
    1eb6:	b4 01       	movw	r22, r8
    1eb8:	80 e0       	ldi	r24, 0x00	; 0
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	0e 94 c0 13 	call	0x2780	; 0x2780 <__floatunsisf>
    1ec0:	f3 01       	movw	r30, r6
    1ec2:	60 83       	st	Z, r22
    1ec4:	71 83       	std	Z+1, r23	; 0x01
    1ec6:	82 83       	std	Z+2, r24	; 0x02
    1ec8:	93 83       	std	Z+3, r25	; 0x03
    1eca:	c8 01       	movw	r24, r16
    1ecc:	b7 01       	movw	r22, r14
    1ece:	20 e0       	ldi	r18, 0x00	; 0
    1ed0:	30 e0       	ldi	r19, 0x00	; 0
    1ed2:	a9 01       	movw	r20, r18
    1ed4:	0f 2e       	mov	r0, r31
    1ed6:	f0 e0       	ldi	r31, 0x00	; 0
    1ed8:	ef 2e       	mov	r14, r31
    1eda:	f0 e0       	ldi	r31, 0x00	; 0
    1edc:	ff 2e       	mov	r15, r31
    1ede:	f4 e3       	ldi	r31, 0x34	; 52
    1ee0:	0f 2f       	mov	r16, r31
    1ee2:	f3 e4       	ldi	r31, 0x43	; 67
    1ee4:	1f 2f       	mov	r17, r31
    1ee6:	f0 2d       	mov	r31, r0
    1ee8:	0e 94 a3 08 	call	0x1146	; 0x1146 <_Z3mapddddd>
    1eec:	0f 90       	pop	r0
    1eee:	0f 90       	pop	r0
    1ef0:	0f 90       	pop	r0
    1ef2:	0f 90       	pop	r0
      OCR3C=ICR3-val;
    1ef4:	c0 91 96 00 	lds	r28, 0x0096
    1ef8:	d0 91 97 00 	lds	r29, 0x0097
    case 2:
      val=map(val,0,180,ICR1/40,ICR1/8);
      OCR3B=ICR3-val;
      break;
    case 3:
      val=map(val,0,180,ICR1/40,ICR1/8);
    1efc:	0e 94 8f 13 	call	0x271e	; 0x271e <__fixsfsi>
      OCR3C=ICR3-val;
    1f00:	c6 1b       	sub	r28, r22
    1f02:	d7 0b       	sbc	r29, r23
    1f04:	d0 93 9d 00 	sts	0x009D, r29
    1f08:	c0 93 9c 00 	sts	0x009C, r28
      break;
    1f0c:	eb c1       	rjmp	.+982    	; 0x22e4 <__stack+0xe5>
    case 6:
      val=map(val,0,180,ICR1/40,ICR1/8);
    1f0e:	e6 e8       	ldi	r30, 0x86	; 134
    1f10:	f0 e0       	ldi	r31, 0x00	; 0
    1f12:	c0 81       	ld	r28, Z
    1f14:	d1 81       	ldd	r29, Z+1	; 0x01
    1f16:	80 80       	ld	r8, Z
    1f18:	91 80       	ldd	r9, Z+1	; 0x01
    1f1a:	00 d0       	rcall	.+0      	; 0x1f1c <_Z13servoPSPwritesi+0x3ce>
    1f1c:	0f 92       	push	r0
    1f1e:	6d b6       	in	r6, 0x3d	; 61
    1f20:	7e b6       	in	r7, 0x3e	; 62
    1f22:	08 94       	sec
    1f24:	61 1c       	adc	r6, r1
    1f26:	71 1c       	adc	r7, r1
    1f28:	88 27       	eor	r24, r24
    1f2a:	77 fd       	sbrc	r23, 7
    1f2c:	80 95       	com	r24
    1f2e:	98 2f       	mov	r25, r24
    1f30:	0e 94 c2 13 	call	0x2784	; 0x2784 <__floatsisf>
    1f34:	7b 01       	movw	r14, r22
    1f36:	8c 01       	movw	r16, r24
    1f38:	ce 01       	movw	r24, r28
    1f3a:	68 e2       	ldi	r22, 0x28	; 40
    1f3c:	70 e0       	ldi	r23, 0x00	; 0
    1f3e:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <__udivmodhi4>
    1f42:	80 e0       	ldi	r24, 0x00	; 0
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	0e 94 c0 13 	call	0x2780	; 0x2780 <__floatunsisf>
    1f4a:	5b 01       	movw	r10, r22
    1f4c:	6c 01       	movw	r12, r24
    1f4e:	96 94       	lsr	r9
    1f50:	87 94       	ror	r8
    1f52:	96 94       	lsr	r9
    1f54:	87 94       	ror	r8
    1f56:	96 94       	lsr	r9
    1f58:	87 94       	ror	r8
    1f5a:	b4 01       	movw	r22, r8
    1f5c:	80 e0       	ldi	r24, 0x00	; 0
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	0e 94 c0 13 	call	0x2780	; 0x2780 <__floatunsisf>
    1f64:	f3 01       	movw	r30, r6
    1f66:	60 83       	st	Z, r22
    1f68:	71 83       	std	Z+1, r23	; 0x01
    1f6a:	82 83       	std	Z+2, r24	; 0x02
    1f6c:	93 83       	std	Z+3, r25	; 0x03
    1f6e:	c8 01       	movw	r24, r16
    1f70:	b7 01       	movw	r22, r14
    1f72:	20 e0       	ldi	r18, 0x00	; 0
    1f74:	30 e0       	ldi	r19, 0x00	; 0
    1f76:	a9 01       	movw	r20, r18
    1f78:	0f 2e       	mov	r0, r31
    1f7a:	f0 e0       	ldi	r31, 0x00	; 0
    1f7c:	ef 2e       	mov	r14, r31
    1f7e:	f0 e0       	ldi	r31, 0x00	; 0
    1f80:	ff 2e       	mov	r15, r31
    1f82:	f4 e3       	ldi	r31, 0x34	; 52
    1f84:	0f 2f       	mov	r16, r31
    1f86:	f3 e4       	ldi	r31, 0x43	; 67
    1f88:	1f 2f       	mov	r17, r31
    1f8a:	f0 2d       	mov	r31, r0
    1f8c:	0e 94 a3 08 	call	0x1146	; 0x1146 <_Z3mapddddd>
    1f90:	0f 90       	pop	r0
    1f92:	0f 90       	pop	r0
    1f94:	0f 90       	pop	r0
    1f96:	0f 90       	pop	r0
      OCR4A=ICR4-val;
    1f98:	c0 91 a6 00 	lds	r28, 0x00A6
    1f9c:	d0 91 a7 00 	lds	r29, 0x00A7
    case 3:
      val=map(val,0,180,ICR1/40,ICR1/8);
      OCR3C=ICR3-val;
      break;
    case 6:
      val=map(val,0,180,ICR1/40,ICR1/8);
    1fa0:	0e 94 8f 13 	call	0x271e	; 0x271e <__fixsfsi>
      OCR4A=ICR4-val;
    1fa4:	c6 1b       	sub	r28, r22
    1fa6:	d7 0b       	sbc	r29, r23
    1fa8:	d0 93 a9 00 	sts	0x00A9, r29
    1fac:	c0 93 a8 00 	sts	0x00A8, r28
      break;
    1fb0:	99 c1       	rjmp	.+818    	; 0x22e4 <__stack+0xe5>
    case 7:
      val=map(val,0,180,ICR1/40,ICR1/8);
    1fb2:	e6 e8       	ldi	r30, 0x86	; 134
    1fb4:	f0 e0       	ldi	r31, 0x00	; 0
    1fb6:	c0 81       	ld	r28, Z
    1fb8:	d1 81       	ldd	r29, Z+1	; 0x01
    1fba:	80 80       	ld	r8, Z
    1fbc:	91 80       	ldd	r9, Z+1	; 0x01
    1fbe:	00 d0       	rcall	.+0      	; 0x1fc0 <_Z13servoPSPwritesi+0x472>
    1fc0:	0f 92       	push	r0
    1fc2:	6d b6       	in	r6, 0x3d	; 61
    1fc4:	7e b6       	in	r7, 0x3e	; 62
    1fc6:	08 94       	sec
    1fc8:	61 1c       	adc	r6, r1
    1fca:	71 1c       	adc	r7, r1
    1fcc:	88 27       	eor	r24, r24
    1fce:	77 fd       	sbrc	r23, 7
    1fd0:	80 95       	com	r24
    1fd2:	98 2f       	mov	r25, r24
    1fd4:	0e 94 c2 13 	call	0x2784	; 0x2784 <__floatsisf>
    1fd8:	7b 01       	movw	r14, r22
    1fda:	8c 01       	movw	r16, r24
    1fdc:	ce 01       	movw	r24, r28
    1fde:	68 e2       	ldi	r22, 0x28	; 40
    1fe0:	70 e0       	ldi	r23, 0x00	; 0
    1fe2:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <__udivmodhi4>
    1fe6:	80 e0       	ldi	r24, 0x00	; 0
    1fe8:	90 e0       	ldi	r25, 0x00	; 0
    1fea:	0e 94 c0 13 	call	0x2780	; 0x2780 <__floatunsisf>
    1fee:	5b 01       	movw	r10, r22
    1ff0:	6c 01       	movw	r12, r24
    1ff2:	96 94       	lsr	r9
    1ff4:	87 94       	ror	r8
    1ff6:	96 94       	lsr	r9
    1ff8:	87 94       	ror	r8
    1ffa:	96 94       	lsr	r9
    1ffc:	87 94       	ror	r8
    1ffe:	b4 01       	movw	r22, r8
    2000:	80 e0       	ldi	r24, 0x00	; 0
    2002:	90 e0       	ldi	r25, 0x00	; 0
    2004:	0e 94 c0 13 	call	0x2780	; 0x2780 <__floatunsisf>
    2008:	f3 01       	movw	r30, r6
    200a:	60 83       	st	Z, r22
    200c:	71 83       	std	Z+1, r23	; 0x01
    200e:	82 83       	std	Z+2, r24	; 0x02
    2010:	93 83       	std	Z+3, r25	; 0x03
    2012:	c8 01       	movw	r24, r16
    2014:	b7 01       	movw	r22, r14
    2016:	20 e0       	ldi	r18, 0x00	; 0
    2018:	30 e0       	ldi	r19, 0x00	; 0
    201a:	a9 01       	movw	r20, r18
    201c:	0f 2e       	mov	r0, r31
    201e:	f0 e0       	ldi	r31, 0x00	; 0
    2020:	ef 2e       	mov	r14, r31
    2022:	f0 e0       	ldi	r31, 0x00	; 0
    2024:	ff 2e       	mov	r15, r31
    2026:	f4 e3       	ldi	r31, 0x34	; 52
    2028:	0f 2f       	mov	r16, r31
    202a:	f3 e4       	ldi	r31, 0x43	; 67
    202c:	1f 2f       	mov	r17, r31
    202e:	f0 2d       	mov	r31, r0
    2030:	0e 94 a3 08 	call	0x1146	; 0x1146 <_Z3mapddddd>
    2034:	0f 90       	pop	r0
    2036:	0f 90       	pop	r0
    2038:	0f 90       	pop	r0
    203a:	0f 90       	pop	r0
      OCR4B=ICR4-val;
    203c:	c0 91 a6 00 	lds	r28, 0x00A6
    2040:	d0 91 a7 00 	lds	r29, 0x00A7
    case 6:
      val=map(val,0,180,ICR1/40,ICR1/8);
      OCR4A=ICR4-val;
      break;
    case 7:
      val=map(val,0,180,ICR1/40,ICR1/8);
    2044:	0e 94 8f 13 	call	0x271e	; 0x271e <__fixsfsi>
      OCR4B=ICR4-val;
    2048:	c6 1b       	sub	r28, r22
    204a:	d7 0b       	sbc	r29, r23
    204c:	d0 93 ab 00 	sts	0x00AB, r29
    2050:	c0 93 aa 00 	sts	0x00AA, r28
      break; 
    2054:	47 c1       	rjmp	.+654    	; 0x22e4 <__stack+0xe5>
    case 8:
      val=map(val,0,180,ICR1/40,ICR1/8);
    2056:	e6 e8       	ldi	r30, 0x86	; 134
    2058:	f0 e0       	ldi	r31, 0x00	; 0
    205a:	c0 81       	ld	r28, Z
    205c:	d1 81       	ldd	r29, Z+1	; 0x01
    205e:	80 80       	ld	r8, Z
    2060:	91 80       	ldd	r9, Z+1	; 0x01
    2062:	00 d0       	rcall	.+0      	; 0x2064 <_Z13servoPSPwritesi+0x516>
    2064:	0f 92       	push	r0
    2066:	6d b6       	in	r6, 0x3d	; 61
    2068:	7e b6       	in	r7, 0x3e	; 62
    206a:	08 94       	sec
    206c:	61 1c       	adc	r6, r1
    206e:	71 1c       	adc	r7, r1
    2070:	88 27       	eor	r24, r24
    2072:	77 fd       	sbrc	r23, 7
    2074:	80 95       	com	r24
    2076:	98 2f       	mov	r25, r24
    2078:	0e 94 c2 13 	call	0x2784	; 0x2784 <__floatsisf>
    207c:	7b 01       	movw	r14, r22
    207e:	8c 01       	movw	r16, r24
    2080:	ce 01       	movw	r24, r28
    2082:	68 e2       	ldi	r22, 0x28	; 40
    2084:	70 e0       	ldi	r23, 0x00	; 0
    2086:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <__udivmodhi4>
    208a:	80 e0       	ldi	r24, 0x00	; 0
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	0e 94 c0 13 	call	0x2780	; 0x2780 <__floatunsisf>
    2092:	5b 01       	movw	r10, r22
    2094:	6c 01       	movw	r12, r24
    2096:	96 94       	lsr	r9
    2098:	87 94       	ror	r8
    209a:	96 94       	lsr	r9
    209c:	87 94       	ror	r8
    209e:	96 94       	lsr	r9
    20a0:	87 94       	ror	r8
    20a2:	b4 01       	movw	r22, r8
    20a4:	80 e0       	ldi	r24, 0x00	; 0
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	0e 94 c0 13 	call	0x2780	; 0x2780 <__floatunsisf>
    20ac:	f3 01       	movw	r30, r6
    20ae:	60 83       	st	Z, r22
    20b0:	71 83       	std	Z+1, r23	; 0x01
    20b2:	82 83       	std	Z+2, r24	; 0x02
    20b4:	93 83       	std	Z+3, r25	; 0x03
    20b6:	c8 01       	movw	r24, r16
    20b8:	b7 01       	movw	r22, r14
    20ba:	20 e0       	ldi	r18, 0x00	; 0
    20bc:	30 e0       	ldi	r19, 0x00	; 0
    20be:	a9 01       	movw	r20, r18
    20c0:	0f 2e       	mov	r0, r31
    20c2:	f0 e0       	ldi	r31, 0x00	; 0
    20c4:	ef 2e       	mov	r14, r31
    20c6:	f0 e0       	ldi	r31, 0x00	; 0
    20c8:	ff 2e       	mov	r15, r31
    20ca:	f4 e3       	ldi	r31, 0x34	; 52
    20cc:	0f 2f       	mov	r16, r31
    20ce:	f3 e4       	ldi	r31, 0x43	; 67
    20d0:	1f 2f       	mov	r17, r31
    20d2:	f0 2d       	mov	r31, r0
    20d4:	0e 94 a3 08 	call	0x1146	; 0x1146 <_Z3mapddddd>
    20d8:	0f 90       	pop	r0
    20da:	0f 90       	pop	r0
    20dc:	0f 90       	pop	r0
    20de:	0f 90       	pop	r0
      OCR4C=ICR4-val;
    20e0:	c0 91 a6 00 	lds	r28, 0x00A6
    20e4:	d0 91 a7 00 	lds	r29, 0x00A7
    case 7:
      val=map(val,0,180,ICR1/40,ICR1/8);
      OCR4B=ICR4-val;
      break; 
    case 8:
      val=map(val,0,180,ICR1/40,ICR1/8);
    20e8:	0e 94 8f 13 	call	0x271e	; 0x271e <__fixsfsi>
      OCR4C=ICR4-val;
    20ec:	c6 1b       	sub	r28, r22
    20ee:	d7 0b       	sbc	r29, r23
    20f0:	d0 93 ad 00 	sts	0x00AD, r29
    20f4:	c0 93 ac 00 	sts	0x00AC, r28
      break;
    20f8:	f5 c0       	rjmp	.+490    	; 0x22e4 <__stack+0xe5>
    case 46:
      val=map(val,0,180,ICR1/40,ICR1/8);
    20fa:	e6 e8       	ldi	r30, 0x86	; 134
    20fc:	f0 e0       	ldi	r31, 0x00	; 0
    20fe:	c0 81       	ld	r28, Z
    2100:	d1 81       	ldd	r29, Z+1	; 0x01
    2102:	80 80       	ld	r8, Z
    2104:	91 80       	ldd	r9, Z+1	; 0x01
    2106:	00 d0       	rcall	.+0      	; 0x2108 <_Z13servoPSPwritesi+0x5ba>
    2108:	0f 92       	push	r0
    210a:	6d b6       	in	r6, 0x3d	; 61
    210c:	7e b6       	in	r7, 0x3e	; 62
    210e:	08 94       	sec
    2110:	61 1c       	adc	r6, r1
    2112:	71 1c       	adc	r7, r1
    2114:	88 27       	eor	r24, r24
    2116:	77 fd       	sbrc	r23, 7
    2118:	80 95       	com	r24
    211a:	98 2f       	mov	r25, r24
    211c:	0e 94 c2 13 	call	0x2784	; 0x2784 <__floatsisf>
    2120:	7b 01       	movw	r14, r22
    2122:	8c 01       	movw	r16, r24
    2124:	ce 01       	movw	r24, r28
    2126:	68 e2       	ldi	r22, 0x28	; 40
    2128:	70 e0       	ldi	r23, 0x00	; 0
    212a:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <__udivmodhi4>
    212e:	80 e0       	ldi	r24, 0x00	; 0
    2130:	90 e0       	ldi	r25, 0x00	; 0
    2132:	0e 94 c0 13 	call	0x2780	; 0x2780 <__floatunsisf>
    2136:	5b 01       	movw	r10, r22
    2138:	6c 01       	movw	r12, r24
    213a:	96 94       	lsr	r9
    213c:	87 94       	ror	r8
    213e:	96 94       	lsr	r9
    2140:	87 94       	ror	r8
    2142:	96 94       	lsr	r9
    2144:	87 94       	ror	r8
    2146:	b4 01       	movw	r22, r8
    2148:	80 e0       	ldi	r24, 0x00	; 0
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	0e 94 c0 13 	call	0x2780	; 0x2780 <__floatunsisf>
    2150:	f3 01       	movw	r30, r6
    2152:	60 83       	st	Z, r22
    2154:	71 83       	std	Z+1, r23	; 0x01
    2156:	82 83       	std	Z+2, r24	; 0x02
    2158:	93 83       	std	Z+3, r25	; 0x03
    215a:	c8 01       	movw	r24, r16
    215c:	b7 01       	movw	r22, r14
    215e:	20 e0       	ldi	r18, 0x00	; 0
    2160:	30 e0       	ldi	r19, 0x00	; 0
    2162:	a9 01       	movw	r20, r18
    2164:	0f 2e       	mov	r0, r31
    2166:	f0 e0       	ldi	r31, 0x00	; 0
    2168:	ef 2e       	mov	r14, r31
    216a:	f0 e0       	ldi	r31, 0x00	; 0
    216c:	ff 2e       	mov	r15, r31
    216e:	f4 e3       	ldi	r31, 0x34	; 52
    2170:	0f 2f       	mov	r16, r31
    2172:	f3 e4       	ldi	r31, 0x43	; 67
    2174:	1f 2f       	mov	r17, r31
    2176:	f0 2d       	mov	r31, r0
    2178:	0e 94 a3 08 	call	0x1146	; 0x1146 <_Z3mapddddd>
    217c:	0f 90       	pop	r0
    217e:	0f 90       	pop	r0
    2180:	0f 90       	pop	r0
    2182:	0f 90       	pop	r0
      OCR5A=ICR5-val;
    2184:	c0 91 26 01 	lds	r28, 0x0126
    2188:	d0 91 27 01 	lds	r29, 0x0127
    case 8:
      val=map(val,0,180,ICR1/40,ICR1/8);
      OCR4C=ICR4-val;
      break;
    case 46:
      val=map(val,0,180,ICR1/40,ICR1/8);
    218c:	0e 94 8f 13 	call	0x271e	; 0x271e <__fixsfsi>
      OCR5A=ICR5-val;
    2190:	c6 1b       	sub	r28, r22
    2192:	d7 0b       	sbc	r29, r23
    2194:	d0 93 29 01 	sts	0x0129, r29
    2198:	c0 93 28 01 	sts	0x0128, r28
      break;
    219c:	a3 c0       	rjmp	.+326    	; 0x22e4 <__stack+0xe5>
    case 45:
      val=map(val,0,180,ICR1/40,ICR1/8);
    219e:	e6 e8       	ldi	r30, 0x86	; 134
    21a0:	f0 e0       	ldi	r31, 0x00	; 0
    21a2:	c0 81       	ld	r28, Z
    21a4:	d1 81       	ldd	r29, Z+1	; 0x01
    21a6:	80 80       	ld	r8, Z
    21a8:	91 80       	ldd	r9, Z+1	; 0x01
    21aa:	00 d0       	rcall	.+0      	; 0x21ac <_Z13servoPSPwritesi+0x65e>
    21ac:	0f 92       	push	r0
    21ae:	6d b6       	in	r6, 0x3d	; 61
    21b0:	7e b6       	in	r7, 0x3e	; 62
    21b2:	08 94       	sec
    21b4:	61 1c       	adc	r6, r1
    21b6:	71 1c       	adc	r7, r1
    21b8:	88 27       	eor	r24, r24
    21ba:	77 fd       	sbrc	r23, 7
    21bc:	80 95       	com	r24
    21be:	98 2f       	mov	r25, r24
    21c0:	0e 94 c2 13 	call	0x2784	; 0x2784 <__floatsisf>
    21c4:	7b 01       	movw	r14, r22
    21c6:	8c 01       	movw	r16, r24
    21c8:	ce 01       	movw	r24, r28
    21ca:	68 e2       	ldi	r22, 0x28	; 40
    21cc:	70 e0       	ldi	r23, 0x00	; 0
    21ce:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <__udivmodhi4>
    21d2:	80 e0       	ldi	r24, 0x00	; 0
    21d4:	90 e0       	ldi	r25, 0x00	; 0
    21d6:	0e 94 c0 13 	call	0x2780	; 0x2780 <__floatunsisf>
    21da:	5b 01       	movw	r10, r22
    21dc:	6c 01       	movw	r12, r24
    21de:	96 94       	lsr	r9
    21e0:	87 94       	ror	r8
    21e2:	96 94       	lsr	r9
    21e4:	87 94       	ror	r8
    21e6:	96 94       	lsr	r9
    21e8:	87 94       	ror	r8
    21ea:	b4 01       	movw	r22, r8
    21ec:	80 e0       	ldi	r24, 0x00	; 0
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	0e 94 c0 13 	call	0x2780	; 0x2780 <__floatunsisf>
    21f4:	f3 01       	movw	r30, r6
    21f6:	60 83       	st	Z, r22
    21f8:	71 83       	std	Z+1, r23	; 0x01
    21fa:	82 83       	std	Z+2, r24	; 0x02
    21fc:	93 83       	std	Z+3, r25	; 0x03
    21fe:	c8 01       	movw	r24, r16
    2200:	b7 01       	movw	r22, r14
    2202:	20 e0       	ldi	r18, 0x00	; 0
    2204:	30 e0       	ldi	r19, 0x00	; 0
    2206:	a9 01       	movw	r20, r18
    2208:	0f 2e       	mov	r0, r31
    220a:	f0 e0       	ldi	r31, 0x00	; 0
    220c:	ef 2e       	mov	r14, r31
    220e:	f0 e0       	ldi	r31, 0x00	; 0
    2210:	ff 2e       	mov	r15, r31
    2212:	f4 e3       	ldi	r31, 0x34	; 52
    2214:	0f 2f       	mov	r16, r31
    2216:	f3 e4       	ldi	r31, 0x43	; 67
    2218:	1f 2f       	mov	r17, r31
    221a:	f0 2d       	mov	r31, r0
    221c:	0e 94 a3 08 	call	0x1146	; 0x1146 <_Z3mapddddd>
    2220:	0f 90       	pop	r0
    2222:	0f 90       	pop	r0
    2224:	0f 90       	pop	r0
    2226:	0f 90       	pop	r0
      OCR5B=ICR5-val;
    2228:	c0 91 26 01 	lds	r28, 0x0126
    222c:	d0 91 27 01 	lds	r29, 0x0127
    case 46:
      val=map(val,0,180,ICR1/40,ICR1/8);
      OCR5A=ICR5-val;
      break;
    case 45:
      val=map(val,0,180,ICR1/40,ICR1/8);
    2230:	0e 94 8f 13 	call	0x271e	; 0x271e <__fixsfsi>
      OCR5B=ICR5-val;
    2234:	c6 1b       	sub	r28, r22
    2236:	d7 0b       	sbc	r29, r23
    2238:	d0 93 2b 01 	sts	0x012B, r29
    223c:	c0 93 2a 01 	sts	0x012A, r28
      break;
    2240:	51 c0       	rjmp	.+162    	; 0x22e4 <__stack+0xe5>
    case 44:
      val=map(val,0,180,ICR1/40,ICR1/8);
    2242:	e6 e8       	ldi	r30, 0x86	; 134
    2244:	f0 e0       	ldi	r31, 0x00	; 0
    2246:	c0 81       	ld	r28, Z
    2248:	d1 81       	ldd	r29, Z+1	; 0x01
    224a:	80 80       	ld	r8, Z
    224c:	91 80       	ldd	r9, Z+1	; 0x01
    224e:	00 d0       	rcall	.+0      	; 0x2250 <__stack+0x51>
    2250:	0f 92       	push	r0
    2252:	6d b6       	in	r6, 0x3d	; 61
    2254:	7e b6       	in	r7, 0x3e	; 62
    2256:	08 94       	sec
    2258:	61 1c       	adc	r6, r1
    225a:	71 1c       	adc	r7, r1
    225c:	88 27       	eor	r24, r24
    225e:	77 fd       	sbrc	r23, 7
    2260:	80 95       	com	r24
    2262:	98 2f       	mov	r25, r24
    2264:	0e 94 c2 13 	call	0x2784	; 0x2784 <__floatsisf>
    2268:	7b 01       	movw	r14, r22
    226a:	8c 01       	movw	r16, r24
    226c:	ce 01       	movw	r24, r28
    226e:	68 e2       	ldi	r22, 0x28	; 40
    2270:	70 e0       	ldi	r23, 0x00	; 0
    2272:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <__udivmodhi4>
    2276:	80 e0       	ldi	r24, 0x00	; 0
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	0e 94 c0 13 	call	0x2780	; 0x2780 <__floatunsisf>
    227e:	5b 01       	movw	r10, r22
    2280:	6c 01       	movw	r12, r24
    2282:	96 94       	lsr	r9
    2284:	87 94       	ror	r8
    2286:	96 94       	lsr	r9
    2288:	87 94       	ror	r8
    228a:	96 94       	lsr	r9
    228c:	87 94       	ror	r8
    228e:	b4 01       	movw	r22, r8
    2290:	80 e0       	ldi	r24, 0x00	; 0
    2292:	90 e0       	ldi	r25, 0x00	; 0
    2294:	0e 94 c0 13 	call	0x2780	; 0x2780 <__floatunsisf>
    2298:	f3 01       	movw	r30, r6
    229a:	60 83       	st	Z, r22
    229c:	71 83       	std	Z+1, r23	; 0x01
    229e:	82 83       	std	Z+2, r24	; 0x02
    22a0:	93 83       	std	Z+3, r25	; 0x03
    22a2:	c8 01       	movw	r24, r16
    22a4:	b7 01       	movw	r22, r14
    22a6:	20 e0       	ldi	r18, 0x00	; 0
    22a8:	30 e0       	ldi	r19, 0x00	; 0
    22aa:	a9 01       	movw	r20, r18
    22ac:	0f 2e       	mov	r0, r31
    22ae:	f0 e0       	ldi	r31, 0x00	; 0
    22b0:	ef 2e       	mov	r14, r31
    22b2:	f0 e0       	ldi	r31, 0x00	; 0
    22b4:	ff 2e       	mov	r15, r31
    22b6:	f4 e3       	ldi	r31, 0x34	; 52
    22b8:	0f 2f       	mov	r16, r31
    22ba:	f3 e4       	ldi	r31, 0x43	; 67
    22bc:	1f 2f       	mov	r17, r31
    22be:	f0 2d       	mov	r31, r0
    22c0:	0e 94 a3 08 	call	0x1146	; 0x1146 <_Z3mapddddd>
    22c4:	0f 90       	pop	r0
    22c6:	0f 90       	pop	r0
    22c8:	0f 90       	pop	r0
    22ca:	0f 90       	pop	r0
      OCR5C=ICR5-val;
    22cc:	c0 91 26 01 	lds	r28, 0x0126
    22d0:	d0 91 27 01 	lds	r29, 0x0127
    case 45:
      val=map(val,0,180,ICR1/40,ICR1/8);
      OCR5B=ICR5-val;
      break;
    case 44:
      val=map(val,0,180,ICR1/40,ICR1/8);
    22d4:	0e 94 8f 13 	call	0x271e	; 0x271e <__fixsfsi>
      OCR5C=ICR5-val;
    22d8:	c6 1b       	sub	r28, r22
    22da:	d7 0b       	sbc	r29, r23
    22dc:	d0 93 2d 01 	sts	0x012D, r29
    22e0:	c0 93 2c 01 	sts	0x012C, r28
      break;
  }
  //val = map(val,0,180,125,625);             //mapping one to one values
  //OCR1A= ICR1-val;                              //GENERATING PULSE IN INVERTED MODE
 //_delay_ms(500);                              //give delay in the main code
}
    22e4:	df 91       	pop	r29
    22e6:	cf 91       	pop	r28
    22e8:	1f 91       	pop	r17
    22ea:	0f 91       	pop	r16
    22ec:	ff 90       	pop	r15
    22ee:	ef 90       	pop	r14
    22f0:	df 90       	pop	r13
    22f2:	cf 90       	pop	r12
    22f4:	bf 90       	pop	r11
    22f6:	af 90       	pop	r10
    22f8:	9f 90       	pop	r9
    22fa:	8f 90       	pop	r8
    22fc:	7f 90       	pop	r7
    22fe:	6f 90       	pop	r6
    2300:	5f 90       	pop	r5
    2302:	4f 90       	pop	r4
    2304:	08 95       	ret

00002306 <_Z8deattachs>:

void deattach(short int pin1)                   //pin1=pin no. to be deattached
{
 switch(pin1)
    2306:	88 30       	cpi	r24, 0x08	; 8
    2308:	91 05       	cpc	r25, r1
    230a:	09 f4       	brne	.+2      	; 0x230e <_Z8deattachs+0x8>
    230c:	ba c0       	rjmp	.+372    	; 0x2482 <_Z8deattachs+0x17c>
    230e:	89 30       	cpi	r24, 0x09	; 9
    2310:	91 05       	cpc	r25, r1
    2312:	cc f4       	brge	.+50     	; 0x2346 <_Z8deattachs+0x40>
    2314:	85 30       	cpi	r24, 0x05	; 5
    2316:	91 05       	cpc	r25, r1
    2318:	09 f4       	brne	.+2      	; 0x231c <_Z8deattachs+0x16>
    231a:	51 c0       	rjmp	.+162    	; 0x23be <_Z8deattachs+0xb8>
    231c:	86 30       	cpi	r24, 0x06	; 6
    231e:	91 05       	cpc	r25, r1
    2320:	4c f4       	brge	.+18     	; 0x2334 <_Z8deattachs+0x2e>
    2322:	82 30       	cpi	r24, 0x02	; 2
    2324:	91 05       	cpc	r25, r1
    2326:	09 f4       	brne	.+2      	; 0x232a <_Z8deattachs+0x24>
    2328:	5c c0       	rjmp	.+184    	; 0x23e2 <_Z8deattachs+0xdc>
    232a:	83 30       	cpi	r24, 0x03	; 3
    232c:	91 05       	cpc	r25, r1
    232e:	09 f0       	breq	.+2      	; 0x2332 <_Z8deattachs+0x2c>
    2330:	ff c0       	rjmp	.+510    	; 0x2530 <_Z8deattachs+0x22a>
    2332:	69 c0       	rjmp	.+210    	; 0x2406 <_Z8deattachs+0x100>
    2334:	86 30       	cpi	r24, 0x06	; 6
    2336:	91 05       	cpc	r25, r1
    2338:	09 f4       	brne	.+2      	; 0x233c <_Z8deattachs+0x36>
    233a:	77 c0       	rjmp	.+238    	; 0x242a <_Z8deattachs+0x124>
    233c:	87 30       	cpi	r24, 0x07	; 7
    233e:	91 05       	cpc	r25, r1
    2340:	09 f0       	breq	.+2      	; 0x2344 <_Z8deattachs+0x3e>
    2342:	f6 c0       	rjmp	.+492    	; 0x2530 <_Z8deattachs+0x22a>
    2344:	88 c0       	rjmp	.+272    	; 0x2456 <_Z8deattachs+0x150>
    2346:	8c 32       	cpi	r24, 0x2C	; 44
    2348:	91 05       	cpc	r25, r1
    234a:	09 f4       	brne	.+2      	; 0x234e <_Z8deattachs+0x48>
    234c:	dc c0       	rjmp	.+440    	; 0x2506 <_Z8deattachs+0x200>
    234e:	8d 32       	cpi	r24, 0x2D	; 45
    2350:	91 05       	cpc	r25, r1
    2352:	44 f4       	brge	.+16     	; 0x2364 <_Z8deattachs+0x5e>
    2354:	8b 30       	cpi	r24, 0x0B	; 11
    2356:	91 05       	cpc	r25, r1
    2358:	71 f0       	breq	.+28     	; 0x2376 <_Z8deattachs+0x70>
    235a:	8c 30       	cpi	r24, 0x0C	; 12
    235c:	91 05       	cpc	r25, r1
    235e:	09 f0       	breq	.+2      	; 0x2362 <_Z8deattachs+0x5c>
    2360:	e7 c0       	rjmp	.+462    	; 0x2530 <_Z8deattachs+0x22a>
    2362:	1b c0       	rjmp	.+54     	; 0x239a <_Z8deattachs+0x94>
    2364:	8d 32       	cpi	r24, 0x2D	; 45
    2366:	91 05       	cpc	r25, r1
    2368:	09 f4       	brne	.+2      	; 0x236c <_Z8deattachs+0x66>
    236a:	b7 c0       	rjmp	.+366    	; 0x24da <_Z8deattachs+0x1d4>
    236c:	8e 32       	cpi	r24, 0x2E	; 46
    236e:	91 05       	cpc	r25, r1
    2370:	09 f0       	breq	.+2      	; 0x2374 <_Z8deattachs+0x6e>
    2372:	de c0       	rjmp	.+444    	; 0x2530 <_Z8deattachs+0x22a>
    2374:	9c c0       	rjmp	.+312    	; 0x24ae <_Z8deattachs+0x1a8>
  {
   case 11 :                            //OC1A
      DDRB|=(1<<PB5); // PORTB as OUTPUT
    2376:	25 9a       	sbi	0x04, 5	; 4
      TCCR1A|=(0<<WGM11)|(0<<COM1A1)|(0<<COM1A0);  //SETTING PRESCALAR AS 64 
    2378:	e0 e8       	ldi	r30, 0x80	; 128
    237a:	f0 e0       	ldi	r31, 0x00	; 0
    237c:	80 81       	ld	r24, Z
    237e:	80 83       	st	Z, r24
      TCCR1B|=(0<<WGM12)|(0<<WGM13)|(0<<CS10)|(0<<CS11); //FAST PWM MODE
    2380:	e1 e8       	ldi	r30, 0x81	; 129
    2382:	f0 e0       	ldi	r31, 0x00	; 0
    2384:	80 81       	ld	r24, Z
    2386:	80 83       	st	Z, r24
      ICR1=0;                    //generating 20msec pulse (pwm method)
    2388:	10 92 87 00 	sts	0x0087, r1
    238c:	10 92 86 00 	sts	0x0086, r1
      OCR1A=0;
    2390:	10 92 89 00 	sts	0x0089, r1
    2394:	10 92 88 00 	sts	0x0088, r1
      break; 
    2398:	08 95       	ret

   case 12 :                            //OC1B
      DDRB|=(1<<PB6); // PORTB as OUTPUT
    239a:	26 9a       	sbi	0x04, 6	; 4
      TCCR1A|=(0<<WGM11)|(0<<COM1B1)|(0<<COM1B0);  //SETTING PRESCALAR AS 64 
    239c:	e0 e8       	ldi	r30, 0x80	; 128
    239e:	f0 e0       	ldi	r31, 0x00	; 0
    23a0:	80 81       	ld	r24, Z
    23a2:	80 83       	st	Z, r24
      TCCR1B|=(0<<WGM12)|(0<<WGM13)|(0<<CS10)|(0<<CS11); //FAST PWM MODE
    23a4:	e1 e8       	ldi	r30, 0x81	; 129
    23a6:	f0 e0       	ldi	r31, 0x00	; 0
    23a8:	80 81       	ld	r24, Z
    23aa:	80 83       	st	Z, r24
      ICR1=0;                    //generating 20msec pulse (pwm method)
    23ac:	10 92 87 00 	sts	0x0087, r1
    23b0:	10 92 86 00 	sts	0x0086, r1
      OCR1B=0;
    23b4:	10 92 8b 00 	sts	0x008B, r1
    23b8:	10 92 8a 00 	sts	0x008A, r1
      break;
    23bc:	08 95       	ret

    case 5 :                            //OC3A
      DDRE|=(1<<PE3); // PORTB as OUTPUT
    23be:	6b 9a       	sbi	0x0d, 3	; 13
      TCCR3A|=(0<<WGM31)|(0<<COM3A1)|(0<<COM3A0);  //SETTING PRESCALAR AS 64 
    23c0:	e0 e9       	ldi	r30, 0x90	; 144
    23c2:	f0 e0       	ldi	r31, 0x00	; 0
    23c4:	80 81       	ld	r24, Z
    23c6:	80 83       	st	Z, r24
      TCCR3B|=(0<<WGM12)|(0<<WGM13)|(0<<CS30)|(0<<CS31); //FAST PWM MODE
    23c8:	e1 e9       	ldi	r30, 0x91	; 145
    23ca:	f0 e0       	ldi	r31, 0x00	; 0
    23cc:	80 81       	ld	r24, Z
    23ce:	80 83       	st	Z, r24
      ICR3=0;                    //generating 20msec pulse (pwm method)
    23d0:	10 92 97 00 	sts	0x0097, r1
    23d4:	10 92 96 00 	sts	0x0096, r1
      OCR3A=0;
    23d8:	10 92 99 00 	sts	0x0099, r1
    23dc:	10 92 98 00 	sts	0x0098, r1
      break;
    23e0:	08 95       	ret

    case 2 :                            //OC3B
      DDRE|=(1<<PE4); // PORTB as OUTPUT
    23e2:	6c 9a       	sbi	0x0d, 4	; 13
      TCCR3A|=(0<<WGM31)|(0<<COM3B1)|(0<<COM3B0);  //SETTING PRESCALAR AS 64 
    23e4:	e0 e9       	ldi	r30, 0x90	; 144
    23e6:	f0 e0       	ldi	r31, 0x00	; 0
    23e8:	80 81       	ld	r24, Z
    23ea:	80 83       	st	Z, r24
      TCCR3B|=(0<<WGM32)|(0<<WGM33)|(0<<CS30)|(0<<CS31); //FAST PWM MODE
    23ec:	e1 e9       	ldi	r30, 0x91	; 145
    23ee:	f0 e0       	ldi	r31, 0x00	; 0
    23f0:	80 81       	ld	r24, Z
    23f2:	80 83       	st	Z, r24
      ICR3=0;                    //generating 20msec pulse (pwm method)
    23f4:	10 92 97 00 	sts	0x0097, r1
    23f8:	10 92 96 00 	sts	0x0096, r1
      OCR3B=0;
    23fc:	10 92 9b 00 	sts	0x009B, r1
    2400:	10 92 9a 00 	sts	0x009A, r1
      break;
    2404:	08 95       	ret
   
    case 3 :                            //OC3C
      DDRE|=(1<<PE5); // PORTB as OUTPUT
    2406:	6d 9a       	sbi	0x0d, 5	; 13
      TCCR3A|=(0<<WGM31)|(0<<COM3C1)|(0<<COM3C0);  //SETTING PRESCALAR AS 64 
    2408:	e0 e9       	ldi	r30, 0x90	; 144
    240a:	f0 e0       	ldi	r31, 0x00	; 0
    240c:	80 81       	ld	r24, Z
    240e:	80 83       	st	Z, r24
      TCCR3B|=(0<<WGM32)|(0<<WGM33)|(0<<CS30)|(0<<CS31); //FAST PWM MODE
    2410:	e1 e9       	ldi	r30, 0x91	; 145
    2412:	f0 e0       	ldi	r31, 0x00	; 0
    2414:	80 81       	ld	r24, Z
    2416:	80 83       	st	Z, r24
      ICR3=0;                             //generating 20msec pulse (pwm method)
    2418:	10 92 97 00 	sts	0x0097, r1
    241c:	10 92 96 00 	sts	0x0096, r1
      OCR3C=0;
    2420:	10 92 9d 00 	sts	0x009D, r1
    2424:	10 92 9c 00 	sts	0x009C, r1
      break;
    2428:	08 95       	ret

    case 6 :                            //OC4A
      DDRH|=(1<<PH3); // PORTB as OUTPUT
    242a:	e1 e0       	ldi	r30, 0x01	; 1
    242c:	f1 e0       	ldi	r31, 0x01	; 1
    242e:	80 81       	ld	r24, Z
    2430:	88 60       	ori	r24, 0x08	; 8
    2432:	80 83       	st	Z, r24
      TCCR4A|=(0<<WGM41)|(0<<COM4A1)|(0<<COM4A0);  //SETTING PRESCALAR AS 64 
    2434:	e0 ea       	ldi	r30, 0xA0	; 160
    2436:	f0 e0       	ldi	r31, 0x00	; 0
    2438:	80 81       	ld	r24, Z
    243a:	80 83       	st	Z, r24
      TCCR4B|=(0<<WGM42)|(0<<WGM43)|(0<<CS40)|(0<<CS41); //FAST PWM MODE
    243c:	e1 ea       	ldi	r30, 0xA1	; 161
    243e:	f0 e0       	ldi	r31, 0x00	; 0
    2440:	80 81       	ld	r24, Z
    2442:	80 83       	st	Z, r24
      ICR4=0;                    //generating 20msec pulse (pwm method)
    2444:	10 92 a7 00 	sts	0x00A7, r1
    2448:	10 92 a6 00 	sts	0x00A6, r1
      OCR4A=0;
    244c:	10 92 a9 00 	sts	0x00A9, r1
    2450:	10 92 a8 00 	sts	0x00A8, r1
      break;
    2454:	08 95       	ret

    case 7 :                            //OC4B
      DDRH|=(1<<PH4); // PORTB as OUTPUT
    2456:	e1 e0       	ldi	r30, 0x01	; 1
    2458:	f1 e0       	ldi	r31, 0x01	; 1
    245a:	80 81       	ld	r24, Z
    245c:	80 61       	ori	r24, 0x10	; 16
    245e:	80 83       	st	Z, r24
      TCCR4A|=(0<<WGM41)|(0<<COM4B1)|(0<<COM4B0);  //SETTING PRESCALAR AS 64 
    2460:	e0 ea       	ldi	r30, 0xA0	; 160
    2462:	f0 e0       	ldi	r31, 0x00	; 0
    2464:	80 81       	ld	r24, Z
    2466:	80 83       	st	Z, r24
      TCCR4B|=(0<<WGM42)|(0<<WGM43)|(0<<CS40)|(0<<CS41); //FAST PWM MODE
    2468:	e1 ea       	ldi	r30, 0xA1	; 161
    246a:	f0 e0       	ldi	r31, 0x00	; 0
    246c:	80 81       	ld	r24, Z
    246e:	80 83       	st	Z, r24
      ICR4=0;                    //generating 20msec pulse (pwm method)
    2470:	10 92 a7 00 	sts	0x00A7, r1
    2474:	10 92 a6 00 	sts	0x00A6, r1
      OCR4B=0;
    2478:	10 92 ab 00 	sts	0x00AB, r1
    247c:	10 92 aa 00 	sts	0x00AA, r1
      break;
    2480:	08 95       	ret

    case 8 :                            //OC4C
      DDRH|=(1<<PH5); // PORTB as OUTPUT
    2482:	e1 e0       	ldi	r30, 0x01	; 1
    2484:	f1 e0       	ldi	r31, 0x01	; 1
    2486:	80 81       	ld	r24, Z
    2488:	80 62       	ori	r24, 0x20	; 32
    248a:	80 83       	st	Z, r24
      TCCR4A|=(0<<WGM41)|(0<<COM4C1)|(0<<COM4C0);  //SETTING PRESCALAR AS 64 
    248c:	e0 ea       	ldi	r30, 0xA0	; 160
    248e:	f0 e0       	ldi	r31, 0x00	; 0
    2490:	80 81       	ld	r24, Z
    2492:	80 83       	st	Z, r24
      TCCR4B|=(0<<WGM42)|(0<<WGM43)|(0<<CS40)|(0<<CS41); //FAST PWM MODE
    2494:	e1 ea       	ldi	r30, 0xA1	; 161
    2496:	f0 e0       	ldi	r31, 0x00	; 0
    2498:	80 81       	ld	r24, Z
    249a:	80 83       	st	Z, r24
      ICR4=0;                    //generating 20msec pulse (pwm method)
    249c:	10 92 a7 00 	sts	0x00A7, r1
    24a0:	10 92 a6 00 	sts	0x00A6, r1
      OCR4C=0;
    24a4:	10 92 ad 00 	sts	0x00AD, r1
    24a8:	10 92 ac 00 	sts	0x00AC, r1
      break;
    24ac:	08 95       	ret

    case 46 :                           //OC5A 
      DDRL|=(1<<PL3); // PORTB as OUTPUT
    24ae:	ea e0       	ldi	r30, 0x0A	; 10
    24b0:	f1 e0       	ldi	r31, 0x01	; 1
    24b2:	80 81       	ld	r24, Z
    24b4:	88 60       	ori	r24, 0x08	; 8
    24b6:	80 83       	st	Z, r24
      TCCR5A|=(0<<WGM51)|(0<<COM5A1)|(0<<COM5A0);  //SETTING PRESCALAR AS 64 
    24b8:	e0 e2       	ldi	r30, 0x20	; 32
    24ba:	f1 e0       	ldi	r31, 0x01	; 1
    24bc:	80 81       	ld	r24, Z
    24be:	80 83       	st	Z, r24
      TCCR5B|=(0<<WGM52)|(0<<WGM53)|(0<<CS50)|(0<<CS51); //FAST PWM MODE
    24c0:	e1 e2       	ldi	r30, 0x21	; 33
    24c2:	f1 e0       	ldi	r31, 0x01	; 1
    24c4:	80 81       	ld	r24, Z
    24c6:	80 83       	st	Z, r24
      ICR5=0;                    //generating 20msec pulse (pwm method)
    24c8:	10 92 27 01 	sts	0x0127, r1
    24cc:	10 92 26 01 	sts	0x0126, r1
      OCR5A=0;
    24d0:	10 92 29 01 	sts	0x0129, r1
    24d4:	10 92 28 01 	sts	0x0128, r1
      break;
    24d8:	08 95       	ret

    case 45 :                           //OC5B
      DDRL|=(1<<PL4); // PORTB as OUTPUT
    24da:	ea e0       	ldi	r30, 0x0A	; 10
    24dc:	f1 e0       	ldi	r31, 0x01	; 1
    24de:	80 81       	ld	r24, Z
    24e0:	80 61       	ori	r24, 0x10	; 16
    24e2:	80 83       	st	Z, r24
      TCCR5A|=(0<<WGM51)|(0<<COM5B1)|(0<<COM5B0);  //SETTING PRESCALAR AS 64 
    24e4:	e0 e2       	ldi	r30, 0x20	; 32
    24e6:	f1 e0       	ldi	r31, 0x01	; 1
    24e8:	80 81       	ld	r24, Z
    24ea:	80 83       	st	Z, r24
      TCCR5B|=(0<<WGM52)|(0<<WGM53)|(0<<CS50)|(0<<CS51); //FAST PWM MODE
    24ec:	e1 e2       	ldi	r30, 0x21	; 33
    24ee:	f1 e0       	ldi	r31, 0x01	; 1
    24f0:	80 81       	ld	r24, Z
    24f2:	80 83       	st	Z, r24
      ICR5=0;                    //generating 20msec pulse (pwm met)
    24f4:	10 92 27 01 	sts	0x0127, r1
    24f8:	10 92 26 01 	sts	0x0126, r1
      OCR5B=0;
    24fc:	10 92 2b 01 	sts	0x012B, r1
    2500:	10 92 2a 01 	sts	0x012A, r1
      break;
    2504:	08 95       	ret

    case 44 :                           //OC5C
      DDRL|=(1<<PL5); // PORTB as OUTPUT
    2506:	ea e0       	ldi	r30, 0x0A	; 10
    2508:	f1 e0       	ldi	r31, 0x01	; 1
    250a:	80 81       	ld	r24, Z
    250c:	80 62       	ori	r24, 0x20	; 32
    250e:	80 83       	st	Z, r24
      TCCR5A|=(0<<WGM51)|(0<<COM5C1)|(0<<COM5C0);  //SETTING PRESCALAR AS 64 
    2510:	e0 e2       	ldi	r30, 0x20	; 32
    2512:	f1 e0       	ldi	r31, 0x01	; 1
    2514:	80 81       	ld	r24, Z
    2516:	80 83       	st	Z, r24
      TCCR5B|=(0<<WGM52)|(0<<WGM53)|(0<<CS50)|(0<<CS51); //FAST PWM MODE
    2518:	e1 e2       	ldi	r30, 0x21	; 33
    251a:	f1 e0       	ldi	r31, 0x01	; 1
    251c:	80 81       	ld	r24, Z
    251e:	80 83       	st	Z, r24
      ICR5=0;                    //generating 20msec pulse (pwm method)
    2520:	10 92 27 01 	sts	0x0127, r1
    2524:	10 92 26 01 	sts	0x0126, r1
      OCR5C=0;
    2528:	10 92 2d 01 	sts	0x012D, r1
    252c:	10 92 2c 01 	sts	0x012C, r1
    2530:	08 95       	ret

00002532 <_Z5setupv>:

#include <m2560/io.h>
#include <m2560/Servo.h>
#include <ModularLibrary/Cytron.h>
void setup(){
	pinMode(13,OUTPUT);
    2532:	8d e0       	ldi	r24, 0x0D	; 13
    2534:	61 e0       	ldi	r22, 0x01	; 1
    2536:	0e 94 95 00 	call	0x12a	; 0x12a <_Z7pinModehh>
}	
    253a:	08 95       	ret

0000253c <_Z4loopv>:
void loop(){
		digitalWrite(13,HIGH);
    253c:	8d e0       	ldi	r24, 0x0D	; 13
    253e:	61 e0       	ldi	r22, 0x01	; 1
    2540:	0e 94 08 02 	call	0x410	; 0x410 <_Z12digitalWritehh>
>>>>>>> parent of 6ea3b60... Sinosudal Wave travelling
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
<<<<<<< HEAD
    1796:	85 e0       	ldi	r24, 0x05	; 5
    1798:	8a 95       	dec	r24
    179a:	f1 f7       	brne	.-4      	; 0x1798 <_Z4loopv+0x4>
	_delay_us(15);///triggering the sensor for 15usec
	PORTD &=~(1<<PIND0);
    179c:	58 98       	cbi	0x0b, 0	; 11
	//Serial.write(3);
	COUNTA = pulse/58;
    179e:	80 91 c1 02 	lds	r24, 0x02C1
    17a2:	90 91 c2 02 	lds	r25, 0x02C2
    17a6:	6a e3       	ldi	r22, 0x3A	; 58
    17a8:	70 e0       	ldi	r23, 0x00	; 0
    17aa:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <__divmodhi4>
    17ae:	96 2f       	mov	r25, r22
    17b0:	60 93 be 02 	sts	0x02BE, r22
		UCSR0B = (1<<RXEN0)|(1<<TXEN0);
	}
	/* Set frame format: 8data, 2stop bit */
	void write( unsigned char dAta ){
		/* Wait for empty transmit buffer */
		while ((UCSR0A & (1<<UDRE0))==0);
    17b4:	e0 ec       	ldi	r30, 0xC0	; 192
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	80 81       	ld	r24, Z
    17ba:	85 ff       	sbrs	r24, 5
    17bc:	fd cf       	rjmp	.-6      	; 0x17b8 <_Z4loopv+0x24>
		/* Put data into buffer, sends the data */
		UDR0 = dAta;
    17be:	90 93 c6 00 	sts	0x00C6, r25
=======
    13a2:	e9 e6       	ldi	r30, 0x69	; 105
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
    13a6:	80 81       	ld	r24, Z
    13a8:	80 83       	st	Z, r24
    13aa:	08 95       	ret

000013ac <__vector_1>:
	}
}
ISR(INT0_vect)
{
    13ac:	1f 92       	push	r1
    13ae:	0f 92       	push	r0
    13b0:	0f b6       	in	r0, 0x3f	; 63
    13b2:	0f 92       	push	r0
    13b4:	0b b6       	in	r0, 0x3b	; 59
    13b6:	0f 92       	push	r0
    13b8:	11 24       	eor	r1, r1
    13ba:	2f 93       	push	r18
    13bc:	3f 93       	push	r19
    13be:	4f 93       	push	r20
    13c0:	5f 93       	push	r21
    13c2:	6f 93       	push	r22
    13c4:	7f 93       	push	r23
    13c6:	8f 93       	push	r24
    13c8:	9f 93       	push	r25
    13ca:	af 93       	push	r26
    13cc:	bf 93       	push	r27
    13ce:	ef 93       	push	r30
    13d0:	ff 93       	push	r31
   cAllisr();
    13d2:	e0 91 b4 02 	lds	r30, 0x02B4
    13d6:	f0 91 b5 02 	lds	r31, 0x02B5
    13da:	19 95       	eicall
}
    13dc:	ff 91       	pop	r31
    13de:	ef 91       	pop	r30
    13e0:	bf 91       	pop	r27
    13e2:	af 91       	pop	r26
    13e4:	9f 91       	pop	r25
    13e6:	8f 91       	pop	r24
    13e8:	7f 91       	pop	r23
    13ea:	6f 91       	pop	r22
    13ec:	5f 91       	pop	r21
    13ee:	4f 91       	pop	r20
    13f0:	3f 91       	pop	r19
    13f2:	2f 91       	pop	r18
    13f4:	0f 90       	pop	r0
    13f6:	0b be       	out	0x3b, r0	; 59
    13f8:	0f 90       	pop	r0
    13fa:	0f be       	out	0x3f, r0	; 63
    13fc:	0f 90       	pop	r0
    13fe:	1f 90       	pop	r1
    1400:	18 95       	reti

00001402 <__vector_2>:
ISR(INT1_vect)
{
    1402:	1f 92       	push	r1
    1404:	0f 92       	push	r0
    1406:	0f b6       	in	r0, 0x3f	; 63
    1408:	0f 92       	push	r0
    140a:	0b b6       	in	r0, 0x3b	; 59
    140c:	0f 92       	push	r0
    140e:	11 24       	eor	r1, r1
    1410:	2f 93       	push	r18
    1412:	3f 93       	push	r19
    1414:	4f 93       	push	r20
    1416:	5f 93       	push	r21
    1418:	6f 93       	push	r22
    141a:	7f 93       	push	r23
    141c:	8f 93       	push	r24
    141e:	9f 93       	push	r25
    1420:	af 93       	push	r26
    1422:	bf 93       	push	r27
    1424:	ef 93       	push	r30
    1426:	ff 93       	push	r31
   cAllisr();
    1428:	e0 91 b4 02 	lds	r30, 0x02B4
    142c:	f0 91 b5 02 	lds	r31, 0x02B5
    1430:	19 95       	eicall
}
    1432:	ff 91       	pop	r31
    1434:	ef 91       	pop	r30
    1436:	bf 91       	pop	r27
    1438:	af 91       	pop	r26
    143a:	9f 91       	pop	r25
    143c:	8f 91       	pop	r24
    143e:	7f 91       	pop	r23
    1440:	6f 91       	pop	r22
    1442:	5f 91       	pop	r21
    1444:	4f 91       	pop	r20
    1446:	3f 91       	pop	r19
    1448:	2f 91       	pop	r18
    144a:	0f 90       	pop	r0
    144c:	0b be       	out	0x3b, r0	; 59
    144e:	0f 90       	pop	r0
    1450:	0f be       	out	0x3f, r0	; 63
    1452:	0f 90       	pop	r0
    1454:	1f 90       	pop	r1
    1456:	18 95       	reti

00001458 <__vector_3>:
ISR(INT2_vect)
{
    1458:	1f 92       	push	r1
    145a:	0f 92       	push	r0
    145c:	0f b6       	in	r0, 0x3f	; 63
    145e:	0f 92       	push	r0
    1460:	0b b6       	in	r0, 0x3b	; 59
    1462:	0f 92       	push	r0
    1464:	11 24       	eor	r1, r1
    1466:	2f 93       	push	r18
    1468:	3f 93       	push	r19
    146a:	4f 93       	push	r20
    146c:	5f 93       	push	r21
    146e:	6f 93       	push	r22
    1470:	7f 93       	push	r23
    1472:	8f 93       	push	r24
    1474:	9f 93       	push	r25
    1476:	af 93       	push	r26
    1478:	bf 93       	push	r27
    147a:	ef 93       	push	r30
    147c:	ff 93       	push	r31
   cAllisr();
    147e:	e0 91 b4 02 	lds	r30, 0x02B4
    1482:	f0 91 b5 02 	lds	r31, 0x02B5
    1486:	19 95       	eicall
}
    1488:	ff 91       	pop	r31
    148a:	ef 91       	pop	r30
    148c:	bf 91       	pop	r27
    148e:	af 91       	pop	r26
    1490:	9f 91       	pop	r25
    1492:	8f 91       	pop	r24
    1494:	7f 91       	pop	r23
    1496:	6f 91       	pop	r22
    1498:	5f 91       	pop	r21
    149a:	4f 91       	pop	r20
    149c:	3f 91       	pop	r19
    149e:	2f 91       	pop	r18
    14a0:	0f 90       	pop	r0
    14a2:	0b be       	out	0x3b, r0	; 59
    14a4:	0f 90       	pop	r0
    14a6:	0f be       	out	0x3f, r0	; 63
    14a8:	0f 90       	pop	r0
    14aa:	1f 90       	pop	r1
    14ac:	18 95       	reti

000014ae <__vector_4>:
ISR(INT3_vect)
{
    14ae:	1f 92       	push	r1
    14b0:	0f 92       	push	r0
    14b2:	0f b6       	in	r0, 0x3f	; 63
    14b4:	0f 92       	push	r0
    14b6:	0b b6       	in	r0, 0x3b	; 59
    14b8:	0f 92       	push	r0
    14ba:	11 24       	eor	r1, r1
    14bc:	2f 93       	push	r18
    14be:	3f 93       	push	r19
    14c0:	4f 93       	push	r20
    14c2:	5f 93       	push	r21
    14c4:	6f 93       	push	r22
    14c6:	7f 93       	push	r23
    14c8:	8f 93       	push	r24
    14ca:	9f 93       	push	r25
    14cc:	af 93       	push	r26
    14ce:	bf 93       	push	r27
    14d0:	ef 93       	push	r30
    14d2:	ff 93       	push	r31
   cAllisr();
    14d4:	e0 91 b4 02 	lds	r30, 0x02B4
    14d8:	f0 91 b5 02 	lds	r31, 0x02B5
    14dc:	19 95       	eicall
}
    14de:	ff 91       	pop	r31
    14e0:	ef 91       	pop	r30
    14e2:	bf 91       	pop	r27
    14e4:	af 91       	pop	r26
    14e6:	9f 91       	pop	r25
    14e8:	8f 91       	pop	r24
    14ea:	7f 91       	pop	r23
    14ec:	6f 91       	pop	r22
    14ee:	5f 91       	pop	r21
    14f0:	4f 91       	pop	r20
    14f2:	3f 91       	pop	r19
    14f4:	2f 91       	pop	r18
    14f6:	0f 90       	pop	r0
    14f8:	0b be       	out	0x3b, r0	; 59
    14fa:	0f 90       	pop	r0
    14fc:	0f be       	out	0x3f, r0	; 63
    14fe:	0f 90       	pop	r0
    1500:	1f 90       	pop	r1
    1502:	18 95       	reti

00001504 <__vector_5>:
ISR(INT4_vect)
{
    1504:	1f 92       	push	r1
    1506:	0f 92       	push	r0
    1508:	0f b6       	in	r0, 0x3f	; 63
    150a:	0f 92       	push	r0
    150c:	0b b6       	in	r0, 0x3b	; 59
    150e:	0f 92       	push	r0
    1510:	11 24       	eor	r1, r1
    1512:	2f 93       	push	r18
    1514:	3f 93       	push	r19
    1516:	4f 93       	push	r20
    1518:	5f 93       	push	r21
    151a:	6f 93       	push	r22
    151c:	7f 93       	push	r23
    151e:	8f 93       	push	r24
    1520:	9f 93       	push	r25
    1522:	af 93       	push	r26
    1524:	bf 93       	push	r27
    1526:	ef 93       	push	r30
    1528:	ff 93       	push	r31
    cAllisr();
    152a:	e0 91 b4 02 	lds	r30, 0x02B4
    152e:	f0 91 b5 02 	lds	r31, 0x02B5
    1532:	19 95       	eicall
}
    1534:	ff 91       	pop	r31
    1536:	ef 91       	pop	r30
    1538:	bf 91       	pop	r27
    153a:	af 91       	pop	r26
    153c:	9f 91       	pop	r25
    153e:	8f 91       	pop	r24
    1540:	7f 91       	pop	r23
    1542:	6f 91       	pop	r22
    1544:	5f 91       	pop	r21
    1546:	4f 91       	pop	r20
    1548:	3f 91       	pop	r19
    154a:	2f 91       	pop	r18
    154c:	0f 90       	pop	r0
    154e:	0b be       	out	0x3b, r0	; 59
    1550:	0f 90       	pop	r0
    1552:	0f be       	out	0x3f, r0	; 63
    1554:	0f 90       	pop	r0
    1556:	1f 90       	pop	r1
    1558:	18 95       	reti

0000155a <__vector_6>:
ISR(INT5_vect)
{
    155a:	1f 92       	push	r1
    155c:	0f 92       	push	r0
    155e:	0f b6       	in	r0, 0x3f	; 63
    1560:	0f 92       	push	r0
    1562:	0b b6       	in	r0, 0x3b	; 59
    1564:	0f 92       	push	r0
    1566:	11 24       	eor	r1, r1
    1568:	2f 93       	push	r18
    156a:	3f 93       	push	r19
    156c:	4f 93       	push	r20
    156e:	5f 93       	push	r21
    1570:	6f 93       	push	r22
    1572:	7f 93       	push	r23
    1574:	8f 93       	push	r24
    1576:	9f 93       	push	r25
    1578:	af 93       	push	r26
    157a:	bf 93       	push	r27
    157c:	ef 93       	push	r30
    157e:	ff 93       	push	r31
    cAllisr();
    1580:	e0 91 b4 02 	lds	r30, 0x02B4
    1584:	f0 91 b5 02 	lds	r31, 0x02B5
    1588:	19 95       	eicall
}
    158a:	ff 91       	pop	r31
    158c:	ef 91       	pop	r30
    158e:	bf 91       	pop	r27
    1590:	af 91       	pop	r26
    1592:	9f 91       	pop	r25
    1594:	8f 91       	pop	r24
    1596:	7f 91       	pop	r23
    1598:	6f 91       	pop	r22
    159a:	5f 91       	pop	r21
    159c:	4f 91       	pop	r20
    159e:	3f 91       	pop	r19
    15a0:	2f 91       	pop	r18
    15a2:	0f 90       	pop	r0
    15a4:	0b be       	out	0x3b, r0	; 59
    15a6:	0f 90       	pop	r0
    15a8:	0f be       	out	0x3f, r0	; 63
    15aa:	0f 90       	pop	r0
    15ac:	1f 90       	pop	r1
    15ae:	18 95       	reti

000015b0 <__vector_7>:
ISR(INT6_vect)
{
    15b0:	1f 92       	push	r1
    15b2:	0f 92       	push	r0
    15b4:	0f b6       	in	r0, 0x3f	; 63
    15b6:	0f 92       	push	r0
    15b8:	0b b6       	in	r0, 0x3b	; 59
    15ba:	0f 92       	push	r0
    15bc:	11 24       	eor	r1, r1
    15be:	2f 93       	push	r18
    15c0:	3f 93       	push	r19
    15c2:	4f 93       	push	r20
    15c4:	5f 93       	push	r21
    15c6:	6f 93       	push	r22
    15c8:	7f 93       	push	r23
    15ca:	8f 93       	push	r24
    15cc:	9f 93       	push	r25
    15ce:	af 93       	push	r26
    15d0:	bf 93       	push	r27
    15d2:	ef 93       	push	r30
    15d4:	ff 93       	push	r31
    cAllisr();
    15d6:	e0 91 b4 02 	lds	r30, 0x02B4
    15da:	f0 91 b5 02 	lds	r31, 0x02B5
    15de:	19 95       	eicall
}
    15e0:	ff 91       	pop	r31
    15e2:	ef 91       	pop	r30
    15e4:	bf 91       	pop	r27
    15e6:	af 91       	pop	r26
    15e8:	9f 91       	pop	r25
    15ea:	8f 91       	pop	r24
    15ec:	7f 91       	pop	r23
    15ee:	6f 91       	pop	r22
    15f0:	5f 91       	pop	r21
    15f2:	4f 91       	pop	r20
    15f4:	3f 91       	pop	r19
    15f6:	2f 91       	pop	r18
    15f8:	0f 90       	pop	r0
    15fa:	0b be       	out	0x3b, r0	; 59
    15fc:	0f 90       	pop	r0
    15fe:	0f be       	out	0x3f, r0	; 63
    1600:	0f 90       	pop	r0
    1602:	1f 90       	pop	r1
    1604:	18 95       	reti

00001606 <__vector_8>:
ISR(INT7_vect)
{ 
    1606:	1f 92       	push	r1
    1608:	0f 92       	push	r0
    160a:	0f b6       	in	r0, 0x3f	; 63
    160c:	0f 92       	push	r0
    160e:	0b b6       	in	r0, 0x3b	; 59
    1610:	0f 92       	push	r0
    1612:	11 24       	eor	r1, r1
    1614:	2f 93       	push	r18
    1616:	3f 93       	push	r19
    1618:	4f 93       	push	r20
    161a:	5f 93       	push	r21
    161c:	6f 93       	push	r22
    161e:	7f 93       	push	r23
    1620:	8f 93       	push	r24
    1622:	9f 93       	push	r25
    1624:	af 93       	push	r26
    1626:	bf 93       	push	r27
    1628:	ef 93       	push	r30
    162a:	ff 93       	push	r31
    cAllisr();
    162c:	e0 91 b4 02 	lds	r30, 0x02B4
    1630:	f0 91 b5 02 	lds	r31, 0x02B5
    1634:	19 95       	eicall
}
    1636:	ff 91       	pop	r31
    1638:	ef 91       	pop	r30
    163a:	bf 91       	pop	r27
    163c:	af 91       	pop	r26
    163e:	9f 91       	pop	r25
    1640:	8f 91       	pop	r24
    1642:	7f 91       	pop	r23
    1644:	6f 91       	pop	r22
    1646:	5f 91       	pop	r21
    1648:	4f 91       	pop	r20
    164a:	3f 91       	pop	r19
    164c:	2f 91       	pop	r18
    164e:	0f 90       	pop	r0
    1650:	0b be       	out	0x3b, r0	; 59
    1652:	0f 90       	pop	r0
    1654:	0f be       	out	0x3f, r0	; 63
    1656:	0f 90       	pop	r0
    1658:	1f 90       	pop	r1
    165a:	18 95       	reti

0000165c <_Z5setupv>:
 */ 

#include <m2560/io.h>

void setup(){
	pinMode(13,OUTPUT);
    165c:	8d e0       	ldi	r24, 0x0D	; 13
    165e:	61 e0       	ldi	r22, 0x01	; 1
    1660:	0e 94 95 00 	call	0x12a	; 0x12a <_Z7pinModehh>
}	
    1664:	08 95       	ret

00001666 <_Z4loopv>:
void loop(){
		digitalWrite(13,HIGH);
    1666:	8d e0       	ldi	r24, 0x0D	; 13
    1668:	61 e0       	ldi	r22, 0x01	; 1
    166a:	0e 94 08 02 	call	0x410	; 0x410 <_Z12digitalWritehh>
>>>>>>> parent of 1e7bf21... Included Cytron.h
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
<<<<<<< HEAD
    17c2:	87 ea       	ldi	r24, 0xA7	; 167
    17c4:	91 e6       	ldi	r25, 0x61	; 97
    17c6:	01 97       	sbiw	r24, 0x01	; 1
    17c8:	f1 f7       	brne	.-4      	; 0x17c6 <_Z4loopv+0x32>
    17ca:	00 c0       	rjmp	.+0      	; 0x17cc <_Z4loopv+0x38>
    17cc:	00 00       	nop
	Serial.write(COUNTA);
=======
    166e:	8f ef       	ldi	r24, 0xFF	; 255
    1670:	93 ed       	ldi	r25, 0xD3	; 211
    1672:	a0 e3       	ldi	r26, 0x30	; 48
    1674:	81 50       	subi	r24, 0x01	; 1
    1676:	90 40       	sbci	r25, 0x00	; 0
    1678:	a0 40       	sbci	r26, 0x00	; 0
    167a:	e1 f7       	brne	.-8      	; 0x1674 <_Z4loopv+0xe>
    167c:	00 c0       	rjmp	.+0      	; 0x167e <_Z4loopv+0x18>
    167e:	00 00       	nop
		_delay_ms(1000);
		digitalWrite(13,LOW);
    1680:	8d e0       	ldi	r24, 0x0D	; 13
    1682:	60 e0       	ldi	r22, 0x00	; 0
    1684:	0e 94 08 02 	call	0x410	; 0x410 <_Z12digitalWritehh>
    1688:	8f ef       	ldi	r24, 0xFF	; 255
    168a:	93 ed       	ldi	r25, 0xD3	; 211
    168c:	a0 e3       	ldi	r26, 0x30	; 48
    168e:	81 50       	subi	r24, 0x01	; 1
    1690:	90 40       	sbci	r25, 0x00	; 0
    1692:	a0 40       	sbci	r26, 0x00	; 0
    1694:	e1 f7       	brne	.-8      	; 0x168e <_Z4loopv+0x28>
    1696:	00 c0       	rjmp	.+0      	; 0x1698 <_Z4loopv+0x32>
    1698:	00 00       	nop
		_delay_ms(1000);
    169a:	08 95       	ret

0000169c <main>:
	uSerfun(); 
>>>>>>> parent of 1e7bf21... Included Cytron.h
}
    17ce:	08 95       	ret

000017d0 <main>:
Serial Serial;
Serial1 Serial1;
Serial2 Serial2;
Serial3 Serial3;
int main(){
	setup();
<<<<<<< HEAD
    17d0:	0e 94 a2 0b 	call	0x1744	; 0x1744 <_Z5setupv>
	while(1){
		loop();
    17d4:	0e 94 ca 0b 	call	0x1794	; 0x1794 <_Z4loopv>
    17d8:	fd cf       	rjmp	.-6      	; 0x17d4 <main+0x4>

000017da <__vector_1>:

ISR(INT0_vect)//interrupt service routine when there is a change in logic level

{
    17da:	1f 92       	push	r1
    17dc:	0f 92       	push	r0
    17de:	0f b6       	in	r0, 0x3f	; 63
    17e0:	0f 92       	push	r0
    17e2:	0b b6       	in	r0, 0x3b	; 59
    17e4:	0f 92       	push	r0
    17e6:	11 24       	eor	r1, r1
    17e8:	8f 93       	push	r24
    17ea:	9f 93       	push	r25
    17ec:	ef 93       	push	r30
    17ee:	ff 93       	push	r31
	//Serial.write(5);
	if (i==1)//when logic from HIGH to LOW
    17f0:	80 91 bf 02 	lds	r24, 0x02BF
    17f4:	90 91 c0 02 	lds	r25, 0x02C0
    17f8:	81 30       	cpi	r24, 0x01	; 1
    17fa:	91 05       	cpc	r25, r1
    17fc:	81 f4       	brne	.+32     	; 0x181e <__vector_1+0x44>

	{
	//Serial.write(6);
	TCCR1B=0;//disabling counter
    17fe:	10 92 81 00 	sts	0x0081, r1

	pulse=TCNT1;//count memory is updated to integer
    1802:	e4 e8       	ldi	r30, 0x84	; 132
    1804:	f0 e0       	ldi	r31, 0x00	; 0
    1806:	80 81       	ld	r24, Z
    1808:	91 81       	ldd	r25, Z+1	; 0x01
    180a:	90 93 c2 02 	sts	0x02C2, r25
    180e:	80 93 c1 02 	sts	0x02C1, r24

	TCNT1=0;//resetting the counter memory
    1812:	11 82       	std	Z+1, r1	; 0x01
    1814:	10 82       	st	Z, r1

	i=0;
    1816:	10 92 c0 02 	sts	0x02C0, r1
    181a:	10 92 bf 02 	sts	0x02BF, r1

	}

	if (i==0)//when logic change from LOW to HIGH
    181e:	80 91 bf 02 	lds	r24, 0x02BF
    1822:	90 91 c0 02 	lds	r25, 0x02C0
    1826:	00 97       	sbiw	r24, 0x00	; 0
    1828:	59 f4       	brne	.+22     	; 0x1840 <__vector_1+0x66>

	{
	//Serial.write(7);
	TCCR1B|=(1<<CS10);//enabling counter
    182a:	e1 e8       	ldi	r30, 0x81	; 129
    182c:	f0 e0       	ldi	r31, 0x00	; 0
    182e:	80 81       	ld	r24, Z
    1830:	81 60       	ori	r24, 0x01	; 1
    1832:	80 83       	st	Z, r24

	i=1;
    1834:	81 e0       	ldi	r24, 0x01	; 1
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	90 93 c0 02 	sts	0x02C0, r25
    183c:	80 93 bf 02 	sts	0x02BF, r24

	}

    1840:	ff 91       	pop	r31
    1842:	ef 91       	pop	r30
    1844:	9f 91       	pop	r25
    1846:	8f 91       	pop	r24
    1848:	0f 90       	pop	r0
    184a:	0b be       	out	0x3b, r0	; 59
    184c:	0f 90       	pop	r0
    184e:	0f be       	out	0x3f, r0	; 63
    1850:	0f 90       	pop	r0
    1852:	1f 90       	pop	r1
    1854:	18 95       	reti

00001856 <__subsf3>:
    1856:	50 58       	subi	r21, 0x80	; 128

00001858 <__addsf3>:
    1858:	bb 27       	eor	r27, r27
    185a:	aa 27       	eor	r26, r26
    185c:	0e d0       	rcall	.+28     	; 0x187a <__addsf3x>
    185e:	75 c1       	rjmp	.+746    	; 0x1b4a <__fp_round>
    1860:	66 d1       	rcall	.+716    	; 0x1b2e <__fp_pscA>
    1862:	30 f0       	brcs	.+12     	; 0x1870 <__addsf3+0x18>
    1864:	6b d1       	rcall	.+726    	; 0x1b3c <__fp_pscB>
    1866:	20 f0       	brcs	.+8      	; 0x1870 <__addsf3+0x18>
    1868:	31 f4       	brne	.+12     	; 0x1876 <__addsf3+0x1e>
    186a:	9f 3f       	cpi	r25, 0xFF	; 255
    186c:	11 f4       	brne	.+4      	; 0x1872 <__addsf3+0x1a>
    186e:	1e f4       	brtc	.+6      	; 0x1876 <__addsf3+0x1e>
    1870:	5b c1       	rjmp	.+694    	; 0x1b28 <__fp_nan>
    1872:	0e f4       	brtc	.+2      	; 0x1876 <__addsf3+0x1e>
    1874:	e0 95       	com	r30
    1876:	e7 fb       	bst	r30, 7
    1878:	51 c1       	rjmp	.+674    	; 0x1b1c <__fp_inf>

0000187a <__addsf3x>:
    187a:	e9 2f       	mov	r30, r25
    187c:	77 d1       	rcall	.+750    	; 0x1b6c <__fp_split3>
    187e:	80 f3       	brcs	.-32     	; 0x1860 <__addsf3+0x8>
    1880:	ba 17       	cp	r27, r26
    1882:	62 07       	cpc	r22, r18
    1884:	73 07       	cpc	r23, r19
    1886:	84 07       	cpc	r24, r20
    1888:	95 07       	cpc	r25, r21
    188a:	18 f0       	brcs	.+6      	; 0x1892 <__addsf3x+0x18>
    188c:	71 f4       	brne	.+28     	; 0x18aa <__addsf3x+0x30>
    188e:	9e f5       	brtc	.+102    	; 0x18f6 <__addsf3x+0x7c>
    1890:	8f c1       	rjmp	.+798    	; 0x1bb0 <__fp_zero>
    1892:	0e f4       	brtc	.+2      	; 0x1896 <__addsf3x+0x1c>
    1894:	e0 95       	com	r30
    1896:	0b 2e       	mov	r0, r27
    1898:	ba 2f       	mov	r27, r26
    189a:	a0 2d       	mov	r26, r0
    189c:	0b 01       	movw	r0, r22
    189e:	b9 01       	movw	r22, r18
    18a0:	90 01       	movw	r18, r0
    18a2:	0c 01       	movw	r0, r24
    18a4:	ca 01       	movw	r24, r20
    18a6:	a0 01       	movw	r20, r0
    18a8:	11 24       	eor	r1, r1
    18aa:	ff 27       	eor	r31, r31
    18ac:	59 1b       	sub	r21, r25
    18ae:	99 f0       	breq	.+38     	; 0x18d6 <__addsf3x+0x5c>
    18b0:	59 3f       	cpi	r21, 0xF9	; 249
    18b2:	50 f4       	brcc	.+20     	; 0x18c8 <__addsf3x+0x4e>
    18b4:	50 3e       	cpi	r21, 0xE0	; 224
    18b6:	68 f1       	brcs	.+90     	; 0x1912 <__addsf3x+0x98>
    18b8:	1a 16       	cp	r1, r26
    18ba:	f0 40       	sbci	r31, 0x00	; 0
    18bc:	a2 2f       	mov	r26, r18
    18be:	23 2f       	mov	r18, r19
    18c0:	34 2f       	mov	r19, r20
    18c2:	44 27       	eor	r20, r20
    18c4:	58 5f       	subi	r21, 0xF8	; 248
    18c6:	f3 cf       	rjmp	.-26     	; 0x18ae <__addsf3x+0x34>
    18c8:	46 95       	lsr	r20
    18ca:	37 95       	ror	r19
    18cc:	27 95       	ror	r18
    18ce:	a7 95       	ror	r26
    18d0:	f0 40       	sbci	r31, 0x00	; 0
    18d2:	53 95       	inc	r21
    18d4:	c9 f7       	brne	.-14     	; 0x18c8 <__addsf3x+0x4e>
    18d6:	7e f4       	brtc	.+30     	; 0x18f6 <__addsf3x+0x7c>
    18d8:	1f 16       	cp	r1, r31
    18da:	ba 0b       	sbc	r27, r26
    18dc:	62 0b       	sbc	r22, r18
    18de:	73 0b       	sbc	r23, r19
    18e0:	84 0b       	sbc	r24, r20
    18e2:	ba f0       	brmi	.+46     	; 0x1912 <__addsf3x+0x98>
    18e4:	91 50       	subi	r25, 0x01	; 1
    18e6:	a1 f0       	breq	.+40     	; 0x1910 <__addsf3x+0x96>
    18e8:	ff 0f       	add	r31, r31
    18ea:	bb 1f       	adc	r27, r27
    18ec:	66 1f       	adc	r22, r22
    18ee:	77 1f       	adc	r23, r23
    18f0:	88 1f       	adc	r24, r24
    18f2:	c2 f7       	brpl	.-16     	; 0x18e4 <__addsf3x+0x6a>
    18f4:	0e c0       	rjmp	.+28     	; 0x1912 <__addsf3x+0x98>
    18f6:	ba 0f       	add	r27, r26
    18f8:	62 1f       	adc	r22, r18
    18fa:	73 1f       	adc	r23, r19
    18fc:	84 1f       	adc	r24, r20
    18fe:	48 f4       	brcc	.+18     	; 0x1912 <__addsf3x+0x98>
    1900:	87 95       	ror	r24
    1902:	77 95       	ror	r23
    1904:	67 95       	ror	r22
    1906:	b7 95       	ror	r27
    1908:	f7 95       	ror	r31
    190a:	9e 3f       	cpi	r25, 0xFE	; 254
    190c:	08 f0       	brcs	.+2      	; 0x1910 <__addsf3x+0x96>
    190e:	b3 cf       	rjmp	.-154    	; 0x1876 <__addsf3+0x1e>
    1910:	93 95       	inc	r25
    1912:	88 0f       	add	r24, r24
    1914:	08 f0       	brcs	.+2      	; 0x1918 <__addsf3x+0x9e>
    1916:	99 27       	eor	r25, r25
    1918:	ee 0f       	add	r30, r30
    191a:	97 95       	ror	r25
    191c:	87 95       	ror	r24
    191e:	08 95       	ret

00001920 <__cmpsf2>:
    1920:	d9 d0       	rcall	.+434    	; 0x1ad4 <__fp_cmp>
    1922:	08 f4       	brcc	.+2      	; 0x1926 <__cmpsf2+0x6>
    1924:	81 e0       	ldi	r24, 0x01	; 1
    1926:	08 95       	ret

00001928 <__divsf3>:
    1928:	0c d0       	rcall	.+24     	; 0x1942 <__divsf3x>
    192a:	0f c1       	rjmp	.+542    	; 0x1b4a <__fp_round>
    192c:	07 d1       	rcall	.+526    	; 0x1b3c <__fp_pscB>
    192e:	40 f0       	brcs	.+16     	; 0x1940 <__divsf3+0x18>
    1930:	fe d0       	rcall	.+508    	; 0x1b2e <__fp_pscA>
    1932:	30 f0       	brcs	.+12     	; 0x1940 <__divsf3+0x18>
    1934:	21 f4       	brne	.+8      	; 0x193e <__divsf3+0x16>
    1936:	5f 3f       	cpi	r21, 0xFF	; 255
    1938:	19 f0       	breq	.+6      	; 0x1940 <__divsf3+0x18>
    193a:	f0 c0       	rjmp	.+480    	; 0x1b1c <__fp_inf>
    193c:	51 11       	cpse	r21, r1
    193e:	39 c1       	rjmp	.+626    	; 0x1bb2 <__fp_szero>
    1940:	f3 c0       	rjmp	.+486    	; 0x1b28 <__fp_nan>

00001942 <__divsf3x>:
    1942:	14 d1       	rcall	.+552    	; 0x1b6c <__fp_split3>
    1944:	98 f3       	brcs	.-26     	; 0x192c <__divsf3+0x4>

00001946 <__divsf3_pse>:
    1946:	99 23       	and	r25, r25
    1948:	c9 f3       	breq	.-14     	; 0x193c <__divsf3+0x14>
    194a:	55 23       	and	r21, r21
    194c:	b1 f3       	breq	.-20     	; 0x193a <__divsf3+0x12>
    194e:	95 1b       	sub	r25, r21
    1950:	55 0b       	sbc	r21, r21
    1952:	bb 27       	eor	r27, r27
    1954:	aa 27       	eor	r26, r26
    1956:	62 17       	cp	r22, r18
    1958:	73 07       	cpc	r23, r19
    195a:	84 07       	cpc	r24, r20
    195c:	38 f0       	brcs	.+14     	; 0x196c <__divsf3_pse+0x26>
    195e:	9f 5f       	subi	r25, 0xFF	; 255
    1960:	5f 4f       	sbci	r21, 0xFF	; 255
    1962:	22 0f       	add	r18, r18
    1964:	33 1f       	adc	r19, r19
    1966:	44 1f       	adc	r20, r20
    1968:	aa 1f       	adc	r26, r26
    196a:	a9 f3       	breq	.-22     	; 0x1956 <__divsf3_pse+0x10>
    196c:	33 d0       	rcall	.+102    	; 0x19d4 <__divsf3_pse+0x8e>
    196e:	0e 2e       	mov	r0, r30
    1970:	3a f0       	brmi	.+14     	; 0x1980 <__divsf3_pse+0x3a>
    1972:	e0 e8       	ldi	r30, 0x80	; 128
    1974:	30 d0       	rcall	.+96     	; 0x19d6 <__divsf3_pse+0x90>
    1976:	91 50       	subi	r25, 0x01	; 1
    1978:	50 40       	sbci	r21, 0x00	; 0
    197a:	e6 95       	lsr	r30
    197c:	00 1c       	adc	r0, r0
    197e:	ca f7       	brpl	.-14     	; 0x1972 <__divsf3_pse+0x2c>
    1980:	29 d0       	rcall	.+82     	; 0x19d4 <__divsf3_pse+0x8e>
    1982:	fe 2f       	mov	r31, r30
    1984:	27 d0       	rcall	.+78     	; 0x19d4 <__divsf3_pse+0x8e>
    1986:	66 0f       	add	r22, r22
    1988:	77 1f       	adc	r23, r23
    198a:	88 1f       	adc	r24, r24
    198c:	bb 1f       	adc	r27, r27
    198e:	26 17       	cp	r18, r22
    1990:	37 07       	cpc	r19, r23
    1992:	48 07       	cpc	r20, r24
    1994:	ab 07       	cpc	r26, r27
    1996:	b0 e8       	ldi	r27, 0x80	; 128
    1998:	09 f0       	breq	.+2      	; 0x199c <__divsf3_pse+0x56>
    199a:	bb 0b       	sbc	r27, r27
    199c:	80 2d       	mov	r24, r0
    199e:	bf 01       	movw	r22, r30
    19a0:	ff 27       	eor	r31, r31
    19a2:	93 58       	subi	r25, 0x83	; 131
    19a4:	5f 4f       	sbci	r21, 0xFF	; 255
    19a6:	2a f0       	brmi	.+10     	; 0x19b2 <__divsf3_pse+0x6c>
    19a8:	9e 3f       	cpi	r25, 0xFE	; 254
    19aa:	51 05       	cpc	r21, r1
    19ac:	68 f0       	brcs	.+26     	; 0x19c8 <__divsf3_pse+0x82>
    19ae:	b6 c0       	rjmp	.+364    	; 0x1b1c <__fp_inf>
    19b0:	00 c1       	rjmp	.+512    	; 0x1bb2 <__fp_szero>
    19b2:	5f 3f       	cpi	r21, 0xFF	; 255
    19b4:	ec f3       	brlt	.-6      	; 0x19b0 <__divsf3_pse+0x6a>
    19b6:	98 3e       	cpi	r25, 0xE8	; 232
    19b8:	dc f3       	brlt	.-10     	; 0x19b0 <__divsf3_pse+0x6a>
    19ba:	86 95       	lsr	r24
    19bc:	77 95       	ror	r23
    19be:	67 95       	ror	r22
    19c0:	b7 95       	ror	r27
    19c2:	f7 95       	ror	r31
    19c4:	9f 5f       	subi	r25, 0xFF	; 255
    19c6:	c9 f7       	brne	.-14     	; 0x19ba <__divsf3_pse+0x74>
    19c8:	88 0f       	add	r24, r24
    19ca:	91 1d       	adc	r25, r1
    19cc:	96 95       	lsr	r25
    19ce:	87 95       	ror	r24
    19d0:	97 f9       	bld	r25, 7
    19d2:	08 95       	ret
    19d4:	e1 e0       	ldi	r30, 0x01	; 1
    19d6:	66 0f       	add	r22, r22
    19d8:	77 1f       	adc	r23, r23
    19da:	88 1f       	adc	r24, r24
    19dc:	bb 1f       	adc	r27, r27
    19de:	62 17       	cp	r22, r18
    19e0:	73 07       	cpc	r23, r19
    19e2:	84 07       	cpc	r24, r20
    19e4:	ba 07       	cpc	r27, r26
    19e6:	20 f0       	brcs	.+8      	; 0x19f0 <__divsf3_pse+0xaa>
    19e8:	62 1b       	sub	r22, r18
    19ea:	73 0b       	sbc	r23, r19
    19ec:	84 0b       	sbc	r24, r20
    19ee:	ba 0b       	sbc	r27, r26
    19f0:	ee 1f       	adc	r30, r30
    19f2:	88 f7       	brcc	.-30     	; 0x19d6 <__divsf3_pse+0x90>
    19f4:	e0 95       	com	r30
    19f6:	08 95       	ret

000019f8 <__fixsfsi>:
    19f8:	04 d0       	rcall	.+8      	; 0x1a02 <__fixunssfsi>
    19fa:	68 94       	set
    19fc:	b1 11       	cpse	r27, r1
    19fe:	d9 c0       	rjmp	.+434    	; 0x1bb2 <__fp_szero>
    1a00:	08 95       	ret

00001a02 <__fixunssfsi>:
    1a02:	bc d0       	rcall	.+376    	; 0x1b7c <__fp_splitA>
    1a04:	88 f0       	brcs	.+34     	; 0x1a28 <__fixunssfsi+0x26>
    1a06:	9f 57       	subi	r25, 0x7F	; 127
    1a08:	90 f0       	brcs	.+36     	; 0x1a2e <__fixunssfsi+0x2c>
    1a0a:	b9 2f       	mov	r27, r25
    1a0c:	99 27       	eor	r25, r25
    1a0e:	b7 51       	subi	r27, 0x17	; 23
    1a10:	a0 f0       	brcs	.+40     	; 0x1a3a <__fixunssfsi+0x38>
    1a12:	d1 f0       	breq	.+52     	; 0x1a48 <__fixunssfsi+0x46>
    1a14:	66 0f       	add	r22, r22
    1a16:	77 1f       	adc	r23, r23
    1a18:	88 1f       	adc	r24, r24
    1a1a:	99 1f       	adc	r25, r25
    1a1c:	1a f0       	brmi	.+6      	; 0x1a24 <__fixunssfsi+0x22>
    1a1e:	ba 95       	dec	r27
    1a20:	c9 f7       	brne	.-14     	; 0x1a14 <__fixunssfsi+0x12>
    1a22:	12 c0       	rjmp	.+36     	; 0x1a48 <__fixunssfsi+0x46>
    1a24:	b1 30       	cpi	r27, 0x01	; 1
    1a26:	81 f0       	breq	.+32     	; 0x1a48 <__fixunssfsi+0x46>
    1a28:	c3 d0       	rcall	.+390    	; 0x1bb0 <__fp_zero>
    1a2a:	b1 e0       	ldi	r27, 0x01	; 1
    1a2c:	08 95       	ret
    1a2e:	c0 c0       	rjmp	.+384    	; 0x1bb0 <__fp_zero>
    1a30:	67 2f       	mov	r22, r23
    1a32:	78 2f       	mov	r23, r24
    1a34:	88 27       	eor	r24, r24
    1a36:	b8 5f       	subi	r27, 0xF8	; 248
    1a38:	39 f0       	breq	.+14     	; 0x1a48 <__fixunssfsi+0x46>
    1a3a:	b9 3f       	cpi	r27, 0xF9	; 249
    1a3c:	cc f3       	brlt	.-14     	; 0x1a30 <__fixunssfsi+0x2e>
    1a3e:	86 95       	lsr	r24
    1a40:	77 95       	ror	r23
    1a42:	67 95       	ror	r22
    1a44:	b3 95       	inc	r27
    1a46:	d9 f7       	brne	.-10     	; 0x1a3e <__fixunssfsi+0x3c>
    1a48:	3e f4       	brtc	.+14     	; 0x1a58 <__fixunssfsi+0x56>
    1a4a:	90 95       	com	r25
    1a4c:	80 95       	com	r24
    1a4e:	70 95       	com	r23
    1a50:	61 95       	neg	r22
    1a52:	7f 4f       	sbci	r23, 0xFF	; 255
    1a54:	8f 4f       	sbci	r24, 0xFF	; 255
    1a56:	9f 4f       	sbci	r25, 0xFF	; 255
    1a58:	08 95       	ret

00001a5a <__floatunsisf>:
    1a5a:	e8 94       	clt
    1a5c:	09 c0       	rjmp	.+18     	; 0x1a70 <__floatsisf+0x12>

00001a5e <__floatsisf>:
    1a5e:	97 fb       	bst	r25, 7
    1a60:	3e f4       	brtc	.+14     	; 0x1a70 <__floatsisf+0x12>
    1a62:	90 95       	com	r25
    1a64:	80 95       	com	r24
    1a66:	70 95       	com	r23
    1a68:	61 95       	neg	r22
    1a6a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a6c:	8f 4f       	sbci	r24, 0xFF	; 255
    1a6e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a70:	99 23       	and	r25, r25
    1a72:	a9 f0       	breq	.+42     	; 0x1a9e <__floatsisf+0x40>
    1a74:	f9 2f       	mov	r31, r25
    1a76:	96 e9       	ldi	r25, 0x96	; 150
    1a78:	bb 27       	eor	r27, r27
    1a7a:	93 95       	inc	r25
    1a7c:	f6 95       	lsr	r31
    1a7e:	87 95       	ror	r24
    1a80:	77 95       	ror	r23
    1a82:	67 95       	ror	r22
    1a84:	b7 95       	ror	r27
    1a86:	f1 11       	cpse	r31, r1
    1a88:	f8 cf       	rjmp	.-16     	; 0x1a7a <__floatsisf+0x1c>
    1a8a:	fa f4       	brpl	.+62     	; 0x1aca <__floatsisf+0x6c>
    1a8c:	bb 0f       	add	r27, r27
    1a8e:	11 f4       	brne	.+4      	; 0x1a94 <__floatsisf+0x36>
    1a90:	60 ff       	sbrs	r22, 0
    1a92:	1b c0       	rjmp	.+54     	; 0x1aca <__floatsisf+0x6c>
    1a94:	6f 5f       	subi	r22, 0xFF	; 255
    1a96:	7f 4f       	sbci	r23, 0xFF	; 255
    1a98:	8f 4f       	sbci	r24, 0xFF	; 255
    1a9a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a9c:	16 c0       	rjmp	.+44     	; 0x1aca <__floatsisf+0x6c>
    1a9e:	88 23       	and	r24, r24
    1aa0:	11 f0       	breq	.+4      	; 0x1aa6 <__floatsisf+0x48>
    1aa2:	96 e9       	ldi	r25, 0x96	; 150
    1aa4:	11 c0       	rjmp	.+34     	; 0x1ac8 <__floatsisf+0x6a>
    1aa6:	77 23       	and	r23, r23
    1aa8:	21 f0       	breq	.+8      	; 0x1ab2 <__floatsisf+0x54>
    1aaa:	9e e8       	ldi	r25, 0x8E	; 142
    1aac:	87 2f       	mov	r24, r23
    1aae:	76 2f       	mov	r23, r22
    1ab0:	05 c0       	rjmp	.+10     	; 0x1abc <__floatsisf+0x5e>
    1ab2:	66 23       	and	r22, r22
    1ab4:	71 f0       	breq	.+28     	; 0x1ad2 <__floatsisf+0x74>
    1ab6:	96 e8       	ldi	r25, 0x86	; 134
    1ab8:	86 2f       	mov	r24, r22
    1aba:	70 e0       	ldi	r23, 0x00	; 0
    1abc:	60 e0       	ldi	r22, 0x00	; 0
    1abe:	2a f0       	brmi	.+10     	; 0x1aca <__floatsisf+0x6c>
    1ac0:	9a 95       	dec	r25
    1ac2:	66 0f       	add	r22, r22
    1ac4:	77 1f       	adc	r23, r23
    1ac6:	88 1f       	adc	r24, r24
    1ac8:	da f7       	brpl	.-10     	; 0x1ac0 <__floatsisf+0x62>
    1aca:	88 0f       	add	r24, r24
    1acc:	96 95       	lsr	r25
    1ace:	87 95       	ror	r24
    1ad0:	97 f9       	bld	r25, 7
    1ad2:	08 95       	ret

00001ad4 <__fp_cmp>:
    1ad4:	99 0f       	add	r25, r25
    1ad6:	00 08       	sbc	r0, r0
    1ad8:	55 0f       	add	r21, r21
    1ada:	aa 0b       	sbc	r26, r26
    1adc:	e0 e8       	ldi	r30, 0x80	; 128
    1ade:	fe ef       	ldi	r31, 0xFE	; 254
    1ae0:	16 16       	cp	r1, r22
    1ae2:	17 06       	cpc	r1, r23
    1ae4:	e8 07       	cpc	r30, r24
    1ae6:	f9 07       	cpc	r31, r25
    1ae8:	c0 f0       	brcs	.+48     	; 0x1b1a <__fp_cmp+0x46>
    1aea:	12 16       	cp	r1, r18
    1aec:	13 06       	cpc	r1, r19
    1aee:	e4 07       	cpc	r30, r20
    1af0:	f5 07       	cpc	r31, r21
    1af2:	98 f0       	brcs	.+38     	; 0x1b1a <__fp_cmp+0x46>
    1af4:	62 1b       	sub	r22, r18
    1af6:	73 0b       	sbc	r23, r19
    1af8:	84 0b       	sbc	r24, r20
    1afa:	95 0b       	sbc	r25, r21
    1afc:	39 f4       	brne	.+14     	; 0x1b0c <__fp_cmp+0x38>
    1afe:	0a 26       	eor	r0, r26
    1b00:	61 f0       	breq	.+24     	; 0x1b1a <__fp_cmp+0x46>
    1b02:	23 2b       	or	r18, r19
    1b04:	24 2b       	or	r18, r20
    1b06:	25 2b       	or	r18, r21
    1b08:	21 f4       	brne	.+8      	; 0x1b12 <__fp_cmp+0x3e>
    1b0a:	08 95       	ret
    1b0c:	0a 26       	eor	r0, r26
    1b0e:	09 f4       	brne	.+2      	; 0x1b12 <__fp_cmp+0x3e>
    1b10:	a1 40       	sbci	r26, 0x01	; 1
    1b12:	a6 95       	lsr	r26
    1b14:	8f ef       	ldi	r24, 0xFF	; 255
    1b16:	81 1d       	adc	r24, r1
    1b18:	81 1d       	adc	r24, r1
    1b1a:	08 95       	ret

00001b1c <__fp_inf>:
    1b1c:	97 f9       	bld	r25, 7
    1b1e:	9f 67       	ori	r25, 0x7F	; 127
    1b20:	80 e8       	ldi	r24, 0x80	; 128
    1b22:	70 e0       	ldi	r23, 0x00	; 0
    1b24:	60 e0       	ldi	r22, 0x00	; 0
    1b26:	08 95       	ret

00001b28 <__fp_nan>:
    1b28:	9f ef       	ldi	r25, 0xFF	; 255
    1b2a:	80 ec       	ldi	r24, 0xC0	; 192
    1b2c:	08 95       	ret

00001b2e <__fp_pscA>:
    1b2e:	00 24       	eor	r0, r0
    1b30:	0a 94       	dec	r0
    1b32:	16 16       	cp	r1, r22
    1b34:	17 06       	cpc	r1, r23
    1b36:	18 06       	cpc	r1, r24
    1b38:	09 06       	cpc	r0, r25
    1b3a:	08 95       	ret

00001b3c <__fp_pscB>:
    1b3c:	00 24       	eor	r0, r0
    1b3e:	0a 94       	dec	r0
    1b40:	12 16       	cp	r1, r18
    1b42:	13 06       	cpc	r1, r19
    1b44:	14 06       	cpc	r1, r20
    1b46:	05 06       	cpc	r0, r21
    1b48:	08 95       	ret

00001b4a <__fp_round>:
    1b4a:	09 2e       	mov	r0, r25
    1b4c:	03 94       	inc	r0
    1b4e:	00 0c       	add	r0, r0
    1b50:	11 f4       	brne	.+4      	; 0x1b56 <__fp_round+0xc>
    1b52:	88 23       	and	r24, r24
    1b54:	52 f0       	brmi	.+20     	; 0x1b6a <__fp_round+0x20>
    1b56:	bb 0f       	add	r27, r27
    1b58:	40 f4       	brcc	.+16     	; 0x1b6a <__fp_round+0x20>
    1b5a:	bf 2b       	or	r27, r31
    1b5c:	11 f4       	brne	.+4      	; 0x1b62 <__fp_round+0x18>
    1b5e:	60 ff       	sbrs	r22, 0
    1b60:	04 c0       	rjmp	.+8      	; 0x1b6a <__fp_round+0x20>
    1b62:	6f 5f       	subi	r22, 0xFF	; 255
    1b64:	7f 4f       	sbci	r23, 0xFF	; 255
    1b66:	8f 4f       	sbci	r24, 0xFF	; 255
    1b68:	9f 4f       	sbci	r25, 0xFF	; 255
    1b6a:	08 95       	ret

00001b6c <__fp_split3>:
    1b6c:	57 fd       	sbrc	r21, 7
    1b6e:	90 58       	subi	r25, 0x80	; 128
    1b70:	44 0f       	add	r20, r20
    1b72:	55 1f       	adc	r21, r21
    1b74:	59 f0       	breq	.+22     	; 0x1b8c <__fp_splitA+0x10>
    1b76:	5f 3f       	cpi	r21, 0xFF	; 255
    1b78:	71 f0       	breq	.+28     	; 0x1b96 <__fp_splitA+0x1a>
    1b7a:	47 95       	ror	r20

00001b7c <__fp_splitA>:
    1b7c:	88 0f       	add	r24, r24
    1b7e:	97 fb       	bst	r25, 7
    1b80:	99 1f       	adc	r25, r25
    1b82:	61 f0       	breq	.+24     	; 0x1b9c <__fp_splitA+0x20>
    1b84:	9f 3f       	cpi	r25, 0xFF	; 255
    1b86:	79 f0       	breq	.+30     	; 0x1ba6 <__fp_splitA+0x2a>
    1b88:	87 95       	ror	r24
    1b8a:	08 95       	ret
    1b8c:	12 16       	cp	r1, r18
    1b8e:	13 06       	cpc	r1, r19
    1b90:	14 06       	cpc	r1, r20
    1b92:	55 1f       	adc	r21, r21
    1b94:	f2 cf       	rjmp	.-28     	; 0x1b7a <__fp_split3+0xe>
    1b96:	46 95       	lsr	r20
    1b98:	f1 df       	rcall	.-30     	; 0x1b7c <__fp_splitA>
    1b9a:	08 c0       	rjmp	.+16     	; 0x1bac <__fp_splitA+0x30>
    1b9c:	16 16       	cp	r1, r22
    1b9e:	17 06       	cpc	r1, r23
    1ba0:	18 06       	cpc	r1, r24
    1ba2:	99 1f       	adc	r25, r25
    1ba4:	f1 cf       	rjmp	.-30     	; 0x1b88 <__fp_splitA+0xc>
    1ba6:	86 95       	lsr	r24
    1ba8:	71 05       	cpc	r23, r1
    1baa:	61 05       	cpc	r22, r1
    1bac:	08 94       	sec
    1bae:	08 95       	ret

00001bb0 <__fp_zero>:
    1bb0:	e8 94       	clt

00001bb2 <__fp_szero>:
    1bb2:	bb 27       	eor	r27, r27
    1bb4:	66 27       	eor	r22, r22
    1bb6:	77 27       	eor	r23, r23
    1bb8:	cb 01       	movw	r24, r22
    1bba:	97 f9       	bld	r25, 7
    1bbc:	08 95       	ret

00001bbe <__gesf2>:
    1bbe:	8a df       	rcall	.-236    	; 0x1ad4 <__fp_cmp>
    1bc0:	08 f4       	brcc	.+2      	; 0x1bc4 <__gesf2+0x6>
    1bc2:	8f ef       	ldi	r24, 0xFF	; 255
    1bc4:	08 95       	ret

00001bc6 <__mulsf3>:
    1bc6:	0b d0       	rcall	.+22     	; 0x1bde <__mulsf3x>
    1bc8:	c0 cf       	rjmp	.-128    	; 0x1b4a <__fp_round>
    1bca:	b1 df       	rcall	.-158    	; 0x1b2e <__fp_pscA>
    1bcc:	28 f0       	brcs	.+10     	; 0x1bd8 <__mulsf3+0x12>
    1bce:	b6 df       	rcall	.-148    	; 0x1b3c <__fp_pscB>
    1bd0:	18 f0       	brcs	.+6      	; 0x1bd8 <__mulsf3+0x12>
    1bd2:	95 23       	and	r25, r21
    1bd4:	09 f0       	breq	.+2      	; 0x1bd8 <__mulsf3+0x12>
    1bd6:	a2 cf       	rjmp	.-188    	; 0x1b1c <__fp_inf>
    1bd8:	a7 cf       	rjmp	.-178    	; 0x1b28 <__fp_nan>
    1bda:	11 24       	eor	r1, r1
    1bdc:	ea cf       	rjmp	.-44     	; 0x1bb2 <__fp_szero>

00001bde <__mulsf3x>:
    1bde:	c6 df       	rcall	.-116    	; 0x1b6c <__fp_split3>
    1be0:	a0 f3       	brcs	.-24     	; 0x1bca <__mulsf3+0x4>

00001be2 <__mulsf3_pse>:
    1be2:	95 9f       	mul	r25, r21
    1be4:	d1 f3       	breq	.-12     	; 0x1bda <__mulsf3+0x14>
    1be6:	95 0f       	add	r25, r21
    1be8:	50 e0       	ldi	r21, 0x00	; 0
    1bea:	55 1f       	adc	r21, r21
    1bec:	62 9f       	mul	r22, r18
    1bee:	f0 01       	movw	r30, r0
    1bf0:	72 9f       	mul	r23, r18
    1bf2:	bb 27       	eor	r27, r27
    1bf4:	f0 0d       	add	r31, r0
    1bf6:	b1 1d       	adc	r27, r1
    1bf8:	63 9f       	mul	r22, r19
    1bfa:	aa 27       	eor	r26, r26
    1bfc:	f0 0d       	add	r31, r0
    1bfe:	b1 1d       	adc	r27, r1
    1c00:	aa 1f       	adc	r26, r26
    1c02:	64 9f       	mul	r22, r20
    1c04:	66 27       	eor	r22, r22
    1c06:	b0 0d       	add	r27, r0
    1c08:	a1 1d       	adc	r26, r1
    1c0a:	66 1f       	adc	r22, r22
    1c0c:	82 9f       	mul	r24, r18
    1c0e:	22 27       	eor	r18, r18
    1c10:	b0 0d       	add	r27, r0
    1c12:	a1 1d       	adc	r26, r1
    1c14:	62 1f       	adc	r22, r18
    1c16:	73 9f       	mul	r23, r19
    1c18:	b0 0d       	add	r27, r0
    1c1a:	a1 1d       	adc	r26, r1
    1c1c:	62 1f       	adc	r22, r18
    1c1e:	83 9f       	mul	r24, r19
    1c20:	a0 0d       	add	r26, r0
    1c22:	61 1d       	adc	r22, r1
    1c24:	22 1f       	adc	r18, r18
    1c26:	74 9f       	mul	r23, r20
    1c28:	33 27       	eor	r19, r19
    1c2a:	a0 0d       	add	r26, r0
    1c2c:	61 1d       	adc	r22, r1
    1c2e:	23 1f       	adc	r18, r19
    1c30:	84 9f       	mul	r24, r20
    1c32:	60 0d       	add	r22, r0
    1c34:	21 1d       	adc	r18, r1
    1c36:	82 2f       	mov	r24, r18
    1c38:	76 2f       	mov	r23, r22
    1c3a:	6a 2f       	mov	r22, r26
    1c3c:	11 24       	eor	r1, r1
    1c3e:	9f 57       	subi	r25, 0x7F	; 127
    1c40:	50 40       	sbci	r21, 0x00	; 0
    1c42:	8a f0       	brmi	.+34     	; 0x1c66 <__mulsf3_pse+0x84>
    1c44:	e1 f0       	breq	.+56     	; 0x1c7e <__mulsf3_pse+0x9c>
    1c46:	88 23       	and	r24, r24
    1c48:	4a f0       	brmi	.+18     	; 0x1c5c <__mulsf3_pse+0x7a>
    1c4a:	ee 0f       	add	r30, r30
    1c4c:	ff 1f       	adc	r31, r31
    1c4e:	bb 1f       	adc	r27, r27
    1c50:	66 1f       	adc	r22, r22
    1c52:	77 1f       	adc	r23, r23
    1c54:	88 1f       	adc	r24, r24
    1c56:	91 50       	subi	r25, 0x01	; 1
    1c58:	50 40       	sbci	r21, 0x00	; 0
    1c5a:	a9 f7       	brne	.-22     	; 0x1c46 <__mulsf3_pse+0x64>
    1c5c:	9e 3f       	cpi	r25, 0xFE	; 254
    1c5e:	51 05       	cpc	r21, r1
    1c60:	70 f0       	brcs	.+28     	; 0x1c7e <__mulsf3_pse+0x9c>
    1c62:	5c cf       	rjmp	.-328    	; 0x1b1c <__fp_inf>
    1c64:	a6 cf       	rjmp	.-180    	; 0x1bb2 <__fp_szero>
    1c66:	5f 3f       	cpi	r21, 0xFF	; 255
    1c68:	ec f3       	brlt	.-6      	; 0x1c64 <__mulsf3_pse+0x82>
    1c6a:	98 3e       	cpi	r25, 0xE8	; 232
    1c6c:	dc f3       	brlt	.-10     	; 0x1c64 <__mulsf3_pse+0x82>
    1c6e:	86 95       	lsr	r24
    1c70:	77 95       	ror	r23
    1c72:	67 95       	ror	r22
    1c74:	b7 95       	ror	r27
    1c76:	f7 95       	ror	r31
    1c78:	e7 95       	ror	r30
    1c7a:	9f 5f       	subi	r25, 0xFF	; 255
    1c7c:	c1 f7       	brne	.-16     	; 0x1c6e <__mulsf3_pse+0x8c>
    1c7e:	fe 2b       	or	r31, r30
    1c80:	88 0f       	add	r24, r24
    1c82:	91 1d       	adc	r25, r1
    1c84:	96 95       	lsr	r25
    1c86:	87 95       	ror	r24
    1c88:	97 f9       	bld	r25, 7
    1c8a:	08 95       	ret

00001c8c <__divmodhi4>:
    1c8c:	97 fb       	bst	r25, 7
    1c8e:	09 2e       	mov	r0, r25
    1c90:	07 26       	eor	r0, r23
    1c92:	0a d0       	rcall	.+20     	; 0x1ca8 <__divmodhi4_neg1>
    1c94:	77 fd       	sbrc	r23, 7
    1c96:	04 d0       	rcall	.+8      	; 0x1ca0 <__divmodhi4_neg2>
    1c98:	0c d0       	rcall	.+24     	; 0x1cb2 <__udivmodhi4>
    1c9a:	06 d0       	rcall	.+12     	; 0x1ca8 <__divmodhi4_neg1>
    1c9c:	00 20       	and	r0, r0
    1c9e:	1a f4       	brpl	.+6      	; 0x1ca6 <__divmodhi4_exit>

00001ca0 <__divmodhi4_neg2>:
    1ca0:	70 95       	com	r23
    1ca2:	61 95       	neg	r22
    1ca4:	7f 4f       	sbci	r23, 0xFF	; 255

00001ca6 <__divmodhi4_exit>:
    1ca6:	08 95       	ret

00001ca8 <__divmodhi4_neg1>:
    1ca8:	f6 f7       	brtc	.-4      	; 0x1ca6 <__divmodhi4_exit>
    1caa:	90 95       	com	r25
    1cac:	81 95       	neg	r24
    1cae:	9f 4f       	sbci	r25, 0xFF	; 255
    1cb0:	08 95       	ret

00001cb2 <__udivmodhi4>:
    1cb2:	aa 1b       	sub	r26, r26
    1cb4:	bb 1b       	sub	r27, r27
    1cb6:	51 e1       	ldi	r21, 0x11	; 17
    1cb8:	07 c0       	rjmp	.+14     	; 0x1cc8 <__udivmodhi4_ep>

00001cba <__udivmodhi4_loop>:
    1cba:	aa 1f       	adc	r26, r26
    1cbc:	bb 1f       	adc	r27, r27
    1cbe:	a6 17       	cp	r26, r22
    1cc0:	b7 07       	cpc	r27, r23
    1cc2:	10 f0       	brcs	.+4      	; 0x1cc8 <__udivmodhi4_ep>
    1cc4:	a6 1b       	sub	r26, r22
    1cc6:	b7 0b       	sbc	r27, r23

00001cc8 <__udivmodhi4_ep>:
    1cc8:	88 1f       	adc	r24, r24
    1cca:	99 1f       	adc	r25, r25
    1ccc:	5a 95       	dec	r21
    1cce:	a9 f7       	brne	.-22     	; 0x1cba <__udivmodhi4_loop>
    1cd0:	80 95       	com	r24
    1cd2:	90 95       	com	r25
    1cd4:	bc 01       	movw	r22, r24
    1cd6:	cd 01       	movw	r24, r26
    1cd8:	08 95       	ret

00001cda <_exit>:
    1cda:	f8 94       	cli

00001cdc <__stop_program>:
    1cdc:	ff cf       	rjmp	.-2      	; 0x1cdc <__stop_program>
=======
    169c:	0e 94 2e 0b 	call	0x165c	; 0x165c <_Z5setupv>
	while(1){
		loop();
    16a0:	0e 94 33 0b 	call	0x1666	; 0x1666 <_Z4loopv>
    16a4:	fd cf       	rjmp	.-6      	; 0x16a0 <main+0x4>

000016a6 <__subsf3>:
    16a6:	50 58       	subi	r21, 0x80	; 128

000016a8 <__addsf3>:
    16a8:	bb 27       	eor	r27, r27
    16aa:	aa 27       	eor	r26, r26
    16ac:	0e d0       	rcall	.+28     	; 0x16ca <__addsf3x>
    16ae:	75 c1       	rjmp	.+746    	; 0x199a <__fp_round>
    16b0:	66 d1       	rcall	.+716    	; 0x197e <__fp_pscA>
    16b2:	30 f0       	brcs	.+12     	; 0x16c0 <__addsf3+0x18>
    16b4:	6b d1       	rcall	.+726    	; 0x198c <__fp_pscB>
    16b6:	20 f0       	brcs	.+8      	; 0x16c0 <__addsf3+0x18>
    16b8:	31 f4       	brne	.+12     	; 0x16c6 <__addsf3+0x1e>
    16ba:	9f 3f       	cpi	r25, 0xFF	; 255
    16bc:	11 f4       	brne	.+4      	; 0x16c2 <__addsf3+0x1a>
    16be:	1e f4       	brtc	.+6      	; 0x16c6 <__addsf3+0x1e>
    16c0:	5b c1       	rjmp	.+694    	; 0x1978 <__fp_nan>
    16c2:	0e f4       	brtc	.+2      	; 0x16c6 <__addsf3+0x1e>
    16c4:	e0 95       	com	r30
    16c6:	e7 fb       	bst	r30, 7
    16c8:	51 c1       	rjmp	.+674    	; 0x196c <__fp_inf>

000016ca <__addsf3x>:
    16ca:	e9 2f       	mov	r30, r25
    16cc:	77 d1       	rcall	.+750    	; 0x19bc <__fp_split3>
    16ce:	80 f3       	brcs	.-32     	; 0x16b0 <__addsf3+0x8>
    16d0:	ba 17       	cp	r27, r26
    16d2:	62 07       	cpc	r22, r18
    16d4:	73 07       	cpc	r23, r19
    16d6:	84 07       	cpc	r24, r20
    16d8:	95 07       	cpc	r25, r21
    16da:	18 f0       	brcs	.+6      	; 0x16e2 <__addsf3x+0x18>
    16dc:	71 f4       	brne	.+28     	; 0x16fa <__addsf3x+0x30>
    16de:	9e f5       	brtc	.+102    	; 0x1746 <__addsf3x+0x7c>
    16e0:	8f c1       	rjmp	.+798    	; 0x1a00 <__fp_zero>
    16e2:	0e f4       	brtc	.+2      	; 0x16e6 <__addsf3x+0x1c>
    16e4:	e0 95       	com	r30
    16e6:	0b 2e       	mov	r0, r27
    16e8:	ba 2f       	mov	r27, r26
    16ea:	a0 2d       	mov	r26, r0
    16ec:	0b 01       	movw	r0, r22
    16ee:	b9 01       	movw	r22, r18
    16f0:	90 01       	movw	r18, r0
    16f2:	0c 01       	movw	r0, r24
    16f4:	ca 01       	movw	r24, r20
    16f6:	a0 01       	movw	r20, r0
    16f8:	11 24       	eor	r1, r1
    16fa:	ff 27       	eor	r31, r31
    16fc:	59 1b       	sub	r21, r25
    16fe:	99 f0       	breq	.+38     	; 0x1726 <__addsf3x+0x5c>
    1700:	59 3f       	cpi	r21, 0xF9	; 249
    1702:	50 f4       	brcc	.+20     	; 0x1718 <__addsf3x+0x4e>
    1704:	50 3e       	cpi	r21, 0xE0	; 224
    1706:	68 f1       	brcs	.+90     	; 0x1762 <__addsf3x+0x98>
    1708:	1a 16       	cp	r1, r26
    170a:	f0 40       	sbci	r31, 0x00	; 0
    170c:	a2 2f       	mov	r26, r18
    170e:	23 2f       	mov	r18, r19
    1710:	34 2f       	mov	r19, r20
    1712:	44 27       	eor	r20, r20
    1714:	58 5f       	subi	r21, 0xF8	; 248
    1716:	f3 cf       	rjmp	.-26     	; 0x16fe <__addsf3x+0x34>
    1718:	46 95       	lsr	r20
    171a:	37 95       	ror	r19
    171c:	27 95       	ror	r18
    171e:	a7 95       	ror	r26
    1720:	f0 40       	sbci	r31, 0x00	; 0
    1722:	53 95       	inc	r21
    1724:	c9 f7       	brne	.-14     	; 0x1718 <__addsf3x+0x4e>
    1726:	7e f4       	brtc	.+30     	; 0x1746 <__addsf3x+0x7c>
    1728:	1f 16       	cp	r1, r31
    172a:	ba 0b       	sbc	r27, r26
    172c:	62 0b       	sbc	r22, r18
    172e:	73 0b       	sbc	r23, r19
    1730:	84 0b       	sbc	r24, r20
    1732:	ba f0       	brmi	.+46     	; 0x1762 <__addsf3x+0x98>
    1734:	91 50       	subi	r25, 0x01	; 1
    1736:	a1 f0       	breq	.+40     	; 0x1760 <__addsf3x+0x96>
    1738:	ff 0f       	add	r31, r31
    173a:	bb 1f       	adc	r27, r27
    173c:	66 1f       	adc	r22, r22
    173e:	77 1f       	adc	r23, r23
    1740:	88 1f       	adc	r24, r24
    1742:	c2 f7       	brpl	.-16     	; 0x1734 <__addsf3x+0x6a>
    1744:	0e c0       	rjmp	.+28     	; 0x1762 <__addsf3x+0x98>
    1746:	ba 0f       	add	r27, r26
    1748:	62 1f       	adc	r22, r18
    174a:	73 1f       	adc	r23, r19
    174c:	84 1f       	adc	r24, r20
    174e:	48 f4       	brcc	.+18     	; 0x1762 <__addsf3x+0x98>
    1750:	87 95       	ror	r24
    1752:	77 95       	ror	r23
    1754:	67 95       	ror	r22
    1756:	b7 95       	ror	r27
    1758:	f7 95       	ror	r31
    175a:	9e 3f       	cpi	r25, 0xFE	; 254
    175c:	08 f0       	brcs	.+2      	; 0x1760 <__addsf3x+0x96>
    175e:	b3 cf       	rjmp	.-154    	; 0x16c6 <__addsf3+0x1e>
    1760:	93 95       	inc	r25
    1762:	88 0f       	add	r24, r24
    1764:	08 f0       	brcs	.+2      	; 0x1768 <__addsf3x+0x9e>
    1766:	99 27       	eor	r25, r25
    1768:	ee 0f       	add	r30, r30
    176a:	97 95       	ror	r25
    176c:	87 95       	ror	r24
    176e:	08 95       	ret

00001770 <__cmpsf2>:
    1770:	d9 d0       	rcall	.+434    	; 0x1924 <__fp_cmp>
    1772:	08 f4       	brcc	.+2      	; 0x1776 <__cmpsf2+0x6>
    1774:	81 e0       	ldi	r24, 0x01	; 1
    1776:	08 95       	ret

00001778 <__divsf3>:
    1778:	0c d0       	rcall	.+24     	; 0x1792 <__divsf3x>
    177a:	0f c1       	rjmp	.+542    	; 0x199a <__fp_round>
    177c:	07 d1       	rcall	.+526    	; 0x198c <__fp_pscB>
    177e:	40 f0       	brcs	.+16     	; 0x1790 <__divsf3+0x18>
    1780:	fe d0       	rcall	.+508    	; 0x197e <__fp_pscA>
    1782:	30 f0       	brcs	.+12     	; 0x1790 <__divsf3+0x18>
    1784:	21 f4       	brne	.+8      	; 0x178e <__divsf3+0x16>
    1786:	5f 3f       	cpi	r21, 0xFF	; 255
    1788:	19 f0       	breq	.+6      	; 0x1790 <__divsf3+0x18>
    178a:	f0 c0       	rjmp	.+480    	; 0x196c <__fp_inf>
    178c:	51 11       	cpse	r21, r1
    178e:	39 c1       	rjmp	.+626    	; 0x1a02 <__fp_szero>
    1790:	f3 c0       	rjmp	.+486    	; 0x1978 <__fp_nan>

00001792 <__divsf3x>:
    1792:	14 d1       	rcall	.+552    	; 0x19bc <__fp_split3>
    1794:	98 f3       	brcs	.-26     	; 0x177c <__divsf3+0x4>

00001796 <__divsf3_pse>:
    1796:	99 23       	and	r25, r25
    1798:	c9 f3       	breq	.-14     	; 0x178c <__divsf3+0x14>
    179a:	55 23       	and	r21, r21
    179c:	b1 f3       	breq	.-20     	; 0x178a <__divsf3+0x12>
    179e:	95 1b       	sub	r25, r21
    17a0:	55 0b       	sbc	r21, r21
    17a2:	bb 27       	eor	r27, r27
    17a4:	aa 27       	eor	r26, r26
    17a6:	62 17       	cp	r22, r18
    17a8:	73 07       	cpc	r23, r19
    17aa:	84 07       	cpc	r24, r20
    17ac:	38 f0       	brcs	.+14     	; 0x17bc <__divsf3_pse+0x26>
    17ae:	9f 5f       	subi	r25, 0xFF	; 255
    17b0:	5f 4f       	sbci	r21, 0xFF	; 255
    17b2:	22 0f       	add	r18, r18
    17b4:	33 1f       	adc	r19, r19
    17b6:	44 1f       	adc	r20, r20
    17b8:	aa 1f       	adc	r26, r26
    17ba:	a9 f3       	breq	.-22     	; 0x17a6 <__divsf3_pse+0x10>
    17bc:	33 d0       	rcall	.+102    	; 0x1824 <__divsf3_pse+0x8e>
    17be:	0e 2e       	mov	r0, r30
    17c0:	3a f0       	brmi	.+14     	; 0x17d0 <__divsf3_pse+0x3a>
    17c2:	e0 e8       	ldi	r30, 0x80	; 128
    17c4:	30 d0       	rcall	.+96     	; 0x1826 <__divsf3_pse+0x90>
    17c6:	91 50       	subi	r25, 0x01	; 1
    17c8:	50 40       	sbci	r21, 0x00	; 0
    17ca:	e6 95       	lsr	r30
    17cc:	00 1c       	adc	r0, r0
    17ce:	ca f7       	brpl	.-14     	; 0x17c2 <__divsf3_pse+0x2c>
    17d0:	29 d0       	rcall	.+82     	; 0x1824 <__divsf3_pse+0x8e>
    17d2:	fe 2f       	mov	r31, r30
    17d4:	27 d0       	rcall	.+78     	; 0x1824 <__divsf3_pse+0x8e>
    17d6:	66 0f       	add	r22, r22
    17d8:	77 1f       	adc	r23, r23
    17da:	88 1f       	adc	r24, r24
    17dc:	bb 1f       	adc	r27, r27
    17de:	26 17       	cp	r18, r22
    17e0:	37 07       	cpc	r19, r23
    17e2:	48 07       	cpc	r20, r24
    17e4:	ab 07       	cpc	r26, r27
    17e6:	b0 e8       	ldi	r27, 0x80	; 128
    17e8:	09 f0       	breq	.+2      	; 0x17ec <__divsf3_pse+0x56>
    17ea:	bb 0b       	sbc	r27, r27
    17ec:	80 2d       	mov	r24, r0
    17ee:	bf 01       	movw	r22, r30
    17f0:	ff 27       	eor	r31, r31
    17f2:	93 58       	subi	r25, 0x83	; 131
    17f4:	5f 4f       	sbci	r21, 0xFF	; 255
    17f6:	2a f0       	brmi	.+10     	; 0x1802 <__divsf3_pse+0x6c>
    17f8:	9e 3f       	cpi	r25, 0xFE	; 254
    17fa:	51 05       	cpc	r21, r1
    17fc:	68 f0       	brcs	.+26     	; 0x1818 <__divsf3_pse+0x82>
    17fe:	b6 c0       	rjmp	.+364    	; 0x196c <__fp_inf>
    1800:	00 c1       	rjmp	.+512    	; 0x1a02 <__fp_szero>
    1802:	5f 3f       	cpi	r21, 0xFF	; 255
    1804:	ec f3       	brlt	.-6      	; 0x1800 <__divsf3_pse+0x6a>
    1806:	98 3e       	cpi	r25, 0xE8	; 232
    1808:	dc f3       	brlt	.-10     	; 0x1800 <__divsf3_pse+0x6a>
    180a:	86 95       	lsr	r24
    180c:	77 95       	ror	r23
    180e:	67 95       	ror	r22
    1810:	b7 95       	ror	r27
    1812:	f7 95       	ror	r31
    1814:	9f 5f       	subi	r25, 0xFF	; 255
    1816:	c9 f7       	brne	.-14     	; 0x180a <__divsf3_pse+0x74>
    1818:	88 0f       	add	r24, r24
    181a:	91 1d       	adc	r25, r1
    181c:	96 95       	lsr	r25
    181e:	87 95       	ror	r24
    1820:	97 f9       	bld	r25, 7
    1822:	08 95       	ret
    1824:	e1 e0       	ldi	r30, 0x01	; 1
    1826:	66 0f       	add	r22, r22
    1828:	77 1f       	adc	r23, r23
    182a:	88 1f       	adc	r24, r24
    182c:	bb 1f       	adc	r27, r27
    182e:	62 17       	cp	r22, r18
    1830:	73 07       	cpc	r23, r19
    1832:	84 07       	cpc	r24, r20
    1834:	ba 07       	cpc	r27, r26
    1836:	20 f0       	brcs	.+8      	; 0x1840 <__divsf3_pse+0xaa>
    1838:	62 1b       	sub	r22, r18
    183a:	73 0b       	sbc	r23, r19
    183c:	84 0b       	sbc	r24, r20
    183e:	ba 0b       	sbc	r27, r26
    1840:	ee 1f       	adc	r30, r30
    1842:	88 f7       	brcc	.-30     	; 0x1826 <__divsf3_pse+0x90>
    1844:	e0 95       	com	r30
    1846:	08 95       	ret

00001848 <__fixsfsi>:
    1848:	04 d0       	rcall	.+8      	; 0x1852 <__fixunssfsi>
    184a:	68 94       	set
    184c:	b1 11       	cpse	r27, r1
    184e:	d9 c0       	rjmp	.+434    	; 0x1a02 <__fp_szero>
    1850:	08 95       	ret

00001852 <__fixunssfsi>:
    1852:	bc d0       	rcall	.+376    	; 0x19cc <__fp_splitA>
    1854:	88 f0       	brcs	.+34     	; 0x1878 <__fixunssfsi+0x26>
    1856:	9f 57       	subi	r25, 0x7F	; 127
    1858:	90 f0       	brcs	.+36     	; 0x187e <__fixunssfsi+0x2c>
    185a:	b9 2f       	mov	r27, r25
    185c:	99 27       	eor	r25, r25
    185e:	b7 51       	subi	r27, 0x17	; 23
    1860:	a0 f0       	brcs	.+40     	; 0x188a <__fixunssfsi+0x38>
    1862:	d1 f0       	breq	.+52     	; 0x1898 <__fixunssfsi+0x46>
    1864:	66 0f       	add	r22, r22
    1866:	77 1f       	adc	r23, r23
    1868:	88 1f       	adc	r24, r24
    186a:	99 1f       	adc	r25, r25
    186c:	1a f0       	brmi	.+6      	; 0x1874 <__fixunssfsi+0x22>
    186e:	ba 95       	dec	r27
    1870:	c9 f7       	brne	.-14     	; 0x1864 <__fixunssfsi+0x12>
    1872:	12 c0       	rjmp	.+36     	; 0x1898 <__fixunssfsi+0x46>
    1874:	b1 30       	cpi	r27, 0x01	; 1
    1876:	81 f0       	breq	.+32     	; 0x1898 <__fixunssfsi+0x46>
    1878:	c3 d0       	rcall	.+390    	; 0x1a00 <__fp_zero>
    187a:	b1 e0       	ldi	r27, 0x01	; 1
    187c:	08 95       	ret
    187e:	c0 c0       	rjmp	.+384    	; 0x1a00 <__fp_zero>
    1880:	67 2f       	mov	r22, r23
    1882:	78 2f       	mov	r23, r24
    1884:	88 27       	eor	r24, r24
    1886:	b8 5f       	subi	r27, 0xF8	; 248
    1888:	39 f0       	breq	.+14     	; 0x1898 <__fixunssfsi+0x46>
    188a:	b9 3f       	cpi	r27, 0xF9	; 249
    188c:	cc f3       	brlt	.-14     	; 0x1880 <__fixunssfsi+0x2e>
    188e:	86 95       	lsr	r24
    1890:	77 95       	ror	r23
    1892:	67 95       	ror	r22
    1894:	b3 95       	inc	r27
    1896:	d9 f7       	brne	.-10     	; 0x188e <__fixunssfsi+0x3c>
    1898:	3e f4       	brtc	.+14     	; 0x18a8 <__fixunssfsi+0x56>
    189a:	90 95       	com	r25
    189c:	80 95       	com	r24
    189e:	70 95       	com	r23
    18a0:	61 95       	neg	r22
    18a2:	7f 4f       	sbci	r23, 0xFF	; 255
    18a4:	8f 4f       	sbci	r24, 0xFF	; 255
    18a6:	9f 4f       	sbci	r25, 0xFF	; 255
    18a8:	08 95       	ret

000018aa <__floatunsisf>:
    18aa:	e8 94       	clt
    18ac:	09 c0       	rjmp	.+18     	; 0x18c0 <__floatsisf+0x12>

000018ae <__floatsisf>:
    18ae:	97 fb       	bst	r25, 7
    18b0:	3e f4       	brtc	.+14     	; 0x18c0 <__floatsisf+0x12>
    18b2:	90 95       	com	r25
    18b4:	80 95       	com	r24
    18b6:	70 95       	com	r23
    18b8:	61 95       	neg	r22
    18ba:	7f 4f       	sbci	r23, 0xFF	; 255
    18bc:	8f 4f       	sbci	r24, 0xFF	; 255
    18be:	9f 4f       	sbci	r25, 0xFF	; 255
    18c0:	99 23       	and	r25, r25
    18c2:	a9 f0       	breq	.+42     	; 0x18ee <__floatsisf+0x40>
    18c4:	f9 2f       	mov	r31, r25
    18c6:	96 e9       	ldi	r25, 0x96	; 150
    18c8:	bb 27       	eor	r27, r27
    18ca:	93 95       	inc	r25
    18cc:	f6 95       	lsr	r31
    18ce:	87 95       	ror	r24
    18d0:	77 95       	ror	r23
    18d2:	67 95       	ror	r22
    18d4:	b7 95       	ror	r27
    18d6:	f1 11       	cpse	r31, r1
    18d8:	f8 cf       	rjmp	.-16     	; 0x18ca <__floatsisf+0x1c>
    18da:	fa f4       	brpl	.+62     	; 0x191a <__floatsisf+0x6c>
    18dc:	bb 0f       	add	r27, r27
    18de:	11 f4       	brne	.+4      	; 0x18e4 <__floatsisf+0x36>
    18e0:	60 ff       	sbrs	r22, 0
    18e2:	1b c0       	rjmp	.+54     	; 0x191a <__floatsisf+0x6c>
    18e4:	6f 5f       	subi	r22, 0xFF	; 255
    18e6:	7f 4f       	sbci	r23, 0xFF	; 255
    18e8:	8f 4f       	sbci	r24, 0xFF	; 255
    18ea:	9f 4f       	sbci	r25, 0xFF	; 255
    18ec:	16 c0       	rjmp	.+44     	; 0x191a <__floatsisf+0x6c>
    18ee:	88 23       	and	r24, r24
    18f0:	11 f0       	breq	.+4      	; 0x18f6 <__floatsisf+0x48>
    18f2:	96 e9       	ldi	r25, 0x96	; 150
    18f4:	11 c0       	rjmp	.+34     	; 0x1918 <__floatsisf+0x6a>
    18f6:	77 23       	and	r23, r23
    18f8:	21 f0       	breq	.+8      	; 0x1902 <__floatsisf+0x54>
    18fa:	9e e8       	ldi	r25, 0x8E	; 142
    18fc:	87 2f       	mov	r24, r23
    18fe:	76 2f       	mov	r23, r22
    1900:	05 c0       	rjmp	.+10     	; 0x190c <__floatsisf+0x5e>
    1902:	66 23       	and	r22, r22
    1904:	71 f0       	breq	.+28     	; 0x1922 <__floatsisf+0x74>
    1906:	96 e8       	ldi	r25, 0x86	; 134
    1908:	86 2f       	mov	r24, r22
    190a:	70 e0       	ldi	r23, 0x00	; 0
    190c:	60 e0       	ldi	r22, 0x00	; 0
    190e:	2a f0       	brmi	.+10     	; 0x191a <__floatsisf+0x6c>
    1910:	9a 95       	dec	r25
    1912:	66 0f       	add	r22, r22
    1914:	77 1f       	adc	r23, r23
    1916:	88 1f       	adc	r24, r24
    1918:	da f7       	brpl	.-10     	; 0x1910 <__floatsisf+0x62>
    191a:	88 0f       	add	r24, r24
    191c:	96 95       	lsr	r25
    191e:	87 95       	ror	r24
    1920:	97 f9       	bld	r25, 7
    1922:	08 95       	ret

00001924 <__fp_cmp>:
    1924:	99 0f       	add	r25, r25
    1926:	00 08       	sbc	r0, r0
    1928:	55 0f       	add	r21, r21
    192a:	aa 0b       	sbc	r26, r26
    192c:	e0 e8       	ldi	r30, 0x80	; 128
    192e:	fe ef       	ldi	r31, 0xFE	; 254
    1930:	16 16       	cp	r1, r22
    1932:	17 06       	cpc	r1, r23
    1934:	e8 07       	cpc	r30, r24
    1936:	f9 07       	cpc	r31, r25
    1938:	c0 f0       	brcs	.+48     	; 0x196a <__fp_cmp+0x46>
    193a:	12 16       	cp	r1, r18
    193c:	13 06       	cpc	r1, r19
    193e:	e4 07       	cpc	r30, r20
    1940:	f5 07       	cpc	r31, r21
    1942:	98 f0       	brcs	.+38     	; 0x196a <__fp_cmp+0x46>
    1944:	62 1b       	sub	r22, r18
    1946:	73 0b       	sbc	r23, r19
    1948:	84 0b       	sbc	r24, r20
    194a:	95 0b       	sbc	r25, r21
    194c:	39 f4       	brne	.+14     	; 0x195c <__fp_cmp+0x38>
    194e:	0a 26       	eor	r0, r26
    1950:	61 f0       	breq	.+24     	; 0x196a <__fp_cmp+0x46>
    1952:	23 2b       	or	r18, r19
    1954:	24 2b       	or	r18, r20
    1956:	25 2b       	or	r18, r21
    1958:	21 f4       	brne	.+8      	; 0x1962 <__fp_cmp+0x3e>
    195a:	08 95       	ret
    195c:	0a 26       	eor	r0, r26
    195e:	09 f4       	brne	.+2      	; 0x1962 <__fp_cmp+0x3e>
    1960:	a1 40       	sbci	r26, 0x01	; 1
    1962:	a6 95       	lsr	r26
    1964:	8f ef       	ldi	r24, 0xFF	; 255
    1966:	81 1d       	adc	r24, r1
    1968:	81 1d       	adc	r24, r1
    196a:	08 95       	ret

0000196c <__fp_inf>:
    196c:	97 f9       	bld	r25, 7
    196e:	9f 67       	ori	r25, 0x7F	; 127
    1970:	80 e8       	ldi	r24, 0x80	; 128
    1972:	70 e0       	ldi	r23, 0x00	; 0
    1974:	60 e0       	ldi	r22, 0x00	; 0
    1976:	08 95       	ret

00001978 <__fp_nan>:
    1978:	9f ef       	ldi	r25, 0xFF	; 255
    197a:	80 ec       	ldi	r24, 0xC0	; 192
    197c:	08 95       	ret

0000197e <__fp_pscA>:
    197e:	00 24       	eor	r0, r0
    1980:	0a 94       	dec	r0
    1982:	16 16       	cp	r1, r22
    1984:	17 06       	cpc	r1, r23
    1986:	18 06       	cpc	r1, r24
    1988:	09 06       	cpc	r0, r25
    198a:	08 95       	ret

0000198c <__fp_pscB>:
    198c:	00 24       	eor	r0, r0
    198e:	0a 94       	dec	r0
    1990:	12 16       	cp	r1, r18
    1992:	13 06       	cpc	r1, r19
    1994:	14 06       	cpc	r1, r20
    1996:	05 06       	cpc	r0, r21
    1998:	08 95       	ret

0000199a <__fp_round>:
    199a:	09 2e       	mov	r0, r25
    199c:	03 94       	inc	r0
    199e:	00 0c       	add	r0, r0
    19a0:	11 f4       	brne	.+4      	; 0x19a6 <__fp_round+0xc>
    19a2:	88 23       	and	r24, r24
    19a4:	52 f0       	brmi	.+20     	; 0x19ba <__fp_round+0x20>
    19a6:	bb 0f       	add	r27, r27
    19a8:	40 f4       	brcc	.+16     	; 0x19ba <__fp_round+0x20>
    19aa:	bf 2b       	or	r27, r31
    19ac:	11 f4       	brne	.+4      	; 0x19b2 <__fp_round+0x18>
    19ae:	60 ff       	sbrs	r22, 0
    19b0:	04 c0       	rjmp	.+8      	; 0x19ba <__fp_round+0x20>
    19b2:	6f 5f       	subi	r22, 0xFF	; 255
    19b4:	7f 4f       	sbci	r23, 0xFF	; 255
    19b6:	8f 4f       	sbci	r24, 0xFF	; 255
    19b8:	9f 4f       	sbci	r25, 0xFF	; 255
    19ba:	08 95       	ret

000019bc <__fp_split3>:
    19bc:	57 fd       	sbrc	r21, 7
    19be:	90 58       	subi	r25, 0x80	; 128
    19c0:	44 0f       	add	r20, r20
    19c2:	55 1f       	adc	r21, r21
    19c4:	59 f0       	breq	.+22     	; 0x19dc <__fp_splitA+0x10>
    19c6:	5f 3f       	cpi	r21, 0xFF	; 255
    19c8:	71 f0       	breq	.+28     	; 0x19e6 <__fp_splitA+0x1a>
    19ca:	47 95       	ror	r20

000019cc <__fp_splitA>:
    19cc:	88 0f       	add	r24, r24
    19ce:	97 fb       	bst	r25, 7
    19d0:	99 1f       	adc	r25, r25
    19d2:	61 f0       	breq	.+24     	; 0x19ec <__fp_splitA+0x20>
    19d4:	9f 3f       	cpi	r25, 0xFF	; 255
    19d6:	79 f0       	breq	.+30     	; 0x19f6 <__fp_splitA+0x2a>
    19d8:	87 95       	ror	r24
    19da:	08 95       	ret
    19dc:	12 16       	cp	r1, r18
    19de:	13 06       	cpc	r1, r19
    19e0:	14 06       	cpc	r1, r20
    19e2:	55 1f       	adc	r21, r21
    19e4:	f2 cf       	rjmp	.-28     	; 0x19ca <__fp_split3+0xe>
    19e6:	46 95       	lsr	r20
    19e8:	f1 df       	rcall	.-30     	; 0x19cc <__fp_splitA>
    19ea:	08 c0       	rjmp	.+16     	; 0x19fc <__fp_splitA+0x30>
    19ec:	16 16       	cp	r1, r22
    19ee:	17 06       	cpc	r1, r23
    19f0:	18 06       	cpc	r1, r24
    19f2:	99 1f       	adc	r25, r25
    19f4:	f1 cf       	rjmp	.-30     	; 0x19d8 <__fp_splitA+0xc>
    19f6:	86 95       	lsr	r24
    19f8:	71 05       	cpc	r23, r1
    19fa:	61 05       	cpc	r22, r1
    19fc:	08 94       	sec
    19fe:	08 95       	ret

00001a00 <__fp_zero>:
    1a00:	e8 94       	clt

00001a02 <__fp_szero>:
    1a02:	bb 27       	eor	r27, r27
    1a04:	66 27       	eor	r22, r22
    1a06:	77 27       	eor	r23, r23
    1a08:	cb 01       	movw	r24, r22
    1a0a:	97 f9       	bld	r25, 7
    1a0c:	08 95       	ret

00001a0e <__gesf2>:
    1a0e:	8a df       	rcall	.-236    	; 0x1924 <__fp_cmp>
    1a10:	08 f4       	brcc	.+2      	; 0x1a14 <__gesf2+0x6>
    1a12:	8f ef       	ldi	r24, 0xFF	; 255
    1a14:	08 95       	ret

00001a16 <__mulsf3>:
    1a16:	0b d0       	rcall	.+22     	; 0x1a2e <__mulsf3x>
    1a18:	c0 cf       	rjmp	.-128    	; 0x199a <__fp_round>
    1a1a:	b1 df       	rcall	.-158    	; 0x197e <__fp_pscA>
    1a1c:	28 f0       	brcs	.+10     	; 0x1a28 <__mulsf3+0x12>
    1a1e:	b6 df       	rcall	.-148    	; 0x198c <__fp_pscB>
    1a20:	18 f0       	brcs	.+6      	; 0x1a28 <__mulsf3+0x12>
    1a22:	95 23       	and	r25, r21
    1a24:	09 f0       	breq	.+2      	; 0x1a28 <__mulsf3+0x12>
    1a26:	a2 cf       	rjmp	.-188    	; 0x196c <__fp_inf>
    1a28:	a7 cf       	rjmp	.-178    	; 0x1978 <__fp_nan>
    1a2a:	11 24       	eor	r1, r1
    1a2c:	ea cf       	rjmp	.-44     	; 0x1a02 <__fp_szero>

00001a2e <__mulsf3x>:
    1a2e:	c6 df       	rcall	.-116    	; 0x19bc <__fp_split3>
    1a30:	a0 f3       	brcs	.-24     	; 0x1a1a <__mulsf3+0x4>

00001a32 <__mulsf3_pse>:
    1a32:	95 9f       	mul	r25, r21
    1a34:	d1 f3       	breq	.-12     	; 0x1a2a <__mulsf3+0x14>
    1a36:	95 0f       	add	r25, r21
    1a38:	50 e0       	ldi	r21, 0x00	; 0
    1a3a:	55 1f       	adc	r21, r21
    1a3c:	62 9f       	mul	r22, r18
    1a3e:	f0 01       	movw	r30, r0
    1a40:	72 9f       	mul	r23, r18
    1a42:	bb 27       	eor	r27, r27
    1a44:	f0 0d       	add	r31, r0
    1a46:	b1 1d       	adc	r27, r1
    1a48:	63 9f       	mul	r22, r19
    1a4a:	aa 27       	eor	r26, r26
    1a4c:	f0 0d       	add	r31, r0
    1a4e:	b1 1d       	adc	r27, r1
    1a50:	aa 1f       	adc	r26, r26
    1a52:	64 9f       	mul	r22, r20
    1a54:	66 27       	eor	r22, r22
    1a56:	b0 0d       	add	r27, r0
    1a58:	a1 1d       	adc	r26, r1
    1a5a:	66 1f       	adc	r22, r22
    1a5c:	82 9f       	mul	r24, r18
    1a5e:	22 27       	eor	r18, r18
    1a60:	b0 0d       	add	r27, r0
    1a62:	a1 1d       	adc	r26, r1
    1a64:	62 1f       	adc	r22, r18
    1a66:	73 9f       	mul	r23, r19
    1a68:	b0 0d       	add	r27, r0
    1a6a:	a1 1d       	adc	r26, r1
    1a6c:	62 1f       	adc	r22, r18
    1a6e:	83 9f       	mul	r24, r19
    1a70:	a0 0d       	add	r26, r0
    1a72:	61 1d       	adc	r22, r1
    1a74:	22 1f       	adc	r18, r18
    1a76:	74 9f       	mul	r23, r20
    1a78:	33 27       	eor	r19, r19
    1a7a:	a0 0d       	add	r26, r0
    1a7c:	61 1d       	adc	r22, r1
    1a7e:	23 1f       	adc	r18, r19
    1a80:	84 9f       	mul	r24, r20
    1a82:	60 0d       	add	r22, r0
    1a84:	21 1d       	adc	r18, r1
    1a86:	82 2f       	mov	r24, r18
    1a88:	76 2f       	mov	r23, r22
    1a8a:	6a 2f       	mov	r22, r26
    1a8c:	11 24       	eor	r1, r1
    1a8e:	9f 57       	subi	r25, 0x7F	; 127
    1a90:	50 40       	sbci	r21, 0x00	; 0
    1a92:	8a f0       	brmi	.+34     	; 0x1ab6 <__mulsf3_pse+0x84>
    1a94:	e1 f0       	breq	.+56     	; 0x1ace <__mulsf3_pse+0x9c>
    1a96:	88 23       	and	r24, r24
    1a98:	4a f0       	brmi	.+18     	; 0x1aac <__mulsf3_pse+0x7a>
    1a9a:	ee 0f       	add	r30, r30
    1a9c:	ff 1f       	adc	r31, r31
    1a9e:	bb 1f       	adc	r27, r27
    1aa0:	66 1f       	adc	r22, r22
    1aa2:	77 1f       	adc	r23, r23
    1aa4:	88 1f       	adc	r24, r24
    1aa6:	91 50       	subi	r25, 0x01	; 1
    1aa8:	50 40       	sbci	r21, 0x00	; 0
    1aaa:	a9 f7       	brne	.-22     	; 0x1a96 <__mulsf3_pse+0x64>
    1aac:	9e 3f       	cpi	r25, 0xFE	; 254
    1aae:	51 05       	cpc	r21, r1
    1ab0:	70 f0       	brcs	.+28     	; 0x1ace <__mulsf3_pse+0x9c>
    1ab2:	5c cf       	rjmp	.-328    	; 0x196c <__fp_inf>
    1ab4:	a6 cf       	rjmp	.-180    	; 0x1a02 <__fp_szero>
    1ab6:	5f 3f       	cpi	r21, 0xFF	; 255
    1ab8:	ec f3       	brlt	.-6      	; 0x1ab4 <__mulsf3_pse+0x82>
    1aba:	98 3e       	cpi	r25, 0xE8	; 232
    1abc:	dc f3       	brlt	.-10     	; 0x1ab4 <__mulsf3_pse+0x82>
    1abe:	86 95       	lsr	r24
    1ac0:	77 95       	ror	r23
    1ac2:	67 95       	ror	r22
    1ac4:	b7 95       	ror	r27
    1ac6:	f7 95       	ror	r31
    1ac8:	e7 95       	ror	r30
    1aca:	9f 5f       	subi	r25, 0xFF	; 255
    1acc:	c1 f7       	brne	.-16     	; 0x1abe <__mulsf3_pse+0x8c>
    1ace:	fe 2b       	or	r31, r30
    1ad0:	88 0f       	add	r24, r24
    1ad2:	91 1d       	adc	r25, r1
    1ad4:	96 95       	lsr	r25
    1ad6:	87 95       	ror	r24
    1ad8:	97 f9       	bld	r25, 7
    1ada:	08 95       	ret

00001adc <__divmodhi4>:
    1adc:	97 fb       	bst	r25, 7
    1ade:	09 2e       	mov	r0, r25
    1ae0:	07 26       	eor	r0, r23
    1ae2:	0a d0       	rcall	.+20     	; 0x1af8 <__divmodhi4_neg1>
    1ae4:	77 fd       	sbrc	r23, 7
    1ae6:	04 d0       	rcall	.+8      	; 0x1af0 <__divmodhi4_neg2>
    1ae8:	0c d0       	rcall	.+24     	; 0x1b02 <__udivmodhi4>
    1aea:	06 d0       	rcall	.+12     	; 0x1af8 <__divmodhi4_neg1>
    1aec:	00 20       	and	r0, r0
    1aee:	1a f4       	brpl	.+6      	; 0x1af6 <__divmodhi4_exit>

00001af0 <__divmodhi4_neg2>:
    1af0:	70 95       	com	r23
    1af2:	61 95       	neg	r22
    1af4:	7f 4f       	sbci	r23, 0xFF	; 255

00001af6 <__divmodhi4_exit>:
    1af6:	08 95       	ret

00001af8 <__divmodhi4_neg1>:
    1af8:	f6 f7       	brtc	.-4      	; 0x1af6 <__divmodhi4_exit>
    1afa:	90 95       	com	r25
    1afc:	81 95       	neg	r24
    1afe:	9f 4f       	sbci	r25, 0xFF	; 255
    1b00:	08 95       	ret

00001b02 <__udivmodhi4>:
    1b02:	aa 1b       	sub	r26, r26
    1b04:	bb 1b       	sub	r27, r27
    1b06:	51 e1       	ldi	r21, 0x11	; 17
    1b08:	07 c0       	rjmp	.+14     	; 0x1b18 <__udivmodhi4_ep>

00001b0a <__udivmodhi4_loop>:
    1b0a:	aa 1f       	adc	r26, r26
    1b0c:	bb 1f       	adc	r27, r27
    1b0e:	a6 17       	cp	r26, r22
    1b10:	b7 07       	cpc	r27, r23
    1b12:	10 f0       	brcs	.+4      	; 0x1b18 <__udivmodhi4_ep>
    1b14:	a6 1b       	sub	r26, r22
    1b16:	b7 0b       	sbc	r27, r23

00001b18 <__udivmodhi4_ep>:
    1b18:	88 1f       	adc	r24, r24
    1b1a:	99 1f       	adc	r25, r25
    1b1c:	5a 95       	dec	r21
    1b1e:	a9 f7       	brne	.-22     	; 0x1b0a <__udivmodhi4_loop>
    1b20:	80 95       	com	r24
    1b22:	90 95       	com	r25
    1b24:	bc 01       	movw	r22, r24
    1b26:	cd 01       	movw	r24, r26
    1b28:	08 95       	ret

00001b2a <_exit>:
    1b2a:	f8 94       	cli

00001b2c <__stop_program>:
    1b2c:	ff cf       	rjmp	.-2      	; 0x1b2c <__stop_program>
>>>>>>> parent of 1e7bf21... Included Cytron.h
=======
    2544:	8f ef       	ldi	r24, 0xFF	; 255
    2546:	93 ed       	ldi	r25, 0xD3	; 211
    2548:	a0 e3       	ldi	r26, 0x30	; 48
    254a:	81 50       	subi	r24, 0x01	; 1
    254c:	90 40       	sbci	r25, 0x00	; 0
    254e:	a0 40       	sbci	r26, 0x00	; 0
    2550:	e1 f7       	brne	.-8      	; 0x254a <_Z4loopv+0xe>
    2552:	00 c0       	rjmp	.+0      	; 0x2554 <_Z4loopv+0x18>
    2554:	00 00       	nop
		_delay_ms(1000);
		digitalWrite(13,LOW);
    2556:	8d e0       	ldi	r24, 0x0D	; 13
    2558:	60 e0       	ldi	r22, 0x00	; 0
    255a:	0e 94 08 02 	call	0x410	; 0x410 <_Z12digitalWritehh>
    255e:	8f ef       	ldi	r24, 0xFF	; 255
    2560:	93 ed       	ldi	r25, 0xD3	; 211
    2562:	a0 e3       	ldi	r26, 0x30	; 48
    2564:	81 50       	subi	r24, 0x01	; 1
    2566:	90 40       	sbci	r25, 0x00	; 0
    2568:	a0 40       	sbci	r26, 0x00	; 0
    256a:	e1 f7       	brne	.-8      	; 0x2564 <_Z4loopv+0x28>
    256c:	00 c0       	rjmp	.+0      	; 0x256e <_Z4loopv+0x32>
    256e:	00 00       	nop
		_delay_ms(1000);
    2570:	08 95       	ret

00002572 <main>:
	uSerfun(); 
}
*/

int main(){
	setup();
    2572:	0e 94 99 12 	call	0x2532	; 0x2532 <_Z5setupv>
	while(1){
		loop();
    2576:	0e 94 9e 12 	call	0x253c	; 0x253c <_Z4loopv>
    257a:	fd cf       	rjmp	.-6      	; 0x2576 <main+0x4>

0000257c <__subsf3>:
    257c:	50 58       	subi	r21, 0x80	; 128

0000257e <__addsf3>:
    257e:	bb 27       	eor	r27, r27
    2580:	aa 27       	eor	r26, r26
    2582:	0e d0       	rcall	.+28     	; 0x25a0 <__addsf3x>
    2584:	75 c1       	rjmp	.+746    	; 0x2870 <__fp_round>
    2586:	66 d1       	rcall	.+716    	; 0x2854 <__fp_pscA>
    2588:	30 f0       	brcs	.+12     	; 0x2596 <__addsf3+0x18>
    258a:	6b d1       	rcall	.+726    	; 0x2862 <__fp_pscB>
    258c:	20 f0       	brcs	.+8      	; 0x2596 <__addsf3+0x18>
    258e:	31 f4       	brne	.+12     	; 0x259c <__addsf3+0x1e>
    2590:	9f 3f       	cpi	r25, 0xFF	; 255
    2592:	11 f4       	brne	.+4      	; 0x2598 <__addsf3+0x1a>
    2594:	1e f4       	brtc	.+6      	; 0x259c <__addsf3+0x1e>
    2596:	5b c1       	rjmp	.+694    	; 0x284e <__fp_nan>
    2598:	0e f4       	brtc	.+2      	; 0x259c <__addsf3+0x1e>
    259a:	e0 95       	com	r30
    259c:	e7 fb       	bst	r30, 7
    259e:	51 c1       	rjmp	.+674    	; 0x2842 <__fp_inf>

000025a0 <__addsf3x>:
    25a0:	e9 2f       	mov	r30, r25
    25a2:	77 d1       	rcall	.+750    	; 0x2892 <__fp_split3>
    25a4:	80 f3       	brcs	.-32     	; 0x2586 <__addsf3+0x8>
    25a6:	ba 17       	cp	r27, r26
    25a8:	62 07       	cpc	r22, r18
    25aa:	73 07       	cpc	r23, r19
    25ac:	84 07       	cpc	r24, r20
    25ae:	95 07       	cpc	r25, r21
    25b0:	18 f0       	brcs	.+6      	; 0x25b8 <__addsf3x+0x18>
    25b2:	71 f4       	brne	.+28     	; 0x25d0 <__addsf3x+0x30>
    25b4:	9e f5       	brtc	.+102    	; 0x261c <__addsf3x+0x7c>
    25b6:	8f c1       	rjmp	.+798    	; 0x28d6 <__fp_zero>
    25b8:	0e f4       	brtc	.+2      	; 0x25bc <__addsf3x+0x1c>
    25ba:	e0 95       	com	r30
    25bc:	0b 2e       	mov	r0, r27
    25be:	ba 2f       	mov	r27, r26
    25c0:	a0 2d       	mov	r26, r0
    25c2:	0b 01       	movw	r0, r22
    25c4:	b9 01       	movw	r22, r18
    25c6:	90 01       	movw	r18, r0
    25c8:	0c 01       	movw	r0, r24
    25ca:	ca 01       	movw	r24, r20
    25cc:	a0 01       	movw	r20, r0
    25ce:	11 24       	eor	r1, r1
    25d0:	ff 27       	eor	r31, r31
    25d2:	59 1b       	sub	r21, r25
    25d4:	99 f0       	breq	.+38     	; 0x25fc <__addsf3x+0x5c>
    25d6:	59 3f       	cpi	r21, 0xF9	; 249
    25d8:	50 f4       	brcc	.+20     	; 0x25ee <__addsf3x+0x4e>
    25da:	50 3e       	cpi	r21, 0xE0	; 224
    25dc:	68 f1       	brcs	.+90     	; 0x2638 <__addsf3x+0x98>
    25de:	1a 16       	cp	r1, r26
    25e0:	f0 40       	sbci	r31, 0x00	; 0
    25e2:	a2 2f       	mov	r26, r18
    25e4:	23 2f       	mov	r18, r19
    25e6:	34 2f       	mov	r19, r20
    25e8:	44 27       	eor	r20, r20
    25ea:	58 5f       	subi	r21, 0xF8	; 248
    25ec:	f3 cf       	rjmp	.-26     	; 0x25d4 <__addsf3x+0x34>
    25ee:	46 95       	lsr	r20
    25f0:	37 95       	ror	r19
    25f2:	27 95       	ror	r18
    25f4:	a7 95       	ror	r26
    25f6:	f0 40       	sbci	r31, 0x00	; 0
    25f8:	53 95       	inc	r21
    25fa:	c9 f7       	brne	.-14     	; 0x25ee <__addsf3x+0x4e>
    25fc:	7e f4       	brtc	.+30     	; 0x261c <__addsf3x+0x7c>
    25fe:	1f 16       	cp	r1, r31
    2600:	ba 0b       	sbc	r27, r26
    2602:	62 0b       	sbc	r22, r18
    2604:	73 0b       	sbc	r23, r19
    2606:	84 0b       	sbc	r24, r20
    2608:	ba f0       	brmi	.+46     	; 0x2638 <__addsf3x+0x98>
    260a:	91 50       	subi	r25, 0x01	; 1
    260c:	a1 f0       	breq	.+40     	; 0x2636 <__addsf3x+0x96>
    260e:	ff 0f       	add	r31, r31
    2610:	bb 1f       	adc	r27, r27
    2612:	66 1f       	adc	r22, r22
    2614:	77 1f       	adc	r23, r23
    2616:	88 1f       	adc	r24, r24
    2618:	c2 f7       	brpl	.-16     	; 0x260a <__addsf3x+0x6a>
    261a:	0e c0       	rjmp	.+28     	; 0x2638 <__addsf3x+0x98>
    261c:	ba 0f       	add	r27, r26
    261e:	62 1f       	adc	r22, r18
    2620:	73 1f       	adc	r23, r19
    2622:	84 1f       	adc	r24, r20
    2624:	48 f4       	brcc	.+18     	; 0x2638 <__addsf3x+0x98>
    2626:	87 95       	ror	r24
    2628:	77 95       	ror	r23
    262a:	67 95       	ror	r22
    262c:	b7 95       	ror	r27
    262e:	f7 95       	ror	r31
    2630:	9e 3f       	cpi	r25, 0xFE	; 254
    2632:	08 f0       	brcs	.+2      	; 0x2636 <__addsf3x+0x96>
    2634:	b3 cf       	rjmp	.-154    	; 0x259c <__addsf3+0x1e>
    2636:	93 95       	inc	r25
    2638:	88 0f       	add	r24, r24
    263a:	08 f0       	brcs	.+2      	; 0x263e <__addsf3x+0x9e>
    263c:	99 27       	eor	r25, r25
    263e:	ee 0f       	add	r30, r30
    2640:	97 95       	ror	r25
    2642:	87 95       	ror	r24
    2644:	08 95       	ret

00002646 <__cmpsf2>:
    2646:	d9 d0       	rcall	.+434    	; 0x27fa <__fp_cmp>
    2648:	08 f4       	brcc	.+2      	; 0x264c <__cmpsf2+0x6>
    264a:	81 e0       	ldi	r24, 0x01	; 1
    264c:	08 95       	ret

0000264e <__divsf3>:
    264e:	0c d0       	rcall	.+24     	; 0x2668 <__divsf3x>
    2650:	0f c1       	rjmp	.+542    	; 0x2870 <__fp_round>
    2652:	07 d1       	rcall	.+526    	; 0x2862 <__fp_pscB>
    2654:	40 f0       	brcs	.+16     	; 0x2666 <__divsf3+0x18>
    2656:	fe d0       	rcall	.+508    	; 0x2854 <__fp_pscA>
    2658:	30 f0       	brcs	.+12     	; 0x2666 <__divsf3+0x18>
    265a:	21 f4       	brne	.+8      	; 0x2664 <__divsf3+0x16>
    265c:	5f 3f       	cpi	r21, 0xFF	; 255
    265e:	19 f0       	breq	.+6      	; 0x2666 <__divsf3+0x18>
    2660:	f0 c0       	rjmp	.+480    	; 0x2842 <__fp_inf>
    2662:	51 11       	cpse	r21, r1
    2664:	39 c1       	rjmp	.+626    	; 0x28d8 <__fp_szero>
    2666:	f3 c0       	rjmp	.+486    	; 0x284e <__fp_nan>

00002668 <__divsf3x>:
    2668:	14 d1       	rcall	.+552    	; 0x2892 <__fp_split3>
    266a:	98 f3       	brcs	.-26     	; 0x2652 <__divsf3+0x4>

0000266c <__divsf3_pse>:
    266c:	99 23       	and	r25, r25
    266e:	c9 f3       	breq	.-14     	; 0x2662 <__divsf3+0x14>
    2670:	55 23       	and	r21, r21
    2672:	b1 f3       	breq	.-20     	; 0x2660 <__divsf3+0x12>
    2674:	95 1b       	sub	r25, r21
    2676:	55 0b       	sbc	r21, r21
    2678:	bb 27       	eor	r27, r27
    267a:	aa 27       	eor	r26, r26
    267c:	62 17       	cp	r22, r18
    267e:	73 07       	cpc	r23, r19
    2680:	84 07       	cpc	r24, r20
    2682:	38 f0       	brcs	.+14     	; 0x2692 <__divsf3_pse+0x26>
    2684:	9f 5f       	subi	r25, 0xFF	; 255
    2686:	5f 4f       	sbci	r21, 0xFF	; 255
    2688:	22 0f       	add	r18, r18
    268a:	33 1f       	adc	r19, r19
    268c:	44 1f       	adc	r20, r20
    268e:	aa 1f       	adc	r26, r26
    2690:	a9 f3       	breq	.-22     	; 0x267c <__divsf3_pse+0x10>
    2692:	33 d0       	rcall	.+102    	; 0x26fa <__divsf3_pse+0x8e>
    2694:	0e 2e       	mov	r0, r30
    2696:	3a f0       	brmi	.+14     	; 0x26a6 <__divsf3_pse+0x3a>
    2698:	e0 e8       	ldi	r30, 0x80	; 128
    269a:	30 d0       	rcall	.+96     	; 0x26fc <__divsf3_pse+0x90>
    269c:	91 50       	subi	r25, 0x01	; 1
    269e:	50 40       	sbci	r21, 0x00	; 0
    26a0:	e6 95       	lsr	r30
    26a2:	00 1c       	adc	r0, r0
    26a4:	ca f7       	brpl	.-14     	; 0x2698 <__divsf3_pse+0x2c>
    26a6:	29 d0       	rcall	.+82     	; 0x26fa <__divsf3_pse+0x8e>
    26a8:	fe 2f       	mov	r31, r30
    26aa:	27 d0       	rcall	.+78     	; 0x26fa <__divsf3_pse+0x8e>
    26ac:	66 0f       	add	r22, r22
    26ae:	77 1f       	adc	r23, r23
    26b0:	88 1f       	adc	r24, r24
    26b2:	bb 1f       	adc	r27, r27
    26b4:	26 17       	cp	r18, r22
    26b6:	37 07       	cpc	r19, r23
    26b8:	48 07       	cpc	r20, r24
    26ba:	ab 07       	cpc	r26, r27
    26bc:	b0 e8       	ldi	r27, 0x80	; 128
    26be:	09 f0       	breq	.+2      	; 0x26c2 <__divsf3_pse+0x56>
    26c0:	bb 0b       	sbc	r27, r27
    26c2:	80 2d       	mov	r24, r0
    26c4:	bf 01       	movw	r22, r30
    26c6:	ff 27       	eor	r31, r31
    26c8:	93 58       	subi	r25, 0x83	; 131
    26ca:	5f 4f       	sbci	r21, 0xFF	; 255
    26cc:	2a f0       	brmi	.+10     	; 0x26d8 <__divsf3_pse+0x6c>
    26ce:	9e 3f       	cpi	r25, 0xFE	; 254
    26d0:	51 05       	cpc	r21, r1
    26d2:	68 f0       	brcs	.+26     	; 0x26ee <__divsf3_pse+0x82>
    26d4:	b6 c0       	rjmp	.+364    	; 0x2842 <__fp_inf>
    26d6:	00 c1       	rjmp	.+512    	; 0x28d8 <__fp_szero>
    26d8:	5f 3f       	cpi	r21, 0xFF	; 255
    26da:	ec f3       	brlt	.-6      	; 0x26d6 <__divsf3_pse+0x6a>
    26dc:	98 3e       	cpi	r25, 0xE8	; 232
    26de:	dc f3       	brlt	.-10     	; 0x26d6 <__divsf3_pse+0x6a>
    26e0:	86 95       	lsr	r24
    26e2:	77 95       	ror	r23
    26e4:	67 95       	ror	r22
    26e6:	b7 95       	ror	r27
    26e8:	f7 95       	ror	r31
    26ea:	9f 5f       	subi	r25, 0xFF	; 255
    26ec:	c9 f7       	brne	.-14     	; 0x26e0 <__divsf3_pse+0x74>
    26ee:	88 0f       	add	r24, r24
    26f0:	91 1d       	adc	r25, r1
    26f2:	96 95       	lsr	r25
    26f4:	87 95       	ror	r24
    26f6:	97 f9       	bld	r25, 7
    26f8:	08 95       	ret
    26fa:	e1 e0       	ldi	r30, 0x01	; 1
    26fc:	66 0f       	add	r22, r22
    26fe:	77 1f       	adc	r23, r23
    2700:	88 1f       	adc	r24, r24
    2702:	bb 1f       	adc	r27, r27
    2704:	62 17       	cp	r22, r18
    2706:	73 07       	cpc	r23, r19
    2708:	84 07       	cpc	r24, r20
    270a:	ba 07       	cpc	r27, r26
    270c:	20 f0       	brcs	.+8      	; 0x2716 <__divsf3_pse+0xaa>
    270e:	62 1b       	sub	r22, r18
    2710:	73 0b       	sbc	r23, r19
    2712:	84 0b       	sbc	r24, r20
    2714:	ba 0b       	sbc	r27, r26
    2716:	ee 1f       	adc	r30, r30
    2718:	88 f7       	brcc	.-30     	; 0x26fc <__divsf3_pse+0x90>
    271a:	e0 95       	com	r30
    271c:	08 95       	ret

0000271e <__fixsfsi>:
    271e:	04 d0       	rcall	.+8      	; 0x2728 <__fixunssfsi>
    2720:	68 94       	set
    2722:	b1 11       	cpse	r27, r1
    2724:	d9 c0       	rjmp	.+434    	; 0x28d8 <__fp_szero>
    2726:	08 95       	ret

00002728 <__fixunssfsi>:
    2728:	bc d0       	rcall	.+376    	; 0x28a2 <__fp_splitA>
    272a:	88 f0       	brcs	.+34     	; 0x274e <__fixunssfsi+0x26>
    272c:	9f 57       	subi	r25, 0x7F	; 127
    272e:	90 f0       	brcs	.+36     	; 0x2754 <__fixunssfsi+0x2c>
    2730:	b9 2f       	mov	r27, r25
    2732:	99 27       	eor	r25, r25
    2734:	b7 51       	subi	r27, 0x17	; 23
    2736:	a0 f0       	brcs	.+40     	; 0x2760 <__fixunssfsi+0x38>
    2738:	d1 f0       	breq	.+52     	; 0x276e <__fixunssfsi+0x46>
    273a:	66 0f       	add	r22, r22
    273c:	77 1f       	adc	r23, r23
    273e:	88 1f       	adc	r24, r24
    2740:	99 1f       	adc	r25, r25
    2742:	1a f0       	brmi	.+6      	; 0x274a <__fixunssfsi+0x22>
    2744:	ba 95       	dec	r27
    2746:	c9 f7       	brne	.-14     	; 0x273a <__fixunssfsi+0x12>
    2748:	12 c0       	rjmp	.+36     	; 0x276e <__fixunssfsi+0x46>
    274a:	b1 30       	cpi	r27, 0x01	; 1
    274c:	81 f0       	breq	.+32     	; 0x276e <__fixunssfsi+0x46>
    274e:	c3 d0       	rcall	.+390    	; 0x28d6 <__fp_zero>
    2750:	b1 e0       	ldi	r27, 0x01	; 1
    2752:	08 95       	ret
    2754:	c0 c0       	rjmp	.+384    	; 0x28d6 <__fp_zero>
    2756:	67 2f       	mov	r22, r23
    2758:	78 2f       	mov	r23, r24
    275a:	88 27       	eor	r24, r24
    275c:	b8 5f       	subi	r27, 0xF8	; 248
    275e:	39 f0       	breq	.+14     	; 0x276e <__fixunssfsi+0x46>
    2760:	b9 3f       	cpi	r27, 0xF9	; 249
    2762:	cc f3       	brlt	.-14     	; 0x2756 <__fixunssfsi+0x2e>
    2764:	86 95       	lsr	r24
    2766:	77 95       	ror	r23
    2768:	67 95       	ror	r22
    276a:	b3 95       	inc	r27
    276c:	d9 f7       	brne	.-10     	; 0x2764 <__fixunssfsi+0x3c>
    276e:	3e f4       	brtc	.+14     	; 0x277e <__fixunssfsi+0x56>
    2770:	90 95       	com	r25
    2772:	80 95       	com	r24
    2774:	70 95       	com	r23
    2776:	61 95       	neg	r22
    2778:	7f 4f       	sbci	r23, 0xFF	; 255
    277a:	8f 4f       	sbci	r24, 0xFF	; 255
    277c:	9f 4f       	sbci	r25, 0xFF	; 255
    277e:	08 95       	ret

00002780 <__floatunsisf>:
    2780:	e8 94       	clt
    2782:	09 c0       	rjmp	.+18     	; 0x2796 <__floatsisf+0x12>

00002784 <__floatsisf>:
    2784:	97 fb       	bst	r25, 7
    2786:	3e f4       	brtc	.+14     	; 0x2796 <__floatsisf+0x12>
    2788:	90 95       	com	r25
    278a:	80 95       	com	r24
    278c:	70 95       	com	r23
    278e:	61 95       	neg	r22
    2790:	7f 4f       	sbci	r23, 0xFF	; 255
    2792:	8f 4f       	sbci	r24, 0xFF	; 255
    2794:	9f 4f       	sbci	r25, 0xFF	; 255
    2796:	99 23       	and	r25, r25
    2798:	a9 f0       	breq	.+42     	; 0x27c4 <__floatsisf+0x40>
    279a:	f9 2f       	mov	r31, r25
    279c:	96 e9       	ldi	r25, 0x96	; 150
    279e:	bb 27       	eor	r27, r27
    27a0:	93 95       	inc	r25
    27a2:	f6 95       	lsr	r31
    27a4:	87 95       	ror	r24
    27a6:	77 95       	ror	r23
    27a8:	67 95       	ror	r22
    27aa:	b7 95       	ror	r27
    27ac:	f1 11       	cpse	r31, r1
    27ae:	f8 cf       	rjmp	.-16     	; 0x27a0 <__floatsisf+0x1c>
    27b0:	fa f4       	brpl	.+62     	; 0x27f0 <__floatsisf+0x6c>
    27b2:	bb 0f       	add	r27, r27
    27b4:	11 f4       	brne	.+4      	; 0x27ba <__floatsisf+0x36>
    27b6:	60 ff       	sbrs	r22, 0
    27b8:	1b c0       	rjmp	.+54     	; 0x27f0 <__floatsisf+0x6c>
    27ba:	6f 5f       	subi	r22, 0xFF	; 255
    27bc:	7f 4f       	sbci	r23, 0xFF	; 255
    27be:	8f 4f       	sbci	r24, 0xFF	; 255
    27c0:	9f 4f       	sbci	r25, 0xFF	; 255
    27c2:	16 c0       	rjmp	.+44     	; 0x27f0 <__floatsisf+0x6c>
    27c4:	88 23       	and	r24, r24
    27c6:	11 f0       	breq	.+4      	; 0x27cc <__floatsisf+0x48>
    27c8:	96 e9       	ldi	r25, 0x96	; 150
    27ca:	11 c0       	rjmp	.+34     	; 0x27ee <__floatsisf+0x6a>
    27cc:	77 23       	and	r23, r23
    27ce:	21 f0       	breq	.+8      	; 0x27d8 <__floatsisf+0x54>
    27d0:	9e e8       	ldi	r25, 0x8E	; 142
    27d2:	87 2f       	mov	r24, r23
    27d4:	76 2f       	mov	r23, r22
    27d6:	05 c0       	rjmp	.+10     	; 0x27e2 <__floatsisf+0x5e>
    27d8:	66 23       	and	r22, r22
    27da:	71 f0       	breq	.+28     	; 0x27f8 <__floatsisf+0x74>
    27dc:	96 e8       	ldi	r25, 0x86	; 134
    27de:	86 2f       	mov	r24, r22
    27e0:	70 e0       	ldi	r23, 0x00	; 0
    27e2:	60 e0       	ldi	r22, 0x00	; 0
    27e4:	2a f0       	brmi	.+10     	; 0x27f0 <__floatsisf+0x6c>
    27e6:	9a 95       	dec	r25
    27e8:	66 0f       	add	r22, r22
    27ea:	77 1f       	adc	r23, r23
    27ec:	88 1f       	adc	r24, r24
    27ee:	da f7       	brpl	.-10     	; 0x27e6 <__floatsisf+0x62>
    27f0:	88 0f       	add	r24, r24
    27f2:	96 95       	lsr	r25
    27f4:	87 95       	ror	r24
    27f6:	97 f9       	bld	r25, 7
    27f8:	08 95       	ret

000027fa <__fp_cmp>:
    27fa:	99 0f       	add	r25, r25
    27fc:	00 08       	sbc	r0, r0
    27fe:	55 0f       	add	r21, r21
    2800:	aa 0b       	sbc	r26, r26
    2802:	e0 e8       	ldi	r30, 0x80	; 128
    2804:	fe ef       	ldi	r31, 0xFE	; 254
    2806:	16 16       	cp	r1, r22
    2808:	17 06       	cpc	r1, r23
    280a:	e8 07       	cpc	r30, r24
    280c:	f9 07       	cpc	r31, r25
    280e:	c0 f0       	brcs	.+48     	; 0x2840 <__fp_cmp+0x46>
    2810:	12 16       	cp	r1, r18
    2812:	13 06       	cpc	r1, r19
    2814:	e4 07       	cpc	r30, r20
    2816:	f5 07       	cpc	r31, r21
    2818:	98 f0       	brcs	.+38     	; 0x2840 <__fp_cmp+0x46>
    281a:	62 1b       	sub	r22, r18
    281c:	73 0b       	sbc	r23, r19
    281e:	84 0b       	sbc	r24, r20
    2820:	95 0b       	sbc	r25, r21
    2822:	39 f4       	brne	.+14     	; 0x2832 <__fp_cmp+0x38>
    2824:	0a 26       	eor	r0, r26
    2826:	61 f0       	breq	.+24     	; 0x2840 <__fp_cmp+0x46>
    2828:	23 2b       	or	r18, r19
    282a:	24 2b       	or	r18, r20
    282c:	25 2b       	or	r18, r21
    282e:	21 f4       	brne	.+8      	; 0x2838 <__fp_cmp+0x3e>
    2830:	08 95       	ret
    2832:	0a 26       	eor	r0, r26
    2834:	09 f4       	brne	.+2      	; 0x2838 <__fp_cmp+0x3e>
    2836:	a1 40       	sbci	r26, 0x01	; 1
    2838:	a6 95       	lsr	r26
    283a:	8f ef       	ldi	r24, 0xFF	; 255
    283c:	81 1d       	adc	r24, r1
    283e:	81 1d       	adc	r24, r1
    2840:	08 95       	ret

00002842 <__fp_inf>:
    2842:	97 f9       	bld	r25, 7
    2844:	9f 67       	ori	r25, 0x7F	; 127
    2846:	80 e8       	ldi	r24, 0x80	; 128
    2848:	70 e0       	ldi	r23, 0x00	; 0
    284a:	60 e0       	ldi	r22, 0x00	; 0
    284c:	08 95       	ret

0000284e <__fp_nan>:
    284e:	9f ef       	ldi	r25, 0xFF	; 255
    2850:	80 ec       	ldi	r24, 0xC0	; 192
    2852:	08 95       	ret

00002854 <__fp_pscA>:
    2854:	00 24       	eor	r0, r0
    2856:	0a 94       	dec	r0
    2858:	16 16       	cp	r1, r22
    285a:	17 06       	cpc	r1, r23
    285c:	18 06       	cpc	r1, r24
    285e:	09 06       	cpc	r0, r25
    2860:	08 95       	ret

00002862 <__fp_pscB>:
    2862:	00 24       	eor	r0, r0
    2864:	0a 94       	dec	r0
    2866:	12 16       	cp	r1, r18
    2868:	13 06       	cpc	r1, r19
    286a:	14 06       	cpc	r1, r20
    286c:	05 06       	cpc	r0, r21
    286e:	08 95       	ret

00002870 <__fp_round>:
    2870:	09 2e       	mov	r0, r25
    2872:	03 94       	inc	r0
    2874:	00 0c       	add	r0, r0
    2876:	11 f4       	brne	.+4      	; 0x287c <__fp_round+0xc>
    2878:	88 23       	and	r24, r24
    287a:	52 f0       	brmi	.+20     	; 0x2890 <__fp_round+0x20>
    287c:	bb 0f       	add	r27, r27
    287e:	40 f4       	brcc	.+16     	; 0x2890 <__fp_round+0x20>
    2880:	bf 2b       	or	r27, r31
    2882:	11 f4       	brne	.+4      	; 0x2888 <__fp_round+0x18>
    2884:	60 ff       	sbrs	r22, 0
    2886:	04 c0       	rjmp	.+8      	; 0x2890 <__fp_round+0x20>
    2888:	6f 5f       	subi	r22, 0xFF	; 255
    288a:	7f 4f       	sbci	r23, 0xFF	; 255
    288c:	8f 4f       	sbci	r24, 0xFF	; 255
    288e:	9f 4f       	sbci	r25, 0xFF	; 255
    2890:	08 95       	ret

00002892 <__fp_split3>:
    2892:	57 fd       	sbrc	r21, 7
    2894:	90 58       	subi	r25, 0x80	; 128
    2896:	44 0f       	add	r20, r20
    2898:	55 1f       	adc	r21, r21
    289a:	59 f0       	breq	.+22     	; 0x28b2 <__fp_splitA+0x10>
    289c:	5f 3f       	cpi	r21, 0xFF	; 255
    289e:	71 f0       	breq	.+28     	; 0x28bc <__fp_splitA+0x1a>
    28a0:	47 95       	ror	r20

000028a2 <__fp_splitA>:
    28a2:	88 0f       	add	r24, r24
    28a4:	97 fb       	bst	r25, 7
    28a6:	99 1f       	adc	r25, r25
    28a8:	61 f0       	breq	.+24     	; 0x28c2 <__fp_splitA+0x20>
    28aa:	9f 3f       	cpi	r25, 0xFF	; 255
    28ac:	79 f0       	breq	.+30     	; 0x28cc <__fp_splitA+0x2a>
    28ae:	87 95       	ror	r24
    28b0:	08 95       	ret
    28b2:	12 16       	cp	r1, r18
    28b4:	13 06       	cpc	r1, r19
    28b6:	14 06       	cpc	r1, r20
    28b8:	55 1f       	adc	r21, r21
    28ba:	f2 cf       	rjmp	.-28     	; 0x28a0 <__fp_split3+0xe>
    28bc:	46 95       	lsr	r20
    28be:	f1 df       	rcall	.-30     	; 0x28a2 <__fp_splitA>
    28c0:	08 c0       	rjmp	.+16     	; 0x28d2 <__fp_splitA+0x30>
    28c2:	16 16       	cp	r1, r22
    28c4:	17 06       	cpc	r1, r23
    28c6:	18 06       	cpc	r1, r24
    28c8:	99 1f       	adc	r25, r25
    28ca:	f1 cf       	rjmp	.-30     	; 0x28ae <__fp_splitA+0xc>
    28cc:	86 95       	lsr	r24
    28ce:	71 05       	cpc	r23, r1
    28d0:	61 05       	cpc	r22, r1
    28d2:	08 94       	sec
    28d4:	08 95       	ret

000028d6 <__fp_zero>:
    28d6:	e8 94       	clt

000028d8 <__fp_szero>:
    28d8:	bb 27       	eor	r27, r27
    28da:	66 27       	eor	r22, r22
    28dc:	77 27       	eor	r23, r23
    28de:	cb 01       	movw	r24, r22
    28e0:	97 f9       	bld	r25, 7
    28e2:	08 95       	ret

000028e4 <__gesf2>:
    28e4:	8a df       	rcall	.-236    	; 0x27fa <__fp_cmp>
    28e6:	08 f4       	brcc	.+2      	; 0x28ea <__gesf2+0x6>
    28e8:	8f ef       	ldi	r24, 0xFF	; 255
    28ea:	08 95       	ret

000028ec <__mulsf3>:
    28ec:	0b d0       	rcall	.+22     	; 0x2904 <__mulsf3x>
    28ee:	c0 cf       	rjmp	.-128    	; 0x2870 <__fp_round>
    28f0:	b1 df       	rcall	.-158    	; 0x2854 <__fp_pscA>
    28f2:	28 f0       	brcs	.+10     	; 0x28fe <__mulsf3+0x12>
    28f4:	b6 df       	rcall	.-148    	; 0x2862 <__fp_pscB>
    28f6:	18 f0       	brcs	.+6      	; 0x28fe <__mulsf3+0x12>
    28f8:	95 23       	and	r25, r21
    28fa:	09 f0       	breq	.+2      	; 0x28fe <__mulsf3+0x12>
    28fc:	a2 cf       	rjmp	.-188    	; 0x2842 <__fp_inf>
    28fe:	a7 cf       	rjmp	.-178    	; 0x284e <__fp_nan>
    2900:	11 24       	eor	r1, r1
    2902:	ea cf       	rjmp	.-44     	; 0x28d8 <__fp_szero>

00002904 <__mulsf3x>:
    2904:	c6 df       	rcall	.-116    	; 0x2892 <__fp_split3>
    2906:	a0 f3       	brcs	.-24     	; 0x28f0 <__mulsf3+0x4>

00002908 <__mulsf3_pse>:
    2908:	95 9f       	mul	r25, r21
    290a:	d1 f3       	breq	.-12     	; 0x2900 <__mulsf3+0x14>
    290c:	95 0f       	add	r25, r21
    290e:	50 e0       	ldi	r21, 0x00	; 0
    2910:	55 1f       	adc	r21, r21
    2912:	62 9f       	mul	r22, r18
    2914:	f0 01       	movw	r30, r0
    2916:	72 9f       	mul	r23, r18
    2918:	bb 27       	eor	r27, r27
    291a:	f0 0d       	add	r31, r0
    291c:	b1 1d       	adc	r27, r1
    291e:	63 9f       	mul	r22, r19
    2920:	aa 27       	eor	r26, r26
    2922:	f0 0d       	add	r31, r0
    2924:	b1 1d       	adc	r27, r1
    2926:	aa 1f       	adc	r26, r26
    2928:	64 9f       	mul	r22, r20
    292a:	66 27       	eor	r22, r22
    292c:	b0 0d       	add	r27, r0
    292e:	a1 1d       	adc	r26, r1
    2930:	66 1f       	adc	r22, r22
    2932:	82 9f       	mul	r24, r18
    2934:	22 27       	eor	r18, r18
    2936:	b0 0d       	add	r27, r0
    2938:	a1 1d       	adc	r26, r1
    293a:	62 1f       	adc	r22, r18
    293c:	73 9f       	mul	r23, r19
    293e:	b0 0d       	add	r27, r0
    2940:	a1 1d       	adc	r26, r1
    2942:	62 1f       	adc	r22, r18
    2944:	83 9f       	mul	r24, r19
    2946:	a0 0d       	add	r26, r0
    2948:	61 1d       	adc	r22, r1
    294a:	22 1f       	adc	r18, r18
    294c:	74 9f       	mul	r23, r20
    294e:	33 27       	eor	r19, r19
    2950:	a0 0d       	add	r26, r0
    2952:	61 1d       	adc	r22, r1
    2954:	23 1f       	adc	r18, r19
    2956:	84 9f       	mul	r24, r20
    2958:	60 0d       	add	r22, r0
    295a:	21 1d       	adc	r18, r1
    295c:	82 2f       	mov	r24, r18
    295e:	76 2f       	mov	r23, r22
    2960:	6a 2f       	mov	r22, r26
    2962:	11 24       	eor	r1, r1
    2964:	9f 57       	subi	r25, 0x7F	; 127
    2966:	50 40       	sbci	r21, 0x00	; 0
    2968:	8a f0       	brmi	.+34     	; 0x298c <__mulsf3_pse+0x84>
    296a:	e1 f0       	breq	.+56     	; 0x29a4 <__mulsf3_pse+0x9c>
    296c:	88 23       	and	r24, r24
    296e:	4a f0       	brmi	.+18     	; 0x2982 <__mulsf3_pse+0x7a>
    2970:	ee 0f       	add	r30, r30
    2972:	ff 1f       	adc	r31, r31
    2974:	bb 1f       	adc	r27, r27
    2976:	66 1f       	adc	r22, r22
    2978:	77 1f       	adc	r23, r23
    297a:	88 1f       	adc	r24, r24
    297c:	91 50       	subi	r25, 0x01	; 1
    297e:	50 40       	sbci	r21, 0x00	; 0
    2980:	a9 f7       	brne	.-22     	; 0x296c <__mulsf3_pse+0x64>
    2982:	9e 3f       	cpi	r25, 0xFE	; 254
    2984:	51 05       	cpc	r21, r1
    2986:	70 f0       	brcs	.+28     	; 0x29a4 <__mulsf3_pse+0x9c>
    2988:	5c cf       	rjmp	.-328    	; 0x2842 <__fp_inf>
    298a:	a6 cf       	rjmp	.-180    	; 0x28d8 <__fp_szero>
    298c:	5f 3f       	cpi	r21, 0xFF	; 255
    298e:	ec f3       	brlt	.-6      	; 0x298a <__mulsf3_pse+0x82>
    2990:	98 3e       	cpi	r25, 0xE8	; 232
    2992:	dc f3       	brlt	.-10     	; 0x298a <__mulsf3_pse+0x82>
    2994:	86 95       	lsr	r24
    2996:	77 95       	ror	r23
    2998:	67 95       	ror	r22
    299a:	b7 95       	ror	r27
    299c:	f7 95       	ror	r31
    299e:	e7 95       	ror	r30
    29a0:	9f 5f       	subi	r25, 0xFF	; 255
    29a2:	c1 f7       	brne	.-16     	; 0x2994 <__mulsf3_pse+0x8c>
    29a4:	fe 2b       	or	r31, r30
    29a6:	88 0f       	add	r24, r24
    29a8:	91 1d       	adc	r25, r1
    29aa:	96 95       	lsr	r25
    29ac:	87 95       	ror	r24
    29ae:	97 f9       	bld	r25, 7
    29b0:	08 95       	ret

000029b2 <__udivmodhi4>:
    29b2:	aa 1b       	sub	r26, r26
    29b4:	bb 1b       	sub	r27, r27
    29b6:	51 e1       	ldi	r21, 0x11	; 17
    29b8:	07 c0       	rjmp	.+14     	; 0x29c8 <__udivmodhi4_ep>

000029ba <__udivmodhi4_loop>:
    29ba:	aa 1f       	adc	r26, r26
    29bc:	bb 1f       	adc	r27, r27
    29be:	a6 17       	cp	r26, r22
    29c0:	b7 07       	cpc	r27, r23
    29c2:	10 f0       	brcs	.+4      	; 0x29c8 <__udivmodhi4_ep>
    29c4:	a6 1b       	sub	r26, r22
    29c6:	b7 0b       	sbc	r27, r23

000029c8 <__udivmodhi4_ep>:
    29c8:	88 1f       	adc	r24, r24
    29ca:	99 1f       	adc	r25, r25
    29cc:	5a 95       	dec	r21
    29ce:	a9 f7       	brne	.-22     	; 0x29ba <__udivmodhi4_loop>
    29d0:	80 95       	com	r24
    29d2:	90 95       	com	r25
    29d4:	bc 01       	movw	r22, r24
    29d6:	cd 01       	movw	r24, r26
    29d8:	08 95       	ret

000029da <__divmodhi4>:
    29da:	97 fb       	bst	r25, 7
    29dc:	09 2e       	mov	r0, r25
    29de:	07 26       	eor	r0, r23
    29e0:	0a d0       	rcall	.+20     	; 0x29f6 <__divmodhi4_neg1>
    29e2:	77 fd       	sbrc	r23, 7
    29e4:	04 d0       	rcall	.+8      	; 0x29ee <__divmodhi4_neg2>
    29e6:	e5 df       	rcall	.-54     	; 0x29b2 <__udivmodhi4>
    29e8:	06 d0       	rcall	.+12     	; 0x29f6 <__divmodhi4_neg1>
    29ea:	00 20       	and	r0, r0
    29ec:	1a f4       	brpl	.+6      	; 0x29f4 <__divmodhi4_exit>

000029ee <__divmodhi4_neg2>:
    29ee:	70 95       	com	r23
    29f0:	61 95       	neg	r22
    29f2:	7f 4f       	sbci	r23, 0xFF	; 255

000029f4 <__divmodhi4_exit>:
    29f4:	08 95       	ret

000029f6 <__divmodhi4_neg1>:
    29f6:	f6 f7       	brtc	.-4      	; 0x29f4 <__divmodhi4_exit>
    29f8:	90 95       	com	r25
    29fa:	81 95       	neg	r24
    29fc:	9f 4f       	sbci	r25, 0xFF	; 255
    29fe:	08 95       	ret

00002a00 <_exit>:
    2a00:	f8 94       	cli

00002a02 <__stop_program>:
    2a02:	ff cf       	rjmp	.-2      	; 0x2a02 <__stop_program>
>>>>>>> parent of 6ea3b60... Sinosudal Wave travelling
