
PrototypeSwerveDrive.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000be  00800200  00002274  00002308  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002274  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003d  008002be  008002be  000023c6  2**0
                  ALLOC
  3 .stab         00001c50  00000000  00000000  000023c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000068a  00000000  00000000  00004018  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  000046a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000268  00000000  00000000  000046c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000170e  00000000  00000000  0000492a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000048c  00000000  00000000  00006038  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000134a  00000000  00000000  000064c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001d0  00000000  00000000  00007810  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000906  00000000  00000000  000079e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000010c7  00000000  00000000  000082e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 0000007c  00000000  00000000  000093ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000d8  00000000  00000000  00009429  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__ctors_end>
       4:	0c 94 d5 06 	jmp	0xdaa	; 0xdaa <__vector_1>
       8:	0c 94 00 07 	jmp	0xe00	; 0xe00 <__vector_2>
       c:	0c 94 2b 07 	jmp	0xe56	; 0xe56 <__vector_3>
      10:	0c 94 56 07 	jmp	0xeac	; 0xeac <__vector_4>
      14:	0c 94 81 07 	jmp	0xf02	; 0xf02 <__vector_5>
      18:	0c 94 ac 07 	jmp	0xf58	; 0xf58 <__vector_6>
      1c:	0c 94 d7 07 	jmp	0xfae	; 0xfae <__vector_7>
      20:	0c 94 02 08 	jmp	0x1004	; 0x1004 <__vector_8>
      24:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      28:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      2c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      30:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      34:	0c 94 da 04 	jmp	0x9b4	; 0x9b4 <__vector_13>
      38:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      3c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      40:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      44:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      48:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      4c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      50:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      54:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      58:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      5c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      60:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      64:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      68:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      6c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      70:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      74:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      78:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      7c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      80:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      84:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      88:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      8c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      90:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      94:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      98:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      9c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      a0:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      a4:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      a8:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      ac:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      b0:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      b4:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      b8:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      bc:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      c0:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      c4:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      c8:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      cc:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      d0:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      d4:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      d8:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      dc:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      e0:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>

000000e4 <__ctors_start>:
      e4:	e2 0e       	add	r14, r18

000000e6 <__ctors_end>:
      e6:	11 24       	eor	r1, r1
      e8:	1f be       	out	0x3f, r1	; 63
      ea:	cf ef       	ldi	r28, 0xFF	; 255
      ec:	d1 e2       	ldi	r29, 0x21	; 33
      ee:	de bf       	out	0x3e, r29	; 62
      f0:	cd bf       	out	0x3d, r28	; 61
      f2:	00 e0       	ldi	r16, 0x00	; 0
      f4:	0c bf       	out	0x3c, r16	; 60

000000f6 <__do_copy_data>:
      f6:	12 e0       	ldi	r17, 0x02	; 2
      f8:	a0 e0       	ldi	r26, 0x00	; 0
      fa:	b2 e0       	ldi	r27, 0x02	; 2
      fc:	e4 e7       	ldi	r30, 0x74	; 116
      fe:	f2 e2       	ldi	r31, 0x22	; 34
     100:	00 e0       	ldi	r16, 0x00	; 0
     102:	0b bf       	out	0x3b, r16	; 59
     104:	02 c0       	rjmp	.+4      	; 0x10a <__do_copy_data+0x14>
     106:	07 90       	elpm	r0, Z+
     108:	0d 92       	st	X+, r0
     10a:	ae 3b       	cpi	r26, 0xBE	; 190
     10c:	b1 07       	cpc	r27, r17
     10e:	d9 f7       	brne	.-10     	; 0x106 <__do_copy_data+0x10>

00000110 <__do_clear_bss>:
     110:	12 e0       	ldi	r17, 0x02	; 2
     112:	ae eb       	ldi	r26, 0xBE	; 190
     114:	b2 e0       	ldi	r27, 0x02	; 2
     116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
     118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
     11a:	ab 3f       	cpi	r26, 0xFB	; 251
     11c:	b1 07       	cpc	r27, r17
     11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>

00000120 <__do_global_ctors>:
     120:	10 e0       	ldi	r17, 0x00	; 0
     122:	00 e0       	ldi	r16, 0x00	; 0
     124:	c6 ee       	ldi	r28, 0xE6	; 230
     126:	d0 e0       	ldi	r29, 0x00	; 0
     128:	40 e0       	ldi	r20, 0x00	; 0
     12a:	06 c0       	rjmp	.+12     	; 0x138 <__do_global_ctors+0x18>
     12c:	22 97       	sbiw	r28, 0x02	; 2
     12e:	41 09       	sbc	r20, r1
     130:	fe 01       	movw	r30, r28
     132:	4b bf       	out	0x3b, r20	; 59
     134:	0e 94 34 11 	call	0x2268	; 0x2268 <__tablejump_elpm__>
     138:	c4 3e       	cpi	r28, 0xE4	; 228
     13a:	d1 07       	cpc	r29, r17
     13c:	40 07       	cpc	r20, r16
     13e:	b1 f7       	brne	.-20     	; 0x12c <__do_global_ctors+0xc>
     140:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <main>
     144:	0c 94 38 11 	jmp	0x2270	; 0x2270 <_exit>

00000148 <__bad_interrupt>:
     148:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000014c <_Z7pinModehh>:
//Functions:

void pinMode(uint8_t pInno,uint8_t mOde)
{
	int l;
  	if(mOde==0)
     14c:	66 23       	and	r22, r22
     14e:	09 f0       	breq	.+2      	; 0x152 <_Z7pinModehh+0x6>
     150:	b8 c0       	rjmp	.+368    	; 0x2c2 <_Z7pinModehh+0x176>
    {
    	switch(d[pInno]){
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	fc 01       	movw	r30, r24
     156:	e8 58       	subi	r30, 0x88	; 136
     158:	fd 4f       	sbci	r31, 0xFD	; 253
     15a:	20 81       	ld	r18, Z
     15c:	25 36       	cpi	r18, 0x65	; 101
     15e:	09 f4       	brne	.+2      	; 0x162 <_Z7pinModehh+0x16>
     160:	50 c0       	rjmp	.+160    	; 0x202 <_Z7pinModehh+0xb6>
     162:	26 36       	cpi	r18, 0x66	; 102
     164:	40 f4       	brcc	.+16     	; 0x176 <_Z7pinModehh+0x2a>
     166:	23 36       	cpi	r18, 0x63	; 99
     168:	41 f1       	breq	.+80     	; 0x1ba <_Z7pinModehh+0x6e>
     16a:	24 36       	cpi	r18, 0x64	; 100
     16c:	c0 f5       	brcc	.+112    	; 0x1de <_Z7pinModehh+0x92>
     16e:	22 36       	cpi	r18, 0x62	; 98
     170:	09 f0       	breq	.+2      	; 0x174 <_Z7pinModehh+0x28>
     172:	5e c1       	rjmp	.+700    	; 0x430 <_Z7pinModehh+0x2e4>
     174:	10 c0       	rjmp	.+32     	; 0x196 <_Z7pinModehh+0x4a>
     176:	28 36       	cpi	r18, 0x68	; 104
     178:	09 f4       	brne	.+2      	; 0x17c <_Z7pinModehh+0x30>
     17a:	67 c0       	rjmp	.+206    	; 0x24a <_Z7pinModehh+0xfe>
     17c:	29 36       	cpi	r18, 0x69	; 105
     17e:	20 f4       	brcc	.+8      	; 0x188 <_Z7pinModehh+0x3c>
     180:	27 36       	cpi	r18, 0x67	; 103
     182:	09 f0       	breq	.+2      	; 0x186 <_Z7pinModehh+0x3a>
     184:	55 c1       	rjmp	.+682    	; 0x430 <_Z7pinModehh+0x2e4>
     186:	4f c0       	rjmp	.+158    	; 0x226 <_Z7pinModehh+0xda>
     188:	2a 36       	cpi	r18, 0x6A	; 106
     18a:	09 f4       	brne	.+2      	; 0x18e <_Z7pinModehh+0x42>
     18c:	72 c0       	rjmp	.+228    	; 0x272 <_Z7pinModehh+0x126>
     18e:	2c 36       	cpi	r18, 0x6C	; 108
     190:	09 f0       	breq	.+2      	; 0x194 <_Z7pinModehh+0x48>
     192:	4e c1       	rjmp	.+668    	; 0x430 <_Z7pinModehh+0x2e4>
     194:	82 c0       	rjmp	.+260    	; 0x29a <_Z7pinModehh+0x14e>

          	case'b':
                  DDRB&=~(1<<c[pInno]);
     196:	24 b1       	in	r18, 0x04	; 4
     198:	fc 01       	movw	r30, r24
     19a:	ee 0f       	add	r30, r30
     19c:	ff 1f       	adc	r31, r31
     19e:	e0 50       	subi	r30, 0x00	; 0
     1a0:	fe 4f       	sbci	r31, 0xFE	; 254
     1a2:	81 e0       	ldi	r24, 0x01	; 1
     1a4:	90 e0       	ldi	r25, 0x00	; 0
     1a6:	00 80       	ld	r0, Z
     1a8:	02 c0       	rjmp	.+4      	; 0x1ae <_Z7pinModehh+0x62>
     1aa:	88 0f       	add	r24, r24
     1ac:	99 1f       	adc	r25, r25
     1ae:	0a 94       	dec	r0
     1b0:	e2 f7       	brpl	.-8      	; 0x1aa <_Z7pinModehh+0x5e>
     1b2:	80 95       	com	r24
     1b4:	82 23       	and	r24, r18
     1b6:	84 b9       	out	0x04, r24	; 4
		           break;
     1b8:	08 95       	ret
          	case'c':
                 DDRC&=~(1<<c[pInno]);
     1ba:	27 b1       	in	r18, 0x07	; 7
     1bc:	fc 01       	movw	r30, r24
     1be:	ee 0f       	add	r30, r30
     1c0:	ff 1f       	adc	r31, r31
     1c2:	e0 50       	subi	r30, 0x00	; 0
     1c4:	fe 4f       	sbci	r31, 0xFE	; 254
     1c6:	81 e0       	ldi	r24, 0x01	; 1
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	00 80       	ld	r0, Z
     1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <_Z7pinModehh+0x86>
     1ce:	88 0f       	add	r24, r24
     1d0:	99 1f       	adc	r25, r25
     1d2:	0a 94       	dec	r0
     1d4:	e2 f7       	brpl	.-8      	; 0x1ce <_Z7pinModehh+0x82>
     1d6:	80 95       	com	r24
     1d8:	82 23       	and	r24, r18
     1da:	87 b9       	out	0x07, r24	; 7
		          break;
     1dc:	08 95       	ret
          	case'd':
                 DDRD&=~(1<<c[pInno]);
     1de:	2a b1       	in	r18, 0x0a	; 10
     1e0:	fc 01       	movw	r30, r24
     1e2:	ee 0f       	add	r30, r30
     1e4:	ff 1f       	adc	r31, r31
     1e6:	e0 50       	subi	r30, 0x00	; 0
     1e8:	fe 4f       	sbci	r31, 0xFE	; 254
     1ea:	81 e0       	ldi	r24, 0x01	; 1
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	00 80       	ld	r0, Z
     1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <_Z7pinModehh+0xaa>
     1f2:	88 0f       	add	r24, r24
     1f4:	99 1f       	adc	r25, r25
     1f6:	0a 94       	dec	r0
     1f8:	e2 f7       	brpl	.-8      	; 0x1f2 <_Z7pinModehh+0xa6>
     1fa:	80 95       	com	r24
     1fc:	82 23       	and	r24, r18
     1fe:	8a b9       	out	0x0a, r24	; 10
		          break;
     200:	08 95       	ret
	      	case'e':
                  DDRE&=~(1<<c[pInno]);
     202:	2d b1       	in	r18, 0x0d	; 13
     204:	fc 01       	movw	r30, r24
     206:	ee 0f       	add	r30, r30
     208:	ff 1f       	adc	r31, r31
     20a:	e0 50       	subi	r30, 0x00	; 0
     20c:	fe 4f       	sbci	r31, 0xFE	; 254
     20e:	81 e0       	ldi	r24, 0x01	; 1
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	00 80       	ld	r0, Z
     214:	02 c0       	rjmp	.+4      	; 0x21a <_Z7pinModehh+0xce>
     216:	88 0f       	add	r24, r24
     218:	99 1f       	adc	r25, r25
     21a:	0a 94       	dec	r0
     21c:	e2 f7       	brpl	.-8      	; 0x216 <_Z7pinModehh+0xca>
     21e:	80 95       	com	r24
     220:	82 23       	and	r24, r18
     222:	8d b9       	out	0x0d, r24	; 13
		           break;
     224:	08 95       	ret
		    case'g':
                  DDRG&=~(1<<c[pInno]);
     226:	23 b3       	in	r18, 0x13	; 19
     228:	fc 01       	movw	r30, r24
     22a:	ee 0f       	add	r30, r30
     22c:	ff 1f       	adc	r31, r31
     22e:	e0 50       	subi	r30, 0x00	; 0
     230:	fe 4f       	sbci	r31, 0xFE	; 254
     232:	81 e0       	ldi	r24, 0x01	; 1
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	00 80       	ld	r0, Z
     238:	02 c0       	rjmp	.+4      	; 0x23e <_Z7pinModehh+0xf2>
     23a:	88 0f       	add	r24, r24
     23c:	99 1f       	adc	r25, r25
     23e:	0a 94       	dec	r0
     240:	e2 f7       	brpl	.-8      	; 0x23a <_Z7pinModehh+0xee>
     242:	80 95       	com	r24
     244:	82 23       	and	r24, r18
     246:	83 bb       	out	0x13, r24	; 19
		           break;
     248:	08 95       	ret
			case'h':
                  DDRH&=~(1<<c[pInno]);
     24a:	e1 e0       	ldi	r30, 0x01	; 1
     24c:	f1 e0       	ldi	r31, 0x01	; 1
     24e:	20 81       	ld	r18, Z
     250:	dc 01       	movw	r26, r24
     252:	aa 0f       	add	r26, r26
     254:	bb 1f       	adc	r27, r27
     256:	a0 50       	subi	r26, 0x00	; 0
     258:	be 4f       	sbci	r27, 0xFE	; 254
     25a:	81 e0       	ldi	r24, 0x01	; 1
     25c:	90 e0       	ldi	r25, 0x00	; 0
     25e:	0c 90       	ld	r0, X
     260:	02 c0       	rjmp	.+4      	; 0x266 <_Z7pinModehh+0x11a>
     262:	88 0f       	add	r24, r24
     264:	99 1f       	adc	r25, r25
     266:	0a 94       	dec	r0
     268:	e2 f7       	brpl	.-8      	; 0x262 <_Z7pinModehh+0x116>
     26a:	80 95       	com	r24
     26c:	82 23       	and	r24, r18
     26e:	80 83       	st	Z, r24
				  break;
     270:	08 95       	ret
		    case'j':
                  DDRJ&=~(1<<c[pInno]);
     272:	e4 e0       	ldi	r30, 0x04	; 4
     274:	f1 e0       	ldi	r31, 0x01	; 1
     276:	20 81       	ld	r18, Z
     278:	dc 01       	movw	r26, r24
     27a:	aa 0f       	add	r26, r26
     27c:	bb 1f       	adc	r27, r27
     27e:	a0 50       	subi	r26, 0x00	; 0
     280:	be 4f       	sbci	r27, 0xFE	; 254
     282:	81 e0       	ldi	r24, 0x01	; 1
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	0c 90       	ld	r0, X
     288:	02 c0       	rjmp	.+4      	; 0x28e <_Z7pinModehh+0x142>
     28a:	88 0f       	add	r24, r24
     28c:	99 1f       	adc	r25, r25
     28e:	0a 94       	dec	r0
     290:	e2 f7       	brpl	.-8      	; 0x28a <_Z7pinModehh+0x13e>
     292:	80 95       	com	r24
     294:	82 23       	and	r24, r18
     296:	80 83       	st	Z, r24
		          break;
     298:	08 95       	ret
			case'l':
                  DDRL&=~(1<<c[pInno]);
     29a:	ea e0       	ldi	r30, 0x0A	; 10
     29c:	f1 e0       	ldi	r31, 0x01	; 1
     29e:	20 81       	ld	r18, Z
     2a0:	dc 01       	movw	r26, r24
     2a2:	aa 0f       	add	r26, r26
     2a4:	bb 1f       	adc	r27, r27
     2a6:	a0 50       	subi	r26, 0x00	; 0
     2a8:	be 4f       	sbci	r27, 0xFE	; 254
     2aa:	81 e0       	ldi	r24, 0x01	; 1
     2ac:	90 e0       	ldi	r25, 0x00	; 0
     2ae:	0c 90       	ld	r0, X
     2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <_Z7pinModehh+0x16a>
     2b2:	88 0f       	add	r24, r24
     2b4:	99 1f       	adc	r25, r25
     2b6:	0a 94       	dec	r0
     2b8:	e2 f7       	brpl	.-8      	; 0x2b2 <_Z7pinModehh+0x166>
     2ba:	80 95       	com	r24
     2bc:	82 23       	and	r24, r18
     2be:	80 83       	st	Z, r24
		          break;
     2c0:	08 95       	ret
     	}
	}
	else{
			switch(d[pInno])
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	fc 01       	movw	r30, r24
     2c6:	e8 58       	subi	r30, 0x88	; 136
     2c8:	fd 4f       	sbci	r31, 0xFD	; 253
     2ca:	20 81       	ld	r18, Z
     2cc:	25 36       	cpi	r18, 0x65	; 101
     2ce:	09 f4       	brne	.+2      	; 0x2d2 <_Z7pinModehh+0x186>
     2d0:	50 c0       	rjmp	.+160    	; 0x372 <_Z7pinModehh+0x226>
     2d2:	26 36       	cpi	r18, 0x66	; 102
     2d4:	40 f4       	brcc	.+16     	; 0x2e6 <_Z7pinModehh+0x19a>
     2d6:	23 36       	cpi	r18, 0x63	; 99
     2d8:	41 f1       	breq	.+80     	; 0x32a <_Z7pinModehh+0x1de>
     2da:	24 36       	cpi	r18, 0x64	; 100
     2dc:	c0 f5       	brcc	.+112    	; 0x34e <_Z7pinModehh+0x202>
     2de:	22 36       	cpi	r18, 0x62	; 98
     2e0:	09 f0       	breq	.+2      	; 0x2e4 <_Z7pinModehh+0x198>
     2e2:	a6 c0       	rjmp	.+332    	; 0x430 <_Z7pinModehh+0x2e4>
     2e4:	10 c0       	rjmp	.+32     	; 0x306 <_Z7pinModehh+0x1ba>
     2e6:	28 36       	cpi	r18, 0x68	; 104
     2e8:	09 f4       	brne	.+2      	; 0x2ec <_Z7pinModehh+0x1a0>
     2ea:	67 c0       	rjmp	.+206    	; 0x3ba <_Z7pinModehh+0x26e>
     2ec:	29 36       	cpi	r18, 0x69	; 105
     2ee:	20 f4       	brcc	.+8      	; 0x2f8 <_Z7pinModehh+0x1ac>
     2f0:	27 36       	cpi	r18, 0x67	; 103
     2f2:	09 f0       	breq	.+2      	; 0x2f6 <_Z7pinModehh+0x1aa>
     2f4:	9d c0       	rjmp	.+314    	; 0x430 <_Z7pinModehh+0x2e4>
     2f6:	4f c0       	rjmp	.+158    	; 0x396 <_Z7pinModehh+0x24a>
     2f8:	2a 36       	cpi	r18, 0x6A	; 106
     2fa:	09 f4       	brne	.+2      	; 0x2fe <_Z7pinModehh+0x1b2>
     2fc:	72 c0       	rjmp	.+228    	; 0x3e2 <_Z7pinModehh+0x296>
     2fe:	2c 36       	cpi	r18, 0x6C	; 108
     300:	09 f0       	breq	.+2      	; 0x304 <_Z7pinModehh+0x1b8>
     302:	96 c0       	rjmp	.+300    	; 0x430 <_Z7pinModehh+0x2e4>
     304:	82 c0       	rjmp	.+260    	; 0x40a <_Z7pinModehh+0x2be>
         	{

	        	case'b':
	            	DDRB|=(1<<c[pInno]);
     306:	44 b1       	in	r20, 0x04	; 4
     308:	fc 01       	movw	r30, r24
     30a:	ee 0f       	add	r30, r30
     30c:	ff 1f       	adc	r31, r31
     30e:	e0 50       	subi	r30, 0x00	; 0
     310:	fe 4f       	sbci	r31, 0xFE	; 254
     312:	21 e0       	ldi	r18, 0x01	; 1
     314:	30 e0       	ldi	r19, 0x00	; 0
     316:	c9 01       	movw	r24, r18
     318:	00 80       	ld	r0, Z
     31a:	02 c0       	rjmp	.+4      	; 0x320 <_Z7pinModehh+0x1d4>
     31c:	88 0f       	add	r24, r24
     31e:	99 1f       	adc	r25, r25
     320:	0a 94       	dec	r0
     322:	e2 f7       	brpl	.-8      	; 0x31c <_Z7pinModehh+0x1d0>
     324:	84 2b       	or	r24, r20
     326:	84 b9       	out	0x04, r24	; 4
			    	break;
     328:	08 95       	ret
	          	case'c':
	                DDRC|=(1<<c[pInno]);
     32a:	47 b1       	in	r20, 0x07	; 7
     32c:	fc 01       	movw	r30, r24
     32e:	ee 0f       	add	r30, r30
     330:	ff 1f       	adc	r31, r31
     332:	e0 50       	subi	r30, 0x00	; 0
     334:	fe 4f       	sbci	r31, 0xFE	; 254
     336:	21 e0       	ldi	r18, 0x01	; 1
     338:	30 e0       	ldi	r19, 0x00	; 0
     33a:	c9 01       	movw	r24, r18
     33c:	00 80       	ld	r0, Z
     33e:	02 c0       	rjmp	.+4      	; 0x344 <_Z7pinModehh+0x1f8>
     340:	88 0f       	add	r24, r24
     342:	99 1f       	adc	r25, r25
     344:	0a 94       	dec	r0
     346:	e2 f7       	brpl	.-8      	; 0x340 <_Z7pinModehh+0x1f4>
     348:	84 2b       	or	r24, r20
     34a:	87 b9       	out	0x07, r24	; 7
			        break;
     34c:	08 95       	ret
	          	case'd':
	                DDRD|=(1<<c[pInno]);
     34e:	4a b1       	in	r20, 0x0a	; 10
     350:	fc 01       	movw	r30, r24
     352:	ee 0f       	add	r30, r30
     354:	ff 1f       	adc	r31, r31
     356:	e0 50       	subi	r30, 0x00	; 0
     358:	fe 4f       	sbci	r31, 0xFE	; 254
     35a:	21 e0       	ldi	r18, 0x01	; 1
     35c:	30 e0       	ldi	r19, 0x00	; 0
     35e:	c9 01       	movw	r24, r18
     360:	00 80       	ld	r0, Z
     362:	02 c0       	rjmp	.+4      	; 0x368 <_Z7pinModehh+0x21c>
     364:	88 0f       	add	r24, r24
     366:	99 1f       	adc	r25, r25
     368:	0a 94       	dec	r0
     36a:	e2 f7       	brpl	.-8      	; 0x364 <_Z7pinModehh+0x218>
     36c:	84 2b       	or	r24, r20
     36e:	8a b9       	out	0x0a, r24	; 10
			        break;
     370:	08 95       	ret
		      	case'e':
	                DDRE|=(1<<c[pInno]);
     372:	4d b1       	in	r20, 0x0d	; 13
     374:	fc 01       	movw	r30, r24
     376:	ee 0f       	add	r30, r30
     378:	ff 1f       	adc	r31, r31
     37a:	e0 50       	subi	r30, 0x00	; 0
     37c:	fe 4f       	sbci	r31, 0xFE	; 254
     37e:	21 e0       	ldi	r18, 0x01	; 1
     380:	30 e0       	ldi	r19, 0x00	; 0
     382:	c9 01       	movw	r24, r18
     384:	00 80       	ld	r0, Z
     386:	02 c0       	rjmp	.+4      	; 0x38c <_Z7pinModehh+0x240>
     388:	88 0f       	add	r24, r24
     38a:	99 1f       	adc	r25, r25
     38c:	0a 94       	dec	r0
     38e:	e2 f7       	brpl	.-8      	; 0x388 <_Z7pinModehh+0x23c>
     390:	84 2b       	or	r24, r20
     392:	8d b9       	out	0x0d, r24	; 13
			        break;
     394:	08 95       	ret
			    case'g':
	                DDRG|=(1<<c[pInno]);
     396:	43 b3       	in	r20, 0x13	; 19
     398:	fc 01       	movw	r30, r24
     39a:	ee 0f       	add	r30, r30
     39c:	ff 1f       	adc	r31, r31
     39e:	e0 50       	subi	r30, 0x00	; 0
     3a0:	fe 4f       	sbci	r31, 0xFE	; 254
     3a2:	21 e0       	ldi	r18, 0x01	; 1
     3a4:	30 e0       	ldi	r19, 0x00	; 0
     3a6:	c9 01       	movw	r24, r18
     3a8:	00 80       	ld	r0, Z
     3aa:	02 c0       	rjmp	.+4      	; 0x3b0 <_Z7pinModehh+0x264>
     3ac:	88 0f       	add	r24, r24
     3ae:	99 1f       	adc	r25, r25
     3b0:	0a 94       	dec	r0
     3b2:	e2 f7       	brpl	.-8      	; 0x3ac <_Z7pinModehh+0x260>
     3b4:	84 2b       	or	r24, r20
     3b6:	83 bb       	out	0x13, r24	; 19
			        break;
     3b8:	08 95       	ret
			 	case'h':
	                DDRH|=(1<<c[pInno]);
     3ba:	e1 e0       	ldi	r30, 0x01	; 1
     3bc:	f1 e0       	ldi	r31, 0x01	; 1
     3be:	40 81       	ld	r20, Z
     3c0:	dc 01       	movw	r26, r24
     3c2:	aa 0f       	add	r26, r26
     3c4:	bb 1f       	adc	r27, r27
     3c6:	a0 50       	subi	r26, 0x00	; 0
     3c8:	be 4f       	sbci	r27, 0xFE	; 254
     3ca:	21 e0       	ldi	r18, 0x01	; 1
     3cc:	30 e0       	ldi	r19, 0x00	; 0
     3ce:	c9 01       	movw	r24, r18
     3d0:	0c 90       	ld	r0, X
     3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <_Z7pinModehh+0x28c>
     3d4:	88 0f       	add	r24, r24
     3d6:	99 1f       	adc	r25, r25
     3d8:	0a 94       	dec	r0
     3da:	e2 f7       	brpl	.-8      	; 0x3d4 <_Z7pinModehh+0x288>
     3dc:	84 2b       	or	r24, r20
     3de:	80 83       	st	Z, r24
			        break;
     3e0:	08 95       	ret
			    case'j':
	                DDRJ|=(1<<c[pInno]);
     3e2:	e4 e0       	ldi	r30, 0x04	; 4
     3e4:	f1 e0       	ldi	r31, 0x01	; 1
     3e6:	40 81       	ld	r20, Z
     3e8:	dc 01       	movw	r26, r24
     3ea:	aa 0f       	add	r26, r26
     3ec:	bb 1f       	adc	r27, r27
     3ee:	a0 50       	subi	r26, 0x00	; 0
     3f0:	be 4f       	sbci	r27, 0xFE	; 254
     3f2:	21 e0       	ldi	r18, 0x01	; 1
     3f4:	30 e0       	ldi	r19, 0x00	; 0
     3f6:	c9 01       	movw	r24, r18
     3f8:	0c 90       	ld	r0, X
     3fa:	02 c0       	rjmp	.+4      	; 0x400 <_Z7pinModehh+0x2b4>
     3fc:	88 0f       	add	r24, r24
     3fe:	99 1f       	adc	r25, r25
     400:	0a 94       	dec	r0
     402:	e2 f7       	brpl	.-8      	; 0x3fc <_Z7pinModehh+0x2b0>
     404:	84 2b       	or	r24, r20
     406:	80 83       	st	Z, r24
			        break;
     408:	08 95       	ret
				case'l':
	                DDRL|=(1<<c[pInno]);
     40a:	ea e0       	ldi	r30, 0x0A	; 10
     40c:	f1 e0       	ldi	r31, 0x01	; 1
     40e:	40 81       	ld	r20, Z
     410:	dc 01       	movw	r26, r24
     412:	aa 0f       	add	r26, r26
     414:	bb 1f       	adc	r27, r27
     416:	a0 50       	subi	r26, 0x00	; 0
     418:	be 4f       	sbci	r27, 0xFE	; 254
     41a:	21 e0       	ldi	r18, 0x01	; 1
     41c:	30 e0       	ldi	r19, 0x00	; 0
     41e:	c9 01       	movw	r24, r18
     420:	0c 90       	ld	r0, X
     422:	02 c0       	rjmp	.+4      	; 0x428 <_Z7pinModehh+0x2dc>
     424:	88 0f       	add	r24, r24
     426:	99 1f       	adc	r25, r25
     428:	0a 94       	dec	r0
     42a:	e2 f7       	brpl	.-8      	; 0x424 <_Z7pinModehh+0x2d8>
     42c:	84 2b       	or	r24, r20
     42e:	80 83       	st	Z, r24
     430:	08 95       	ret

00000432 <_Z12digitalWritehh>:
	}
}

void digitalWrite (uint8_t pInno ,uint8_t mOde)
{
   if(mOde==0)
     432:	66 23       	and	r22, r22
     434:	09 f0       	breq	.+2      	; 0x438 <_Z12digitalWritehh+0x6>
     436:	b8 c0       	rjmp	.+368    	; 0x5a8 <_Z12digitalWritehh+0x176>
        { switch(d[pInno])
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	fc 01       	movw	r30, r24
     43c:	e8 58       	subi	r30, 0x88	; 136
     43e:	fd 4f       	sbci	r31, 0xFD	; 253
     440:	20 81       	ld	r18, Z
     442:	25 36       	cpi	r18, 0x65	; 101
     444:	09 f4       	brne	.+2      	; 0x448 <_Z12digitalWritehh+0x16>
     446:	50 c0       	rjmp	.+160    	; 0x4e8 <_Z12digitalWritehh+0xb6>
     448:	26 36       	cpi	r18, 0x66	; 102
     44a:	40 f4       	brcc	.+16     	; 0x45c <_Z12digitalWritehh+0x2a>
     44c:	23 36       	cpi	r18, 0x63	; 99
     44e:	41 f1       	breq	.+80     	; 0x4a0 <_Z12digitalWritehh+0x6e>
     450:	24 36       	cpi	r18, 0x64	; 100
     452:	c0 f5       	brcc	.+112    	; 0x4c4 <_Z12digitalWritehh+0x92>
     454:	22 36       	cpi	r18, 0x62	; 98
     456:	09 f0       	breq	.+2      	; 0x45a <_Z12digitalWritehh+0x28>
     458:	5e c1       	rjmp	.+700    	; 0x716 <_Z12digitalWritehh+0x2e4>
     45a:	10 c0       	rjmp	.+32     	; 0x47c <_Z12digitalWritehh+0x4a>
     45c:	28 36       	cpi	r18, 0x68	; 104
     45e:	09 f4       	brne	.+2      	; 0x462 <_Z12digitalWritehh+0x30>
     460:	67 c0       	rjmp	.+206    	; 0x530 <_Z12digitalWritehh+0xfe>
     462:	29 36       	cpi	r18, 0x69	; 105
     464:	20 f4       	brcc	.+8      	; 0x46e <_Z12digitalWritehh+0x3c>
     466:	27 36       	cpi	r18, 0x67	; 103
     468:	09 f0       	breq	.+2      	; 0x46c <_Z12digitalWritehh+0x3a>
     46a:	55 c1       	rjmp	.+682    	; 0x716 <_Z12digitalWritehh+0x2e4>
     46c:	4f c0       	rjmp	.+158    	; 0x50c <_Z12digitalWritehh+0xda>
     46e:	2a 36       	cpi	r18, 0x6A	; 106
     470:	09 f4       	brne	.+2      	; 0x474 <_Z12digitalWritehh+0x42>
     472:	72 c0       	rjmp	.+228    	; 0x558 <_Z12digitalWritehh+0x126>
     474:	2c 36       	cpi	r18, 0x6C	; 108
     476:	09 f0       	breq	.+2      	; 0x47a <_Z12digitalWritehh+0x48>
     478:	4e c1       	rjmp	.+668    	; 0x716 <_Z12digitalWritehh+0x2e4>
     47a:	82 c0       	rjmp	.+260    	; 0x580 <_Z12digitalWritehh+0x14e>
         {

	          case'b':
	                  PORTB&=~(1<<c[pInno]);
     47c:	25 b1       	in	r18, 0x05	; 5
     47e:	fc 01       	movw	r30, r24
     480:	ee 0f       	add	r30, r30
     482:	ff 1f       	adc	r31, r31
     484:	e0 50       	subi	r30, 0x00	; 0
     486:	fe 4f       	sbci	r31, 0xFE	; 254
     488:	81 e0       	ldi	r24, 0x01	; 1
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	00 80       	ld	r0, Z
     48e:	02 c0       	rjmp	.+4      	; 0x494 <_Z12digitalWritehh+0x62>
     490:	88 0f       	add	r24, r24
     492:	99 1f       	adc	r25, r25
     494:	0a 94       	dec	r0
     496:	e2 f7       	brpl	.-8      	; 0x490 <_Z12digitalWritehh+0x5e>
     498:	80 95       	com	r24
     49a:	82 23       	and	r24, r18
     49c:	85 b9       	out	0x05, r24	; 5
			           break;
     49e:	08 95       	ret
	          case'c':
	                 PORTB&=~(1<<c[pInno]);
     4a0:	25 b1       	in	r18, 0x05	; 5
     4a2:	fc 01       	movw	r30, r24
     4a4:	ee 0f       	add	r30, r30
     4a6:	ff 1f       	adc	r31, r31
     4a8:	e0 50       	subi	r30, 0x00	; 0
     4aa:	fe 4f       	sbci	r31, 0xFE	; 254
     4ac:	81 e0       	ldi	r24, 0x01	; 1
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	00 80       	ld	r0, Z
     4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <_Z12digitalWritehh+0x86>
     4b4:	88 0f       	add	r24, r24
     4b6:	99 1f       	adc	r25, r25
     4b8:	0a 94       	dec	r0
     4ba:	e2 f7       	brpl	.-8      	; 0x4b4 <_Z12digitalWritehh+0x82>
     4bc:	80 95       	com	r24
     4be:	82 23       	and	r24, r18
     4c0:	85 b9       	out	0x05, r24	; 5
			          break;
     4c2:	08 95       	ret
	          case'd':
	                 PORTD&=~(1<<c[pInno]);
     4c4:	2b b1       	in	r18, 0x0b	; 11
     4c6:	fc 01       	movw	r30, r24
     4c8:	ee 0f       	add	r30, r30
     4ca:	ff 1f       	adc	r31, r31
     4cc:	e0 50       	subi	r30, 0x00	; 0
     4ce:	fe 4f       	sbci	r31, 0xFE	; 254
     4d0:	81 e0       	ldi	r24, 0x01	; 1
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	00 80       	ld	r0, Z
     4d6:	02 c0       	rjmp	.+4      	; 0x4dc <_Z12digitalWritehh+0xaa>
     4d8:	88 0f       	add	r24, r24
     4da:	99 1f       	adc	r25, r25
     4dc:	0a 94       	dec	r0
     4de:	e2 f7       	brpl	.-8      	; 0x4d8 <_Z12digitalWritehh+0xa6>
     4e0:	80 95       	com	r24
     4e2:	82 23       	and	r24, r18
     4e4:	8b b9       	out	0x0b, r24	; 11
			          break;
     4e6:	08 95       	ret

		      case'e':
	                  PORTE&=~(1<<c[pInno]);
     4e8:	2e b1       	in	r18, 0x0e	; 14
     4ea:	fc 01       	movw	r30, r24
     4ec:	ee 0f       	add	r30, r30
     4ee:	ff 1f       	adc	r31, r31
     4f0:	e0 50       	subi	r30, 0x00	; 0
     4f2:	fe 4f       	sbci	r31, 0xFE	; 254
     4f4:	81 e0       	ldi	r24, 0x01	; 1
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	00 80       	ld	r0, Z
     4fa:	02 c0       	rjmp	.+4      	; 0x500 <_Z12digitalWritehh+0xce>
     4fc:	88 0f       	add	r24, r24
     4fe:	99 1f       	adc	r25, r25
     500:	0a 94       	dec	r0
     502:	e2 f7       	brpl	.-8      	; 0x4fc <_Z12digitalWritehh+0xca>
     504:	80 95       	com	r24
     506:	82 23       	and	r24, r18
     508:	8e b9       	out	0x0e, r24	; 14
			           break;
     50a:	08 95       	ret

			     case'g':
	                  PORTG&=~(1<<c[pInno]);
     50c:	24 b3       	in	r18, 0x14	; 20
     50e:	fc 01       	movw	r30, r24
     510:	ee 0f       	add	r30, r30
     512:	ff 1f       	adc	r31, r31
     514:	e0 50       	subi	r30, 0x00	; 0
     516:	fe 4f       	sbci	r31, 0xFE	; 254
     518:	81 e0       	ldi	r24, 0x01	; 1
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	00 80       	ld	r0, Z
     51e:	02 c0       	rjmp	.+4      	; 0x524 <_Z12digitalWritehh+0xf2>
     520:	88 0f       	add	r24, r24
     522:	99 1f       	adc	r25, r25
     524:	0a 94       	dec	r0
     526:	e2 f7       	brpl	.-8      	; 0x520 <_Z12digitalWritehh+0xee>
     528:	80 95       	com	r24
     52a:	82 23       	and	r24, r18
     52c:	84 bb       	out	0x14, r24	; 20
			           break;
     52e:	08 95       	ret
			 case'h':
	                  PORTH&=~(1<<c[pInno]);
     530:	e2 e0       	ldi	r30, 0x02	; 2
     532:	f1 e0       	ldi	r31, 0x01	; 1
     534:	20 81       	ld	r18, Z
     536:	dc 01       	movw	r26, r24
     538:	aa 0f       	add	r26, r26
     53a:	bb 1f       	adc	r27, r27
     53c:	a0 50       	subi	r26, 0x00	; 0
     53e:	be 4f       	sbci	r27, 0xFE	; 254
     540:	81 e0       	ldi	r24, 0x01	; 1
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	0c 90       	ld	r0, X
     546:	02 c0       	rjmp	.+4      	; 0x54c <_Z12digitalWritehh+0x11a>
     548:	88 0f       	add	r24, r24
     54a:	99 1f       	adc	r25, r25
     54c:	0a 94       	dec	r0
     54e:	e2 f7       	brpl	.-8      	; 0x548 <_Z12digitalWritehh+0x116>
     550:	80 95       	com	r24
     552:	82 23       	and	r24, r18
     554:	80 83       	st	Z, r24
			           break;
     556:	08 95       	ret

			     case'j':
	                  PORTJ&=~(1<<c[pInno]);
     558:	e5 e0       	ldi	r30, 0x05	; 5
     55a:	f1 e0       	ldi	r31, 0x01	; 1
     55c:	20 81       	ld	r18, Z
     55e:	dc 01       	movw	r26, r24
     560:	aa 0f       	add	r26, r26
     562:	bb 1f       	adc	r27, r27
     564:	a0 50       	subi	r26, 0x00	; 0
     566:	be 4f       	sbci	r27, 0xFE	; 254
     568:	81 e0       	ldi	r24, 0x01	; 1
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	0c 90       	ld	r0, X
     56e:	02 c0       	rjmp	.+4      	; 0x574 <_Z12digitalWritehh+0x142>
     570:	88 0f       	add	r24, r24
     572:	99 1f       	adc	r25, r25
     574:	0a 94       	dec	r0
     576:	e2 f7       	brpl	.-8      	; 0x570 <_Z12digitalWritehh+0x13e>
     578:	80 95       	com	r24
     57a:	82 23       	and	r24, r18
     57c:	80 83       	st	Z, r24
			           break;
     57e:	08 95       	ret
				     case'l':
	                  PORTL&=~(1<<c[pInno]);
     580:	eb e0       	ldi	r30, 0x0B	; 11
     582:	f1 e0       	ldi	r31, 0x01	; 1
     584:	20 81       	ld	r18, Z
     586:	dc 01       	movw	r26, r24
     588:	aa 0f       	add	r26, r26
     58a:	bb 1f       	adc	r27, r27
     58c:	a0 50       	subi	r26, 0x00	; 0
     58e:	be 4f       	sbci	r27, 0xFE	; 254
     590:	81 e0       	ldi	r24, 0x01	; 1
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	0c 90       	ld	r0, X
     596:	02 c0       	rjmp	.+4      	; 0x59c <_Z12digitalWritehh+0x16a>
     598:	88 0f       	add	r24, r24
     59a:	99 1f       	adc	r25, r25
     59c:	0a 94       	dec	r0
     59e:	e2 f7       	brpl	.-8      	; 0x598 <_Z12digitalWritehh+0x166>
     5a0:	80 95       	com	r24
     5a2:	82 23       	and	r24, r18
     5a4:	80 83       	st	Z, r24
			           break;
     5a6:	08 95       	ret
	     }  }
	else{          switch(d[pInno])
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	fc 01       	movw	r30, r24
     5ac:	e8 58       	subi	r30, 0x88	; 136
     5ae:	fd 4f       	sbci	r31, 0xFD	; 253
     5b0:	20 81       	ld	r18, Z
     5b2:	25 36       	cpi	r18, 0x65	; 101
     5b4:	09 f4       	brne	.+2      	; 0x5b8 <_Z12digitalWritehh+0x186>
     5b6:	50 c0       	rjmp	.+160    	; 0x658 <_Z12digitalWritehh+0x226>
     5b8:	26 36       	cpi	r18, 0x66	; 102
     5ba:	40 f4       	brcc	.+16     	; 0x5cc <_Z12digitalWritehh+0x19a>
     5bc:	23 36       	cpi	r18, 0x63	; 99
     5be:	41 f1       	breq	.+80     	; 0x610 <_Z12digitalWritehh+0x1de>
     5c0:	24 36       	cpi	r18, 0x64	; 100
     5c2:	c0 f5       	brcc	.+112    	; 0x634 <_Z12digitalWritehh+0x202>
     5c4:	22 36       	cpi	r18, 0x62	; 98
     5c6:	09 f0       	breq	.+2      	; 0x5ca <_Z12digitalWritehh+0x198>
     5c8:	a6 c0       	rjmp	.+332    	; 0x716 <_Z12digitalWritehh+0x2e4>
     5ca:	10 c0       	rjmp	.+32     	; 0x5ec <_Z12digitalWritehh+0x1ba>
     5cc:	28 36       	cpi	r18, 0x68	; 104
     5ce:	09 f4       	brne	.+2      	; 0x5d2 <_Z12digitalWritehh+0x1a0>
     5d0:	67 c0       	rjmp	.+206    	; 0x6a0 <_Z12digitalWritehh+0x26e>
     5d2:	29 36       	cpi	r18, 0x69	; 105
     5d4:	20 f4       	brcc	.+8      	; 0x5de <_Z12digitalWritehh+0x1ac>
     5d6:	27 36       	cpi	r18, 0x67	; 103
     5d8:	09 f0       	breq	.+2      	; 0x5dc <_Z12digitalWritehh+0x1aa>
     5da:	9d c0       	rjmp	.+314    	; 0x716 <_Z12digitalWritehh+0x2e4>
     5dc:	4f c0       	rjmp	.+158    	; 0x67c <_Z12digitalWritehh+0x24a>
     5de:	2a 36       	cpi	r18, 0x6A	; 106
     5e0:	09 f4       	brne	.+2      	; 0x5e4 <_Z12digitalWritehh+0x1b2>
     5e2:	72 c0       	rjmp	.+228    	; 0x6c8 <_Z12digitalWritehh+0x296>
     5e4:	2c 36       	cpi	r18, 0x6C	; 108
     5e6:	09 f0       	breq	.+2      	; 0x5ea <_Z12digitalWritehh+0x1b8>
     5e8:	96 c0       	rjmp	.+300    	; 0x716 <_Z12digitalWritehh+0x2e4>
     5ea:	82 c0       	rjmp	.+260    	; 0x6f0 <_Z12digitalWritehh+0x2be>
         {

	          case'b':
	                 PORTB|=(1<<c[pInno]);
     5ec:	45 b1       	in	r20, 0x05	; 5
     5ee:	fc 01       	movw	r30, r24
     5f0:	ee 0f       	add	r30, r30
     5f2:	ff 1f       	adc	r31, r31
     5f4:	e0 50       	subi	r30, 0x00	; 0
     5f6:	fe 4f       	sbci	r31, 0xFE	; 254
     5f8:	21 e0       	ldi	r18, 0x01	; 1
     5fa:	30 e0       	ldi	r19, 0x00	; 0
     5fc:	c9 01       	movw	r24, r18
     5fe:	00 80       	ld	r0, Z
     600:	02 c0       	rjmp	.+4      	; 0x606 <_Z12digitalWritehh+0x1d4>
     602:	88 0f       	add	r24, r24
     604:	99 1f       	adc	r25, r25
     606:	0a 94       	dec	r0
     608:	e2 f7       	brpl	.-8      	; 0x602 <_Z12digitalWritehh+0x1d0>
     60a:	84 2b       	or	r24, r20
     60c:	85 b9       	out	0x05, r24	; 5
			           break;
     60e:	08 95       	ret
	          case'c':
	                 PORTC|=(1<<c[pInno]);
     610:	48 b1       	in	r20, 0x08	; 8
     612:	fc 01       	movw	r30, r24
     614:	ee 0f       	add	r30, r30
     616:	ff 1f       	adc	r31, r31
     618:	e0 50       	subi	r30, 0x00	; 0
     61a:	fe 4f       	sbci	r31, 0xFE	; 254
     61c:	21 e0       	ldi	r18, 0x01	; 1
     61e:	30 e0       	ldi	r19, 0x00	; 0
     620:	c9 01       	movw	r24, r18
     622:	00 80       	ld	r0, Z
     624:	02 c0       	rjmp	.+4      	; 0x62a <_Z12digitalWritehh+0x1f8>
     626:	88 0f       	add	r24, r24
     628:	99 1f       	adc	r25, r25
     62a:	0a 94       	dec	r0
     62c:	e2 f7       	brpl	.-8      	; 0x626 <_Z12digitalWritehh+0x1f4>
     62e:	84 2b       	or	r24, r20
     630:	88 b9       	out	0x08, r24	; 8
			          break;
     632:	08 95       	ret
	          case'd':
	                 PORTD|=(1<<c[pInno]);
     634:	4b b1       	in	r20, 0x0b	; 11
     636:	fc 01       	movw	r30, r24
     638:	ee 0f       	add	r30, r30
     63a:	ff 1f       	adc	r31, r31
     63c:	e0 50       	subi	r30, 0x00	; 0
     63e:	fe 4f       	sbci	r31, 0xFE	; 254
     640:	21 e0       	ldi	r18, 0x01	; 1
     642:	30 e0       	ldi	r19, 0x00	; 0
     644:	c9 01       	movw	r24, r18
     646:	00 80       	ld	r0, Z
     648:	02 c0       	rjmp	.+4      	; 0x64e <_Z12digitalWritehh+0x21c>
     64a:	88 0f       	add	r24, r24
     64c:	99 1f       	adc	r25, r25
     64e:	0a 94       	dec	r0
     650:	e2 f7       	brpl	.-8      	; 0x64a <_Z12digitalWritehh+0x218>
     652:	84 2b       	or	r24, r20
     654:	8b b9       	out	0x0b, r24	; 11
			          break;
     656:	08 95       	ret

		      case'e':
	                  PORTE|=(1<<c[pInno]);
     658:	4e b1       	in	r20, 0x0e	; 14
     65a:	fc 01       	movw	r30, r24
     65c:	ee 0f       	add	r30, r30
     65e:	ff 1f       	adc	r31, r31
     660:	e0 50       	subi	r30, 0x00	; 0
     662:	fe 4f       	sbci	r31, 0xFE	; 254
     664:	21 e0       	ldi	r18, 0x01	; 1
     666:	30 e0       	ldi	r19, 0x00	; 0
     668:	c9 01       	movw	r24, r18
     66a:	00 80       	ld	r0, Z
     66c:	02 c0       	rjmp	.+4      	; 0x672 <_Z12digitalWritehh+0x240>
     66e:	88 0f       	add	r24, r24
     670:	99 1f       	adc	r25, r25
     672:	0a 94       	dec	r0
     674:	e2 f7       	brpl	.-8      	; 0x66e <_Z12digitalWritehh+0x23c>
     676:	84 2b       	or	r24, r20
     678:	8e b9       	out	0x0e, r24	; 14
			           break;
     67a:	08 95       	ret

			     case'g':
	                  PORTG|=(1<<c[pInno]);
     67c:	44 b3       	in	r20, 0x14	; 20
     67e:	fc 01       	movw	r30, r24
     680:	ee 0f       	add	r30, r30
     682:	ff 1f       	adc	r31, r31
     684:	e0 50       	subi	r30, 0x00	; 0
     686:	fe 4f       	sbci	r31, 0xFE	; 254
     688:	21 e0       	ldi	r18, 0x01	; 1
     68a:	30 e0       	ldi	r19, 0x00	; 0
     68c:	c9 01       	movw	r24, r18
     68e:	00 80       	ld	r0, Z
     690:	02 c0       	rjmp	.+4      	; 0x696 <_Z12digitalWritehh+0x264>
     692:	88 0f       	add	r24, r24
     694:	99 1f       	adc	r25, r25
     696:	0a 94       	dec	r0
     698:	e2 f7       	brpl	.-8      	; 0x692 <_Z12digitalWritehh+0x260>
     69a:	84 2b       	or	r24, r20
     69c:	84 bb       	out	0x14, r24	; 20
			           break;
     69e:	08 95       	ret
			 case'h':
	                  PORTH|=(1<<c[pInno]);
     6a0:	e2 e0       	ldi	r30, 0x02	; 2
     6a2:	f1 e0       	ldi	r31, 0x01	; 1
     6a4:	40 81       	ld	r20, Z
     6a6:	dc 01       	movw	r26, r24
     6a8:	aa 0f       	add	r26, r26
     6aa:	bb 1f       	adc	r27, r27
     6ac:	a0 50       	subi	r26, 0x00	; 0
     6ae:	be 4f       	sbci	r27, 0xFE	; 254
     6b0:	21 e0       	ldi	r18, 0x01	; 1
     6b2:	30 e0       	ldi	r19, 0x00	; 0
     6b4:	c9 01       	movw	r24, r18
     6b6:	0c 90       	ld	r0, X
     6b8:	02 c0       	rjmp	.+4      	; 0x6be <_Z12digitalWritehh+0x28c>
     6ba:	88 0f       	add	r24, r24
     6bc:	99 1f       	adc	r25, r25
     6be:	0a 94       	dec	r0
     6c0:	e2 f7       	brpl	.-8      	; 0x6ba <_Z12digitalWritehh+0x288>
     6c2:	84 2b       	or	r24, r20
     6c4:	80 83       	st	Z, r24
			           break;
     6c6:	08 95       	ret
		     /*case'i':
	                  PORTI|=(1<<c[pInno]);
			           break;*/
			     case'j':
	                  PORTJ|=(1<<c[pInno]);
     6c8:	e5 e0       	ldi	r30, 0x05	; 5
     6ca:	f1 e0       	ldi	r31, 0x01	; 1
     6cc:	40 81       	ld	r20, Z
     6ce:	dc 01       	movw	r26, r24
     6d0:	aa 0f       	add	r26, r26
     6d2:	bb 1f       	adc	r27, r27
     6d4:	a0 50       	subi	r26, 0x00	; 0
     6d6:	be 4f       	sbci	r27, 0xFE	; 254
     6d8:	21 e0       	ldi	r18, 0x01	; 1
     6da:	30 e0       	ldi	r19, 0x00	; 0
     6dc:	c9 01       	movw	r24, r18
     6de:	0c 90       	ld	r0, X
     6e0:	02 c0       	rjmp	.+4      	; 0x6e6 <_Z12digitalWritehh+0x2b4>
     6e2:	88 0f       	add	r24, r24
     6e4:	99 1f       	adc	r25, r25
     6e6:	0a 94       	dec	r0
     6e8:	e2 f7       	brpl	.-8      	; 0x6e2 <_Z12digitalWritehh+0x2b0>
     6ea:	84 2b       	or	r24, r20
     6ec:	80 83       	st	Z, r24
			           break;
     6ee:	08 95       	ret
				     case'l':
	                  PORTL|=(1<<c[pInno]);
     6f0:	eb e0       	ldi	r30, 0x0B	; 11
     6f2:	f1 e0       	ldi	r31, 0x01	; 1
     6f4:	40 81       	ld	r20, Z
     6f6:	dc 01       	movw	r26, r24
     6f8:	aa 0f       	add	r26, r26
     6fa:	bb 1f       	adc	r27, r27
     6fc:	a0 50       	subi	r26, 0x00	; 0
     6fe:	be 4f       	sbci	r27, 0xFE	; 254
     700:	21 e0       	ldi	r18, 0x01	; 1
     702:	30 e0       	ldi	r19, 0x00	; 0
     704:	c9 01       	movw	r24, r18
     706:	0c 90       	ld	r0, X
     708:	02 c0       	rjmp	.+4      	; 0x70e <_Z12digitalWritehh+0x2dc>
     70a:	88 0f       	add	r24, r24
     70c:	99 1f       	adc	r25, r25
     70e:	0a 94       	dec	r0
     710:	e2 f7       	brpl	.-8      	; 0x70a <_Z12digitalWritehh+0x2d8>
     712:	84 2b       	or	r24, r20
     714:	80 83       	st	Z, r24
     716:	08 95       	ret

00000718 <_Z11digitalReadh>:

uint8_t digitalRead(uint8_t pInno)
{
	uint8_t z;				//not a good practice
	uint8_t x;				//not a good practice
   switch(d[pInno])
     718:	28 e7       	ldi	r18, 0x78	; 120
     71a:	32 e0       	ldi	r19, 0x02	; 2
     71c:	28 0f       	add	r18, r24
     71e:	31 1d       	adc	r19, r1
     720:	f9 01       	movw	r30, r18
     722:	80 81       	ld	r24, Z
     724:	85 36       	cpi	r24, 0x65	; 101
     726:	d9 f0       	breq	.+54     	; 0x75e <_Z11digitalReadh+0x46>
     728:	86 36       	cpi	r24, 0x66	; 102
     72a:	38 f4       	brcc	.+14     	; 0x73a <_Z11digitalReadh+0x22>
     72c:	83 36       	cpi	r24, 0x63	; 99
     72e:	99 f0       	breq	.+38     	; 0x756 <_Z11digitalReadh+0x3e>
     730:	84 36       	cpi	r24, 0x64	; 100
     732:	98 f4       	brcc	.+38     	; 0x75a <_Z11digitalReadh+0x42>
     734:	82 36       	cpi	r24, 0x62	; 98
     736:	f9 f4       	brne	.+62     	; 0x776 <_Z11digitalReadh+0x5e>
     738:	0c c0       	rjmp	.+24     	; 0x752 <_Z11digitalReadh+0x3a>
     73a:	88 36       	cpi	r24, 0x68	; 104
     73c:	a1 f0       	breq	.+40     	; 0x766 <_Z11digitalReadh+0x4e>
     73e:	89 36       	cpi	r24, 0x69	; 105
     740:	18 f4       	brcc	.+6      	; 0x748 <_Z11digitalReadh+0x30>
     742:	87 36       	cpi	r24, 0x67	; 103
     744:	c1 f4       	brne	.+48     	; 0x776 <_Z11digitalReadh+0x5e>
     746:	0d c0       	rjmp	.+26     	; 0x762 <_Z11digitalReadh+0x4a>
     748:	8a 36       	cpi	r24, 0x6A	; 106
     74a:	81 f0       	breq	.+32     	; 0x76c <_Z11digitalReadh+0x54>
     74c:	8c 36       	cpi	r24, 0x6C	; 108
     74e:	99 f4       	brne	.+38     	; 0x776 <_Z11digitalReadh+0x5e>
     750:	10 c0       	rjmp	.+32     	; 0x772 <_Z11digitalReadh+0x5a>
         {

	          case'b':
	                  z=PINB&(1<<c[pInno]);
     752:	83 b1       	in	r24, 0x03	; 3
			           break;
     754:	08 95       	ret
	          case'c':
	                  z=PINC&(1<<c[pInno]);
     756:	86 b1       	in	r24, 0x06	; 6
			          break;
     758:	08 95       	ret
	          case'd':
	                  z=PIND&(1<<c[pInno]);
     75a:	89 b1       	in	r24, 0x09	; 9
			          break;
     75c:	08 95       	ret

		      case'e':
	                   z=PINE&(1<<c[pInno]);
     75e:	8c b1       	in	r24, 0x0c	; 12
			           break;
     760:	08 95       	ret

			     case'g':
	                   z=PING&(1<<c[pInno]);
     762:	82 b3       	in	r24, 0x12	; 18
			           break;
     764:	08 95       	ret
			 case'h':
	                  z=PINH&(1<<c[pInno]);
     766:	80 91 00 01 	lds	r24, 0x0100
			           break;
     76a:	08 95       	ret

			     case'j':
	                   z=PINJ&(1<<c[pInno]);
     76c:	80 91 03 01 	lds	r24, 0x0103
			           break;
     770:	08 95       	ret
				     case'l':
	                   z=PINL&(1<<c[pInno]);
     772:	80 91 09 01 	lds	r24, 0x0109
			           break;
					   return z;
	     }
}
     776:	08 95       	ret

00000778 <_Z20microsecondsToInchesm>:
{
  // According to Parallax's datasheet for the PING))), there are 73.746
  // microseconds per inch (i.e. sound travels at 1130 feet per second).
  // This gives the distance travelled by the ping, outbound and return,
  // so we divide by 2 to get the distance of the obstacle.
  return (mIcroseconds*0.00669/ 2);
     778:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <__floatunsisf>
     77c:	2a ec       	ldi	r18, 0xCA	; 202
     77e:	37 e3       	ldi	r19, 0x37	; 55
     780:	4b ed       	ldi	r20, 0xDB	; 219
     782:	5b e3       	ldi	r21, 0x3B	; 59
     784:	0e 94 4e 10 	call	0x209c	; 0x209c <__mulsf3>
     788:	20 e0       	ldi	r18, 0x00	; 0
     78a:	30 e0       	ldi	r19, 0x00	; 0
     78c:	40 e0       	ldi	r20, 0x00	; 0
     78e:	5f e3       	ldi	r21, 0x3F	; 63
     790:	0e 94 4e 10 	call	0x209c	; 0x209c <__mulsf3>
     794:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <__fixunssfsi>
}
     798:	08 95       	ret

0000079a <_Z25microsecondsToCentimetersm>:
long unsigned int microsecondsToCentimeters(long unsigned int microseconds)
{
  // The speed of sound is 340 m/s or 29 microseconds per centimeter.
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
     79a:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <__floatunsisf>
     79e:	2b e7       	ldi	r18, 0x7B	; 123
     7a0:	34 e1       	ldi	r19, 0x14	; 20
     7a2:	4e e2       	ldi	r20, 0x2E	; 46
     7a4:	5e e3       	ldi	r21, 0x3E	; 62
     7a6:	0e 94 4e 10 	call	0x209c	; 0x209c <__mulsf3>
     7aa:	20 e0       	ldi	r18, 0x00	; 0
     7ac:	30 e0       	ldi	r19, 0x00	; 0
     7ae:	40 e0       	ldi	r20, 0x00	; 0
     7b0:	5f e3       	ldi	r21, 0x3F	; 63
     7b2:	0e 94 4e 10 	call	0x209c	; 0x209c <__mulsf3>
     7b6:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <__fixunssfsi>
}
     7ba:	08 95       	ret

000007bc <_Z7initADCv>:
Serial1 Serial1;
Serial2 Serial2;
Serial3 Serial3;
void initADC()
{
	ADMUX=(1<<REFS0);				//Aref=AVcc
     7bc:	80 e4       	ldi	r24, 0x40	; 64
     7be:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1);		//ADC enabled, Prescaler 64
     7c2:	86 e8       	ldi	r24, 0x86	; 134
     7c4:	80 93 7a 00 	sts	0x007A, r24
}
     7c8:	08 95       	ret

000007ca <_Z10analogReadi>:

int analogRead(int (pInno))
{
     7ca:	0f 93       	push	r16
     7cc:	1f 93       	push	r17
     7ce:	cf 93       	push	r28
     7d0:	df 93       	push	r29
     7d2:	8c 01       	movw	r16, r24
        //prescalar set to default
  	initADC();
     7d4:	0e 94 de 03 	call	0x7bc	; 0x7bc <_Z7initADCv>
  	ADMUX=(1<<REFS0)|(0<<REFS1);
     7d8:	cc e7       	ldi	r28, 0x7C	; 124
     7da:	d0 e0       	ldi	r29, 0x00	; 0
     7dc:	80 e4       	ldi	r24, 0x40	; 64
     7de:	88 83       	st	Y, r24
  	ADCSRA|=(1<<ADEN);
     7e0:	ea e7       	ldi	r30, 0x7A	; 122
     7e2:	f0 e0       	ldi	r31, 0x00	; 0
     7e4:	80 81       	ld	r24, Z
     7e6:	80 68       	ori	r24, 0x80	; 128
     7e8:	80 83       	st	Z, r24
    ADMUX|=(pInno%8);//chose value from 0 to 7 to chose adc pin accordingly
     7ea:	28 81       	ld	r18, Y
     7ec:	c8 01       	movw	r24, r16
     7ee:	68 e0       	ldi	r22, 0x08	; 8
     7f0:	70 e0       	ldi	r23, 0x00	; 0
     7f2:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <__divmodhi4>
     7f6:	28 2b       	or	r18, r24
     7f8:	28 83       	st	Y, r18
    ADCSRA|=(1<<ADEN);
     7fa:	80 81       	ld	r24, Z
     7fc:	80 68       	ori	r24, 0x80	; 128
     7fe:	80 83       	st	Z, r24
    ADCSRA|=(1<<ADSC);
     800:	80 81       	ld	r24, Z
     802:	80 64       	ori	r24, 0x40	; 64
     804:	80 83       	st	Z, r24
	while(ADCSRA&(1<<ADSC));
     806:	80 81       	ld	r24, Z
     808:	86 fd       	sbrc	r24, 6
     80a:	fd cf       	rjmp	.-6      	; 0x806 <_Z10analogReadi+0x3c>
	return (ADC);
     80c:	20 91 78 00 	lds	r18, 0x0078
     810:	30 91 79 00 	lds	r19, 0x0079
}
     814:	82 2f       	mov	r24, r18
     816:	93 2f       	mov	r25, r19
     818:	df 91       	pop	r29
     81a:	cf 91       	pop	r28
     81c:	1f 91       	pop	r17
     81e:	0f 91       	pop	r16
     820:	08 95       	ret

00000822 <_Z11analogWritehh>:

void analogWrite(uint8_t pInno,uint8_t dUtycY)
{
  switch(pInno)
     822:	89 30       	cpi	r24, 0x09	; 9
     824:	09 f4       	brne	.+2      	; 0x828 <_Z11analogWritehh+0x6>
     826:	4a c0       	rjmp	.+148    	; 0x8bc <_Z11analogWritehh+0x9a>
     828:	8a 30       	cpi	r24, 0x0A	; 10
     82a:	98 f4       	brcc	.+38     	; 0x852 <_Z11analogWritehh+0x30>
     82c:	85 30       	cpi	r24, 0x05	; 5
     82e:	09 f4       	brne	.+2      	; 0x832 <_Z11analogWritehh+0x10>
     830:	4e c0       	rjmp	.+156    	; 0x8ce <_Z11analogWritehh+0xac>
     832:	86 30       	cpi	r24, 0x06	; 6
     834:	38 f4       	brcc	.+14     	; 0x844 <_Z11analogWritehh+0x22>
     836:	82 30       	cpi	r24, 0x02	; 2
     838:	09 f4       	brne	.+2      	; 0x83c <_Z11analogWritehh+0x1a>
     83a:	55 c0       	rjmp	.+170    	; 0x8e6 <_Z11analogWritehh+0xc4>
     83c:	84 30       	cpi	r24, 0x04	; 4
     83e:	09 f0       	breq	.+2      	; 0x842 <_Z11analogWritehh+0x20>
     840:	a9 c0       	rjmp	.+338    	; 0x994 <_Z11analogWritehh+0x172>
     842:	8a c0       	rjmp	.+276    	; 0x958 <_Z11analogWritehh+0x136>
     844:	86 30       	cpi	r24, 0x06	; 6
     846:	09 f4       	brne	.+2      	; 0x84a <_Z11analogWritehh+0x28>
     848:	8e c0       	rjmp	.+284    	; 0x966 <_Z11analogWritehh+0x144>
     84a:	87 30       	cpi	r24, 0x07	; 7
     84c:	09 f0       	breq	.+2      	; 0x850 <_Z11analogWritehh+0x2e>
     84e:	a2 c0       	rjmp	.+324    	; 0x994 <_Z11analogWritehh+0x172>
     850:	96 c0       	rjmp	.+300    	; 0x97e <_Z11analogWritehh+0x15c>
     852:	8c 30       	cpi	r24, 0x0C	; 12
     854:	f1 f0       	breq	.+60     	; 0x892 <_Z11analogWritehh+0x70>
     856:	8d 30       	cpi	r24, 0x0D	; 13
     858:	30 f4       	brcc	.+12     	; 0x866 <_Z11analogWritehh+0x44>
     85a:	8a 30       	cpi	r24, 0x0A	; 10
     85c:	31 f1       	breq	.+76     	; 0x8aa <_Z11analogWritehh+0x88>
     85e:	8b 30       	cpi	r24, 0x0B	; 11
     860:	09 f0       	breq	.+2      	; 0x864 <_Z11analogWritehh+0x42>
     862:	98 c0       	rjmp	.+304    	; 0x994 <_Z11analogWritehh+0x172>
     864:	0a c0       	rjmp	.+20     	; 0x87a <_Z11analogWritehh+0x58>
     866:	8d 32       	cpi	r24, 0x2D	; 45
     868:	09 f4       	brne	.+2      	; 0x86c <_Z11analogWritehh+0x4a>
     86a:	64 c0       	rjmp	.+200    	; 0x934 <_Z11analogWritehh+0x112>
     86c:	8e 32       	cpi	r24, 0x2E	; 46
     86e:	09 f4       	brne	.+2      	; 0x872 <_Z11analogWritehh+0x50>
     870:	55 c0       	rjmp	.+170    	; 0x91c <_Z11analogWritehh+0xfa>
     872:	8d 30       	cpi	r24, 0x0D	; 13
     874:	09 f0       	breq	.+2      	; 0x878 <_Z11analogWritehh+0x56>
     876:	8e c0       	rjmp	.+284    	; 0x994 <_Z11analogWritehh+0x172>
     878:	69 c0       	rjmp	.+210    	; 0x94c <_Z11analogWritehh+0x12a>
  {
	  case 11:
		   TCCR1A=(1<<WGM10)|(1<<WGM12)|(1<<COM1A1);
     87a:	89 e8       	ldi	r24, 0x89	; 137
     87c:	80 93 80 00 	sts	0x0080, r24
		   TCCR1B=(1<<CS11)|(1<<CS10);
     880:	83 e0       	ldi	r24, 0x03	; 3
     882:	80 93 81 00 	sts	0x0081, r24
		   OCR1A=dUtycY;
     886:	70 e0       	ldi	r23, 0x00	; 0
     888:	70 93 89 00 	sts	0x0089, r23
     88c:	60 93 88 00 	sts	0x0088, r22
		   break;
     890:	08 95       	ret
	  case 12:
		  TCCR1A=(1<<WGM10)|(1<<WGM12)|(1<<COM1B1);
     892:	89 e2       	ldi	r24, 0x29	; 41
     894:	80 93 80 00 	sts	0x0080, r24
		  TCCR1B=(1<<CS11)|(1<<CS10);
     898:	83 e0       	ldi	r24, 0x03	; 3
     89a:	80 93 81 00 	sts	0x0081, r24
		  OCR1B=dUtycY;
     89e:	70 e0       	ldi	r23, 0x00	; 0
     8a0:	70 93 8b 00 	sts	0x008B, r23
     8a4:	60 93 8a 00 	sts	0x008A, r22
		  break;
     8a8:	08 95       	ret
	  case 10:
		  TCCR2A=(1<<COM2A1)|(1<<WGM21)|(1<<WGM20);
     8aa:	83 e8       	ldi	r24, 0x83	; 131
     8ac:	80 93 b0 00 	sts	0x00B0, r24
		  TCCR2B=(1<<CS20);
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	80 93 b1 00 	sts	0x00B1, r24
		  OCR2A=dUtycY;
     8b6:	60 93 b3 00 	sts	0x00B3, r22
		  break;
     8ba:	08 95       	ret
	  case 9:
		   TCCR2A=(1<<WGM21)|(1<<WGM20)|(1<<COM2B1);
     8bc:	83 e2       	ldi	r24, 0x23	; 35
     8be:	80 93 b0 00 	sts	0x00B0, r24
		   TCCR2B=(1<<CS20);
     8c2:	81 e0       	ldi	r24, 0x01	; 1
     8c4:	80 93 b1 00 	sts	0x00B1, r24
		   OCR2B=dUtycY;
     8c8:	60 93 b4 00 	sts	0x00B4, r22
		   break;
     8cc:	08 95       	ret
	  case 5:
		  TCCR3A=(1<<WGM32)|(1<<WGM30)|(1<<COM3A1);
     8ce:	89 e8       	ldi	r24, 0x89	; 137
     8d0:	80 93 90 00 	sts	0x0090, r24
		  TCCR3B=(1<<CS30);
     8d4:	81 e0       	ldi	r24, 0x01	; 1
     8d6:	80 93 91 00 	sts	0x0091, r24
		  OCR3A=dUtycY;
     8da:	70 e0       	ldi	r23, 0x00	; 0
     8dc:	70 93 99 00 	sts	0x0099, r23
     8e0:	60 93 98 00 	sts	0x0098, r22
		  break;
     8e4:	08 95       	ret
	  case 2:
	  	  DDRE|=(1<<PE4);	
     8e6:	6c 9a       	sbi	0x0d, 4	; 13
		  TCCR3A=(1<<WGM32)|(1<<WGM30)|(1<<COM3B1);
     8e8:	89 e2       	ldi	r24, 0x29	; 41
     8ea:	80 93 90 00 	sts	0x0090, r24
		  TCCR3B=(1<<CS30);
     8ee:	81 e0       	ldi	r24, 0x01	; 1
     8f0:	80 93 91 00 	sts	0x0091, r24
		  OCR3B=dUtycY;
     8f4:	86 2f       	mov	r24, r22
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	90 93 9b 00 	sts	0x009B, r25
     8fc:	80 93 9a 00 	sts	0x009A, r24
		UCSR0C = (1<<USBS0)|(3<<UCSZ00);
	}
	/* Set frame format: 8data, 2stop bit */
	void write( unsigned char dAta ){
		/* Wait for empty transmit buffer */
		while ((UCSR0A & (1<<UDRE0))==0);
     900:	e0 ec       	ldi	r30, 0xC0	; 192
     902:	f0 e0       	ldi	r31, 0x00	; 0
     904:	80 81       	ld	r24, Z
     906:	85 ff       	sbrs	r24, 5
     908:	fd cf       	rjmp	.-6      	; 0x904 <_Z11analogWritehh+0xe2>
		/* Put data into buffer, sends the data */
		UDR0 = dAta;
     90a:	60 93 c6 00 	sts	0x00C6, r22
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     90e:	87 ea       	ldi	r24, 0xA7	; 167
     910:	91 e6       	ldi	r25, 0x61	; 97
     912:	01 97       	sbiw	r24, 0x01	; 1
     914:	f1 f7       	brne	.-4      	; 0x912 <_Z11analogWritehh+0xf0>
     916:	00 c0       	rjmp	.+0      	; 0x918 <_Z11analogWritehh+0xf6>
     918:	00 00       	nop
	  	  DDRE|=(1<<PE4);	
		  TCCR3A=(1<<WGM32)|(1<<WGM30)|(1<<COM3B1);
		  TCCR3B=(1<<CS30);
		  OCR3B=dUtycY;
		  Serial.write(dUtycY);
		  break;
     91a:	08 95       	ret
	  case 46:
		  TCCR5A=(1<<WGM52)|(1<<WGM50)|(1<<COM5A1);
     91c:	89 e8       	ldi	r24, 0x89	; 137
     91e:	80 93 20 01 	sts	0x0120, r24
		  TCCR5B=(1<<CS50);
     922:	81 e0       	ldi	r24, 0x01	; 1
     924:	80 93 21 01 	sts	0x0121, r24
		  OCR5A=dUtycY;
     928:	70 e0       	ldi	r23, 0x00	; 0
     92a:	70 93 29 01 	sts	0x0129, r23
     92e:	60 93 28 01 	sts	0x0128, r22
		  break;
     932:	08 95       	ret
	  case 45:
		  TCCR5A=(1<<WGM52)|(1<<WGM50)|(1<<COM5B1);
     934:	89 e2       	ldi	r24, 0x29	; 41
     936:	80 93 20 01 	sts	0x0120, r24
		  TCCR5B=(1<<CS50);
     93a:	81 e0       	ldi	r24, 0x01	; 1
     93c:	80 93 21 01 	sts	0x0121, r24
		  OCR5B=dUtycY;
     940:	70 e0       	ldi	r23, 0x00	; 0
     942:	70 93 2b 01 	sts	0x012B, r23
     946:	60 93 2a 01 	sts	0x012A, r22
		  break;
     94a:	08 95       	ret
	  case 13:
		  TCCR0A=(1<<WGM10)|(1<<WGM00)|(1<<COM0A1);
     94c:	81 e8       	ldi	r24, 0x81	; 129
     94e:	84 bd       	out	0x24, r24	; 36
		  TCCR0B=(1<<CS00);
     950:	81 e0       	ldi	r24, 0x01	; 1
     952:	85 bd       	out	0x25, r24	; 37
		  OCR0A=dUtycY;
     954:	67 bd       	out	0x27, r22	; 39
		  break;
     956:	08 95       	ret
	  case 4:
	  	DDRG|=(1<<PG5);
     958:	9d 9a       	sbi	0x13, 5	; 19
		TCCR0A=(1<<WGM10)|(1<<WGM00)|(1<<COM0B1);
     95a:	81 e2       	ldi	r24, 0x21	; 33
     95c:	84 bd       	out	0x24, r24	; 36
		TCCR0B=(1<<CS00);
     95e:	81 e0       	ldi	r24, 0x01	; 1
     960:	85 bd       	out	0x25, r24	; 37
		OCR0B=dUtycY;
     962:	68 bd       	out	0x28, r22	; 40
		
		break;
     964:	08 95       	ret

	  case 6:
		  TCCR4A=(1<<WGM42)|(1<<WGM40)|(1<<COM4A1);
     966:	89 e8       	ldi	r24, 0x89	; 137
     968:	80 93 a0 00 	sts	0x00A0, r24
		  TCCR4B=(1<<CS40);
     96c:	81 e0       	ldi	r24, 0x01	; 1
     96e:	80 93 a1 00 	sts	0x00A1, r24
		  OCR4A=dUtycY;
     972:	70 e0       	ldi	r23, 0x00	; 0
     974:	70 93 a9 00 	sts	0x00A9, r23
     978:	60 93 a8 00 	sts	0x00A8, r22
		  break;
     97c:	08 95       	ret
	  case 7:
		  TCCR4A=(1<<WGM42)|(1<<WGM40)|(1<<COM4B1);
     97e:	89 e2       	ldi	r24, 0x29	; 41
     980:	80 93 a0 00 	sts	0x00A0, r24
		  TCCR4B=(1<<CS40);
     984:	81 e0       	ldi	r24, 0x01	; 1
     986:	80 93 a1 00 	sts	0x00A1, r24
		  OCR4B=dUtycY;
     98a:	70 e0       	ldi	r23, 0x00	; 0
     98c:	70 93 ab 00 	sts	0x00AB, r23
     990:	60 93 aa 00 	sts	0x00AA, r22
     994:	08 95       	ret

00000996 <_Z6millisv>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     996:	f8 94       	cli
{
    unsigned long millis_return;

    // Ensure this cannot be disrupted
    ATOMIC_BLOCK(ATOMIC_FORCEON) {
        millis_return = tImer2_millis;
     998:	20 91 be 02 	lds	r18, 0x02BE
     99c:	30 91 bf 02 	lds	r19, 0x02BF
     9a0:	40 91 c0 02 	lds	r20, 0x02C0
     9a4:	50 91 c1 02 	lds	r21, 0x02C1
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
     9a8:	78 94       	sei
    }

    return millis_return;
}
     9aa:	62 2f       	mov	r22, r18
     9ac:	73 2f       	mov	r23, r19
     9ae:	84 2f       	mov	r24, r20
     9b0:	95 2f       	mov	r25, r21
     9b2:	08 95       	ret

000009b4 <__vector_13>:

ISR (TIMER2_COMPA_vect)
{
     9b4:	1f 92       	push	r1
     9b6:	0f 92       	push	r0
     9b8:	0f b6       	in	r0, 0x3f	; 63
     9ba:	0f 92       	push	r0
     9bc:	11 24       	eor	r1, r1
     9be:	8f 93       	push	r24
     9c0:	9f 93       	push	r25
     9c2:	af 93       	push	r26
     9c4:	bf 93       	push	r27
    tImer2_millis++;
     9c6:	80 91 be 02 	lds	r24, 0x02BE
     9ca:	90 91 bf 02 	lds	r25, 0x02BF
     9ce:	a0 91 c0 02 	lds	r26, 0x02C0
     9d2:	b0 91 c1 02 	lds	r27, 0x02C1
     9d6:	01 96       	adiw	r24, 0x01	; 1
     9d8:	a1 1d       	adc	r26, r1
     9da:	b1 1d       	adc	r27, r1
     9dc:	80 93 be 02 	sts	0x02BE, r24
     9e0:	90 93 bf 02 	sts	0x02BF, r25
     9e4:	a0 93 c0 02 	sts	0x02C0, r26
     9e8:	b0 93 c1 02 	sts	0x02C1, r27
}
     9ec:	bf 91       	pop	r27
     9ee:	af 91       	pop	r26
     9f0:	9f 91       	pop	r25
     9f2:	8f 91       	pop	r24
     9f4:	0f 90       	pop	r0
     9f6:	0f be       	out	0x3f, r0	; 63
     9f8:	0f 90       	pop	r0
     9fa:	1f 90       	pop	r1
     9fc:	18 95       	reti

000009fe <_Z5tinitv>:

void tinit()
{
	TCCR2B |= (1 << WGM22) | (1 << CS21);
     9fe:	e1 eb       	ldi	r30, 0xB1	; 177
     a00:	f0 e0       	ldi	r31, 0x00	; 0
     a02:	80 81       	ld	r24, Z
     a04:	8a 60       	ori	r24, 0x0A	; 10
     a06:	80 83       	st	Z, r24

    // Load the high byte, then the low byte
    // into the output compare
    OCR2A = CTC_MATCH_OVERFLOW;
     a08:	8d e7       	ldi	r24, 0x7D	; 125
     a0a:	80 93 b3 00 	sts	0x00B3, r24

    // Enable the compare match interrupt
    TIMSK2 |= (1 << OCIE2A);
     a0e:	e0 e7       	ldi	r30, 0x70	; 112
     a10:	f0 e0       	ldi	r31, 0x00	; 0
     a12:	80 81       	ld	r24, Z
     a14:	82 60       	ori	r24, 0x02	; 2
     a16:	80 83       	st	Z, r24

    // Now enable global interrupts
    sei();
     a18:	78 94       	sei
}
     a1a:	08 95       	ret

00000a1c <_Z5delaym>:


void delay(unsigned long mIllisec)
{
     a1c:	9b 01       	movw	r18, r22
     a1e:	ac 01       	movw	r20, r24
	int i;
	for(i=0;i<mIllisec;i++)
     a20:	61 15       	cp	r22, r1
     a22:	71 05       	cpc	r23, r1
     a24:	81 05       	cpc	r24, r1
     a26:	91 05       	cpc	r25, r1
     a28:	a1 f0       	breq	.+40     	; 0xa52 <_Z5delaym+0x36>
     a2a:	60 e0       	ldi	r22, 0x00	; 0
     a2c:	70 e0       	ldi	r23, 0x00	; 0
     a2e:	89 ef       	ldi	r24, 0xF9	; 249
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	01 97       	sbiw	r24, 0x01	; 1
     a34:	f1 f7       	brne	.-4      	; 0xa32 <_Z5delaym+0x16>
     a36:	00 c0       	rjmp	.+0      	; 0xa38 <_Z5delaym+0x1c>
     a38:	00 00       	nop
     a3a:	6f 5f       	subi	r22, 0xFF	; 255
     a3c:	7f 4f       	sbci	r23, 0xFF	; 255
     a3e:	cb 01       	movw	r24, r22
     a40:	aa 27       	eor	r26, r26
     a42:	97 fd       	sbrc	r25, 7
     a44:	a0 95       	com	r26
     a46:	ba 2f       	mov	r27, r26
     a48:	82 17       	cp	r24, r18
     a4a:	93 07       	cpc	r25, r19
     a4c:	a4 07       	cpc	r26, r20
     a4e:	b5 07       	cpc	r27, r21
     a50:	70 f3       	brcs	.-36     	; 0xa2e <_Z5delaym+0x12>
     a52:	08 95       	ret

00000a54 <_Z17delayMicrosecondsm>:
	}
	return;
}

void delayMicroseconds(unsigned long mIcrosec)
{
     a54:	9b 01       	movw	r18, r22
     a56:	ac 01       	movw	r20, r24
	int i;
	for(i=0;i<mIcrosec;i++)
     a58:	61 15       	cp	r22, r1
     a5a:	71 05       	cpc	r23, r1
     a5c:	81 05       	cpc	r24, r1
     a5e:	91 05       	cpc	r25, r1
     a60:	79 f0       	breq	.+30     	; 0xa80 <_Z17delayMicrosecondsm+0x2c>
     a62:	60 e0       	ldi	r22, 0x00	; 0
     a64:	70 e0       	ldi	r23, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a66:	00 00       	nop
     a68:	6f 5f       	subi	r22, 0xFF	; 255
     a6a:	7f 4f       	sbci	r23, 0xFF	; 255
     a6c:	cb 01       	movw	r24, r22
     a6e:	aa 27       	eor	r26, r26
     a70:	97 fd       	sbrc	r25, 7
     a72:	a0 95       	com	r26
     a74:	ba 2f       	mov	r27, r26
     a76:	82 17       	cp	r24, r18
     a78:	93 07       	cpc	r25, r19
     a7a:	a4 07       	cpc	r26, r20
     a7c:	b5 07       	cpc	r27, r21
     a7e:	98 f3       	brcs	.-26     	; 0xa66 <_Z17delayMicrosecondsm+0x12>
     a80:	08 95       	ret

00000a82 <_Z3maplllll>:
	}
	return;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
     a82:	2f 92       	push	r2
     a84:	3f 92       	push	r3
     a86:	4f 92       	push	r4
     a88:	5f 92       	push	r5
     a8a:	6f 92       	push	r6
     a8c:	7f 92       	push	r7
     a8e:	8f 92       	push	r8
     a90:	9f 92       	push	r9
     a92:	af 92       	push	r10
     a94:	bf 92       	push	r11
     a96:	cf 92       	push	r12
     a98:	df 92       	push	r13
     a9a:	ef 92       	push	r14
     a9c:	ff 92       	push	r15
     a9e:	0f 93       	push	r16
     aa0:	1f 93       	push	r17
     aa2:	df 93       	push	r29
     aa4:	cf 93       	push	r28
     aa6:	cd b7       	in	r28, 0x3d	; 61
     aa8:	de b7       	in	r29, 0x3e	; 62
     aaa:	dc 01       	movw	r26, r24
     aac:	cb 01       	movw	r24, r22
     aae:	39 01       	movw	r6, r18
     ab0:	4a 01       	movw	r8, r20
     ab2:	17 01       	movw	r2, r14
     ab4:	28 01       	movw	r4, r16
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
     ab6:	ee 88       	ldd	r14, Y+22	; 0x16
     ab8:	ff 88       	ldd	r15, Y+23	; 0x17
     aba:	08 8d       	ldd	r16, Y+24	; 0x18
     abc:	19 8d       	ldd	r17, Y+25	; 0x19
     abe:	ea 18       	sub	r14, r10
     ac0:	fb 08       	sbc	r15, r11
     ac2:	0c 09       	sbc	r16, r12
     ac4:	1d 09       	sbc	r17, r13
     ac6:	9c 01       	movw	r18, r24
     ac8:	ad 01       	movw	r20, r26
     aca:	26 19       	sub	r18, r6
     acc:	37 09       	sbc	r19, r7
     ace:	48 09       	sbc	r20, r8
     ad0:	59 09       	sbc	r21, r9
     ad2:	c8 01       	movw	r24, r16
     ad4:	b7 01       	movw	r22, r14
     ad6:	0e 94 b1 10 	call	0x2162	; 0x2162 <__mulsi3>
     ada:	a2 01       	movw	r20, r4
     adc:	91 01       	movw	r18, r2
     ade:	26 19       	sub	r18, r6
     ae0:	37 09       	sbc	r19, r7
     ae2:	48 09       	sbc	r20, r8
     ae4:	59 09       	sbc	r21, r9
     ae6:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <__divmodsi4>
     aea:	2a 0d       	add	r18, r10
     aec:	3b 1d       	adc	r19, r11
     aee:	4c 1d       	adc	r20, r12
     af0:	5d 1d       	adc	r21, r13
}
     af2:	62 2f       	mov	r22, r18
     af4:	73 2f       	mov	r23, r19
     af6:	84 2f       	mov	r24, r20
     af8:	95 2f       	mov	r25, r21
     afa:	cf 91       	pop	r28
     afc:	df 91       	pop	r29
     afe:	1f 91       	pop	r17
     b00:	0f 91       	pop	r16
     b02:	ff 90       	pop	r15
     b04:	ef 90       	pop	r14
     b06:	df 90       	pop	r13
     b08:	cf 90       	pop	r12
     b0a:	bf 90       	pop	r11
     b0c:	af 90       	pop	r10
     b0e:	9f 90       	pop	r9
     b10:	8f 90       	pop	r8
     b12:	7f 90       	pop	r7
     b14:	6f 90       	pop	r6
     b16:	5f 90       	pop	r5
     b18:	4f 90       	pop	r4
     b1a:	3f 90       	pop	r3
     b1c:	2f 90       	pop	r2
     b1e:	08 95       	ret

00000b20 <_Z9constrainlll>:

long constrain(long nUm, long lOwer, long uPper)
{
     b20:	ef 92       	push	r14
     b22:	ff 92       	push	r15
     b24:	0f 93       	push	r16
     b26:	1f 93       	push	r17
     b28:	dc 01       	movw	r26, r24
     b2a:	cb 01       	movw	r24, r22
	if(nUm>uPper){
     b2c:	e8 16       	cp	r14, r24
     b2e:	f9 06       	cpc	r15, r25
     b30:	0a 07       	cpc	r16, r26
     b32:	1b 07       	cpc	r17, r27
     b34:	5c f0       	brlt	.+22     	; 0xb4c <_Z9constrainlll+0x2c>
     b36:	e2 2e       	mov	r14, r18
     b38:	f3 2e       	mov	r15, r19
     b3a:	04 2f       	mov	r16, r20
     b3c:	15 2f       	mov	r17, r21
     b3e:	e8 16       	cp	r14, r24
     b40:	f9 06       	cpc	r15, r25
     b42:	0a 07       	cpc	r16, r26
     b44:	1b 07       	cpc	r17, r27
     b46:	14 f4       	brge	.+4      	; 0xb4c <_Z9constrainlll+0x2c>
     b48:	7c 01       	movw	r14, r24
     b4a:	8d 01       	movw	r16, r26
    else if(nUm<lOwer){
      return lOwer;
  	}
    else 
    return nUm;
}
     b4c:	6e 2d       	mov	r22, r14
     b4e:	7f 2d       	mov	r23, r15
     b50:	80 2f       	mov	r24, r16
     b52:	91 2f       	mov	r25, r17
     b54:	1f 91       	pop	r17
     b56:	0f 91       	pop	r16
     b58:	ff 90       	pop	r15
     b5a:	ef 90       	pop	r14
     b5c:	08 95       	ret

00000b5e <_Z15attachIntteruptiPFvvEi>:
void attachIntterupt(int pIn, void (*iSrfunc)(void), int cOmpare)		//cOmpare:LOW=0,HIGH1,RISING=2,FALLING=3
{
	sei();
     b5e:	78 94       	sei
	cAllisr=iSrfunc;
     b60:	70 93 c3 02 	sts	0x02C3, r23
     b64:	60 93 c2 02 	sts	0x02C2, r22
	switch(pIn)	  //enabling interrupt pin
     b68:	83 30       	cpi	r24, 0x03	; 3
     b6a:	91 05       	cpc	r25, r1
     b6c:	09 f4       	brne	.+2      	; 0xb70 <_Z15attachIntteruptiPFvvEi+0x12>
     b6e:	7d c0       	rjmp	.+250    	; 0xc6a <_Z15attachIntteruptiPFvvEi+0x10c>
     b70:	84 30       	cpi	r24, 0x04	; 4
     b72:	91 05       	cpc	r25, r1
     b74:	54 f4       	brge	.+20     	; 0xb8a <_Z15attachIntteruptiPFvvEi+0x2c>
     b76:	81 30       	cpi	r24, 0x01	; 1
     b78:	91 05       	cpc	r25, r1
     b7a:	c9 f1       	breq	.+114    	; 0xbee <_Z15attachIntteruptiPFvvEi+0x90>
     b7c:	82 30       	cpi	r24, 0x02	; 2
     b7e:	91 05       	cpc	r25, r1
     b80:	0c f0       	brlt	.+2      	; 0xb84 <_Z15attachIntteruptiPFvvEi+0x26>
     b82:	54 c0       	rjmp	.+168    	; 0xc2c <_Z15attachIntteruptiPFvvEi+0xce>
     b84:	00 97       	sbiw	r24, 0x00	; 0
     b86:	91 f0       	breq	.+36     	; 0xbac <_Z15attachIntteruptiPFvvEi+0x4e>
     b88:	0b c1       	rjmp	.+534    	; 0xda0 <_Z15attachIntteruptiPFvvEi+0x242>
     b8a:	85 30       	cpi	r24, 0x05	; 5
     b8c:	91 05       	cpc	r25, r1
     b8e:	09 f4       	brne	.+2      	; 0xb92 <_Z15attachIntteruptiPFvvEi+0x34>
     b90:	aa c0       	rjmp	.+340    	; 0xce6 <_Z15attachIntteruptiPFvvEi+0x188>
     b92:	85 30       	cpi	r24, 0x05	; 5
     b94:	91 05       	cpc	r25, r1
     b96:	0c f4       	brge	.+2      	; 0xb9a <_Z15attachIntteruptiPFvvEi+0x3c>
     b98:	87 c0       	rjmp	.+270    	; 0xca8 <_Z15attachIntteruptiPFvvEi+0x14a>
     b9a:	86 30       	cpi	r24, 0x06	; 6
     b9c:	91 05       	cpc	r25, r1
     b9e:	09 f4       	brne	.+2      	; 0xba2 <_Z15attachIntteruptiPFvvEi+0x44>
     ba0:	c1 c0       	rjmp	.+386    	; 0xd24 <_Z15attachIntteruptiPFvvEi+0x1c6>
     ba2:	87 30       	cpi	r24, 0x07	; 7
     ba4:	91 05       	cpc	r25, r1
     ba6:	09 f0       	breq	.+2      	; 0xbaa <_Z15attachIntteruptiPFvvEi+0x4c>
     ba8:	fb c0       	rjmp	.+502    	; 0xda0 <_Z15attachIntteruptiPFvvEi+0x242>
     baa:	db c0       	rjmp	.+438    	; 0xd62 <_Z15attachIntteruptiPFvvEi+0x204>
	{
		case 0:
		EIMSK|=1<<INT0;
     bac:	e8 9a       	sbi	0x1d, 0	; 29
		switch(cOmpare){
     bae:	43 30       	cpi	r20, 0x03	; 3
     bb0:	51 05       	cpc	r21, r1
     bb2:	61 f0       	breq	.+24     	; 0xbcc <_Z15attachIntteruptiPFvvEi+0x6e>
     bb4:	44 30       	cpi	r20, 0x04	; 4
     bb6:	51 05       	cpc	r21, r1
     bb8:	79 f0       	breq	.+30     	; 0xbd8 <_Z15attachIntteruptiPFvvEi+0x7a>
     bba:	42 30       	cpi	r20, 0x02	; 2
     bbc:	51 05       	cpc	r21, r1
     bbe:	91 f4       	brne	.+36     	; 0xbe4 <_Z15attachIntteruptiPFvvEi+0x86>
			case 2:
			EICRA|=(1<<ISC00)|(1<<ISC01);
     bc0:	e9 e6       	ldi	r30, 0x69	; 105
     bc2:	f0 e0       	ldi	r31, 0x00	; 0
     bc4:	80 81       	ld	r24, Z
     bc6:	83 60       	ori	r24, 0x03	; 3
     bc8:	80 83       	st	Z, r24
			break;
     bca:	08 95       	ret
			case 3:
			EICRA|=(0<<ISC00)|(1<<ISC01);
     bcc:	e9 e6       	ldi	r30, 0x69	; 105
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	80 81       	ld	r24, Z
     bd2:	82 60       	ori	r24, 0x02	; 2
     bd4:	80 83       	st	Z, r24
			break;
     bd6:	08 95       	ret
			case 4:
			EICRA|=(1<<ISC00)|(0<<ISC01);
     bd8:	e9 e6       	ldi	r30, 0x69	; 105
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	80 81       	ld	r24, Z
     bde:	81 60       	ori	r24, 0x01	; 1
     be0:	80 83       	st	Z, r24
			break;
     be2:	08 95       	ret
			default:
			EICRA|=(0<<ISC00)|(0<<ISC01);
     be4:	e9 e6       	ldi	r30, 0x69	; 105
     be6:	f0 e0       	ldi	r31, 0x00	; 0
     be8:	80 81       	ld	r24, Z
     bea:	80 83       	st	Z, r24
     bec:	08 95       	ret
		}
		break;

		case 1:
		EIMSK|=1<<INT1;
     bee:	e9 9a       	sbi	0x1d, 1	; 29
                switch(cOmpare)
     bf0:	43 30       	cpi	r20, 0x03	; 3
     bf2:	51 05       	cpc	r21, r1
     bf4:	61 f0       	breq	.+24     	; 0xc0e <_Z15attachIntteruptiPFvvEi+0xb0>
     bf6:	44 30       	cpi	r20, 0x04	; 4
     bf8:	51 05       	cpc	r21, r1
     bfa:	69 f0       	breq	.+26     	; 0xc16 <_Z15attachIntteruptiPFvvEi+0xb8>
     bfc:	42 30       	cpi	r20, 0x02	; 2
     bfe:	51 05       	cpc	r21, r1
     c00:	81 f4       	brne	.+32     	; 0xc22 <_Z15attachIntteruptiPFvvEi+0xc4>
		{
			case 2:
			EICRA|=(1<<ISC10)|(1<<ISC11);
     c02:	e9 e6       	ldi	r30, 0x69	; 105
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	80 81       	ld	r24, Z
     c08:	8c 60       	ori	r24, 0x0C	; 12
     c0a:	80 83       	st	Z, r24
			break;
     c0c:	08 95       	ret
			case 3:
			EICRA=(0<<ISC10)|(1<<ISC11);
     c0e:	88 e0       	ldi	r24, 0x08	; 8
     c10:	80 93 69 00 	sts	0x0069, r24
			break;
     c14:	08 95       	ret
			case 4:
			EICRA|=(1<<ISC10)|(0<<ISC11);
     c16:	e9 e6       	ldi	r30, 0x69	; 105
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	80 81       	ld	r24, Z
     c1c:	84 60       	ori	r24, 0x04	; 4
     c1e:	80 83       	st	Z, r24
			break;
     c20:	08 95       	ret
			default:
			EICRA|=(0<<ISC10)|(0<<ISC11);
     c22:	e9 e6       	ldi	r30, 0x69	; 105
     c24:	f0 e0       	ldi	r31, 0x00	; 0
     c26:	80 81       	ld	r24, Z
     c28:	80 83       	st	Z, r24
     c2a:	08 95       	ret
		}
		break;

		case 2:
		EIMSK|=1<<INT2;
     c2c:	ea 9a       	sbi	0x1d, 2	; 29
		switch(cOmpare)
     c2e:	43 30       	cpi	r20, 0x03	; 3
     c30:	51 05       	cpc	r21, r1
     c32:	61 f0       	breq	.+24     	; 0xc4c <_Z15attachIntteruptiPFvvEi+0xee>
     c34:	44 30       	cpi	r20, 0x04	; 4
     c36:	51 05       	cpc	r21, r1
     c38:	69 f0       	breq	.+26     	; 0xc54 <_Z15attachIntteruptiPFvvEi+0xf6>
     c3a:	42 30       	cpi	r20, 0x02	; 2
     c3c:	51 05       	cpc	r21, r1
     c3e:	81 f4       	brne	.+32     	; 0xc60 <_Z15attachIntteruptiPFvvEi+0x102>
		{
			case 2:
			EICRA|=(1<<ISC20)|(1<<ISC21);
     c40:	e9 e6       	ldi	r30, 0x69	; 105
     c42:	f0 e0       	ldi	r31, 0x00	; 0
     c44:	80 81       	ld	r24, Z
     c46:	80 63       	ori	r24, 0x30	; 48
     c48:	80 83       	st	Z, r24
			break;
     c4a:	08 95       	ret
			case 3:
			EICRA=(0<<ISC20)|(1<<ISC21);
     c4c:	80 e2       	ldi	r24, 0x20	; 32
     c4e:	80 93 69 00 	sts	0x0069, r24
			break;
     c52:	08 95       	ret
			case 4:
			EICRA|=(1<<ISC20)|(0<<ISC21);
     c54:	e9 e6       	ldi	r30, 0x69	; 105
     c56:	f0 e0       	ldi	r31, 0x00	; 0
     c58:	80 81       	ld	r24, Z
     c5a:	80 61       	ori	r24, 0x10	; 16
     c5c:	80 83       	st	Z, r24
			break;
     c5e:	08 95       	ret
			default:
			EICRA|=(0<<ISC20)|(0<<ISC21);
     c60:	e9 e6       	ldi	r30, 0x69	; 105
     c62:	f0 e0       	ldi	r31, 0x00	; 0
     c64:	80 81       	ld	r24, Z
     c66:	80 83       	st	Z, r24
     c68:	08 95       	ret
		}
		break;

		case 3:
		EIMSK|=1<<INT3;
     c6a:	eb 9a       	sbi	0x1d, 3	; 29
		switch(cOmpare)
     c6c:	43 30       	cpi	r20, 0x03	; 3
     c6e:	51 05       	cpc	r21, r1
     c70:	61 f0       	breq	.+24     	; 0xc8a <_Z15attachIntteruptiPFvvEi+0x12c>
     c72:	44 30       	cpi	r20, 0x04	; 4
     c74:	51 05       	cpc	r21, r1
     c76:	69 f0       	breq	.+26     	; 0xc92 <_Z15attachIntteruptiPFvvEi+0x134>
     c78:	42 30       	cpi	r20, 0x02	; 2
     c7a:	51 05       	cpc	r21, r1
     c7c:	81 f4       	brne	.+32     	; 0xc9e <_Z15attachIntteruptiPFvvEi+0x140>
		{
			case 2:
			EICRA|=(1<<ISC30)|(1<<ISC31);
     c7e:	e9 e6       	ldi	r30, 0x69	; 105
     c80:	f0 e0       	ldi	r31, 0x00	; 0
     c82:	80 81       	ld	r24, Z
     c84:	80 6c       	ori	r24, 0xC0	; 192
     c86:	80 83       	st	Z, r24
			break;
     c88:	08 95       	ret
			case 3:
			EICRA=(0<<ISC30)|(1<<ISC31);
     c8a:	80 e8       	ldi	r24, 0x80	; 128
     c8c:	80 93 69 00 	sts	0x0069, r24
			break;
     c90:	08 95       	ret
			case 4:
			EICRA|=(1<<ISC30)|(0<<ISC31);
     c92:	e9 e6       	ldi	r30, 0x69	; 105
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	80 81       	ld	r24, Z
     c98:	80 64       	ori	r24, 0x40	; 64
     c9a:	80 83       	st	Z, r24
			break;
     c9c:	08 95       	ret
			default:
			EICRA|=(0<<ISC30)|(0<<ISC31);
     c9e:	e9 e6       	ldi	r30, 0x69	; 105
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	80 81       	ld	r24, Z
     ca4:	80 83       	st	Z, r24
     ca6:	08 95       	ret
		}
		break;

		case 4:
		EIMSK|=1<<INT4;
     ca8:	ec 9a       	sbi	0x1d, 4	; 29
                switch(cOmpare)
     caa:	43 30       	cpi	r20, 0x03	; 3
     cac:	51 05       	cpc	r21, r1
     cae:	61 f0       	breq	.+24     	; 0xcc8 <_Z15attachIntteruptiPFvvEi+0x16a>
     cb0:	44 30       	cpi	r20, 0x04	; 4
     cb2:	51 05       	cpc	r21, r1
     cb4:	69 f0       	breq	.+26     	; 0xcd0 <_Z15attachIntteruptiPFvvEi+0x172>
     cb6:	42 30       	cpi	r20, 0x02	; 2
     cb8:	51 05       	cpc	r21, r1
     cba:	81 f4       	brne	.+32     	; 0xcdc <_Z15attachIntteruptiPFvvEi+0x17e>
		{
			case 2:
			EICRB|=(1<<ISC40)|(1<<ISC41);
     cbc:	ea e6       	ldi	r30, 0x6A	; 106
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	80 81       	ld	r24, Z
     cc2:	83 60       	ori	r24, 0x03	; 3
     cc4:	80 83       	st	Z, r24
			break;
     cc6:	08 95       	ret
			case 3:
			EICRB=(0<<ISC40)|(1<<ISC41);
     cc8:	82 e0       	ldi	r24, 0x02	; 2
     cca:	80 93 6a 00 	sts	0x006A, r24
			break;
     cce:	08 95       	ret
			case 4:
			EICRB|=(1<<ISC40)|(0<<ISC41);
     cd0:	ea e6       	ldi	r30, 0x6A	; 106
     cd2:	f0 e0       	ldi	r31, 0x00	; 0
     cd4:	80 81       	ld	r24, Z
     cd6:	81 60       	ori	r24, 0x01	; 1
     cd8:	80 83       	st	Z, r24
			break;
     cda:	08 95       	ret
			default:
			EICRB|=(0<<ISC40)|(0<<ISC41);
     cdc:	ea e6       	ldi	r30, 0x6A	; 106
     cde:	f0 e0       	ldi	r31, 0x00	; 0
     ce0:	80 81       	ld	r24, Z
     ce2:	80 83       	st	Z, r24
     ce4:	08 95       	ret
		}
		break;

		case 5:
		EIMSK|=1<<INT5;
     ce6:	ed 9a       	sbi	0x1d, 5	; 29
		switch(cOmpare)
     ce8:	43 30       	cpi	r20, 0x03	; 3
     cea:	51 05       	cpc	r21, r1
     cec:	61 f0       	breq	.+24     	; 0xd06 <_Z15attachIntteruptiPFvvEi+0x1a8>
     cee:	44 30       	cpi	r20, 0x04	; 4
     cf0:	51 05       	cpc	r21, r1
     cf2:	69 f0       	breq	.+26     	; 0xd0e <_Z15attachIntteruptiPFvvEi+0x1b0>
     cf4:	42 30       	cpi	r20, 0x02	; 2
     cf6:	51 05       	cpc	r21, r1
     cf8:	81 f4       	brne	.+32     	; 0xd1a <_Z15attachIntteruptiPFvvEi+0x1bc>
		{
			case 2:
			EICRB|=(1<<ISC50)|(1<<ISC51);
     cfa:	ea e6       	ldi	r30, 0x6A	; 106
     cfc:	f0 e0       	ldi	r31, 0x00	; 0
     cfe:	80 81       	ld	r24, Z
     d00:	8c 60       	ori	r24, 0x0C	; 12
     d02:	80 83       	st	Z, r24
			break;
     d04:	08 95       	ret
			case 3:
			EICRB=(0<<ISC50)|(1<<ISC51);
     d06:	88 e0       	ldi	r24, 0x08	; 8
     d08:	80 93 6a 00 	sts	0x006A, r24
			break;
     d0c:	08 95       	ret
			case 4:
			EICRB|=(1<<ISC50)|(0<<ISC51);
     d0e:	ea e6       	ldi	r30, 0x6A	; 106
     d10:	f0 e0       	ldi	r31, 0x00	; 0
     d12:	80 81       	ld	r24, Z
     d14:	84 60       	ori	r24, 0x04	; 4
     d16:	80 83       	st	Z, r24
			break;
     d18:	08 95       	ret
			default:
                 	EICRB|=(0<<ISC40)|(0<<ISC41);
     d1a:	ea e6       	ldi	r30, 0x6A	; 106
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	80 81       	ld	r24, Z
     d20:	80 83       	st	Z, r24
     d22:	08 95       	ret

		}
		break;

		case 6:
		EIMSK|=1<<INT6;
     d24:	ee 9a       	sbi	0x1d, 6	; 29
	        switch(cOmpare)
     d26:	43 30       	cpi	r20, 0x03	; 3
     d28:	51 05       	cpc	r21, r1
     d2a:	61 f0       	breq	.+24     	; 0xd44 <_Z15attachIntteruptiPFvvEi+0x1e6>
     d2c:	44 30       	cpi	r20, 0x04	; 4
     d2e:	51 05       	cpc	r21, r1
     d30:	69 f0       	breq	.+26     	; 0xd4c <_Z15attachIntteruptiPFvvEi+0x1ee>
     d32:	42 30       	cpi	r20, 0x02	; 2
     d34:	51 05       	cpc	r21, r1
     d36:	81 f4       	brne	.+32     	; 0xd58 <_Z15attachIntteruptiPFvvEi+0x1fa>
		{
			case 2:
			EICRB|=(1<<ISC60)|(1<<ISC61);
     d38:	ea e6       	ldi	r30, 0x6A	; 106
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	80 81       	ld	r24, Z
     d3e:	80 63       	ori	r24, 0x30	; 48
     d40:	80 83       	st	Z, r24
			break;
     d42:	08 95       	ret
			case 3:
			EICRB=(0<<ISC60)|(1<<ISC61);
     d44:	80 e2       	ldi	r24, 0x20	; 32
     d46:	80 93 6a 00 	sts	0x006A, r24
			break;
     d4a:	08 95       	ret
			case 4:
			EICRB|=(1<<ISC60)|(0<<ISC61);
     d4c:	ea e6       	ldi	r30, 0x6A	; 106
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	80 81       	ld	r24, Z
     d52:	80 61       	ori	r24, 0x10	; 16
     d54:	80 83       	st	Z, r24
			break;
     d56:	08 95       	ret
			default:
			EICRB|=(0<<ISC60)|(0<<ISC61);
     d58:	ea e6       	ldi	r30, 0x6A	; 106
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	80 81       	ld	r24, Z
     d5e:	80 83       	st	Z, r24
     d60:	08 95       	ret

		}
		break;

		case 7:
		EIMSK|=1<<INT7;
     d62:	ef 9a       	sbi	0x1d, 7	; 29
		switch(cOmpare)
     d64:	43 30       	cpi	r20, 0x03	; 3
     d66:	51 05       	cpc	r21, r1
     d68:	61 f0       	breq	.+24     	; 0xd82 <_Z15attachIntteruptiPFvvEi+0x224>
     d6a:	44 30       	cpi	r20, 0x04	; 4
     d6c:	51 05       	cpc	r21, r1
     d6e:	69 f0       	breq	.+26     	; 0xd8a <_Z15attachIntteruptiPFvvEi+0x22c>
     d70:	42 30       	cpi	r20, 0x02	; 2
     d72:	51 05       	cpc	r21, r1
     d74:	81 f4       	brne	.+32     	; 0xd96 <_Z15attachIntteruptiPFvvEi+0x238>
		{
			case 2:
			EICRB|=(1<<ISC70)|(1<<ISC71);
     d76:	ea e6       	ldi	r30, 0x6A	; 106
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	80 81       	ld	r24, Z
     d7c:	80 6c       	ori	r24, 0xC0	; 192
     d7e:	80 83       	st	Z, r24
			break;
     d80:	08 95       	ret
			case 3:
			EICRB=(0<<ISC70)|(1<<ISC71);
     d82:	80 e8       	ldi	r24, 0x80	; 128
     d84:	80 93 6a 00 	sts	0x006A, r24
			break;
     d88:	08 95       	ret
			case 4:
			EICRB|=(1<<ISC70)|(0<<ISC71);
     d8a:	ea e6       	ldi	r30, 0x6A	; 106
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	80 81       	ld	r24, Z
     d90:	80 64       	ori	r24, 0x40	; 64
     d92:	80 83       	st	Z, r24
			break;
     d94:	08 95       	ret
			default:
			EICRB|=(0<<ISC70)|(0<<ISC71);
     d96:	ea e6       	ldi	r30, 0x6A	; 106
     d98:	f0 e0       	ldi	r31, 0x00	; 0
     d9a:	80 81       	ld	r24, Z
     d9c:	80 83       	st	Z, r24
     d9e:	08 95       	ret
		}
		break;

	        default:EICRA|=(0<<ISC01)|(0<<ISC00);
     da0:	e9 e6       	ldi	r30, 0x69	; 105
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	80 81       	ld	r24, Z
     da6:	80 83       	st	Z, r24
     da8:	08 95       	ret

00000daa <__vector_1>:
	}
}
ISR(INT0_vect)
{
     daa:	1f 92       	push	r1
     dac:	0f 92       	push	r0
     dae:	0f b6       	in	r0, 0x3f	; 63
     db0:	0f 92       	push	r0
     db2:	0b b6       	in	r0, 0x3b	; 59
     db4:	0f 92       	push	r0
     db6:	11 24       	eor	r1, r1
     db8:	2f 93       	push	r18
     dba:	3f 93       	push	r19
     dbc:	4f 93       	push	r20
     dbe:	5f 93       	push	r21
     dc0:	6f 93       	push	r22
     dc2:	7f 93       	push	r23
     dc4:	8f 93       	push	r24
     dc6:	9f 93       	push	r25
     dc8:	af 93       	push	r26
     dca:	bf 93       	push	r27
     dcc:	ef 93       	push	r30
     dce:	ff 93       	push	r31
   cAllisr();
     dd0:	e0 91 c2 02 	lds	r30, 0x02C2
     dd4:	f0 91 c3 02 	lds	r31, 0x02C3
     dd8:	19 95       	eicall
}
     dda:	ff 91       	pop	r31
     ddc:	ef 91       	pop	r30
     dde:	bf 91       	pop	r27
     de0:	af 91       	pop	r26
     de2:	9f 91       	pop	r25
     de4:	8f 91       	pop	r24
     de6:	7f 91       	pop	r23
     de8:	6f 91       	pop	r22
     dea:	5f 91       	pop	r21
     dec:	4f 91       	pop	r20
     dee:	3f 91       	pop	r19
     df0:	2f 91       	pop	r18
     df2:	0f 90       	pop	r0
     df4:	0b be       	out	0x3b, r0	; 59
     df6:	0f 90       	pop	r0
     df8:	0f be       	out	0x3f, r0	; 63
     dfa:	0f 90       	pop	r0
     dfc:	1f 90       	pop	r1
     dfe:	18 95       	reti

00000e00 <__vector_2>:
ISR(INT1_vect)
{
     e00:	1f 92       	push	r1
     e02:	0f 92       	push	r0
     e04:	0f b6       	in	r0, 0x3f	; 63
     e06:	0f 92       	push	r0
     e08:	0b b6       	in	r0, 0x3b	; 59
     e0a:	0f 92       	push	r0
     e0c:	11 24       	eor	r1, r1
     e0e:	2f 93       	push	r18
     e10:	3f 93       	push	r19
     e12:	4f 93       	push	r20
     e14:	5f 93       	push	r21
     e16:	6f 93       	push	r22
     e18:	7f 93       	push	r23
     e1a:	8f 93       	push	r24
     e1c:	9f 93       	push	r25
     e1e:	af 93       	push	r26
     e20:	bf 93       	push	r27
     e22:	ef 93       	push	r30
     e24:	ff 93       	push	r31
   cAllisr();
     e26:	e0 91 c2 02 	lds	r30, 0x02C2
     e2a:	f0 91 c3 02 	lds	r31, 0x02C3
     e2e:	19 95       	eicall
}
     e30:	ff 91       	pop	r31
     e32:	ef 91       	pop	r30
     e34:	bf 91       	pop	r27
     e36:	af 91       	pop	r26
     e38:	9f 91       	pop	r25
     e3a:	8f 91       	pop	r24
     e3c:	7f 91       	pop	r23
     e3e:	6f 91       	pop	r22
     e40:	5f 91       	pop	r21
     e42:	4f 91       	pop	r20
     e44:	3f 91       	pop	r19
     e46:	2f 91       	pop	r18
     e48:	0f 90       	pop	r0
     e4a:	0b be       	out	0x3b, r0	; 59
     e4c:	0f 90       	pop	r0
     e4e:	0f be       	out	0x3f, r0	; 63
     e50:	0f 90       	pop	r0
     e52:	1f 90       	pop	r1
     e54:	18 95       	reti

00000e56 <__vector_3>:
ISR(INT2_vect)
{
     e56:	1f 92       	push	r1
     e58:	0f 92       	push	r0
     e5a:	0f b6       	in	r0, 0x3f	; 63
     e5c:	0f 92       	push	r0
     e5e:	0b b6       	in	r0, 0x3b	; 59
     e60:	0f 92       	push	r0
     e62:	11 24       	eor	r1, r1
     e64:	2f 93       	push	r18
     e66:	3f 93       	push	r19
     e68:	4f 93       	push	r20
     e6a:	5f 93       	push	r21
     e6c:	6f 93       	push	r22
     e6e:	7f 93       	push	r23
     e70:	8f 93       	push	r24
     e72:	9f 93       	push	r25
     e74:	af 93       	push	r26
     e76:	bf 93       	push	r27
     e78:	ef 93       	push	r30
     e7a:	ff 93       	push	r31
   cAllisr();
     e7c:	e0 91 c2 02 	lds	r30, 0x02C2
     e80:	f0 91 c3 02 	lds	r31, 0x02C3
     e84:	19 95       	eicall
}
     e86:	ff 91       	pop	r31
     e88:	ef 91       	pop	r30
     e8a:	bf 91       	pop	r27
     e8c:	af 91       	pop	r26
     e8e:	9f 91       	pop	r25
     e90:	8f 91       	pop	r24
     e92:	7f 91       	pop	r23
     e94:	6f 91       	pop	r22
     e96:	5f 91       	pop	r21
     e98:	4f 91       	pop	r20
     e9a:	3f 91       	pop	r19
     e9c:	2f 91       	pop	r18
     e9e:	0f 90       	pop	r0
     ea0:	0b be       	out	0x3b, r0	; 59
     ea2:	0f 90       	pop	r0
     ea4:	0f be       	out	0x3f, r0	; 63
     ea6:	0f 90       	pop	r0
     ea8:	1f 90       	pop	r1
     eaa:	18 95       	reti

00000eac <__vector_4>:
ISR(INT3_vect)
{
     eac:	1f 92       	push	r1
     eae:	0f 92       	push	r0
     eb0:	0f b6       	in	r0, 0x3f	; 63
     eb2:	0f 92       	push	r0
     eb4:	0b b6       	in	r0, 0x3b	; 59
     eb6:	0f 92       	push	r0
     eb8:	11 24       	eor	r1, r1
     eba:	2f 93       	push	r18
     ebc:	3f 93       	push	r19
     ebe:	4f 93       	push	r20
     ec0:	5f 93       	push	r21
     ec2:	6f 93       	push	r22
     ec4:	7f 93       	push	r23
     ec6:	8f 93       	push	r24
     ec8:	9f 93       	push	r25
     eca:	af 93       	push	r26
     ecc:	bf 93       	push	r27
     ece:	ef 93       	push	r30
     ed0:	ff 93       	push	r31
   cAllisr();
     ed2:	e0 91 c2 02 	lds	r30, 0x02C2
     ed6:	f0 91 c3 02 	lds	r31, 0x02C3
     eda:	19 95       	eicall
}
     edc:	ff 91       	pop	r31
     ede:	ef 91       	pop	r30
     ee0:	bf 91       	pop	r27
     ee2:	af 91       	pop	r26
     ee4:	9f 91       	pop	r25
     ee6:	8f 91       	pop	r24
     ee8:	7f 91       	pop	r23
     eea:	6f 91       	pop	r22
     eec:	5f 91       	pop	r21
     eee:	4f 91       	pop	r20
     ef0:	3f 91       	pop	r19
     ef2:	2f 91       	pop	r18
     ef4:	0f 90       	pop	r0
     ef6:	0b be       	out	0x3b, r0	; 59
     ef8:	0f 90       	pop	r0
     efa:	0f be       	out	0x3f, r0	; 63
     efc:	0f 90       	pop	r0
     efe:	1f 90       	pop	r1
     f00:	18 95       	reti

00000f02 <__vector_5>:
ISR(INT4_vect)
{
     f02:	1f 92       	push	r1
     f04:	0f 92       	push	r0
     f06:	0f b6       	in	r0, 0x3f	; 63
     f08:	0f 92       	push	r0
     f0a:	0b b6       	in	r0, 0x3b	; 59
     f0c:	0f 92       	push	r0
     f0e:	11 24       	eor	r1, r1
     f10:	2f 93       	push	r18
     f12:	3f 93       	push	r19
     f14:	4f 93       	push	r20
     f16:	5f 93       	push	r21
     f18:	6f 93       	push	r22
     f1a:	7f 93       	push	r23
     f1c:	8f 93       	push	r24
     f1e:	9f 93       	push	r25
     f20:	af 93       	push	r26
     f22:	bf 93       	push	r27
     f24:	ef 93       	push	r30
     f26:	ff 93       	push	r31
    cAllisr();
     f28:	e0 91 c2 02 	lds	r30, 0x02C2
     f2c:	f0 91 c3 02 	lds	r31, 0x02C3
     f30:	19 95       	eicall
}
     f32:	ff 91       	pop	r31
     f34:	ef 91       	pop	r30
     f36:	bf 91       	pop	r27
     f38:	af 91       	pop	r26
     f3a:	9f 91       	pop	r25
     f3c:	8f 91       	pop	r24
     f3e:	7f 91       	pop	r23
     f40:	6f 91       	pop	r22
     f42:	5f 91       	pop	r21
     f44:	4f 91       	pop	r20
     f46:	3f 91       	pop	r19
     f48:	2f 91       	pop	r18
     f4a:	0f 90       	pop	r0
     f4c:	0b be       	out	0x3b, r0	; 59
     f4e:	0f 90       	pop	r0
     f50:	0f be       	out	0x3f, r0	; 63
     f52:	0f 90       	pop	r0
     f54:	1f 90       	pop	r1
     f56:	18 95       	reti

00000f58 <__vector_6>:
ISR(INT5_vect)
{
     f58:	1f 92       	push	r1
     f5a:	0f 92       	push	r0
     f5c:	0f b6       	in	r0, 0x3f	; 63
     f5e:	0f 92       	push	r0
     f60:	0b b6       	in	r0, 0x3b	; 59
     f62:	0f 92       	push	r0
     f64:	11 24       	eor	r1, r1
     f66:	2f 93       	push	r18
     f68:	3f 93       	push	r19
     f6a:	4f 93       	push	r20
     f6c:	5f 93       	push	r21
     f6e:	6f 93       	push	r22
     f70:	7f 93       	push	r23
     f72:	8f 93       	push	r24
     f74:	9f 93       	push	r25
     f76:	af 93       	push	r26
     f78:	bf 93       	push	r27
     f7a:	ef 93       	push	r30
     f7c:	ff 93       	push	r31
    cAllisr();
     f7e:	e0 91 c2 02 	lds	r30, 0x02C2
     f82:	f0 91 c3 02 	lds	r31, 0x02C3
     f86:	19 95       	eicall
}
     f88:	ff 91       	pop	r31
     f8a:	ef 91       	pop	r30
     f8c:	bf 91       	pop	r27
     f8e:	af 91       	pop	r26
     f90:	9f 91       	pop	r25
     f92:	8f 91       	pop	r24
     f94:	7f 91       	pop	r23
     f96:	6f 91       	pop	r22
     f98:	5f 91       	pop	r21
     f9a:	4f 91       	pop	r20
     f9c:	3f 91       	pop	r19
     f9e:	2f 91       	pop	r18
     fa0:	0f 90       	pop	r0
     fa2:	0b be       	out	0x3b, r0	; 59
     fa4:	0f 90       	pop	r0
     fa6:	0f be       	out	0x3f, r0	; 63
     fa8:	0f 90       	pop	r0
     faa:	1f 90       	pop	r1
     fac:	18 95       	reti

00000fae <__vector_7>:
ISR(INT6_vect)
{
     fae:	1f 92       	push	r1
     fb0:	0f 92       	push	r0
     fb2:	0f b6       	in	r0, 0x3f	; 63
     fb4:	0f 92       	push	r0
     fb6:	0b b6       	in	r0, 0x3b	; 59
     fb8:	0f 92       	push	r0
     fba:	11 24       	eor	r1, r1
     fbc:	2f 93       	push	r18
     fbe:	3f 93       	push	r19
     fc0:	4f 93       	push	r20
     fc2:	5f 93       	push	r21
     fc4:	6f 93       	push	r22
     fc6:	7f 93       	push	r23
     fc8:	8f 93       	push	r24
     fca:	9f 93       	push	r25
     fcc:	af 93       	push	r26
     fce:	bf 93       	push	r27
     fd0:	ef 93       	push	r30
     fd2:	ff 93       	push	r31
    cAllisr();
     fd4:	e0 91 c2 02 	lds	r30, 0x02C2
     fd8:	f0 91 c3 02 	lds	r31, 0x02C3
     fdc:	19 95       	eicall
}
     fde:	ff 91       	pop	r31
     fe0:	ef 91       	pop	r30
     fe2:	bf 91       	pop	r27
     fe4:	af 91       	pop	r26
     fe6:	9f 91       	pop	r25
     fe8:	8f 91       	pop	r24
     fea:	7f 91       	pop	r23
     fec:	6f 91       	pop	r22
     fee:	5f 91       	pop	r21
     ff0:	4f 91       	pop	r20
     ff2:	3f 91       	pop	r19
     ff4:	2f 91       	pop	r18
     ff6:	0f 90       	pop	r0
     ff8:	0b be       	out	0x3b, r0	; 59
     ffa:	0f 90       	pop	r0
     ffc:	0f be       	out	0x3f, r0	; 63
     ffe:	0f 90       	pop	r0
    1000:	1f 90       	pop	r1
    1002:	18 95       	reti

00001004 <__vector_8>:
ISR(INT7_vect)
{
    1004:	1f 92       	push	r1
    1006:	0f 92       	push	r0
    1008:	0f b6       	in	r0, 0x3f	; 63
    100a:	0f 92       	push	r0
    100c:	0b b6       	in	r0, 0x3b	; 59
    100e:	0f 92       	push	r0
    1010:	11 24       	eor	r1, r1
    1012:	2f 93       	push	r18
    1014:	3f 93       	push	r19
    1016:	4f 93       	push	r20
    1018:	5f 93       	push	r21
    101a:	6f 93       	push	r22
    101c:	7f 93       	push	r23
    101e:	8f 93       	push	r24
    1020:	9f 93       	push	r25
    1022:	af 93       	push	r26
    1024:	bf 93       	push	r27
    1026:	ef 93       	push	r30
    1028:	ff 93       	push	r31
    cAllisr();
    102a:	e0 91 c2 02 	lds	r30, 0x02C2
    102e:	f0 91 c3 02 	lds	r31, 0x02C3
    1032:	19 95       	eicall
}
    1034:	ff 91       	pop	r31
    1036:	ef 91       	pop	r30
    1038:	bf 91       	pop	r27
    103a:	af 91       	pop	r26
    103c:	9f 91       	pop	r25
    103e:	8f 91       	pop	r24
    1040:	7f 91       	pop	r23
    1042:	6f 91       	pop	r22
    1044:	5f 91       	pop	r21
    1046:	4f 91       	pop	r20
    1048:	3f 91       	pop	r19
    104a:	2f 91       	pop	r18
    104c:	0f 90       	pop	r0
    104e:	0b be       	out	0x3b, r0	; 59
    1050:	0f 90       	pop	r0
    1052:	0f be       	out	0x3f, r0	; 63
    1054:	0f 90       	pop	r0
    1056:	1f 90       	pop	r1
    1058:	18 95       	reti

0000105a <_Z5setupv>:
#define servoPwm4 7

int correction[4]={-10,-30,-15,5},angle=180;		//HACK:All four servo are not mounted parallely, thus to compensate the offset angle, correction aray is made. 

/******************Main Code********************/	
void setup(){
    105a:	cf 93       	push	r28
    105c:	df 93       	push	r29
{
	public:
	void begin( unsigned int BAUD){
		/*Set baud rate */int uBrr;
		uBrr=(F_CPU/16UL/BAUD-1);
		UBRR0H = (unsigned char)(uBrr>>8);
    105e:	10 92 c5 00 	sts	0x00C5, r1
		UBRR0L = (unsigned char)uBrr;
    1062:	2c e0       	ldi	r18, 0x0C	; 12
    1064:	20 93 c4 00 	sts	0x00C4, r18
		/* Enable receiver and transmitter */
		UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    1068:	88 e1       	ldi	r24, 0x18	; 24
    106a:	80 93 c1 00 	sts	0x00C1, r24
		/* Set frame format: 8data, 2stop bit */
		UCSR0C = (1<<USBS0)|(3<<UCSZ00);
    106e:	8e e0       	ldi	r24, 0x0E	; 14
    1070:	80 93 c2 00 	sts	0x00C2, r24
public:
  uint8_t pIn;
  
  void attach(uint8_t nUm)       //F_CPU=clock frequency and num=pin no.to be attached
  {
    iCr=19999;
    1074:	8f e1       	ldi	r24, 0x1F	; 31
    1076:	9e e4       	ldi	r25, 0x4E	; 78
    1078:	90 93 c9 02 	sts	0x02C9, r25
    107c:	80 93 c8 02 	sts	0x02C8, r24
    pIn=nUm;
    1080:	3b e0       	ldi	r19, 0x0B	; 11
    1082:	30 93 ca 02 	sts	0x02CA, r19
    switch(pIn)
    {
     case 11 :                           //OC1A
        DDRB|=(1<<PB5); // PORTB as OUTPUT
    1086:	25 9a       	sbi	0x04, 5	; 4
        TCCR1A |= (1<<WGM11) | (1<<COM1A1) | (1<<COM1A0);
    1088:	a0 e8       	ldi	r26, 0x80	; 128
    108a:	b0 e0       	ldi	r27, 0x00	; 0
    108c:	3c 91       	ld	r19, X
    108e:	32 6c       	ori	r19, 0xC2	; 194
    1090:	3c 93       	st	X, r19
        TCCR1B |= (1<<WGM12) | (1<<WGM13);
    1092:	e1 e8       	ldi	r30, 0x81	; 129
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	30 81       	ld	r19, Z
    1098:	38 61       	ori	r19, 0x18	; 24
    109a:	30 83       	st	Z, r19
        TCCR1B |= (1<<CS10);
    109c:	30 81       	ld	r19, Z
    109e:	31 60       	ori	r19, 0x01	; 1
    10a0:	30 83       	st	Z, r19
        ICR1=iCr;                    //generating 20msec pulse (pwm method)
    10a2:	c6 e8       	ldi	r28, 0x86	; 134
    10a4:	d0 e0       	ldi	r29, 0x00	; 0
    10a6:	99 83       	std	Y+1, r25	; 0x01
    10a8:	88 83       	st	Y, r24
public:
  uint8_t pIn;
  
  void attach(uint8_t nUm)       //F_CPU=clock frequency and num=pin no.to be attached
  {
    iCr=19999;
    10aa:	90 93 cc 02 	sts	0x02CC, r25
    10ae:	80 93 cb 02 	sts	0x02CB, r24
    pIn=nUm;
    10b2:	20 93 cd 02 	sts	0x02CD, r18
        TCCR1B |= (1<<CS10);
        ICR1=iCr;                    //generating 20msec pulse (pwm method)
        break; 

     case 12 :                            //OC1B
        DDRB|=(1<<PB6); // PORTB as OUTPUT
    10b6:	26 9a       	sbi	0x04, 6	; 4
        TCCR1A|=(1<<WGM11)|(1<<COM1B1)|(1<<COM1B0);  //SETTING PRESCALAR AS 64 
    10b8:	2c 91       	ld	r18, X
    10ba:	22 63       	ori	r18, 0x32	; 50
    10bc:	2c 93       	st	X, r18
        TCCR1B|=(1<<WGM12)|(1<<WGM13)|(1<<CS10); //FAST PWM MODE
    10be:	20 81       	ld	r18, Z
    10c0:	29 61       	ori	r18, 0x19	; 25
    10c2:	20 83       	st	Z, r18
        ICR1=iCr;                    //generating 20msec pulse (pwm method)
    10c4:	99 83       	std	Y+1, r25	; 0x01
    10c6:	88 83       	st	Y, r24
public:
  uint8_t pIn;
  
  void attach(uint8_t nUm)       //F_CPU=clock frequency and num=pin no.to be attached
  {
    iCr=19999;
    10c8:	90 93 cf 02 	sts	0x02CF, r25
    10cc:	80 93 ce 02 	sts	0x02CE, r24
    pIn=nUm;
    10d0:	2e e2       	ldi	r18, 0x2E	; 46
    10d2:	20 93 d0 02 	sts	0x02D0, r18
        TCCR4B|=(1<<WGM42)|(1<<WGM43)|(1<<CS40); //FAST PWM MODE
        ICR4=iCr;                    //generating 20msec pulse (pwm method)
        break;

      case 46 :                           //OC5A 
        DDRL|=(1<<PL3); // PORTB as OUTPUT
    10d6:	ea e0       	ldi	r30, 0x0A	; 10
    10d8:	f1 e0       	ldi	r31, 0x01	; 1
    10da:	20 81       	ld	r18, Z
    10dc:	28 60       	ori	r18, 0x08	; 8
    10de:	20 83       	st	Z, r18
        TCCR5A|=(1<<WGM51)|(1<<COM5A1)|(1<<COM5A0);  //SETTING PRESCALAR AS 64 
    10e0:	e0 e2       	ldi	r30, 0x20	; 32
    10e2:	f1 e0       	ldi	r31, 0x01	; 1
    10e4:	20 81       	ld	r18, Z
    10e6:	22 6c       	ori	r18, 0xC2	; 194
    10e8:	20 83       	st	Z, r18
        TCCR5B|=(1<<WGM52)|(1<<WGM53)|(1<<CS50); //FAST PWM MODE
    10ea:	e1 e2       	ldi	r30, 0x21	; 33
    10ec:	f1 e0       	ldi	r31, 0x01	; 1
    10ee:	20 81       	ld	r18, Z
    10f0:	29 61       	ori	r18, 0x19	; 25
    10f2:	20 83       	st	Z, r18
        ICR5=iCr;                    //generating 20msec pulse (pwm method)
    10f4:	90 93 27 01 	sts	0x0127, r25
    10f8:	80 93 26 01 	sts	0x0126, r24
public:
  uint8_t pIn;
  
  void attach(uint8_t nUm)       //F_CPU=clock frequency and num=pin no.to be attached
  {
    iCr=19999;
    10fc:	90 93 d2 02 	sts	0x02D2, r25
    1100:	80 93 d1 02 	sts	0x02D1, r24
    pIn=nUm;
    1104:	27 e0       	ldi	r18, 0x07	; 7
    1106:	20 93 d3 02 	sts	0x02D3, r18
        TCCR4B|=(1<<WGM42)|(1<<WGM43)|(1<<CS40); //FAST PWM MODE
        ICR4=iCr;                    //generating 20msec pulse (pwm method)
        break;

      case 7 :                            //OC4B
        DDRH|=(1<<PH4); // PORTB as OUTPUT
    110a:	e1 e0       	ldi	r30, 0x01	; 1
    110c:	f1 e0       	ldi	r31, 0x01	; 1
    110e:	20 81       	ld	r18, Z
    1110:	20 61       	ori	r18, 0x10	; 16
    1112:	20 83       	st	Z, r18
        TCCR4A|=(1<<WGM41)|(1<<COM4B1)|(1<<COM4B0);  //SETTING PRESCALAR AS 64 
    1114:	e0 ea       	ldi	r30, 0xA0	; 160
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	20 81       	ld	r18, Z
    111a:	22 63       	ori	r18, 0x32	; 50
    111c:	20 83       	st	Z, r18
        TCCR4B|=(1<<WGM42)|(1<<WGM43)|(1<<CS40); //FAST PWM MODE
    111e:	e1 ea       	ldi	r30, 0xA1	; 161
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	20 81       	ld	r18, Z
    1124:	29 61       	ori	r18, 0x19	; 25
    1126:	20 83       	st	Z, r18
        ICR4=iCr;                    //generating 20msec pulse (pwm method)
    1128:	90 93 a7 00 	sts	0x00A7, r25
    112c:	80 93 a6 00 	sts	0x00A6, r24
		digitalWrite(dIrpin,dIrection);
		Serial.write(2);
	}
	
	void direction(uint8_t dIrection, uint8_t dIrection1){
		digitalWrite(dIrpin,dIrection);
    1130:	80 91 d4 02 	lds	r24, 0x02D4
    1134:	61 e0       	ldi	r22, 0x01	; 1
    1136:	0e 94 19 02 	call	0x432	; 0x432 <_Z12digitalWritehh>
		digitalWrite(dIrpin1,dIrection1);
    113a:	80 91 d9 02 	lds	r24, 0x02D9
    113e:	61 e0       	ldi	r22, 0x01	; 1
    1140:	0e 94 19 02 	call	0x432	; 0x432 <_Z12digitalWritehh>
		step2=5;
		step3=5;
		interval=10;
  }
  	void direction(uint8_t dIrection){
		digitalWrite(dIrpin,dIrection);
    1144:	80 91 e1 02 	lds	r24, 0x02E1
    1148:	61 e0       	ldi	r22, 0x01	; 1
    114a:	0e 94 19 02 	call	0x432	; 0x432 <_Z12digitalWritehh>
	}
	/* Set frame format: 8data, 2stop bit */
	void write( unsigned char dAta ){
		/* Wait for empty transmit buffer */
		while ((UCSR0A & (1<<UDRE0))==0);
    114e:	e0 ec       	ldi	r30, 0xC0	; 192
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	80 81       	ld	r24, Z
    1154:	85 ff       	sbrs	r24, 5
    1156:	fd cf       	rjmp	.-6      	; 0x1152 <_Z5setupv+0xf8>
		/* Put data into buffer, sends the data */
		UDR0 = dAta;
    1158:	82 e0       	ldi	r24, 0x02	; 2
    115a:	80 93 c6 00 	sts	0x00C6, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    115e:	87 ea       	ldi	r24, 0xA7	; 167
    1160:	91 e6       	ldi	r25, 0x61	; 97
    1162:	01 97       	sbiw	r24, 0x01	; 1
    1164:	f1 f7       	brne	.-4      	; 0x1162 <_Z5setupv+0x108>
    1166:	00 c0       	rjmp	.+0      	; 0x1168 <_Z5setupv+0x10e>
    1168:	00 00       	nop
	swerve2.attach(servoPwm2);
	swerve3.attach(servoPwm3);
	swerve4.attach(servoPwm4);
	motor12.direction(1,1);
	motor3.direction(1);
}
    116a:	df 91       	pop	r29
    116c:	cf 91       	pop	r28
    116e:	08 95       	ret

00001170 <_Z4loopv>:
void loop(){
    1170:	2f 92       	push	r2
    1172:	3f 92       	push	r3
    1174:	4f 92       	push	r4
    1176:	5f 92       	push	r5
    1178:	6f 92       	push	r6
    117a:	7f 92       	push	r7
    117c:	8f 92       	push	r8
    117e:	9f 92       	push	r9
    1180:	af 92       	push	r10
    1182:	bf 92       	push	r11
    1184:	cf 92       	push	r12
    1186:	df 92       	push	r13
    1188:	ef 92       	push	r14
    118a:	ff 92       	push	r15
    118c:	0f 93       	push	r16
    118e:	1f 93       	push	r17
    1190:	df 93       	push	r29
    1192:	cf 93       	push	r28
    1194:	00 d0       	rcall	.+0      	; 0x1196 <_Z4loopv+0x26>
    1196:	0f 92       	push	r0
    1198:	cd b7       	in	r28, 0x3d	; 61
    119a:	de b7       	in	r29, 0x3e	; 62
     }
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,270,iCr/40,iCr/8.7),iCr/40,iCr/8);
    119c:	00 91 c8 02 	lds	r16, 0x02C8
    11a0:	10 91 c9 02 	lds	r17, 0x02C9
    11a4:	c8 01       	movw	r24, r16
    11a6:	68 e2       	ldi	r22, 0x28	; 40
    11a8:	70 e0       	ldi	r23, 0x00	; 0
    11aa:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <__divmodhi4>
    11ae:	6b 01       	movw	r12, r22
    11b0:	ee 24       	eor	r14, r14
    11b2:	d7 fc       	sbrc	r13, 7
    11b4:	e0 94       	com	r14
    11b6:	fe 2c       	mov	r15, r14
    11b8:	b8 01       	movw	r22, r16
    11ba:	88 27       	eor	r24, r24
    11bc:	77 fd       	sbrc	r23, 7
    11be:	80 95       	com	r24
    11c0:	98 2f       	mov	r25, r24
    11c2:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <__floatsisf>
    11c6:	23 e3       	ldi	r18, 0x33	; 51
    11c8:	33 e3       	ldi	r19, 0x33	; 51
    11ca:	4b e0       	ldi	r20, 0x0B	; 11
    11cc:	51 e4       	ldi	r21, 0x41	; 65
    11ce:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <__divsf3>
    11d2:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <__fixsfsi>
        break; 
    }   
  }
  long mapAngle(long x, long in_min, long in_max, long out_min, long out_max)
  {
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    11d6:	6c 19       	sub	r22, r12
    11d8:	7d 09       	sbc	r23, r13
    11da:	8e 09       	sbc	r24, r14
    11dc:	9f 09       	sbc	r25, r15
	//XXX: Check if servo is stalling, if yes don't freak out just make sure it doesn't stall for long time. Check if heating
	swerve1.write(angle+correction[0]);
    11de:	40 91 bc 02 	lds	r20, 0x02BC
    11e2:	50 91 bd 02 	lds	r21, 0x02BD
    11e6:	20 91 b4 02 	lds	r18, 0x02B4
    11ea:	30 91 b5 02 	lds	r19, 0x02B5
    11ee:	24 0f       	add	r18, r20
    11f0:	35 1f       	adc	r19, r21
     }
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,270,iCr/40,iCr/8.7),iCr/40,iCr/8);
    11f2:	44 27       	eor	r20, r20
    11f4:	37 fd       	sbrc	r19, 7
    11f6:	40 95       	com	r20
    11f8:	54 2f       	mov	r21, r20
        break; 
    }   
  }
  long mapAngle(long x, long in_min, long in_max, long out_min, long out_max)
  {
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    11fa:	0e 94 b1 10 	call	0x2162	; 0x2162 <__mulsi3>
    11fe:	2e e0       	ldi	r18, 0x0E	; 14
    1200:	31 e0       	ldi	r19, 0x01	; 1
    1202:	40 e0       	ldi	r20, 0x00	; 0
    1204:	50 e0       	ldi	r21, 0x00	; 0
    1206:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <__divmodsi4>
    120a:	2c 0d       	add	r18, r12
    120c:	3d 1d       	adc	r19, r13
    120e:	4e 1d       	adc	r20, r14
    1210:	5f 1d       	adc	r21, r15
     }
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,270,iCr/40,iCr/8.7),iCr/40,iCr/8);
    1212:	c8 01       	movw	r24, r16
    1214:	99 23       	and	r25, r25
    1216:	0c f4       	brge	.+2      	; 0x121a <_Z4loopv+0xaa>
    1218:	07 96       	adiw	r24, 0x07	; 7
    121a:	95 95       	asr	r25
    121c:	87 95       	ror	r24
    121e:	95 95       	asr	r25
    1220:	87 95       	ror	r24
    1222:	95 95       	asr	r25
    1224:	87 95       	ror	r24
    1226:	aa 27       	eor	r26, r26
    1228:	97 fd       	sbrc	r25, 7
    122a:	a0 95       	com	r26
    122c:	ba 2f       	mov	r27, r26
  {
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  }
  long constraint(long nUm,long lOwer,long uPper)
  {
    if(nUm>uPper){
    122e:	82 17       	cp	r24, r18
    1230:	93 07       	cpc	r25, r19
    1232:	a4 07       	cpc	r26, r20
    1234:	b5 07       	cpc	r27, r21
    1236:	4c f0       	brlt	.+18     	; 0x124a <_Z4loopv+0xda>
    1238:	da 01       	movw	r26, r20
    123a:	c9 01       	movw	r24, r18
    123c:	2c 15       	cp	r18, r12
    123e:	3d 05       	cpc	r19, r13
    1240:	4e 05       	cpc	r20, r14
    1242:	5f 05       	cpc	r21, r15
    1244:	14 f4       	brge	.+4      	; 0x124a <_Z4loopv+0xda>
    1246:	d7 01       	movw	r26, r14
    1248:	c6 01       	movw	r24, r12
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,270,iCr/40,iCr/8.7),iCr/40,iCr/8);
    switch(pIn)
    124a:	20 91 ca 02 	lds	r18, 0x02CA
    124e:	28 30       	cpi	r18, 0x08	; 8
    1250:	09 f4       	brne	.+2      	; 0x1254 <_Z4loopv+0xe4>
    1252:	7a c0       	rjmp	.+244    	; 0x1348 <_Z4loopv+0x1d8>
    1254:	29 30       	cpi	r18, 0x09	; 9
    1256:	90 f4       	brcc	.+36     	; 0x127c <_Z4loopv+0x10c>
    1258:	25 30       	cpi	r18, 0x05	; 5
    125a:	d1 f1       	breq	.+116    	; 0x12d0 <_Z4loopv+0x160>
    125c:	26 30       	cpi	r18, 0x06	; 6
    125e:	38 f4       	brcc	.+14     	; 0x126e <_Z4loopv+0xfe>
    1260:	22 30       	cpi	r18, 0x02	; 2
    1262:	09 f4       	brne	.+2      	; 0x1266 <_Z4loopv+0xf6>
    1264:	41 c0       	rjmp	.+130    	; 0x12e8 <_Z4loopv+0x178>
    1266:	23 30       	cpi	r18, 0x03	; 3
    1268:	09 f0       	breq	.+2      	; 0x126c <_Z4loopv+0xfc>
    126a:	9d c0       	rjmp	.+314    	; 0x13a6 <_Z4loopv+0x236>
    126c:	49 c0       	rjmp	.+146    	; 0x1300 <_Z4loopv+0x190>
    126e:	26 30       	cpi	r18, 0x06	; 6
    1270:	09 f4       	brne	.+2      	; 0x1274 <_Z4loopv+0x104>
    1272:	52 c0       	rjmp	.+164    	; 0x1318 <_Z4loopv+0x1a8>
    1274:	27 30       	cpi	r18, 0x07	; 7
    1276:	09 f0       	breq	.+2      	; 0x127a <_Z4loopv+0x10a>
    1278:	96 c0       	rjmp	.+300    	; 0x13a6 <_Z4loopv+0x236>
    127a:	5a c0       	rjmp	.+180    	; 0x1330 <_Z4loopv+0x1c0>
    127c:	2c 32       	cpi	r18, 0x2C	; 44
    127e:	09 f4       	brne	.+2      	; 0x1282 <_Z4loopv+0x112>
    1280:	87 c0       	rjmp	.+270    	; 0x1390 <_Z4loopv+0x220>
    1282:	2d 32       	cpi	r18, 0x2D	; 45
    1284:	30 f4       	brcc	.+12     	; 0x1292 <_Z4loopv+0x122>
    1286:	2b 30       	cpi	r18, 0x0B	; 11
    1288:	59 f0       	breq	.+22     	; 0x12a0 <_Z4loopv+0x130>
    128a:	2c 30       	cpi	r18, 0x0C	; 12
    128c:	09 f0       	breq	.+2      	; 0x1290 <_Z4loopv+0x120>
    128e:	8b c0       	rjmp	.+278    	; 0x13a6 <_Z4loopv+0x236>
    1290:	13 c0       	rjmp	.+38     	; 0x12b8 <_Z4loopv+0x148>
    1292:	2d 32       	cpi	r18, 0x2D	; 45
    1294:	09 f4       	brne	.+2      	; 0x1298 <_Z4loopv+0x128>
    1296:	70 c0       	rjmp	.+224    	; 0x1378 <_Z4loopv+0x208>
    1298:	2e 32       	cpi	r18, 0x2E	; 46
    129a:	09 f0       	breq	.+2      	; 0x129e <_Z4loopv+0x12e>
    129c:	84 c0       	rjmp	.+264    	; 0x13a6 <_Z4loopv+0x236>
    129e:	60 c0       	rjmp	.+192    	; 0x1360 <_Z4loopv+0x1f0>
    {
     case 11:
        OCR1A=ICR1-vAl;
    12a0:	20 91 86 00 	lds	r18, 0x0086
    12a4:	30 91 87 00 	lds	r19, 0x0087
    12a8:	a9 01       	movw	r20, r18
    12aa:	48 1b       	sub	r20, r24
    12ac:	59 0b       	sbc	r21, r25
    12ae:	50 93 89 00 	sts	0x0089, r21
    12b2:	40 93 88 00 	sts	0x0088, r20
    12b6:	77 c0       	rjmp	.+238    	; 0x13a6 <_Z4loopv+0x236>
        break;
      case 12:
        OCR1B=ICR1-vAl;
    12b8:	20 91 86 00 	lds	r18, 0x0086
    12bc:	30 91 87 00 	lds	r19, 0x0087
    12c0:	f9 01       	movw	r30, r18
    12c2:	e8 1b       	sub	r30, r24
    12c4:	f9 0b       	sbc	r31, r25
    12c6:	f0 93 8b 00 	sts	0x008B, r31
    12ca:	e0 93 8a 00 	sts	0x008A, r30
    12ce:	6b c0       	rjmp	.+214    	; 0x13a6 <_Z4loopv+0x236>
        break;
      case 5:
        OCR3A=ICR3-vAl;
    12d0:	20 91 96 00 	lds	r18, 0x0096
    12d4:	30 91 97 00 	lds	r19, 0x0097
    12d8:	a9 01       	movw	r20, r18
    12da:	48 1b       	sub	r20, r24
    12dc:	59 0b       	sbc	r21, r25
    12de:	50 93 99 00 	sts	0x0099, r21
    12e2:	40 93 98 00 	sts	0x0098, r20
    12e6:	5f c0       	rjmp	.+190    	; 0x13a6 <_Z4loopv+0x236>
        break;
      case 2:
        OCR3B=ICR3-vAl;
    12e8:	20 91 96 00 	lds	r18, 0x0096
    12ec:	30 91 97 00 	lds	r19, 0x0097
    12f0:	f9 01       	movw	r30, r18
    12f2:	e8 1b       	sub	r30, r24
    12f4:	f9 0b       	sbc	r31, r25
    12f6:	f0 93 9b 00 	sts	0x009B, r31
    12fa:	e0 93 9a 00 	sts	0x009A, r30
    12fe:	53 c0       	rjmp	.+166    	; 0x13a6 <_Z4loopv+0x236>
        break;
      case 3:
        OCR3C=ICR3-vAl;
    1300:	20 91 96 00 	lds	r18, 0x0096
    1304:	30 91 97 00 	lds	r19, 0x0097
    1308:	a9 01       	movw	r20, r18
    130a:	48 1b       	sub	r20, r24
    130c:	59 0b       	sbc	r21, r25
    130e:	50 93 9d 00 	sts	0x009D, r21
    1312:	40 93 9c 00 	sts	0x009C, r20
    1316:	47 c0       	rjmp	.+142    	; 0x13a6 <_Z4loopv+0x236>
        break;
      case 6:
        OCR4A=ICR4-vAl;
    1318:	20 91 a6 00 	lds	r18, 0x00A6
    131c:	30 91 a7 00 	lds	r19, 0x00A7
    1320:	f9 01       	movw	r30, r18
    1322:	e8 1b       	sub	r30, r24
    1324:	f9 0b       	sbc	r31, r25
    1326:	f0 93 a9 00 	sts	0x00A9, r31
    132a:	e0 93 a8 00 	sts	0x00A8, r30
    132e:	3b c0       	rjmp	.+118    	; 0x13a6 <_Z4loopv+0x236>
        break;
      case 7:
        OCR4B=ICR4-vAl;
    1330:	20 91 a6 00 	lds	r18, 0x00A6
    1334:	30 91 a7 00 	lds	r19, 0x00A7
    1338:	a9 01       	movw	r20, r18
    133a:	48 1b       	sub	r20, r24
    133c:	59 0b       	sbc	r21, r25
    133e:	50 93 ab 00 	sts	0x00AB, r21
    1342:	40 93 aa 00 	sts	0x00AA, r20
    1346:	2f c0       	rjmp	.+94     	; 0x13a6 <_Z4loopv+0x236>
        break; 
      case 8:
        OCR4C=ICR4-vAl;
    1348:	20 91 a6 00 	lds	r18, 0x00A6
    134c:	30 91 a7 00 	lds	r19, 0x00A7
    1350:	f9 01       	movw	r30, r18
    1352:	e8 1b       	sub	r30, r24
    1354:	f9 0b       	sbc	r31, r25
    1356:	f0 93 ad 00 	sts	0x00AD, r31
    135a:	e0 93 ac 00 	sts	0x00AC, r30
    135e:	23 c0       	rjmp	.+70     	; 0x13a6 <_Z4loopv+0x236>
        break;
      case 46:
        OCR5A=ICR5-vAl;
    1360:	20 91 26 01 	lds	r18, 0x0126
    1364:	30 91 27 01 	lds	r19, 0x0127
    1368:	a9 01       	movw	r20, r18
    136a:	48 1b       	sub	r20, r24
    136c:	59 0b       	sbc	r21, r25
    136e:	50 93 29 01 	sts	0x0129, r21
    1372:	40 93 28 01 	sts	0x0128, r20
    1376:	17 c0       	rjmp	.+46     	; 0x13a6 <_Z4loopv+0x236>
        break;
      case 45:
        OCR5B=ICR5-vAl;
    1378:	20 91 26 01 	lds	r18, 0x0126
    137c:	30 91 27 01 	lds	r19, 0x0127
    1380:	f9 01       	movw	r30, r18
    1382:	e8 1b       	sub	r30, r24
    1384:	f9 0b       	sbc	r31, r25
    1386:	f0 93 2b 01 	sts	0x012B, r31
    138a:	e0 93 2a 01 	sts	0x012A, r30
    138e:	0b c0       	rjmp	.+22     	; 0x13a6 <_Z4loopv+0x236>
        break;
      case 44:
        OCR5C=ICR5-vAl;
    1390:	20 91 26 01 	lds	r18, 0x0126
    1394:	30 91 27 01 	lds	r19, 0x0127
    1398:	a9 01       	movw	r20, r18
    139a:	48 1b       	sub	r20, r24
    139c:	59 0b       	sbc	r21, r25
    139e:	50 93 2d 01 	sts	0x012D, r21
    13a2:	40 93 2c 01 	sts	0x012C, r20
     }
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,270,iCr/40,iCr/8.7),iCr/40,iCr/8);
    13a6:	00 91 cb 02 	lds	r16, 0x02CB
    13aa:	10 91 cc 02 	lds	r17, 0x02CC
    13ae:	c8 01       	movw	r24, r16
    13b0:	68 e2       	ldi	r22, 0x28	; 40
    13b2:	70 e0       	ldi	r23, 0x00	; 0
    13b4:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <__divmodhi4>
    13b8:	6b 01       	movw	r12, r22
    13ba:	ee 24       	eor	r14, r14
    13bc:	d7 fc       	sbrc	r13, 7
    13be:	e0 94       	com	r14
    13c0:	fe 2c       	mov	r15, r14
    13c2:	b8 01       	movw	r22, r16
    13c4:	88 27       	eor	r24, r24
    13c6:	77 fd       	sbrc	r23, 7
    13c8:	80 95       	com	r24
    13ca:	98 2f       	mov	r25, r24
    13cc:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <__floatsisf>
    13d0:	23 e3       	ldi	r18, 0x33	; 51
    13d2:	33 e3       	ldi	r19, 0x33	; 51
    13d4:	4b e0       	ldi	r20, 0x0B	; 11
    13d6:	51 e4       	ldi	r21, 0x41	; 65
    13d8:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <__divsf3>
    13dc:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <__fixsfsi>
        break; 
    }   
  }
  long mapAngle(long x, long in_min, long in_max, long out_min, long out_max)
  {
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    13e0:	6c 19       	sub	r22, r12
    13e2:	7d 09       	sbc	r23, r13
    13e4:	8e 09       	sbc	r24, r14
    13e6:	9f 09       	sbc	r25, r15
	swerve2.write(angle+correction[1]);
    13e8:	40 91 bc 02 	lds	r20, 0x02BC
    13ec:	50 91 bd 02 	lds	r21, 0x02BD
    13f0:	20 91 b6 02 	lds	r18, 0x02B6
    13f4:	30 91 b7 02 	lds	r19, 0x02B7
    13f8:	24 0f       	add	r18, r20
    13fa:	35 1f       	adc	r19, r21
     }
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,270,iCr/40,iCr/8.7),iCr/40,iCr/8);
    13fc:	44 27       	eor	r20, r20
    13fe:	37 fd       	sbrc	r19, 7
    1400:	40 95       	com	r20
    1402:	54 2f       	mov	r21, r20
        break; 
    }   
  }
  long mapAngle(long x, long in_min, long in_max, long out_min, long out_max)
  {
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    1404:	0e 94 b1 10 	call	0x2162	; 0x2162 <__mulsi3>
    1408:	2e e0       	ldi	r18, 0x0E	; 14
    140a:	31 e0       	ldi	r19, 0x01	; 1
    140c:	40 e0       	ldi	r20, 0x00	; 0
    140e:	50 e0       	ldi	r21, 0x00	; 0
    1410:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <__divmodsi4>
    1414:	2c 0d       	add	r18, r12
    1416:	3d 1d       	adc	r19, r13
    1418:	4e 1d       	adc	r20, r14
    141a:	5f 1d       	adc	r21, r15
     }
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,270,iCr/40,iCr/8.7),iCr/40,iCr/8);
    141c:	c8 01       	movw	r24, r16
    141e:	99 23       	and	r25, r25
    1420:	0c f4       	brge	.+2      	; 0x1424 <_Z4loopv+0x2b4>
    1422:	07 96       	adiw	r24, 0x07	; 7
    1424:	95 95       	asr	r25
    1426:	87 95       	ror	r24
    1428:	95 95       	asr	r25
    142a:	87 95       	ror	r24
    142c:	95 95       	asr	r25
    142e:	87 95       	ror	r24
    1430:	aa 27       	eor	r26, r26
    1432:	97 fd       	sbrc	r25, 7
    1434:	a0 95       	com	r26
    1436:	ba 2f       	mov	r27, r26
  {
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  }
  long constraint(long nUm,long lOwer,long uPper)
  {
    if(nUm>uPper){
    1438:	82 17       	cp	r24, r18
    143a:	93 07       	cpc	r25, r19
    143c:	a4 07       	cpc	r26, r20
    143e:	b5 07       	cpc	r27, r21
    1440:	4c f0       	brlt	.+18     	; 0x1454 <_Z4loopv+0x2e4>
    1442:	da 01       	movw	r26, r20
    1444:	c9 01       	movw	r24, r18
    1446:	2c 15       	cp	r18, r12
    1448:	3d 05       	cpc	r19, r13
    144a:	4e 05       	cpc	r20, r14
    144c:	5f 05       	cpc	r21, r15
    144e:	14 f4       	brge	.+4      	; 0x1454 <_Z4loopv+0x2e4>
    1450:	d7 01       	movw	r26, r14
    1452:	c6 01       	movw	r24, r12
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,270,iCr/40,iCr/8.7),iCr/40,iCr/8);
    switch(pIn)
    1454:	20 91 cd 02 	lds	r18, 0x02CD
    1458:	28 30       	cpi	r18, 0x08	; 8
    145a:	09 f4       	brne	.+2      	; 0x145e <_Z4loopv+0x2ee>
    145c:	7a c0       	rjmp	.+244    	; 0x1552 <_Z4loopv+0x3e2>
    145e:	29 30       	cpi	r18, 0x09	; 9
    1460:	90 f4       	brcc	.+36     	; 0x1486 <_Z4loopv+0x316>
    1462:	25 30       	cpi	r18, 0x05	; 5
    1464:	d1 f1       	breq	.+116    	; 0x14da <_Z4loopv+0x36a>
    1466:	26 30       	cpi	r18, 0x06	; 6
    1468:	38 f4       	brcc	.+14     	; 0x1478 <_Z4loopv+0x308>
    146a:	22 30       	cpi	r18, 0x02	; 2
    146c:	09 f4       	brne	.+2      	; 0x1470 <_Z4loopv+0x300>
    146e:	41 c0       	rjmp	.+130    	; 0x14f2 <_Z4loopv+0x382>
    1470:	23 30       	cpi	r18, 0x03	; 3
    1472:	09 f0       	breq	.+2      	; 0x1476 <_Z4loopv+0x306>
    1474:	9d c0       	rjmp	.+314    	; 0x15b0 <_Z4loopv+0x440>
    1476:	49 c0       	rjmp	.+146    	; 0x150a <_Z4loopv+0x39a>
    1478:	26 30       	cpi	r18, 0x06	; 6
    147a:	09 f4       	brne	.+2      	; 0x147e <_Z4loopv+0x30e>
    147c:	52 c0       	rjmp	.+164    	; 0x1522 <_Z4loopv+0x3b2>
    147e:	27 30       	cpi	r18, 0x07	; 7
    1480:	09 f0       	breq	.+2      	; 0x1484 <_Z4loopv+0x314>
    1482:	96 c0       	rjmp	.+300    	; 0x15b0 <_Z4loopv+0x440>
    1484:	5a c0       	rjmp	.+180    	; 0x153a <_Z4loopv+0x3ca>
    1486:	2c 32       	cpi	r18, 0x2C	; 44
    1488:	09 f4       	brne	.+2      	; 0x148c <_Z4loopv+0x31c>
    148a:	87 c0       	rjmp	.+270    	; 0x159a <_Z4loopv+0x42a>
    148c:	2d 32       	cpi	r18, 0x2D	; 45
    148e:	30 f4       	brcc	.+12     	; 0x149c <_Z4loopv+0x32c>
    1490:	2b 30       	cpi	r18, 0x0B	; 11
    1492:	59 f0       	breq	.+22     	; 0x14aa <_Z4loopv+0x33a>
    1494:	2c 30       	cpi	r18, 0x0C	; 12
    1496:	09 f0       	breq	.+2      	; 0x149a <_Z4loopv+0x32a>
    1498:	8b c0       	rjmp	.+278    	; 0x15b0 <_Z4loopv+0x440>
    149a:	13 c0       	rjmp	.+38     	; 0x14c2 <_Z4loopv+0x352>
    149c:	2d 32       	cpi	r18, 0x2D	; 45
    149e:	09 f4       	brne	.+2      	; 0x14a2 <_Z4loopv+0x332>
    14a0:	70 c0       	rjmp	.+224    	; 0x1582 <_Z4loopv+0x412>
    14a2:	2e 32       	cpi	r18, 0x2E	; 46
    14a4:	09 f0       	breq	.+2      	; 0x14a8 <_Z4loopv+0x338>
    14a6:	84 c0       	rjmp	.+264    	; 0x15b0 <_Z4loopv+0x440>
    14a8:	60 c0       	rjmp	.+192    	; 0x156a <_Z4loopv+0x3fa>
    {
     case 11:
        OCR1A=ICR1-vAl;
    14aa:	20 91 86 00 	lds	r18, 0x0086
    14ae:	30 91 87 00 	lds	r19, 0x0087
    14b2:	f9 01       	movw	r30, r18
    14b4:	e8 1b       	sub	r30, r24
    14b6:	f9 0b       	sbc	r31, r25
    14b8:	f0 93 89 00 	sts	0x0089, r31
    14bc:	e0 93 88 00 	sts	0x0088, r30
    14c0:	77 c0       	rjmp	.+238    	; 0x15b0 <_Z4loopv+0x440>
        break;
      case 12:
        OCR1B=ICR1-vAl;
    14c2:	20 91 86 00 	lds	r18, 0x0086
    14c6:	30 91 87 00 	lds	r19, 0x0087
    14ca:	a9 01       	movw	r20, r18
    14cc:	48 1b       	sub	r20, r24
    14ce:	59 0b       	sbc	r21, r25
    14d0:	50 93 8b 00 	sts	0x008B, r21
    14d4:	40 93 8a 00 	sts	0x008A, r20
    14d8:	6b c0       	rjmp	.+214    	; 0x15b0 <_Z4loopv+0x440>
        break;
      case 5:
        OCR3A=ICR3-vAl;
    14da:	20 91 96 00 	lds	r18, 0x0096
    14de:	30 91 97 00 	lds	r19, 0x0097
    14e2:	f9 01       	movw	r30, r18
    14e4:	e8 1b       	sub	r30, r24
    14e6:	f9 0b       	sbc	r31, r25
    14e8:	f0 93 99 00 	sts	0x0099, r31
    14ec:	e0 93 98 00 	sts	0x0098, r30
    14f0:	5f c0       	rjmp	.+190    	; 0x15b0 <_Z4loopv+0x440>
        break;
      case 2:
        OCR3B=ICR3-vAl;
    14f2:	20 91 96 00 	lds	r18, 0x0096
    14f6:	30 91 97 00 	lds	r19, 0x0097
    14fa:	a9 01       	movw	r20, r18
    14fc:	48 1b       	sub	r20, r24
    14fe:	59 0b       	sbc	r21, r25
    1500:	50 93 9b 00 	sts	0x009B, r21
    1504:	40 93 9a 00 	sts	0x009A, r20
    1508:	53 c0       	rjmp	.+166    	; 0x15b0 <_Z4loopv+0x440>
        break;
      case 3:
        OCR3C=ICR3-vAl;
    150a:	20 91 96 00 	lds	r18, 0x0096
    150e:	30 91 97 00 	lds	r19, 0x0097
    1512:	f9 01       	movw	r30, r18
    1514:	e8 1b       	sub	r30, r24
    1516:	f9 0b       	sbc	r31, r25
    1518:	f0 93 9d 00 	sts	0x009D, r31
    151c:	e0 93 9c 00 	sts	0x009C, r30
    1520:	47 c0       	rjmp	.+142    	; 0x15b0 <_Z4loopv+0x440>
        break;
      case 6:
        OCR4A=ICR4-vAl;
    1522:	20 91 a6 00 	lds	r18, 0x00A6
    1526:	30 91 a7 00 	lds	r19, 0x00A7
    152a:	a9 01       	movw	r20, r18
    152c:	48 1b       	sub	r20, r24
    152e:	59 0b       	sbc	r21, r25
    1530:	50 93 a9 00 	sts	0x00A9, r21
    1534:	40 93 a8 00 	sts	0x00A8, r20
    1538:	3b c0       	rjmp	.+118    	; 0x15b0 <_Z4loopv+0x440>
        break;
      case 7:
        OCR4B=ICR4-vAl;
    153a:	20 91 a6 00 	lds	r18, 0x00A6
    153e:	30 91 a7 00 	lds	r19, 0x00A7
    1542:	f9 01       	movw	r30, r18
    1544:	e8 1b       	sub	r30, r24
    1546:	f9 0b       	sbc	r31, r25
    1548:	f0 93 ab 00 	sts	0x00AB, r31
    154c:	e0 93 aa 00 	sts	0x00AA, r30
    1550:	2f c0       	rjmp	.+94     	; 0x15b0 <_Z4loopv+0x440>
        break; 
      case 8:
        OCR4C=ICR4-vAl;
    1552:	20 91 a6 00 	lds	r18, 0x00A6
    1556:	30 91 a7 00 	lds	r19, 0x00A7
    155a:	a9 01       	movw	r20, r18
    155c:	48 1b       	sub	r20, r24
    155e:	59 0b       	sbc	r21, r25
    1560:	50 93 ad 00 	sts	0x00AD, r21
    1564:	40 93 ac 00 	sts	0x00AC, r20
    1568:	23 c0       	rjmp	.+70     	; 0x15b0 <_Z4loopv+0x440>
        break;
      case 46:
        OCR5A=ICR5-vAl;
    156a:	20 91 26 01 	lds	r18, 0x0126
    156e:	30 91 27 01 	lds	r19, 0x0127
    1572:	f9 01       	movw	r30, r18
    1574:	e8 1b       	sub	r30, r24
    1576:	f9 0b       	sbc	r31, r25
    1578:	f0 93 29 01 	sts	0x0129, r31
    157c:	e0 93 28 01 	sts	0x0128, r30
    1580:	17 c0       	rjmp	.+46     	; 0x15b0 <_Z4loopv+0x440>
        break;
      case 45:
        OCR5B=ICR5-vAl;
    1582:	20 91 26 01 	lds	r18, 0x0126
    1586:	30 91 27 01 	lds	r19, 0x0127
    158a:	a9 01       	movw	r20, r18
    158c:	48 1b       	sub	r20, r24
    158e:	59 0b       	sbc	r21, r25
    1590:	50 93 2b 01 	sts	0x012B, r21
    1594:	40 93 2a 01 	sts	0x012A, r20
    1598:	0b c0       	rjmp	.+22     	; 0x15b0 <_Z4loopv+0x440>
        break;
      case 44:
        OCR5C=ICR5-vAl;
    159a:	20 91 26 01 	lds	r18, 0x0126
    159e:	30 91 27 01 	lds	r19, 0x0127
    15a2:	f9 01       	movw	r30, r18
    15a4:	e8 1b       	sub	r30, r24
    15a6:	f9 0b       	sbc	r31, r25
    15a8:	f0 93 2d 01 	sts	0x012D, r31
    15ac:	e0 93 2c 01 	sts	0x012C, r30
     }
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,270,iCr/40,iCr/8.7),iCr/40,iCr/8);
    15b0:	00 91 ce 02 	lds	r16, 0x02CE
    15b4:	10 91 cf 02 	lds	r17, 0x02CF
    15b8:	c8 01       	movw	r24, r16
    15ba:	68 e2       	ldi	r22, 0x28	; 40
    15bc:	70 e0       	ldi	r23, 0x00	; 0
    15be:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <__divmodhi4>
    15c2:	6b 01       	movw	r12, r22
    15c4:	ee 24       	eor	r14, r14
    15c6:	d7 fc       	sbrc	r13, 7
    15c8:	e0 94       	com	r14
    15ca:	fe 2c       	mov	r15, r14
    15cc:	b8 01       	movw	r22, r16
    15ce:	88 27       	eor	r24, r24
    15d0:	77 fd       	sbrc	r23, 7
    15d2:	80 95       	com	r24
    15d4:	98 2f       	mov	r25, r24
    15d6:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <__floatsisf>
    15da:	23 e3       	ldi	r18, 0x33	; 51
    15dc:	33 e3       	ldi	r19, 0x33	; 51
    15de:	4b e0       	ldi	r20, 0x0B	; 11
    15e0:	51 e4       	ldi	r21, 0x41	; 65
    15e2:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <__divsf3>
    15e6:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <__fixsfsi>
        break; 
    }   
  }
  long mapAngle(long x, long in_min, long in_max, long out_min, long out_max)
  {
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    15ea:	6c 19       	sub	r22, r12
    15ec:	7d 09       	sbc	r23, r13
    15ee:	8e 09       	sbc	r24, r14
    15f0:	9f 09       	sbc	r25, r15
	swerve3.write(angle+correction[2]);
    15f2:	40 91 bc 02 	lds	r20, 0x02BC
    15f6:	50 91 bd 02 	lds	r21, 0x02BD
    15fa:	20 91 b8 02 	lds	r18, 0x02B8
    15fe:	30 91 b9 02 	lds	r19, 0x02B9
    1602:	24 0f       	add	r18, r20
    1604:	35 1f       	adc	r19, r21
     }
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,270,iCr/40,iCr/8.7),iCr/40,iCr/8);
    1606:	44 27       	eor	r20, r20
    1608:	37 fd       	sbrc	r19, 7
    160a:	40 95       	com	r20
    160c:	54 2f       	mov	r21, r20
        break; 
    }   
  }
  long mapAngle(long x, long in_min, long in_max, long out_min, long out_max)
  {
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    160e:	0e 94 b1 10 	call	0x2162	; 0x2162 <__mulsi3>
    1612:	2e e0       	ldi	r18, 0x0E	; 14
    1614:	31 e0       	ldi	r19, 0x01	; 1
    1616:	40 e0       	ldi	r20, 0x00	; 0
    1618:	50 e0       	ldi	r21, 0x00	; 0
    161a:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <__divmodsi4>
    161e:	2c 0d       	add	r18, r12
    1620:	3d 1d       	adc	r19, r13
    1622:	4e 1d       	adc	r20, r14
    1624:	5f 1d       	adc	r21, r15
     }
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,270,iCr/40,iCr/8.7),iCr/40,iCr/8);
    1626:	c8 01       	movw	r24, r16
    1628:	99 23       	and	r25, r25
    162a:	0c f4       	brge	.+2      	; 0x162e <_Z4loopv+0x4be>
    162c:	07 96       	adiw	r24, 0x07	; 7
    162e:	95 95       	asr	r25
    1630:	87 95       	ror	r24
    1632:	95 95       	asr	r25
    1634:	87 95       	ror	r24
    1636:	95 95       	asr	r25
    1638:	87 95       	ror	r24
    163a:	aa 27       	eor	r26, r26
    163c:	97 fd       	sbrc	r25, 7
    163e:	a0 95       	com	r26
    1640:	ba 2f       	mov	r27, r26
  {
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  }
  long constraint(long nUm,long lOwer,long uPper)
  {
    if(nUm>uPper){
    1642:	82 17       	cp	r24, r18
    1644:	93 07       	cpc	r25, r19
    1646:	a4 07       	cpc	r26, r20
    1648:	b5 07       	cpc	r27, r21
    164a:	4c f0       	brlt	.+18     	; 0x165e <_Z4loopv+0x4ee>
    164c:	da 01       	movw	r26, r20
    164e:	c9 01       	movw	r24, r18
    1650:	2c 15       	cp	r18, r12
    1652:	3d 05       	cpc	r19, r13
    1654:	4e 05       	cpc	r20, r14
    1656:	5f 05       	cpc	r21, r15
    1658:	14 f4       	brge	.+4      	; 0x165e <_Z4loopv+0x4ee>
    165a:	d7 01       	movw	r26, r14
    165c:	c6 01       	movw	r24, r12
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,270,iCr/40,iCr/8.7),iCr/40,iCr/8);
    switch(pIn)
    165e:	20 91 d0 02 	lds	r18, 0x02D0
    1662:	28 30       	cpi	r18, 0x08	; 8
    1664:	09 f4       	brne	.+2      	; 0x1668 <_Z4loopv+0x4f8>
    1666:	7a c0       	rjmp	.+244    	; 0x175c <_Z4loopv+0x5ec>
    1668:	29 30       	cpi	r18, 0x09	; 9
    166a:	90 f4       	brcc	.+36     	; 0x1690 <_Z4loopv+0x520>
    166c:	25 30       	cpi	r18, 0x05	; 5
    166e:	d1 f1       	breq	.+116    	; 0x16e4 <_Z4loopv+0x574>
    1670:	26 30       	cpi	r18, 0x06	; 6
    1672:	38 f4       	brcc	.+14     	; 0x1682 <_Z4loopv+0x512>
    1674:	22 30       	cpi	r18, 0x02	; 2
    1676:	09 f4       	brne	.+2      	; 0x167a <_Z4loopv+0x50a>
    1678:	41 c0       	rjmp	.+130    	; 0x16fc <_Z4loopv+0x58c>
    167a:	23 30       	cpi	r18, 0x03	; 3
    167c:	09 f0       	breq	.+2      	; 0x1680 <_Z4loopv+0x510>
    167e:	9d c0       	rjmp	.+314    	; 0x17ba <_Z4loopv+0x64a>
    1680:	49 c0       	rjmp	.+146    	; 0x1714 <_Z4loopv+0x5a4>
    1682:	26 30       	cpi	r18, 0x06	; 6
    1684:	09 f4       	brne	.+2      	; 0x1688 <_Z4loopv+0x518>
    1686:	52 c0       	rjmp	.+164    	; 0x172c <_Z4loopv+0x5bc>
    1688:	27 30       	cpi	r18, 0x07	; 7
    168a:	09 f0       	breq	.+2      	; 0x168e <_Z4loopv+0x51e>
    168c:	96 c0       	rjmp	.+300    	; 0x17ba <_Z4loopv+0x64a>
    168e:	5a c0       	rjmp	.+180    	; 0x1744 <_Z4loopv+0x5d4>
    1690:	2c 32       	cpi	r18, 0x2C	; 44
    1692:	09 f4       	brne	.+2      	; 0x1696 <_Z4loopv+0x526>
    1694:	87 c0       	rjmp	.+270    	; 0x17a4 <_Z4loopv+0x634>
    1696:	2d 32       	cpi	r18, 0x2D	; 45
    1698:	30 f4       	brcc	.+12     	; 0x16a6 <_Z4loopv+0x536>
    169a:	2b 30       	cpi	r18, 0x0B	; 11
    169c:	59 f0       	breq	.+22     	; 0x16b4 <_Z4loopv+0x544>
    169e:	2c 30       	cpi	r18, 0x0C	; 12
    16a0:	09 f0       	breq	.+2      	; 0x16a4 <_Z4loopv+0x534>
    16a2:	8b c0       	rjmp	.+278    	; 0x17ba <_Z4loopv+0x64a>
    16a4:	13 c0       	rjmp	.+38     	; 0x16cc <_Z4loopv+0x55c>
    16a6:	2d 32       	cpi	r18, 0x2D	; 45
    16a8:	09 f4       	brne	.+2      	; 0x16ac <_Z4loopv+0x53c>
    16aa:	70 c0       	rjmp	.+224    	; 0x178c <_Z4loopv+0x61c>
    16ac:	2e 32       	cpi	r18, 0x2E	; 46
    16ae:	09 f0       	breq	.+2      	; 0x16b2 <_Z4loopv+0x542>
    16b0:	84 c0       	rjmp	.+264    	; 0x17ba <_Z4loopv+0x64a>
    16b2:	60 c0       	rjmp	.+192    	; 0x1774 <_Z4loopv+0x604>
    {
     case 11:
        OCR1A=ICR1-vAl;
    16b4:	20 91 86 00 	lds	r18, 0x0086
    16b8:	30 91 87 00 	lds	r19, 0x0087
    16bc:	a9 01       	movw	r20, r18
    16be:	48 1b       	sub	r20, r24
    16c0:	59 0b       	sbc	r21, r25
    16c2:	50 93 89 00 	sts	0x0089, r21
    16c6:	40 93 88 00 	sts	0x0088, r20
    16ca:	77 c0       	rjmp	.+238    	; 0x17ba <_Z4loopv+0x64a>
        break;
      case 12:
        OCR1B=ICR1-vAl;
    16cc:	20 91 86 00 	lds	r18, 0x0086
    16d0:	30 91 87 00 	lds	r19, 0x0087
    16d4:	f9 01       	movw	r30, r18
    16d6:	e8 1b       	sub	r30, r24
    16d8:	f9 0b       	sbc	r31, r25
    16da:	f0 93 8b 00 	sts	0x008B, r31
    16de:	e0 93 8a 00 	sts	0x008A, r30
    16e2:	6b c0       	rjmp	.+214    	; 0x17ba <_Z4loopv+0x64a>
        break;
      case 5:
        OCR3A=ICR3-vAl;
    16e4:	20 91 96 00 	lds	r18, 0x0096
    16e8:	30 91 97 00 	lds	r19, 0x0097
    16ec:	a9 01       	movw	r20, r18
    16ee:	48 1b       	sub	r20, r24
    16f0:	59 0b       	sbc	r21, r25
    16f2:	50 93 99 00 	sts	0x0099, r21
    16f6:	40 93 98 00 	sts	0x0098, r20
    16fa:	5f c0       	rjmp	.+190    	; 0x17ba <_Z4loopv+0x64a>
        break;
      case 2:
        OCR3B=ICR3-vAl;
    16fc:	20 91 96 00 	lds	r18, 0x0096
    1700:	30 91 97 00 	lds	r19, 0x0097
    1704:	f9 01       	movw	r30, r18
    1706:	e8 1b       	sub	r30, r24
    1708:	f9 0b       	sbc	r31, r25
    170a:	f0 93 9b 00 	sts	0x009B, r31
    170e:	e0 93 9a 00 	sts	0x009A, r30
    1712:	53 c0       	rjmp	.+166    	; 0x17ba <_Z4loopv+0x64a>
        break;
      case 3:
        OCR3C=ICR3-vAl;
    1714:	20 91 96 00 	lds	r18, 0x0096
    1718:	30 91 97 00 	lds	r19, 0x0097
    171c:	a9 01       	movw	r20, r18
    171e:	48 1b       	sub	r20, r24
    1720:	59 0b       	sbc	r21, r25
    1722:	50 93 9d 00 	sts	0x009D, r21
    1726:	40 93 9c 00 	sts	0x009C, r20
    172a:	47 c0       	rjmp	.+142    	; 0x17ba <_Z4loopv+0x64a>
        break;
      case 6:
        OCR4A=ICR4-vAl;
    172c:	20 91 a6 00 	lds	r18, 0x00A6
    1730:	30 91 a7 00 	lds	r19, 0x00A7
    1734:	f9 01       	movw	r30, r18
    1736:	e8 1b       	sub	r30, r24
    1738:	f9 0b       	sbc	r31, r25
    173a:	f0 93 a9 00 	sts	0x00A9, r31
    173e:	e0 93 a8 00 	sts	0x00A8, r30
    1742:	3b c0       	rjmp	.+118    	; 0x17ba <_Z4loopv+0x64a>
        break;
      case 7:
        OCR4B=ICR4-vAl;
    1744:	20 91 a6 00 	lds	r18, 0x00A6
    1748:	30 91 a7 00 	lds	r19, 0x00A7
    174c:	a9 01       	movw	r20, r18
    174e:	48 1b       	sub	r20, r24
    1750:	59 0b       	sbc	r21, r25
    1752:	50 93 ab 00 	sts	0x00AB, r21
    1756:	40 93 aa 00 	sts	0x00AA, r20
    175a:	2f c0       	rjmp	.+94     	; 0x17ba <_Z4loopv+0x64a>
        break; 
      case 8:
        OCR4C=ICR4-vAl;
    175c:	20 91 a6 00 	lds	r18, 0x00A6
    1760:	30 91 a7 00 	lds	r19, 0x00A7
    1764:	f9 01       	movw	r30, r18
    1766:	e8 1b       	sub	r30, r24
    1768:	f9 0b       	sbc	r31, r25
    176a:	f0 93 ad 00 	sts	0x00AD, r31
    176e:	e0 93 ac 00 	sts	0x00AC, r30
    1772:	23 c0       	rjmp	.+70     	; 0x17ba <_Z4loopv+0x64a>
        break;
      case 46:
        OCR5A=ICR5-vAl;
    1774:	20 91 26 01 	lds	r18, 0x0126
    1778:	30 91 27 01 	lds	r19, 0x0127
    177c:	a9 01       	movw	r20, r18
    177e:	48 1b       	sub	r20, r24
    1780:	59 0b       	sbc	r21, r25
    1782:	50 93 29 01 	sts	0x0129, r21
    1786:	40 93 28 01 	sts	0x0128, r20
    178a:	17 c0       	rjmp	.+46     	; 0x17ba <_Z4loopv+0x64a>
        break;
      case 45:
        OCR5B=ICR5-vAl;
    178c:	20 91 26 01 	lds	r18, 0x0126
    1790:	30 91 27 01 	lds	r19, 0x0127
    1794:	f9 01       	movw	r30, r18
    1796:	e8 1b       	sub	r30, r24
    1798:	f9 0b       	sbc	r31, r25
    179a:	f0 93 2b 01 	sts	0x012B, r31
    179e:	e0 93 2a 01 	sts	0x012A, r30
    17a2:	0b c0       	rjmp	.+22     	; 0x17ba <_Z4loopv+0x64a>
        break;
      case 44:
        OCR5C=ICR5-vAl;
    17a4:	20 91 26 01 	lds	r18, 0x0126
    17a8:	30 91 27 01 	lds	r19, 0x0127
    17ac:	a9 01       	movw	r20, r18
    17ae:	48 1b       	sub	r20, r24
    17b0:	59 0b       	sbc	r21, r25
    17b2:	50 93 2d 01 	sts	0x012D, r21
    17b6:	40 93 2c 01 	sts	0x012C, r20
     }
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,270,iCr/40,iCr/8.7),iCr/40,iCr/8);
    17ba:	00 91 d1 02 	lds	r16, 0x02D1
    17be:	10 91 d2 02 	lds	r17, 0x02D2
    17c2:	c8 01       	movw	r24, r16
    17c4:	68 e2       	ldi	r22, 0x28	; 40
    17c6:	70 e0       	ldi	r23, 0x00	; 0
    17c8:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <__divmodhi4>
    17cc:	6b 01       	movw	r12, r22
    17ce:	ee 24       	eor	r14, r14
    17d0:	d7 fc       	sbrc	r13, 7
    17d2:	e0 94       	com	r14
    17d4:	fe 2c       	mov	r15, r14
    17d6:	b8 01       	movw	r22, r16
    17d8:	88 27       	eor	r24, r24
    17da:	77 fd       	sbrc	r23, 7
    17dc:	80 95       	com	r24
    17de:	98 2f       	mov	r25, r24
    17e0:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <__floatsisf>
    17e4:	23 e3       	ldi	r18, 0x33	; 51
    17e6:	33 e3       	ldi	r19, 0x33	; 51
    17e8:	4b e0       	ldi	r20, 0x0B	; 11
    17ea:	51 e4       	ldi	r21, 0x41	; 65
    17ec:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <__divsf3>
    17f0:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <__fixsfsi>
        break; 
    }   
  }
  long mapAngle(long x, long in_min, long in_max, long out_min, long out_max)
  {
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    17f4:	6c 19       	sub	r22, r12
    17f6:	7d 09       	sbc	r23, r13
    17f8:	8e 09       	sbc	r24, r14
    17fa:	9f 09       	sbc	r25, r15
	swerve4.write(angle+correction[3]);	
    17fc:	40 91 bc 02 	lds	r20, 0x02BC
    1800:	50 91 bd 02 	lds	r21, 0x02BD
    1804:	20 91 ba 02 	lds	r18, 0x02BA
    1808:	30 91 bb 02 	lds	r19, 0x02BB
    180c:	24 0f       	add	r18, r20
    180e:	35 1f       	adc	r19, r21
     }
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,270,iCr/40,iCr/8.7),iCr/40,iCr/8);
    1810:	44 27       	eor	r20, r20
    1812:	37 fd       	sbrc	r19, 7
    1814:	40 95       	com	r20
    1816:	54 2f       	mov	r21, r20
        break; 
    }   
  }
  long mapAngle(long x, long in_min, long in_max, long out_min, long out_max)
  {
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    1818:	0e 94 b1 10 	call	0x2162	; 0x2162 <__mulsi3>
    181c:	2e e0       	ldi	r18, 0x0E	; 14
    181e:	31 e0       	ldi	r19, 0x01	; 1
    1820:	40 e0       	ldi	r20, 0x00	; 0
    1822:	50 e0       	ldi	r21, 0x00	; 0
    1824:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <__divmodsi4>
    1828:	2c 0d       	add	r18, r12
    182a:	3d 1d       	adc	r19, r13
    182c:	4e 1d       	adc	r20, r14
    182e:	5f 1d       	adc	r21, r15
     }
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,270,iCr/40,iCr/8.7),iCr/40,iCr/8);
    1830:	c8 01       	movw	r24, r16
    1832:	99 23       	and	r25, r25
    1834:	0c f4       	brge	.+2      	; 0x1838 <_Z4loopv+0x6c8>
    1836:	07 96       	adiw	r24, 0x07	; 7
    1838:	95 95       	asr	r25
    183a:	87 95       	ror	r24
    183c:	95 95       	asr	r25
    183e:	87 95       	ror	r24
    1840:	95 95       	asr	r25
    1842:	87 95       	ror	r24
    1844:	aa 27       	eor	r26, r26
    1846:	97 fd       	sbrc	r25, 7
    1848:	a0 95       	com	r26
    184a:	ba 2f       	mov	r27, r26
  {
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  }
  long constraint(long nUm,long lOwer,long uPper)
  {
    if(nUm>uPper){
    184c:	82 17       	cp	r24, r18
    184e:	93 07       	cpc	r25, r19
    1850:	a4 07       	cpc	r26, r20
    1852:	b5 07       	cpc	r27, r21
    1854:	4c f0       	brlt	.+18     	; 0x1868 <_Z4loopv+0x6f8>
    1856:	da 01       	movw	r26, r20
    1858:	c9 01       	movw	r24, r18
    185a:	2c 15       	cp	r18, r12
    185c:	3d 05       	cpc	r19, r13
    185e:	4e 05       	cpc	r20, r14
    1860:	5f 05       	cpc	r21, r15
    1862:	14 f4       	brge	.+4      	; 0x1868 <_Z4loopv+0x6f8>
    1864:	d7 01       	movw	r26, r14
    1866:	c6 01       	movw	r24, r12
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,270,iCr/40,iCr/8.7),iCr/40,iCr/8);
    switch(pIn)
    1868:	20 91 d3 02 	lds	r18, 0x02D3
    186c:	28 30       	cpi	r18, 0x08	; 8
    186e:	09 f4       	brne	.+2      	; 0x1872 <_Z4loopv+0x702>
    1870:	7a c0       	rjmp	.+244    	; 0x1966 <_Z4loopv+0x7f6>
    1872:	29 30       	cpi	r18, 0x09	; 9
    1874:	90 f4       	brcc	.+36     	; 0x189a <_Z4loopv+0x72a>
    1876:	25 30       	cpi	r18, 0x05	; 5
    1878:	d1 f1       	breq	.+116    	; 0x18ee <_Z4loopv+0x77e>
    187a:	26 30       	cpi	r18, 0x06	; 6
    187c:	38 f4       	brcc	.+14     	; 0x188c <_Z4loopv+0x71c>
    187e:	22 30       	cpi	r18, 0x02	; 2
    1880:	09 f4       	brne	.+2      	; 0x1884 <_Z4loopv+0x714>
    1882:	41 c0       	rjmp	.+130    	; 0x1906 <_Z4loopv+0x796>
    1884:	23 30       	cpi	r18, 0x03	; 3
    1886:	09 f0       	breq	.+2      	; 0x188a <_Z4loopv+0x71a>
    1888:	9d c0       	rjmp	.+314    	; 0x19c4 <_Z4loopv+0x854>
    188a:	49 c0       	rjmp	.+146    	; 0x191e <_Z4loopv+0x7ae>
    188c:	26 30       	cpi	r18, 0x06	; 6
    188e:	09 f4       	brne	.+2      	; 0x1892 <_Z4loopv+0x722>
    1890:	52 c0       	rjmp	.+164    	; 0x1936 <_Z4loopv+0x7c6>
    1892:	27 30       	cpi	r18, 0x07	; 7
    1894:	09 f0       	breq	.+2      	; 0x1898 <_Z4loopv+0x728>
    1896:	96 c0       	rjmp	.+300    	; 0x19c4 <_Z4loopv+0x854>
    1898:	5a c0       	rjmp	.+180    	; 0x194e <_Z4loopv+0x7de>
    189a:	2c 32       	cpi	r18, 0x2C	; 44
    189c:	09 f4       	brne	.+2      	; 0x18a0 <_Z4loopv+0x730>
    189e:	87 c0       	rjmp	.+270    	; 0x19ae <_Z4loopv+0x83e>
    18a0:	2d 32       	cpi	r18, 0x2D	; 45
    18a2:	30 f4       	brcc	.+12     	; 0x18b0 <_Z4loopv+0x740>
    18a4:	2b 30       	cpi	r18, 0x0B	; 11
    18a6:	59 f0       	breq	.+22     	; 0x18be <_Z4loopv+0x74e>
    18a8:	2c 30       	cpi	r18, 0x0C	; 12
    18aa:	09 f0       	breq	.+2      	; 0x18ae <_Z4loopv+0x73e>
    18ac:	8b c0       	rjmp	.+278    	; 0x19c4 <_Z4loopv+0x854>
    18ae:	13 c0       	rjmp	.+38     	; 0x18d6 <_Z4loopv+0x766>
    18b0:	2d 32       	cpi	r18, 0x2D	; 45
    18b2:	09 f4       	brne	.+2      	; 0x18b6 <_Z4loopv+0x746>
    18b4:	70 c0       	rjmp	.+224    	; 0x1996 <_Z4loopv+0x826>
    18b6:	2e 32       	cpi	r18, 0x2E	; 46
    18b8:	09 f0       	breq	.+2      	; 0x18bc <_Z4loopv+0x74c>
    18ba:	84 c0       	rjmp	.+264    	; 0x19c4 <_Z4loopv+0x854>
    18bc:	60 c0       	rjmp	.+192    	; 0x197e <_Z4loopv+0x80e>
    {
     case 11:
        OCR1A=ICR1-vAl;
    18be:	20 91 86 00 	lds	r18, 0x0086
    18c2:	30 91 87 00 	lds	r19, 0x0087
    18c6:	f9 01       	movw	r30, r18
    18c8:	e8 1b       	sub	r30, r24
    18ca:	f9 0b       	sbc	r31, r25
    18cc:	f0 93 89 00 	sts	0x0089, r31
    18d0:	e0 93 88 00 	sts	0x0088, r30
    18d4:	77 c0       	rjmp	.+238    	; 0x19c4 <_Z4loopv+0x854>
        break;
      case 12:
        OCR1B=ICR1-vAl;
    18d6:	20 91 86 00 	lds	r18, 0x0086
    18da:	30 91 87 00 	lds	r19, 0x0087
    18de:	a9 01       	movw	r20, r18
    18e0:	48 1b       	sub	r20, r24
    18e2:	59 0b       	sbc	r21, r25
    18e4:	50 93 8b 00 	sts	0x008B, r21
    18e8:	40 93 8a 00 	sts	0x008A, r20
    18ec:	6b c0       	rjmp	.+214    	; 0x19c4 <_Z4loopv+0x854>
        break;
      case 5:
        OCR3A=ICR3-vAl;
    18ee:	20 91 96 00 	lds	r18, 0x0096
    18f2:	30 91 97 00 	lds	r19, 0x0097
    18f6:	f9 01       	movw	r30, r18
    18f8:	e8 1b       	sub	r30, r24
    18fa:	f9 0b       	sbc	r31, r25
    18fc:	f0 93 99 00 	sts	0x0099, r31
    1900:	e0 93 98 00 	sts	0x0098, r30
    1904:	5f c0       	rjmp	.+190    	; 0x19c4 <_Z4loopv+0x854>
        break;
      case 2:
        OCR3B=ICR3-vAl;
    1906:	20 91 96 00 	lds	r18, 0x0096
    190a:	30 91 97 00 	lds	r19, 0x0097
    190e:	a9 01       	movw	r20, r18
    1910:	48 1b       	sub	r20, r24
    1912:	59 0b       	sbc	r21, r25
    1914:	50 93 9b 00 	sts	0x009B, r21
    1918:	40 93 9a 00 	sts	0x009A, r20
    191c:	53 c0       	rjmp	.+166    	; 0x19c4 <_Z4loopv+0x854>
        break;
      case 3:
        OCR3C=ICR3-vAl;
    191e:	20 91 96 00 	lds	r18, 0x0096
    1922:	30 91 97 00 	lds	r19, 0x0097
    1926:	f9 01       	movw	r30, r18
    1928:	e8 1b       	sub	r30, r24
    192a:	f9 0b       	sbc	r31, r25
    192c:	f0 93 9d 00 	sts	0x009D, r31
    1930:	e0 93 9c 00 	sts	0x009C, r30
    1934:	47 c0       	rjmp	.+142    	; 0x19c4 <_Z4loopv+0x854>
        break;
      case 6:
        OCR4A=ICR4-vAl;
    1936:	20 91 a6 00 	lds	r18, 0x00A6
    193a:	30 91 a7 00 	lds	r19, 0x00A7
    193e:	a9 01       	movw	r20, r18
    1940:	48 1b       	sub	r20, r24
    1942:	59 0b       	sbc	r21, r25
    1944:	50 93 a9 00 	sts	0x00A9, r21
    1948:	40 93 a8 00 	sts	0x00A8, r20
    194c:	3b c0       	rjmp	.+118    	; 0x19c4 <_Z4loopv+0x854>
        break;
      case 7:
        OCR4B=ICR4-vAl;
    194e:	20 91 a6 00 	lds	r18, 0x00A6
    1952:	30 91 a7 00 	lds	r19, 0x00A7
    1956:	f9 01       	movw	r30, r18
    1958:	e8 1b       	sub	r30, r24
    195a:	f9 0b       	sbc	r31, r25
    195c:	f0 93 ab 00 	sts	0x00AB, r31
    1960:	e0 93 aa 00 	sts	0x00AA, r30
    1964:	2f c0       	rjmp	.+94     	; 0x19c4 <_Z4loopv+0x854>
        break; 
      case 8:
        OCR4C=ICR4-vAl;
    1966:	20 91 a6 00 	lds	r18, 0x00A6
    196a:	30 91 a7 00 	lds	r19, 0x00A7
    196e:	a9 01       	movw	r20, r18
    1970:	48 1b       	sub	r20, r24
    1972:	59 0b       	sbc	r21, r25
    1974:	50 93 ad 00 	sts	0x00AD, r21
    1978:	40 93 ac 00 	sts	0x00AC, r20
    197c:	23 c0       	rjmp	.+70     	; 0x19c4 <_Z4loopv+0x854>
        break;
      case 46:
        OCR5A=ICR5-vAl;
    197e:	20 91 26 01 	lds	r18, 0x0126
    1982:	30 91 27 01 	lds	r19, 0x0127
    1986:	f9 01       	movw	r30, r18
    1988:	e8 1b       	sub	r30, r24
    198a:	f9 0b       	sbc	r31, r25
    198c:	f0 93 29 01 	sts	0x0129, r31
    1990:	e0 93 28 01 	sts	0x0128, r30
    1994:	17 c0       	rjmp	.+46     	; 0x19c4 <_Z4loopv+0x854>
        break;
      case 45:
        OCR5B=ICR5-vAl;
    1996:	20 91 26 01 	lds	r18, 0x0126
    199a:	30 91 27 01 	lds	r19, 0x0127
    199e:	a9 01       	movw	r20, r18
    19a0:	48 1b       	sub	r20, r24
    19a2:	59 0b       	sbc	r21, r25
    19a4:	50 93 2b 01 	sts	0x012B, r21
    19a8:	40 93 2a 01 	sts	0x012A, r20
    19ac:	0b c0       	rjmp	.+22     	; 0x19c4 <_Z4loopv+0x854>
        break;
      case 44:
        OCR5C=ICR5-vAl;
    19ae:	20 91 26 01 	lds	r18, 0x0126
    19b2:	30 91 27 01 	lds	r19, 0x0127
    19b6:	f9 01       	movw	r30, r18
    19b8:	e8 1b       	sub	r30, r24
    19ba:	f9 0b       	sbc	r31, r25
    19bc:	f0 93 2d 01 	sts	0x012D, r31
    19c0:	e0 93 2c 01 	sts	0x012C, r30
	}

	//TWO MOTORS
	void drive(uint8_t pWm, uint8_t pWm1){
		
		if(pWm>lAstpwm||pWm1>lAstpwm1){		//accelerate
    19c4:	80 91 d6 02 	lds	r24, 0x02D6
    19c8:	8f 3f       	cpi	r24, 0xFF	; 255
    19ca:	09 f0       	breq	.+2      	; 0x19ce <_Z4loopv+0x85e>
    19cc:	4d c0       	rjmp	.+154    	; 0x1a68 <_Z4loopv+0x8f8>
    19ce:	80 91 db 02 	lds	r24, 0x02DB
    19d2:	8f 3f       	cpi	r24, 0xFF	; 255
    19d4:	09 f0       	breq	.+2      	; 0x19d8 <_Z4loopv+0x868>
    19d6:	48 c0       	rjmp	.+144    	; 0x1a68 <_Z4loopv+0x8f8>
    19d8:	80 c0       	rjmp	.+256    	; 0x1ada <_Z4loopv+0x96a>

			for(lAstpwm=lAstpwm,lAstpwm1=lAstpwm1;lAstpwm<pWm||lAstpwm1<pWm1;){		//increase the speed step by step
				if (pWm>lAstpwm){
					lAstpwm+=step1;
    19da:	f4 01       	movw	r30, r8
    19dc:	60 81       	ld	r22, Z
    19de:	86 0f       	add	r24, r22
    19e0:	f2 01       	movw	r30, r4
    19e2:	80 83       	st	Z, r24
					analogWrite(pWmpin,constrain(lAstpwm,0,pWm));
    19e4:	68 2f       	mov	r22, r24
    19e6:	70 e0       	ldi	r23, 0x00	; 0
    19e8:	80 e0       	ldi	r24, 0x00	; 0
    19ea:	90 e0       	ldi	r25, 0x00	; 0
    19ec:	20 e0       	ldi	r18, 0x00	; 0
    19ee:	30 e0       	ldi	r19, 0x00	; 0
    19f0:	a9 01       	movw	r20, r18
    19f2:	0f 2e       	mov	r0, r31
    19f4:	ff ef       	ldi	r31, 0xFF	; 255
    19f6:	ef 2e       	mov	r14, r31
    19f8:	f0 e0       	ldi	r31, 0x00	; 0
    19fa:	ff 2e       	mov	r15, r31
    19fc:	f0 e0       	ldi	r31, 0x00	; 0
    19fe:	0f 2f       	mov	r16, r31
    1a00:	f0 e0       	ldi	r31, 0x00	; 0
    1a02:	1f 2f       	mov	r17, r31
    1a04:	f0 2d       	mov	r31, r0
    1a06:	0e 94 90 05 	call	0xb20	; 0xb20 <_Z9constrainlll>
    1a0a:	f1 01       	movw	r30, r2
    1a0c:	80 81       	ld	r24, Z
    1a0e:	0e 94 11 04 	call	0x822	; 0x822 <_Z11analogWritehh>
				}
				if (pWm1>lAstpwm1){
    1a12:	eb ed       	ldi	r30, 0xDB	; 219
    1a14:	f2 e0       	ldi	r31, 0x02	; 2
    1a16:	80 81       	ld	r24, Z
    1a18:	8f 3f       	cpi	r24, 0xFF	; 255
    1a1a:	f1 f0       	breq	.+60     	; 0x1a58 <_Z4loopv+0x8e8>
					lAstpwm1+=step2;
    1a1c:	f3 01       	movw	r30, r6
    1a1e:	60 81       	ld	r22, Z
    1a20:	86 0f       	add	r24, r22
    1a22:	e9 81       	ldd	r30, Y+1	; 0x01
    1a24:	fa 81       	ldd	r31, Y+2	; 0x02
    1a26:	80 83       	st	Z, r24
					analogWrite(pWmpin1,constrain(lAstpwm1,0,pWm1));
    1a28:	68 2f       	mov	r22, r24
    1a2a:	70 e0       	ldi	r23, 0x00	; 0
    1a2c:	80 e0       	ldi	r24, 0x00	; 0
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	20 e0       	ldi	r18, 0x00	; 0
    1a32:	30 e0       	ldi	r19, 0x00	; 0
    1a34:	a9 01       	movw	r20, r18
    1a36:	0f 2e       	mov	r0, r31
    1a38:	ff ef       	ldi	r31, 0xFF	; 255
    1a3a:	ef 2e       	mov	r14, r31
    1a3c:	f0 e0       	ldi	r31, 0x00	; 0
    1a3e:	ff 2e       	mov	r15, r31
    1a40:	f0 e0       	ldi	r31, 0x00	; 0
    1a42:	0f 2f       	mov	r16, r31
    1a44:	f0 e0       	ldi	r31, 0x00	; 0
    1a46:	1f 2f       	mov	r17, r31
    1a48:	f0 2d       	mov	r31, r0
    1a4a:	0e 94 90 05 	call	0xb20	; 0xb20 <_Z9constrainlll>
    1a4e:	eb 81       	ldd	r30, Y+3	; 0x03
    1a50:	fc 81       	ldd	r31, Y+4	; 0x04
    1a52:	80 81       	ld	r24, Z
    1a54:	0e 94 11 04 	call	0x822	; 0x822 <_Z11analogWritehh>
				}	
				delay(interval);		
    1a58:	f5 01       	movw	r30, r10
    1a5a:	60 81       	ld	r22, Z
    1a5c:	70 e0       	ldi	r23, 0x00	; 0
    1a5e:	80 e0       	ldi	r24, 0x00	; 0
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	0e 94 0e 05 	call	0xa1c	; 0xa1c <_Z5delaym>
    1a66:	2d c0       	rjmp	.+90     	; 0x1ac2 <_Z4loopv+0x952>
	//TWO MOTORS
	void drive(uint8_t pWm, uint8_t pWm1){
		
		if(pWm>lAstpwm||pWm1>lAstpwm1){		//accelerate

			for(lAstpwm=lAstpwm,lAstpwm1=lAstpwm1;lAstpwm<pWm||lAstpwm1<pWm1;){		//increase the speed step by step
    1a68:	0f 2e       	mov	r0, r31
    1a6a:	f6 ed       	ldi	r31, 0xD6	; 214
    1a6c:	cf 2e       	mov	r12, r31
    1a6e:	f2 e0       	ldi	r31, 0x02	; 2
    1a70:	df 2e       	mov	r13, r31
    1a72:	f0 2d       	mov	r31, r0
				if (pWm>lAstpwm){
					lAstpwm+=step1;
    1a74:	0f 2e       	mov	r0, r31
    1a76:	f7 ed       	ldi	r31, 0xD7	; 215
    1a78:	8f 2e       	mov	r8, r31
    1a7a:	f2 e0       	ldi	r31, 0x02	; 2
    1a7c:	9f 2e       	mov	r9, r31
    1a7e:	f0 2d       	mov	r31, r0
    1a80:	24 01       	movw	r4, r8
    1a82:	08 94       	sec
    1a84:	41 08       	sbc	r4, r1
    1a86:	51 08       	sbc	r5, r1
					analogWrite(pWmpin,constrain(lAstpwm,0,pWm));
    1a88:	0f 2e       	mov	r0, r31
    1a8a:	fe ef       	ldi	r31, 0xFE	; 254
    1a8c:	2f 2e       	mov	r2, r31
    1a8e:	ff ef       	ldi	r31, 0xFF	; 255
    1a90:	3f 2e       	mov	r3, r31
    1a92:	f0 2d       	mov	r31, r0
    1a94:	28 0c       	add	r2, r8
    1a96:	39 1c       	adc	r3, r9
				}
				if (pWm1>lAstpwm1){
					lAstpwm1+=step2;
    1a98:	0f 2e       	mov	r0, r31
    1a9a:	fc ed       	ldi	r31, 0xDC	; 220
    1a9c:	6f 2e       	mov	r6, r31
    1a9e:	f2 e0       	ldi	r31, 0x02	; 2
    1aa0:	7f 2e       	mov	r7, r31
    1aa2:	f0 2d       	mov	r31, r0
    1aa4:	a3 01       	movw	r20, r6
    1aa6:	41 50       	subi	r20, 0x01	; 1
    1aa8:	50 40       	sbci	r21, 0x00	; 0
    1aaa:	5a 83       	std	Y+2, r21	; 0x02
    1aac:	49 83       	std	Y+1, r20	; 0x01
					analogWrite(pWmpin1,constrain(lAstpwm1,0,pWm1));
    1aae:	c3 01       	movw	r24, r6
    1ab0:	02 97       	sbiw	r24, 0x02	; 2
    1ab2:	9c 83       	std	Y+4, r25	; 0x04
    1ab4:	8b 83       	std	Y+3, r24	; 0x03
				}	
				delay(interval);		
    1ab6:	0f 2e       	mov	r0, r31
    1ab8:	f8 ed       	ldi	r31, 0xD8	; 216
    1aba:	af 2e       	mov	r10, r31
    1abc:	f2 e0       	ldi	r31, 0x02	; 2
    1abe:	bf 2e       	mov	r11, r31
    1ac0:	f0 2d       	mov	r31, r0
	//TWO MOTORS
	void drive(uint8_t pWm, uint8_t pWm1){
		
		if(pWm>lAstpwm||pWm1>lAstpwm1){		//accelerate

			for(lAstpwm=lAstpwm,lAstpwm1=lAstpwm1;lAstpwm<pWm||lAstpwm1<pWm1;){		//increase the speed step by step
    1ac2:	f6 01       	movw	r30, r12
    1ac4:	80 81       	ld	r24, Z
    1ac6:	8f 3f       	cpi	r24, 0xFF	; 255
    1ac8:	09 f0       	breq	.+2      	; 0x1acc <_Z4loopv+0x95c>
    1aca:	87 cf       	rjmp	.-242    	; 0x19da <_Z4loopv+0x86a>
    1acc:	eb ed       	ldi	r30, 0xDB	; 219
    1ace:	f2 e0       	ldi	r31, 0x02	; 2
    1ad0:	80 81       	ld	r24, Z
    1ad2:	8f 3f       	cpi	r24, 0xFF	; 255
    1ad4:	09 f0       	breq	.+2      	; 0x1ad8 <_Z4loopv+0x968>
    1ad6:	9d cf       	rjmp	.-198    	; 0x1a12 <_Z4loopv+0x8a2>
    1ad8:	0a c0       	rjmp	.+20     	; 0x1aee <_Z4loopv+0x97e>
				delay(interval);		
			}
		}

		else{		//no change
			analogWrite(pWmpin,pWm);
    1ada:	80 91 d5 02 	lds	r24, 0x02D5
    1ade:	6f ef       	ldi	r22, 0xFF	; 255
    1ae0:	0e 94 11 04 	call	0x822	; 0x822 <_Z11analogWritehh>
			analogWrite(pWmpin1,pWm1);
    1ae4:	80 91 da 02 	lds	r24, 0x02DA
    1ae8:	6f ef       	ldi	r22, 0xFF	; 255
    1aea:	0e 94 11 04 	call	0x822	; 0x822 <_Z11analogWritehh>
		digitalWrite(dIrpin2,dIrection2);
	}

	void drive(uint8_t pWm){
		
		if(pWm>lAstpwm){		//accelerate
    1aee:	80 91 e3 02 	lds	r24, 0x02E3
    1af2:	8f 3f       	cpi	r24, 0xFF	; 255
    1af4:	09 f4       	brne	.+2      	; 0x1af8 <_Z4loopv+0x988>
    1af6:	60 c0       	rjmp	.+192    	; 0x1bb8 <_Z4loopv+0xa48>
			for(lAstpwm=lAstpwm;lAstpwm<pWm;){		//increase the speed step by step
				lAstpwm+=step1;
    1af8:	0f 2e       	mov	r0, r31
    1afa:	f4 ee       	ldi	r31, 0xE4	; 228
    1afc:	af 2e       	mov	r10, r31
    1afe:	f2 e0       	ldi	r31, 0x02	; 2
    1b00:	bf 2e       	mov	r11, r31
    1b02:	f0 2d       	mov	r31, r0
    1b04:	65 01       	movw	r12, r10
    1b06:	08 94       	sec
    1b08:	c1 08       	sbc	r12, r1
    1b0a:	d1 08       	sbc	r13, r1
				analogWrite(pWmpin,constrain(lAstpwm,0,pWm));
    1b0c:	0f 2e       	mov	r0, r31
    1b0e:	fe ef       	ldi	r31, 0xFE	; 254
    1b10:	8f 2e       	mov	r8, r31
    1b12:	ff ef       	ldi	r31, 0xFF	; 255
    1b14:	9f 2e       	mov	r9, r31
    1b16:	f0 2d       	mov	r31, r0
    1b18:	8a 0c       	add	r8, r10
    1b1a:	9b 1c       	adc	r9, r11
				delay(interval);
    1b1c:	35 01       	movw	r6, r10
    1b1e:	08 94       	sec
    1b20:	61 1c       	adc	r6, r1
    1b22:	71 1c       	adc	r7, r1
    1b24:	0f 2e       	mov	r0, r31
    1b26:	f6 ec       	ldi	r31, 0xC6	; 198
    1b28:	4f 2e       	mov	r4, r31
    1b2a:	55 24       	eor	r5, r5
    1b2c:	f0 2d       	mov	r31, r0
	}

	void drive(uint8_t pWm){
		
		if(pWm>lAstpwm){		//accelerate
			for(lAstpwm=lAstpwm;lAstpwm<pWm;){		//increase the speed step by step
    1b2e:	0f 2e       	mov	r0, r31
    1b30:	f3 ee       	ldi	r31, 0xE3	; 227
    1b32:	2f 2e       	mov	r2, r31
    1b34:	f2 e0       	ldi	r31, 0x02	; 2
    1b36:	3f 2e       	mov	r3, r31
    1b38:	f0 2d       	mov	r31, r0
				lAstpwm+=step1;
    1b3a:	f5 01       	movw	r30, r10
    1b3c:	60 81       	ld	r22, Z
    1b3e:	86 0f       	add	r24, r22
    1b40:	f6 01       	movw	r30, r12
    1b42:	80 83       	st	Z, r24
				analogWrite(pWmpin,constrain(lAstpwm,0,pWm));
    1b44:	68 2f       	mov	r22, r24
    1b46:	70 e0       	ldi	r23, 0x00	; 0
    1b48:	80 e0       	ldi	r24, 0x00	; 0
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	20 e0       	ldi	r18, 0x00	; 0
    1b4e:	30 e0       	ldi	r19, 0x00	; 0
    1b50:	a9 01       	movw	r20, r18
    1b52:	0f 2e       	mov	r0, r31
    1b54:	ff ef       	ldi	r31, 0xFF	; 255
    1b56:	ef 2e       	mov	r14, r31
    1b58:	f0 e0       	ldi	r31, 0x00	; 0
    1b5a:	ff 2e       	mov	r15, r31
    1b5c:	f0 e0       	ldi	r31, 0x00	; 0
    1b5e:	0f 2f       	mov	r16, r31
    1b60:	f0 e0       	ldi	r31, 0x00	; 0
    1b62:	1f 2f       	mov	r17, r31
    1b64:	f0 2d       	mov	r31, r0
    1b66:	0e 94 90 05 	call	0xb20	; 0xb20 <_Z9constrainlll>
    1b6a:	f4 01       	movw	r30, r8
    1b6c:	80 81       	ld	r24, Z
    1b6e:	0e 94 11 04 	call	0x822	; 0x822 <_Z11analogWritehh>
				delay(interval);
    1b72:	f3 01       	movw	r30, r6
    1b74:	60 81       	ld	r22, Z
    1b76:	70 e0       	ldi	r23, 0x00	; 0
    1b78:	80 e0       	ldi	r24, 0x00	; 0
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	0e 94 0e 05 	call	0xa1c	; 0xa1c <_Z5delaym>
				Serial.write(constrain(lAstpwm,0,pWm));		
    1b80:	f6 01       	movw	r30, r12
    1b82:	60 81       	ld	r22, Z
    1b84:	70 e0       	ldi	r23, 0x00	; 0
    1b86:	80 e0       	ldi	r24, 0x00	; 0
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	20 e0       	ldi	r18, 0x00	; 0
    1b8c:	30 e0       	ldi	r19, 0x00	; 0
    1b8e:	a9 01       	movw	r20, r18
    1b90:	0e 94 90 05 	call	0xb20	; 0xb20 <_Z9constrainlll>
		UCSR0C = (1<<USBS0)|(3<<UCSZ00);
	}
	/* Set frame format: 8data, 2stop bit */
	void write( unsigned char dAta ){
		/* Wait for empty transmit buffer */
		while ((UCSR0A & (1<<UDRE0))==0);
    1b94:	e0 ec       	ldi	r30, 0xC0	; 192
    1b96:	f0 e0       	ldi	r31, 0x00	; 0
    1b98:	80 81       	ld	r24, Z
    1b9a:	85 ff       	sbrs	r24, 5
    1b9c:	fb cf       	rjmp	.-10     	; 0x1b94 <_Z4loopv+0xa24>
		/* Put data into buffer, sends the data */
		UDR0 = dAta;
    1b9e:	f2 01       	movw	r30, r4
    1ba0:	60 83       	st	Z, r22
    1ba2:	87 ea       	ldi	r24, 0xA7	; 167
    1ba4:	91 e6       	ldi	r25, 0x61	; 97
    1ba6:	01 97       	sbiw	r24, 0x01	; 1
    1ba8:	f1 f7       	brne	.-4      	; 0x1ba6 <_Z4loopv+0xa36>
    1baa:	00 c0       	rjmp	.+0      	; 0x1bac <_Z4loopv+0xa3c>
    1bac:	00 00       	nop
	}

	void drive(uint8_t pWm){
		
		if(pWm>lAstpwm){		//accelerate
			for(lAstpwm=lAstpwm;lAstpwm<pWm;){		//increase the speed step by step
    1bae:	f1 01       	movw	r30, r2
    1bb0:	80 81       	ld	r24, Z
    1bb2:	8f 3f       	cpi	r24, 0xFF	; 255
    1bb4:	11 f6       	brne	.-124    	; 0x1b3a <_Z4loopv+0x9ca>
    1bb6:	05 c0       	rjmp	.+10     	; 0x1bc2 <_Z4loopv+0xa52>
				delay(interval);		
			}
		}

		else{		//no change
			analogWrite(pWmpin,pWm);
    1bb8:	80 91 e2 02 	lds	r24, 0x02E2
    1bbc:	6f ef       	ldi	r22, 0xFF	; 255
    1bbe:	0e 94 11 04 	call	0x822	; 0x822 <_Z11analogWritehh>
	motor12.drive(255,255);
	motor3.drive(255);
	delay(1000);
    1bc2:	68 ee       	ldi	r22, 0xE8	; 232
    1bc4:	73 e0       	ldi	r23, 0x03	; 3
    1bc6:	80 e0       	ldi	r24, 0x00	; 0
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	0e 94 0e 05 	call	0xa1c	; 0xa1c <_Z5delaym>
				delay(interval);		
			}
			
		}

		else if(pWm<lAstpwm||pWm1<lAstpwm1){				//decelerate
    1bce:	80 91 d6 02 	lds	r24, 0x02D6
    1bd2:	88 23       	and	r24, r24
    1bd4:	09 f0       	breq	.+2      	; 0x1bd8 <_Z4loopv+0xa68>
    1bd6:	4b c0       	rjmp	.+150    	; 0x1c6e <_Z4loopv+0xafe>
    1bd8:	80 91 db 02 	lds	r24, 0x02DB
    1bdc:	88 23       	and	r24, r24
    1bde:	09 f0       	breq	.+2      	; 0x1be2 <_Z4loopv+0xa72>
    1be0:	46 c0       	rjmp	.+140    	; 0x1c6e <_Z4loopv+0xafe>
    1be2:	7e c0       	rjmp	.+252    	; 0x1ce0 <_Z4loopv+0xb70>

			for(lAstpwm=lAstpwm,lAstpwm1=lAstpwm1;lAstpwm>pWm||lAstpwm1>pWm1;){		//decrease the speed step by step
				if (pWm<lAstpwm){
					lAstpwm-=step1;
    1be4:	f4 01       	movw	r30, r8
    1be6:	80 81       	ld	r24, Z
    1be8:	68 1b       	sub	r22, r24
    1bea:	f2 01       	movw	r30, r4
    1bec:	60 83       	st	Z, r22
					analogWrite(pWmpin,constrain(lAstpwm,pWm,255));
    1bee:	70 e0       	ldi	r23, 0x00	; 0
    1bf0:	80 e0       	ldi	r24, 0x00	; 0
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
    1bf4:	20 e0       	ldi	r18, 0x00	; 0
    1bf6:	30 e0       	ldi	r19, 0x00	; 0
    1bf8:	a9 01       	movw	r20, r18
    1bfa:	0f 2e       	mov	r0, r31
    1bfc:	ff ef       	ldi	r31, 0xFF	; 255
    1bfe:	ef 2e       	mov	r14, r31
    1c00:	f0 e0       	ldi	r31, 0x00	; 0
    1c02:	ff 2e       	mov	r15, r31
    1c04:	f0 e0       	ldi	r31, 0x00	; 0
    1c06:	0f 2f       	mov	r16, r31
    1c08:	f0 e0       	ldi	r31, 0x00	; 0
    1c0a:	1f 2f       	mov	r17, r31
    1c0c:	f0 2d       	mov	r31, r0
    1c0e:	0e 94 90 05 	call	0xb20	; 0xb20 <_Z9constrainlll>
    1c12:	f1 01       	movw	r30, r2
    1c14:	80 81       	ld	r24, Z
    1c16:	0e 94 11 04 	call	0x822	; 0x822 <_Z11analogWritehh>
				}
				if (pWm1<lAstpwm1){
    1c1a:	eb ed       	ldi	r30, 0xDB	; 219
    1c1c:	f2 e0       	ldi	r31, 0x02	; 2
    1c1e:	60 81       	ld	r22, Z
    1c20:	66 23       	and	r22, r22
    1c22:	e9 f0       	breq	.+58     	; 0x1c5e <_Z4loopv+0xaee>
					lAstpwm1-=step2;
    1c24:	f3 01       	movw	r30, r6
    1c26:	80 81       	ld	r24, Z
    1c28:	68 1b       	sub	r22, r24
    1c2a:	e9 81       	ldd	r30, Y+1	; 0x01
    1c2c:	fa 81       	ldd	r31, Y+2	; 0x02
    1c2e:	60 83       	st	Z, r22
					analogWrite(pWmpin1,constrain(lAstpwm1,pWm1,255));
    1c30:	70 e0       	ldi	r23, 0x00	; 0
    1c32:	80 e0       	ldi	r24, 0x00	; 0
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	20 e0       	ldi	r18, 0x00	; 0
    1c38:	30 e0       	ldi	r19, 0x00	; 0
    1c3a:	a9 01       	movw	r20, r18
    1c3c:	0f 2e       	mov	r0, r31
    1c3e:	ff ef       	ldi	r31, 0xFF	; 255
    1c40:	ef 2e       	mov	r14, r31
    1c42:	f0 e0       	ldi	r31, 0x00	; 0
    1c44:	ff 2e       	mov	r15, r31
    1c46:	f0 e0       	ldi	r31, 0x00	; 0
    1c48:	0f 2f       	mov	r16, r31
    1c4a:	f0 e0       	ldi	r31, 0x00	; 0
    1c4c:	1f 2f       	mov	r17, r31
    1c4e:	f0 2d       	mov	r31, r0
    1c50:	0e 94 90 05 	call	0xb20	; 0xb20 <_Z9constrainlll>
    1c54:	eb 81       	ldd	r30, Y+3	; 0x03
    1c56:	fc 81       	ldd	r31, Y+4	; 0x04
    1c58:	80 81       	ld	r24, Z
    1c5a:	0e 94 11 04 	call	0x822	; 0x822 <_Z11analogWritehh>
				}
				delay(interval);		
    1c5e:	f5 01       	movw	r30, r10
    1c60:	60 81       	ld	r22, Z
    1c62:	70 e0       	ldi	r23, 0x00	; 0
    1c64:	80 e0       	ldi	r24, 0x00	; 0
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	0e 94 0e 05 	call	0xa1c	; 0xa1c <_Z5delaym>
    1c6c:	2d c0       	rjmp	.+90     	; 0x1cc8 <_Z4loopv+0xb58>
			
		}

		else if(pWm<lAstpwm||pWm1<lAstpwm1){				//decelerate

			for(lAstpwm=lAstpwm,lAstpwm1=lAstpwm1;lAstpwm>pWm||lAstpwm1>pWm1;){		//decrease the speed step by step
    1c6e:	0f 2e       	mov	r0, r31
    1c70:	f6 ed       	ldi	r31, 0xD6	; 214
    1c72:	cf 2e       	mov	r12, r31
    1c74:	f2 e0       	ldi	r31, 0x02	; 2
    1c76:	df 2e       	mov	r13, r31
    1c78:	f0 2d       	mov	r31, r0
				if (pWm<lAstpwm){
					lAstpwm-=step1;
    1c7a:	0f 2e       	mov	r0, r31
    1c7c:	f7 ed       	ldi	r31, 0xD7	; 215
    1c7e:	8f 2e       	mov	r8, r31
    1c80:	f2 e0       	ldi	r31, 0x02	; 2
    1c82:	9f 2e       	mov	r9, r31
    1c84:	f0 2d       	mov	r31, r0
    1c86:	24 01       	movw	r4, r8
    1c88:	08 94       	sec
    1c8a:	41 08       	sbc	r4, r1
    1c8c:	51 08       	sbc	r5, r1
					analogWrite(pWmpin,constrain(lAstpwm,pWm,255));
    1c8e:	0f 2e       	mov	r0, r31
    1c90:	fe ef       	ldi	r31, 0xFE	; 254
    1c92:	2f 2e       	mov	r2, r31
    1c94:	ff ef       	ldi	r31, 0xFF	; 255
    1c96:	3f 2e       	mov	r3, r31
    1c98:	f0 2d       	mov	r31, r0
    1c9a:	28 0c       	add	r2, r8
    1c9c:	39 1c       	adc	r3, r9
				}
				if (pWm1<lAstpwm1){
					lAstpwm1-=step2;
    1c9e:	0f 2e       	mov	r0, r31
    1ca0:	fc ed       	ldi	r31, 0xDC	; 220
    1ca2:	6f 2e       	mov	r6, r31
    1ca4:	f2 e0       	ldi	r31, 0x02	; 2
    1ca6:	7f 2e       	mov	r7, r31
    1ca8:	f0 2d       	mov	r31, r0
    1caa:	a3 01       	movw	r20, r6
    1cac:	41 50       	subi	r20, 0x01	; 1
    1cae:	50 40       	sbci	r21, 0x00	; 0
    1cb0:	5a 83       	std	Y+2, r21	; 0x02
    1cb2:	49 83       	std	Y+1, r20	; 0x01
					analogWrite(pWmpin1,constrain(lAstpwm1,pWm1,255));
    1cb4:	c3 01       	movw	r24, r6
    1cb6:	02 97       	sbiw	r24, 0x02	; 2
    1cb8:	9c 83       	std	Y+4, r25	; 0x04
    1cba:	8b 83       	std	Y+3, r24	; 0x03
				}
				delay(interval);		
    1cbc:	0f 2e       	mov	r0, r31
    1cbe:	f8 ed       	ldi	r31, 0xD8	; 216
    1cc0:	af 2e       	mov	r10, r31
    1cc2:	f2 e0       	ldi	r31, 0x02	; 2
    1cc4:	bf 2e       	mov	r11, r31
    1cc6:	f0 2d       	mov	r31, r0
			
		}

		else if(pWm<lAstpwm||pWm1<lAstpwm1){				//decelerate

			for(lAstpwm=lAstpwm,lAstpwm1=lAstpwm1;lAstpwm>pWm||lAstpwm1>pWm1;){		//decrease the speed step by step
    1cc8:	f6 01       	movw	r30, r12
    1cca:	60 81       	ld	r22, Z
    1ccc:	66 23       	and	r22, r22
    1cce:	09 f0       	breq	.+2      	; 0x1cd2 <_Z4loopv+0xb62>
    1cd0:	89 cf       	rjmp	.-238    	; 0x1be4 <_Z4loopv+0xa74>
    1cd2:	eb ed       	ldi	r30, 0xDB	; 219
    1cd4:	f2 e0       	ldi	r31, 0x02	; 2
    1cd6:	80 81       	ld	r24, Z
    1cd8:	88 23       	and	r24, r24
    1cda:	09 f0       	breq	.+2      	; 0x1cde <_Z4loopv+0xb6e>
    1cdc:	9e cf       	rjmp	.-196    	; 0x1c1a <_Z4loopv+0xaaa>
    1cde:	0a c0       	rjmp	.+20     	; 0x1cf4 <_Z4loopv+0xb84>
				delay(interval);		
			}
		}

		else{		//no change
			analogWrite(pWmpin,pWm);
    1ce0:	80 91 d5 02 	lds	r24, 0x02D5
    1ce4:	60 e0       	ldi	r22, 0x00	; 0
    1ce6:	0e 94 11 04 	call	0x822	; 0x822 <_Z11analogWritehh>
			analogWrite(pWmpin1,pWm1);
    1cea:	80 91 da 02 	lds	r24, 0x02DA
    1cee:	60 e0       	ldi	r22, 0x00	; 0
    1cf0:	0e 94 11 04 	call	0x822	; 0x822 <_Z11analogWritehh>
				Serial.write(constrain(lAstpwm,0,pWm));		
			}
			
		}

		else if(pWm<lAstpwm){				//decelerate
    1cf4:	60 91 e3 02 	lds	r22, 0x02E3
    1cf8:	66 23       	and	r22, r22
    1cfa:	e9 f1       	breq	.+122    	; 0x1d76 <_Z4loopv+0xc06>

			for(lAstpwm=lAstpwm;lAstpwm>pWm;){		//decrease the speed step by step
				lAstpwm-=step1;
    1cfc:	0f 2e       	mov	r0, r31
    1cfe:	f4 ee       	ldi	r31, 0xE4	; 228
    1d00:	cf 2e       	mov	r12, r31
    1d02:	f2 e0       	ldi	r31, 0x02	; 2
    1d04:	df 2e       	mov	r13, r31
    1d06:	f0 2d       	mov	r31, r0
    1d08:	36 01       	movw	r6, r12
    1d0a:	08 94       	sec
    1d0c:	61 08       	sbc	r6, r1
    1d0e:	71 08       	sbc	r7, r1
				analogWrite(pWmpin,constrain(lAstpwm,pWm,255));
    1d10:	0f 2e       	mov	r0, r31
    1d12:	fe ef       	ldi	r31, 0xFE	; 254
    1d14:	af 2e       	mov	r10, r31
    1d16:	ff ef       	ldi	r31, 0xFF	; 255
    1d18:	bf 2e       	mov	r11, r31
    1d1a:	f0 2d       	mov	r31, r0
    1d1c:	ac 0c       	add	r10, r12
    1d1e:	bd 1c       	adc	r11, r13
				delay(interval);		
    1d20:	46 01       	movw	r8, r12
    1d22:	08 94       	sec
    1d24:	81 1c       	adc	r8, r1
    1d26:	91 1c       	adc	r9, r1
		}

		else if(pWm<lAstpwm){				//decelerate

			for(lAstpwm=lAstpwm;lAstpwm>pWm;){		//decrease the speed step by step
				lAstpwm-=step1;
    1d28:	f6 01       	movw	r30, r12
    1d2a:	80 81       	ld	r24, Z
    1d2c:	68 1b       	sub	r22, r24
    1d2e:	f3 01       	movw	r30, r6
    1d30:	60 83       	st	Z, r22
				analogWrite(pWmpin,constrain(lAstpwm,pWm,255));
    1d32:	70 e0       	ldi	r23, 0x00	; 0
    1d34:	80 e0       	ldi	r24, 0x00	; 0
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	20 e0       	ldi	r18, 0x00	; 0
    1d3a:	30 e0       	ldi	r19, 0x00	; 0
    1d3c:	a9 01       	movw	r20, r18
    1d3e:	0f 2e       	mov	r0, r31
    1d40:	ff ef       	ldi	r31, 0xFF	; 255
    1d42:	ef 2e       	mov	r14, r31
    1d44:	f0 e0       	ldi	r31, 0x00	; 0
    1d46:	ff 2e       	mov	r15, r31
    1d48:	f0 e0       	ldi	r31, 0x00	; 0
    1d4a:	0f 2f       	mov	r16, r31
    1d4c:	f0 e0       	ldi	r31, 0x00	; 0
    1d4e:	1f 2f       	mov	r17, r31
    1d50:	f0 2d       	mov	r31, r0
    1d52:	0e 94 90 05 	call	0xb20	; 0xb20 <_Z9constrainlll>
    1d56:	f5 01       	movw	r30, r10
    1d58:	80 81       	ld	r24, Z
    1d5a:	0e 94 11 04 	call	0x822	; 0x822 <_Z11analogWritehh>
				delay(interval);		
    1d5e:	f4 01       	movw	r30, r8
    1d60:	60 81       	ld	r22, Z
    1d62:	70 e0       	ldi	r23, 0x00	; 0
    1d64:	80 e0       	ldi	r24, 0x00	; 0
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	0e 94 0e 05 	call	0xa1c	; 0xa1c <_Z5delaym>
			
		}

		else if(pWm<lAstpwm){				//decelerate

			for(lAstpwm=lAstpwm;lAstpwm>pWm;){		//decrease the speed step by step
    1d6c:	f3 01       	movw	r30, r6
    1d6e:	60 81       	ld	r22, Z
    1d70:	66 23       	and	r22, r22
    1d72:	d1 f6       	brne	.-76     	; 0x1d28 <_Z4loopv+0xbb8>
    1d74:	05 c0       	rjmp	.+10     	; 0x1d80 <_Z4loopv+0xc10>
				delay(interval);		
			}
		}

		else{		//no change
			analogWrite(pWmpin,pWm);
    1d76:	80 91 e2 02 	lds	r24, 0x02E2
    1d7a:	60 e0       	ldi	r22, 0x00	; 0
    1d7c:	0e 94 11 04 	call	0x822	; 0x822 <_Z11analogWritehh>
	motor12.drive(0,0);
	motor3.drive(0);
	delay(1000);
    1d80:	68 ee       	ldi	r22, 0xE8	; 232
    1d82:	73 e0       	ldi	r23, 0x03	; 3
    1d84:	80 e0       	ldi	r24, 0x00	; 0
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	0e 94 0e 05 	call	0xa1c	; 0xa1c <_Z5delaym>
    1d8c:	0f 90       	pop	r0
    1d8e:	0f 90       	pop	r0
    1d90:	0f 90       	pop	r0
    1d92:	0f 90       	pop	r0
    1d94:	cf 91       	pop	r28
    1d96:	df 91       	pop	r29
    1d98:	1f 91       	pop	r17
    1d9a:	0f 91       	pop	r16
    1d9c:	ff 90       	pop	r15
    1d9e:	ef 90       	pop	r14
    1da0:	df 90       	pop	r13
    1da2:	cf 90       	pop	r12
    1da4:	bf 90       	pop	r11
    1da6:	af 90       	pop	r10
    1da8:	9f 90       	pop	r9
    1daa:	8f 90       	pop	r8
    1dac:	7f 90       	pop	r7
    1dae:	6f 90       	pop	r6
    1db0:	5f 90       	pop	r5
    1db2:	4f 90       	pop	r4
    1db4:	3f 90       	pop	r3
    1db6:	2f 90       	pop	r2
    1db8:	08 95       	ret

00001dba <main>:
	uSerfun();
}*/

int main(){
	//tinit();
	setup();
    1dba:	0e 94 2d 08 	call	0x105a	; 0x105a <_Z5setupv>
	while(1){
		loop();
    1dbe:	0e 94 b8 08 	call	0x1170	; 0x1170 <_Z4loopv>
    1dc2:	fd cf       	rjmp	.-6      	; 0x1dbe <main+0x4>

00001dc4 <_GLOBAL__I_tImer2_millis>:
    1dc4:	0f 93       	push	r16
    1dc6:	1f 93       	push	r17
		lAstpwm=0;
		step1=5;
		interval=10;
	}
	Cytron(uint8_t getdIrpin, uint8_t getpWmpin, uint8_t getdIrpin1, uint8_t getpWmpin1){     //constructor function takes direction and pwm pins for cytron
    	dIrpin=getdIrpin;
    1dc8:	15 e0       	ldi	r17, 0x05	; 5
    1dca:	10 93 d4 02 	sts	0x02D4, r17
	    pWmpin=getpWmpin;
    1dce:	84 e0       	ldi	r24, 0x04	; 4
    1dd0:	80 93 d5 02 	sts	0x02D5, r24
	    pWmpin1=getpWmpin1;
    1dd4:	82 e0       	ldi	r24, 0x02	; 2
    1dd6:	80 93 da 02 	sts	0x02DA, r24
	    dIrpin1=getdIrpin1;
    1dda:	83 e0       	ldi	r24, 0x03	; 3
    1ddc:	80 93 d9 02 	sts	0x02D9, r24
	    pinMode(dIrpin,OUTPUT);     //sets direction pin as output
    1de0:	85 e0       	ldi	r24, 0x05	; 5
    1de2:	61 e0       	ldi	r22, 0x01	; 1
    1de4:	0e 94 a6 00 	call	0x14c	; 0x14c <_Z7pinModehh>
	    pinMode(dIrpin1,OUTPUT);
    1de8:	80 91 d9 02 	lds	r24, 0x02D9
    1dec:	61 e0       	ldi	r22, 0x01	; 1
    1dee:	0e 94 a6 00 	call	0x14c	; 0x14c <_Z7pinModehh>
	    lAstpwm=0;
    1df2:	10 92 d6 02 	sts	0x02D6, r1
		lAstpwm1=0;
    1df6:	10 92 db 02 	sts	0x02DB, r1
		step1=5;
    1dfa:	10 93 d7 02 	sts	0x02D7, r17
		step2=5;
    1dfe:	10 93 dc 02 	sts	0x02DC, r17
		interval=10;
    1e02:	0a e0       	ldi	r16, 0x0A	; 10
    1e04:	00 93 d8 02 	sts	0x02D8, r16
	uint8_t dIrpin, pWmpin, lAstpwm, step1, interval;	//variables for first motor
	uint8_t dIrpin1, pWmpin1, lAstpwm1, step2; //variables for second motor
	uint8_t dIrpin2, pWmpin2, lAstpwm2, step3; //variables for third motor
	
	Cytron(uint8_t getdIrpin, uint8_t getpWmpin){			//constructor function takes direction and pwm pins for cytron
		dIrpin=getdIrpin;
    1e08:	80 e1       	ldi	r24, 0x10	; 16
    1e0a:	80 93 e1 02 	sts	0x02E1, r24
		pWmpin=getpWmpin;
    1e0e:	81 e1       	ldi	r24, 0x11	; 17
    1e10:	80 93 e2 02 	sts	0x02E2, r24
		pinMode(dIrpin,OUTPUT);			//sets direction pin as output
    1e14:	80 e1       	ldi	r24, 0x10	; 16
    1e16:	61 e0       	ldi	r22, 0x01	; 1
    1e18:	0e 94 a6 00 	call	0x14c	; 0x14c <_Z7pinModehh>
		lAstpwm=0;
    1e1c:	10 92 e3 02 	sts	0x02E3, r1
		step1=5;
    1e20:	10 93 e4 02 	sts	0x02E4, r17
		interval=10;
    1e24:	00 93 e5 02 	sts	0x02E5, r16
	uint8_t dIrpin, pWmpin, lAstpwm, step1, interval;	//variables for first motor
	uint8_t dIrpin1, pWmpin1, lAstpwm1, step2; //variables for second motor
	uint8_t dIrpin2, pWmpin2, lAstpwm2, step3; //variables for third motor
	
	Cytron(uint8_t getdIrpin, uint8_t getpWmpin){			//constructor function takes direction and pwm pins for cytron
		dIrpin=getdIrpin;
    1e28:	8d e2       	ldi	r24, 0x2D	; 45
    1e2a:	80 93 ee 02 	sts	0x02EE, r24
		pWmpin=getpWmpin;
    1e2e:	86 e0       	ldi	r24, 0x06	; 6
    1e30:	80 93 ef 02 	sts	0x02EF, r24
		pinMode(dIrpin,OUTPUT);			//sets direction pin as output
    1e34:	8d e2       	ldi	r24, 0x2D	; 45
    1e36:	61 e0       	ldi	r22, 0x01	; 1
    1e38:	0e 94 a6 00 	call	0x14c	; 0x14c <_Z7pinModehh>
		lAstpwm=0;
    1e3c:	10 92 f0 02 	sts	0x02F0, r1
		step1=5;
    1e40:	10 93 f1 02 	sts	0x02F1, r17
		interval=10;
    1e44:	00 93 f2 02 	sts	0x02F2, r16
    1e48:	1f 91       	pop	r17
    1e4a:	0f 91       	pop	r16
    1e4c:	08 95       	ret

00001e4e <__divsf3>:
    1e4e:	0c d0       	rcall	.+24     	; 0x1e68 <__divsf3x>
    1e50:	eb c0       	rjmp	.+470    	; 0x2028 <__fp_round>
    1e52:	e3 d0       	rcall	.+454    	; 0x201a <__fp_pscB>
    1e54:	40 f0       	brcs	.+16     	; 0x1e66 <__divsf3+0x18>
    1e56:	da d0       	rcall	.+436    	; 0x200c <__fp_pscA>
    1e58:	30 f0       	brcs	.+12     	; 0x1e66 <__divsf3+0x18>
    1e5a:	21 f4       	brne	.+8      	; 0x1e64 <__divsf3+0x16>
    1e5c:	5f 3f       	cpi	r21, 0xFF	; 255
    1e5e:	19 f0       	breq	.+6      	; 0x1e66 <__divsf3+0x18>
    1e60:	cc c0       	rjmp	.+408    	; 0x1ffa <__fp_inf>
    1e62:	51 11       	cpse	r21, r1
    1e64:	15 c1       	rjmp	.+554    	; 0x2090 <__fp_szero>
    1e66:	cf c0       	rjmp	.+414    	; 0x2006 <__fp_nan>

00001e68 <__divsf3x>:
    1e68:	f0 d0       	rcall	.+480    	; 0x204a <__fp_split3>
    1e6a:	98 f3       	brcs	.-26     	; 0x1e52 <__divsf3+0x4>

00001e6c <__divsf3_pse>:
    1e6c:	99 23       	and	r25, r25
    1e6e:	c9 f3       	breq	.-14     	; 0x1e62 <__divsf3+0x14>
    1e70:	55 23       	and	r21, r21
    1e72:	b1 f3       	breq	.-20     	; 0x1e60 <__divsf3+0x12>
    1e74:	95 1b       	sub	r25, r21
    1e76:	55 0b       	sbc	r21, r21
    1e78:	bb 27       	eor	r27, r27
    1e7a:	aa 27       	eor	r26, r26
    1e7c:	62 17       	cp	r22, r18
    1e7e:	73 07       	cpc	r23, r19
    1e80:	84 07       	cpc	r24, r20
    1e82:	38 f0       	brcs	.+14     	; 0x1e92 <__divsf3_pse+0x26>
    1e84:	9f 5f       	subi	r25, 0xFF	; 255
    1e86:	5f 4f       	sbci	r21, 0xFF	; 255
    1e88:	22 0f       	add	r18, r18
    1e8a:	33 1f       	adc	r19, r19
    1e8c:	44 1f       	adc	r20, r20
    1e8e:	aa 1f       	adc	r26, r26
    1e90:	a9 f3       	breq	.-22     	; 0x1e7c <__divsf3_pse+0x10>
    1e92:	33 d0       	rcall	.+102    	; 0x1efa <__divsf3_pse+0x8e>
    1e94:	0e 2e       	mov	r0, r30
    1e96:	3a f0       	brmi	.+14     	; 0x1ea6 <__divsf3_pse+0x3a>
    1e98:	e0 e8       	ldi	r30, 0x80	; 128
    1e9a:	30 d0       	rcall	.+96     	; 0x1efc <__divsf3_pse+0x90>
    1e9c:	91 50       	subi	r25, 0x01	; 1
    1e9e:	50 40       	sbci	r21, 0x00	; 0
    1ea0:	e6 95       	lsr	r30
    1ea2:	00 1c       	adc	r0, r0
    1ea4:	ca f7       	brpl	.-14     	; 0x1e98 <__divsf3_pse+0x2c>
    1ea6:	29 d0       	rcall	.+82     	; 0x1efa <__divsf3_pse+0x8e>
    1ea8:	fe 2f       	mov	r31, r30
    1eaa:	27 d0       	rcall	.+78     	; 0x1efa <__divsf3_pse+0x8e>
    1eac:	66 0f       	add	r22, r22
    1eae:	77 1f       	adc	r23, r23
    1eb0:	88 1f       	adc	r24, r24
    1eb2:	bb 1f       	adc	r27, r27
    1eb4:	26 17       	cp	r18, r22
    1eb6:	37 07       	cpc	r19, r23
    1eb8:	48 07       	cpc	r20, r24
    1eba:	ab 07       	cpc	r26, r27
    1ebc:	b0 e8       	ldi	r27, 0x80	; 128
    1ebe:	09 f0       	breq	.+2      	; 0x1ec2 <__divsf3_pse+0x56>
    1ec0:	bb 0b       	sbc	r27, r27
    1ec2:	80 2d       	mov	r24, r0
    1ec4:	bf 01       	movw	r22, r30
    1ec6:	ff 27       	eor	r31, r31
    1ec8:	93 58       	subi	r25, 0x83	; 131
    1eca:	5f 4f       	sbci	r21, 0xFF	; 255
    1ecc:	2a f0       	brmi	.+10     	; 0x1ed8 <__divsf3_pse+0x6c>
    1ece:	9e 3f       	cpi	r25, 0xFE	; 254
    1ed0:	51 05       	cpc	r21, r1
    1ed2:	68 f0       	brcs	.+26     	; 0x1eee <__divsf3_pse+0x82>
    1ed4:	92 c0       	rjmp	.+292    	; 0x1ffa <__fp_inf>
    1ed6:	dc c0       	rjmp	.+440    	; 0x2090 <__fp_szero>
    1ed8:	5f 3f       	cpi	r21, 0xFF	; 255
    1eda:	ec f3       	brlt	.-6      	; 0x1ed6 <__divsf3_pse+0x6a>
    1edc:	98 3e       	cpi	r25, 0xE8	; 232
    1ede:	dc f3       	brlt	.-10     	; 0x1ed6 <__divsf3_pse+0x6a>
    1ee0:	86 95       	lsr	r24
    1ee2:	77 95       	ror	r23
    1ee4:	67 95       	ror	r22
    1ee6:	b7 95       	ror	r27
    1ee8:	f7 95       	ror	r31
    1eea:	9f 5f       	subi	r25, 0xFF	; 255
    1eec:	c9 f7       	brne	.-14     	; 0x1ee0 <__divsf3_pse+0x74>
    1eee:	88 0f       	add	r24, r24
    1ef0:	91 1d       	adc	r25, r1
    1ef2:	96 95       	lsr	r25
    1ef4:	87 95       	ror	r24
    1ef6:	97 f9       	bld	r25, 7
    1ef8:	08 95       	ret
    1efa:	e1 e0       	ldi	r30, 0x01	; 1
    1efc:	66 0f       	add	r22, r22
    1efe:	77 1f       	adc	r23, r23
    1f00:	88 1f       	adc	r24, r24
    1f02:	bb 1f       	adc	r27, r27
    1f04:	62 17       	cp	r22, r18
    1f06:	73 07       	cpc	r23, r19
    1f08:	84 07       	cpc	r24, r20
    1f0a:	ba 07       	cpc	r27, r26
    1f0c:	20 f0       	brcs	.+8      	; 0x1f16 <__divsf3_pse+0xaa>
    1f0e:	62 1b       	sub	r22, r18
    1f10:	73 0b       	sbc	r23, r19
    1f12:	84 0b       	sbc	r24, r20
    1f14:	ba 0b       	sbc	r27, r26
    1f16:	ee 1f       	adc	r30, r30
    1f18:	88 f7       	brcc	.-30     	; 0x1efc <__divsf3_pse+0x90>
    1f1a:	e0 95       	com	r30
    1f1c:	08 95       	ret

00001f1e <__fixsfsi>:
    1f1e:	04 d0       	rcall	.+8      	; 0x1f28 <__fixunssfsi>
    1f20:	68 94       	set
    1f22:	b1 11       	cpse	r27, r1
    1f24:	b5 c0       	rjmp	.+362    	; 0x2090 <__fp_szero>
    1f26:	08 95       	ret

00001f28 <__fixunssfsi>:
    1f28:	98 d0       	rcall	.+304    	; 0x205a <__fp_splitA>
    1f2a:	88 f0       	brcs	.+34     	; 0x1f4e <__fixunssfsi+0x26>
    1f2c:	9f 57       	subi	r25, 0x7F	; 127
    1f2e:	90 f0       	brcs	.+36     	; 0x1f54 <__fixunssfsi+0x2c>
    1f30:	b9 2f       	mov	r27, r25
    1f32:	99 27       	eor	r25, r25
    1f34:	b7 51       	subi	r27, 0x17	; 23
    1f36:	a0 f0       	brcs	.+40     	; 0x1f60 <__fixunssfsi+0x38>
    1f38:	d1 f0       	breq	.+52     	; 0x1f6e <__fixunssfsi+0x46>
    1f3a:	66 0f       	add	r22, r22
    1f3c:	77 1f       	adc	r23, r23
    1f3e:	88 1f       	adc	r24, r24
    1f40:	99 1f       	adc	r25, r25
    1f42:	1a f0       	brmi	.+6      	; 0x1f4a <__fixunssfsi+0x22>
    1f44:	ba 95       	dec	r27
    1f46:	c9 f7       	brne	.-14     	; 0x1f3a <__fixunssfsi+0x12>
    1f48:	12 c0       	rjmp	.+36     	; 0x1f6e <__fixunssfsi+0x46>
    1f4a:	b1 30       	cpi	r27, 0x01	; 1
    1f4c:	81 f0       	breq	.+32     	; 0x1f6e <__fixunssfsi+0x46>
    1f4e:	9f d0       	rcall	.+318    	; 0x208e <__fp_zero>
    1f50:	b1 e0       	ldi	r27, 0x01	; 1
    1f52:	08 95       	ret
    1f54:	9c c0       	rjmp	.+312    	; 0x208e <__fp_zero>
    1f56:	67 2f       	mov	r22, r23
    1f58:	78 2f       	mov	r23, r24
    1f5a:	88 27       	eor	r24, r24
    1f5c:	b8 5f       	subi	r27, 0xF8	; 248
    1f5e:	39 f0       	breq	.+14     	; 0x1f6e <__fixunssfsi+0x46>
    1f60:	b9 3f       	cpi	r27, 0xF9	; 249
    1f62:	cc f3       	brlt	.-14     	; 0x1f56 <__fixunssfsi+0x2e>
    1f64:	86 95       	lsr	r24
    1f66:	77 95       	ror	r23
    1f68:	67 95       	ror	r22
    1f6a:	b3 95       	inc	r27
    1f6c:	d9 f7       	brne	.-10     	; 0x1f64 <__fixunssfsi+0x3c>
    1f6e:	3e f4       	brtc	.+14     	; 0x1f7e <__fixunssfsi+0x56>
    1f70:	90 95       	com	r25
    1f72:	80 95       	com	r24
    1f74:	70 95       	com	r23
    1f76:	61 95       	neg	r22
    1f78:	7f 4f       	sbci	r23, 0xFF	; 255
    1f7a:	8f 4f       	sbci	r24, 0xFF	; 255
    1f7c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f7e:	08 95       	ret

00001f80 <__floatunsisf>:
    1f80:	e8 94       	clt
    1f82:	09 c0       	rjmp	.+18     	; 0x1f96 <__floatsisf+0x12>

00001f84 <__floatsisf>:
    1f84:	97 fb       	bst	r25, 7
    1f86:	3e f4       	brtc	.+14     	; 0x1f96 <__floatsisf+0x12>
    1f88:	90 95       	com	r25
    1f8a:	80 95       	com	r24
    1f8c:	70 95       	com	r23
    1f8e:	61 95       	neg	r22
    1f90:	7f 4f       	sbci	r23, 0xFF	; 255
    1f92:	8f 4f       	sbci	r24, 0xFF	; 255
    1f94:	9f 4f       	sbci	r25, 0xFF	; 255
    1f96:	99 23       	and	r25, r25
    1f98:	a9 f0       	breq	.+42     	; 0x1fc4 <__floatsisf+0x40>
    1f9a:	f9 2f       	mov	r31, r25
    1f9c:	96 e9       	ldi	r25, 0x96	; 150
    1f9e:	bb 27       	eor	r27, r27
    1fa0:	93 95       	inc	r25
    1fa2:	f6 95       	lsr	r31
    1fa4:	87 95       	ror	r24
    1fa6:	77 95       	ror	r23
    1fa8:	67 95       	ror	r22
    1faa:	b7 95       	ror	r27
    1fac:	f1 11       	cpse	r31, r1
    1fae:	f8 cf       	rjmp	.-16     	; 0x1fa0 <__floatsisf+0x1c>
    1fb0:	fa f4       	brpl	.+62     	; 0x1ff0 <__floatsisf+0x6c>
    1fb2:	bb 0f       	add	r27, r27
    1fb4:	11 f4       	brne	.+4      	; 0x1fba <__floatsisf+0x36>
    1fb6:	60 ff       	sbrs	r22, 0
    1fb8:	1b c0       	rjmp	.+54     	; 0x1ff0 <__floatsisf+0x6c>
    1fba:	6f 5f       	subi	r22, 0xFF	; 255
    1fbc:	7f 4f       	sbci	r23, 0xFF	; 255
    1fbe:	8f 4f       	sbci	r24, 0xFF	; 255
    1fc0:	9f 4f       	sbci	r25, 0xFF	; 255
    1fc2:	16 c0       	rjmp	.+44     	; 0x1ff0 <__floatsisf+0x6c>
    1fc4:	88 23       	and	r24, r24
    1fc6:	11 f0       	breq	.+4      	; 0x1fcc <__floatsisf+0x48>
    1fc8:	96 e9       	ldi	r25, 0x96	; 150
    1fca:	11 c0       	rjmp	.+34     	; 0x1fee <__floatsisf+0x6a>
    1fcc:	77 23       	and	r23, r23
    1fce:	21 f0       	breq	.+8      	; 0x1fd8 <__floatsisf+0x54>
    1fd0:	9e e8       	ldi	r25, 0x8E	; 142
    1fd2:	87 2f       	mov	r24, r23
    1fd4:	76 2f       	mov	r23, r22
    1fd6:	05 c0       	rjmp	.+10     	; 0x1fe2 <__floatsisf+0x5e>
    1fd8:	66 23       	and	r22, r22
    1fda:	71 f0       	breq	.+28     	; 0x1ff8 <__floatsisf+0x74>
    1fdc:	96 e8       	ldi	r25, 0x86	; 134
    1fde:	86 2f       	mov	r24, r22
    1fe0:	70 e0       	ldi	r23, 0x00	; 0
    1fe2:	60 e0       	ldi	r22, 0x00	; 0
    1fe4:	2a f0       	brmi	.+10     	; 0x1ff0 <__floatsisf+0x6c>
    1fe6:	9a 95       	dec	r25
    1fe8:	66 0f       	add	r22, r22
    1fea:	77 1f       	adc	r23, r23
    1fec:	88 1f       	adc	r24, r24
    1fee:	da f7       	brpl	.-10     	; 0x1fe6 <__floatsisf+0x62>
    1ff0:	88 0f       	add	r24, r24
    1ff2:	96 95       	lsr	r25
    1ff4:	87 95       	ror	r24
    1ff6:	97 f9       	bld	r25, 7
    1ff8:	08 95       	ret

00001ffa <__fp_inf>:
    1ffa:	97 f9       	bld	r25, 7
    1ffc:	9f 67       	ori	r25, 0x7F	; 127
    1ffe:	80 e8       	ldi	r24, 0x80	; 128
    2000:	70 e0       	ldi	r23, 0x00	; 0
    2002:	60 e0       	ldi	r22, 0x00	; 0
    2004:	08 95       	ret

00002006 <__fp_nan>:
    2006:	9f ef       	ldi	r25, 0xFF	; 255
    2008:	80 ec       	ldi	r24, 0xC0	; 192
    200a:	08 95       	ret

0000200c <__fp_pscA>:
    200c:	00 24       	eor	r0, r0
    200e:	0a 94       	dec	r0
    2010:	16 16       	cp	r1, r22
    2012:	17 06       	cpc	r1, r23
    2014:	18 06       	cpc	r1, r24
    2016:	09 06       	cpc	r0, r25
    2018:	08 95       	ret

0000201a <__fp_pscB>:
    201a:	00 24       	eor	r0, r0
    201c:	0a 94       	dec	r0
    201e:	12 16       	cp	r1, r18
    2020:	13 06       	cpc	r1, r19
    2022:	14 06       	cpc	r1, r20
    2024:	05 06       	cpc	r0, r21
    2026:	08 95       	ret

00002028 <__fp_round>:
    2028:	09 2e       	mov	r0, r25
    202a:	03 94       	inc	r0
    202c:	00 0c       	add	r0, r0
    202e:	11 f4       	brne	.+4      	; 0x2034 <__fp_round+0xc>
    2030:	88 23       	and	r24, r24
    2032:	52 f0       	brmi	.+20     	; 0x2048 <__fp_round+0x20>
    2034:	bb 0f       	add	r27, r27
    2036:	40 f4       	brcc	.+16     	; 0x2048 <__fp_round+0x20>
    2038:	bf 2b       	or	r27, r31
    203a:	11 f4       	brne	.+4      	; 0x2040 <__fp_round+0x18>
    203c:	60 ff       	sbrs	r22, 0
    203e:	04 c0       	rjmp	.+8      	; 0x2048 <__fp_round+0x20>
    2040:	6f 5f       	subi	r22, 0xFF	; 255
    2042:	7f 4f       	sbci	r23, 0xFF	; 255
    2044:	8f 4f       	sbci	r24, 0xFF	; 255
    2046:	9f 4f       	sbci	r25, 0xFF	; 255
    2048:	08 95       	ret

0000204a <__fp_split3>:
    204a:	57 fd       	sbrc	r21, 7
    204c:	90 58       	subi	r25, 0x80	; 128
    204e:	44 0f       	add	r20, r20
    2050:	55 1f       	adc	r21, r21
    2052:	59 f0       	breq	.+22     	; 0x206a <__fp_splitA+0x10>
    2054:	5f 3f       	cpi	r21, 0xFF	; 255
    2056:	71 f0       	breq	.+28     	; 0x2074 <__fp_splitA+0x1a>
    2058:	47 95       	ror	r20

0000205a <__fp_splitA>:
    205a:	88 0f       	add	r24, r24
    205c:	97 fb       	bst	r25, 7
    205e:	99 1f       	adc	r25, r25
    2060:	61 f0       	breq	.+24     	; 0x207a <__fp_splitA+0x20>
    2062:	9f 3f       	cpi	r25, 0xFF	; 255
    2064:	79 f0       	breq	.+30     	; 0x2084 <__fp_splitA+0x2a>
    2066:	87 95       	ror	r24
    2068:	08 95       	ret
    206a:	12 16       	cp	r1, r18
    206c:	13 06       	cpc	r1, r19
    206e:	14 06       	cpc	r1, r20
    2070:	55 1f       	adc	r21, r21
    2072:	f2 cf       	rjmp	.-28     	; 0x2058 <__fp_split3+0xe>
    2074:	46 95       	lsr	r20
    2076:	f1 df       	rcall	.-30     	; 0x205a <__fp_splitA>
    2078:	08 c0       	rjmp	.+16     	; 0x208a <__fp_splitA+0x30>
    207a:	16 16       	cp	r1, r22
    207c:	17 06       	cpc	r1, r23
    207e:	18 06       	cpc	r1, r24
    2080:	99 1f       	adc	r25, r25
    2082:	f1 cf       	rjmp	.-30     	; 0x2066 <__fp_splitA+0xc>
    2084:	86 95       	lsr	r24
    2086:	71 05       	cpc	r23, r1
    2088:	61 05       	cpc	r22, r1
    208a:	08 94       	sec
    208c:	08 95       	ret

0000208e <__fp_zero>:
    208e:	e8 94       	clt

00002090 <__fp_szero>:
    2090:	bb 27       	eor	r27, r27
    2092:	66 27       	eor	r22, r22
    2094:	77 27       	eor	r23, r23
    2096:	cb 01       	movw	r24, r22
    2098:	97 f9       	bld	r25, 7
    209a:	08 95       	ret

0000209c <__mulsf3>:
    209c:	0b d0       	rcall	.+22     	; 0x20b4 <__mulsf3x>
    209e:	c4 cf       	rjmp	.-120    	; 0x2028 <__fp_round>
    20a0:	b5 df       	rcall	.-150    	; 0x200c <__fp_pscA>
    20a2:	28 f0       	brcs	.+10     	; 0x20ae <__mulsf3+0x12>
    20a4:	ba df       	rcall	.-140    	; 0x201a <__fp_pscB>
    20a6:	18 f0       	brcs	.+6      	; 0x20ae <__mulsf3+0x12>
    20a8:	95 23       	and	r25, r21
    20aa:	09 f0       	breq	.+2      	; 0x20ae <__mulsf3+0x12>
    20ac:	a6 cf       	rjmp	.-180    	; 0x1ffa <__fp_inf>
    20ae:	ab cf       	rjmp	.-170    	; 0x2006 <__fp_nan>
    20b0:	11 24       	eor	r1, r1
    20b2:	ee cf       	rjmp	.-36     	; 0x2090 <__fp_szero>

000020b4 <__mulsf3x>:
    20b4:	ca df       	rcall	.-108    	; 0x204a <__fp_split3>
    20b6:	a0 f3       	brcs	.-24     	; 0x20a0 <__mulsf3+0x4>

000020b8 <__mulsf3_pse>:
    20b8:	95 9f       	mul	r25, r21
    20ba:	d1 f3       	breq	.-12     	; 0x20b0 <__mulsf3+0x14>
    20bc:	95 0f       	add	r25, r21
    20be:	50 e0       	ldi	r21, 0x00	; 0
    20c0:	55 1f       	adc	r21, r21
    20c2:	62 9f       	mul	r22, r18
    20c4:	f0 01       	movw	r30, r0
    20c6:	72 9f       	mul	r23, r18
    20c8:	bb 27       	eor	r27, r27
    20ca:	f0 0d       	add	r31, r0
    20cc:	b1 1d       	adc	r27, r1
    20ce:	63 9f       	mul	r22, r19
    20d0:	aa 27       	eor	r26, r26
    20d2:	f0 0d       	add	r31, r0
    20d4:	b1 1d       	adc	r27, r1
    20d6:	aa 1f       	adc	r26, r26
    20d8:	64 9f       	mul	r22, r20
    20da:	66 27       	eor	r22, r22
    20dc:	b0 0d       	add	r27, r0
    20de:	a1 1d       	adc	r26, r1
    20e0:	66 1f       	adc	r22, r22
    20e2:	82 9f       	mul	r24, r18
    20e4:	22 27       	eor	r18, r18
    20e6:	b0 0d       	add	r27, r0
    20e8:	a1 1d       	adc	r26, r1
    20ea:	62 1f       	adc	r22, r18
    20ec:	73 9f       	mul	r23, r19
    20ee:	b0 0d       	add	r27, r0
    20f0:	a1 1d       	adc	r26, r1
    20f2:	62 1f       	adc	r22, r18
    20f4:	83 9f       	mul	r24, r19
    20f6:	a0 0d       	add	r26, r0
    20f8:	61 1d       	adc	r22, r1
    20fa:	22 1f       	adc	r18, r18
    20fc:	74 9f       	mul	r23, r20
    20fe:	33 27       	eor	r19, r19
    2100:	a0 0d       	add	r26, r0
    2102:	61 1d       	adc	r22, r1
    2104:	23 1f       	adc	r18, r19
    2106:	84 9f       	mul	r24, r20
    2108:	60 0d       	add	r22, r0
    210a:	21 1d       	adc	r18, r1
    210c:	82 2f       	mov	r24, r18
    210e:	76 2f       	mov	r23, r22
    2110:	6a 2f       	mov	r22, r26
    2112:	11 24       	eor	r1, r1
    2114:	9f 57       	subi	r25, 0x7F	; 127
    2116:	50 40       	sbci	r21, 0x00	; 0
    2118:	8a f0       	brmi	.+34     	; 0x213c <__mulsf3_pse+0x84>
    211a:	e1 f0       	breq	.+56     	; 0x2154 <__mulsf3_pse+0x9c>
    211c:	88 23       	and	r24, r24
    211e:	4a f0       	brmi	.+18     	; 0x2132 <__mulsf3_pse+0x7a>
    2120:	ee 0f       	add	r30, r30
    2122:	ff 1f       	adc	r31, r31
    2124:	bb 1f       	adc	r27, r27
    2126:	66 1f       	adc	r22, r22
    2128:	77 1f       	adc	r23, r23
    212a:	88 1f       	adc	r24, r24
    212c:	91 50       	subi	r25, 0x01	; 1
    212e:	50 40       	sbci	r21, 0x00	; 0
    2130:	a9 f7       	brne	.-22     	; 0x211c <__mulsf3_pse+0x64>
    2132:	9e 3f       	cpi	r25, 0xFE	; 254
    2134:	51 05       	cpc	r21, r1
    2136:	70 f0       	brcs	.+28     	; 0x2154 <__mulsf3_pse+0x9c>
    2138:	60 cf       	rjmp	.-320    	; 0x1ffa <__fp_inf>
    213a:	aa cf       	rjmp	.-172    	; 0x2090 <__fp_szero>
    213c:	5f 3f       	cpi	r21, 0xFF	; 255
    213e:	ec f3       	brlt	.-6      	; 0x213a <__mulsf3_pse+0x82>
    2140:	98 3e       	cpi	r25, 0xE8	; 232
    2142:	dc f3       	brlt	.-10     	; 0x213a <__mulsf3_pse+0x82>
    2144:	86 95       	lsr	r24
    2146:	77 95       	ror	r23
    2148:	67 95       	ror	r22
    214a:	b7 95       	ror	r27
    214c:	f7 95       	ror	r31
    214e:	e7 95       	ror	r30
    2150:	9f 5f       	subi	r25, 0xFF	; 255
    2152:	c1 f7       	brne	.-16     	; 0x2144 <__mulsf3_pse+0x8c>
    2154:	fe 2b       	or	r31, r30
    2156:	88 0f       	add	r24, r24
    2158:	91 1d       	adc	r25, r1
    215a:	96 95       	lsr	r25
    215c:	87 95       	ror	r24
    215e:	97 f9       	bld	r25, 7
    2160:	08 95       	ret

00002162 <__mulsi3>:
    2162:	62 9f       	mul	r22, r18
    2164:	d0 01       	movw	r26, r0
    2166:	73 9f       	mul	r23, r19
    2168:	f0 01       	movw	r30, r0
    216a:	82 9f       	mul	r24, r18
    216c:	e0 0d       	add	r30, r0
    216e:	f1 1d       	adc	r31, r1
    2170:	64 9f       	mul	r22, r20
    2172:	e0 0d       	add	r30, r0
    2174:	f1 1d       	adc	r31, r1
    2176:	92 9f       	mul	r25, r18
    2178:	f0 0d       	add	r31, r0
    217a:	83 9f       	mul	r24, r19
    217c:	f0 0d       	add	r31, r0
    217e:	74 9f       	mul	r23, r20
    2180:	f0 0d       	add	r31, r0
    2182:	65 9f       	mul	r22, r21
    2184:	f0 0d       	add	r31, r0
    2186:	99 27       	eor	r25, r25
    2188:	72 9f       	mul	r23, r18
    218a:	b0 0d       	add	r27, r0
    218c:	e1 1d       	adc	r30, r1
    218e:	f9 1f       	adc	r31, r25
    2190:	63 9f       	mul	r22, r19
    2192:	b0 0d       	add	r27, r0
    2194:	e1 1d       	adc	r30, r1
    2196:	f9 1f       	adc	r31, r25
    2198:	bd 01       	movw	r22, r26
    219a:	cf 01       	movw	r24, r30
    219c:	11 24       	eor	r1, r1
    219e:	08 95       	ret

000021a0 <__divmodhi4>:
    21a0:	97 fb       	bst	r25, 7
    21a2:	09 2e       	mov	r0, r25
    21a4:	07 26       	eor	r0, r23
    21a6:	0a d0       	rcall	.+20     	; 0x21bc <__divmodhi4_neg1>
    21a8:	77 fd       	sbrc	r23, 7
    21aa:	04 d0       	rcall	.+8      	; 0x21b4 <__divmodhi4_neg2>
    21ac:	27 d0       	rcall	.+78     	; 0x21fc <__udivmodhi4>
    21ae:	06 d0       	rcall	.+12     	; 0x21bc <__divmodhi4_neg1>
    21b0:	00 20       	and	r0, r0
    21b2:	1a f4       	brpl	.+6      	; 0x21ba <__divmodhi4_exit>

000021b4 <__divmodhi4_neg2>:
    21b4:	70 95       	com	r23
    21b6:	61 95       	neg	r22
    21b8:	7f 4f       	sbci	r23, 0xFF	; 255

000021ba <__divmodhi4_exit>:
    21ba:	08 95       	ret

000021bc <__divmodhi4_neg1>:
    21bc:	f6 f7       	brtc	.-4      	; 0x21ba <__divmodhi4_exit>
    21be:	90 95       	com	r25
    21c0:	81 95       	neg	r24
    21c2:	9f 4f       	sbci	r25, 0xFF	; 255
    21c4:	08 95       	ret

000021c6 <__divmodsi4>:
    21c6:	97 fb       	bst	r25, 7
    21c8:	09 2e       	mov	r0, r25
    21ca:	05 26       	eor	r0, r21
    21cc:	0e d0       	rcall	.+28     	; 0x21ea <__divmodsi4_neg1>
    21ce:	57 fd       	sbrc	r21, 7
    21d0:	04 d0       	rcall	.+8      	; 0x21da <__divmodsi4_neg2>
    21d2:	28 d0       	rcall	.+80     	; 0x2224 <__udivmodsi4>
    21d4:	0a d0       	rcall	.+20     	; 0x21ea <__divmodsi4_neg1>
    21d6:	00 1c       	adc	r0, r0
    21d8:	38 f4       	brcc	.+14     	; 0x21e8 <__divmodsi4_exit>

000021da <__divmodsi4_neg2>:
    21da:	50 95       	com	r21
    21dc:	40 95       	com	r20
    21de:	30 95       	com	r19
    21e0:	21 95       	neg	r18
    21e2:	3f 4f       	sbci	r19, 0xFF	; 255
    21e4:	4f 4f       	sbci	r20, 0xFF	; 255
    21e6:	5f 4f       	sbci	r21, 0xFF	; 255

000021e8 <__divmodsi4_exit>:
    21e8:	08 95       	ret

000021ea <__divmodsi4_neg1>:
    21ea:	f6 f7       	brtc	.-4      	; 0x21e8 <__divmodsi4_exit>
    21ec:	90 95       	com	r25
    21ee:	80 95       	com	r24
    21f0:	70 95       	com	r23
    21f2:	61 95       	neg	r22
    21f4:	7f 4f       	sbci	r23, 0xFF	; 255
    21f6:	8f 4f       	sbci	r24, 0xFF	; 255
    21f8:	9f 4f       	sbci	r25, 0xFF	; 255
    21fa:	08 95       	ret

000021fc <__udivmodhi4>:
    21fc:	aa 1b       	sub	r26, r26
    21fe:	bb 1b       	sub	r27, r27
    2200:	51 e1       	ldi	r21, 0x11	; 17
    2202:	07 c0       	rjmp	.+14     	; 0x2212 <__udivmodhi4_ep>

00002204 <__udivmodhi4_loop>:
    2204:	aa 1f       	adc	r26, r26
    2206:	bb 1f       	adc	r27, r27
    2208:	a6 17       	cp	r26, r22
    220a:	b7 07       	cpc	r27, r23
    220c:	10 f0       	brcs	.+4      	; 0x2212 <__udivmodhi4_ep>
    220e:	a6 1b       	sub	r26, r22
    2210:	b7 0b       	sbc	r27, r23

00002212 <__udivmodhi4_ep>:
    2212:	88 1f       	adc	r24, r24
    2214:	99 1f       	adc	r25, r25
    2216:	5a 95       	dec	r21
    2218:	a9 f7       	brne	.-22     	; 0x2204 <__udivmodhi4_loop>
    221a:	80 95       	com	r24
    221c:	90 95       	com	r25
    221e:	bc 01       	movw	r22, r24
    2220:	cd 01       	movw	r24, r26
    2222:	08 95       	ret

00002224 <__udivmodsi4>:
    2224:	a1 e2       	ldi	r26, 0x21	; 33
    2226:	1a 2e       	mov	r1, r26
    2228:	aa 1b       	sub	r26, r26
    222a:	bb 1b       	sub	r27, r27
    222c:	fd 01       	movw	r30, r26
    222e:	0d c0       	rjmp	.+26     	; 0x224a <__udivmodsi4_ep>

00002230 <__udivmodsi4_loop>:
    2230:	aa 1f       	adc	r26, r26
    2232:	bb 1f       	adc	r27, r27
    2234:	ee 1f       	adc	r30, r30
    2236:	ff 1f       	adc	r31, r31
    2238:	a2 17       	cp	r26, r18
    223a:	b3 07       	cpc	r27, r19
    223c:	e4 07       	cpc	r30, r20
    223e:	f5 07       	cpc	r31, r21
    2240:	20 f0       	brcs	.+8      	; 0x224a <__udivmodsi4_ep>
    2242:	a2 1b       	sub	r26, r18
    2244:	b3 0b       	sbc	r27, r19
    2246:	e4 0b       	sbc	r30, r20
    2248:	f5 0b       	sbc	r31, r21

0000224a <__udivmodsi4_ep>:
    224a:	66 1f       	adc	r22, r22
    224c:	77 1f       	adc	r23, r23
    224e:	88 1f       	adc	r24, r24
    2250:	99 1f       	adc	r25, r25
    2252:	1a 94       	dec	r1
    2254:	69 f7       	brne	.-38     	; 0x2230 <__udivmodsi4_loop>
    2256:	60 95       	com	r22
    2258:	70 95       	com	r23
    225a:	80 95       	com	r24
    225c:	90 95       	com	r25
    225e:	9b 01       	movw	r18, r22
    2260:	ac 01       	movw	r20, r24
    2262:	bd 01       	movw	r22, r26
    2264:	cf 01       	movw	r24, r30
    2266:	08 95       	ret

00002268 <__tablejump_elpm__>:
    2268:	07 90       	elpm	r0, Z+
    226a:	f6 91       	elpm	r31, Z+
    226c:	e0 2d       	mov	r30, r0
    226e:	19 94       	eijmp

00002270 <_exit>:
    2270:	f8 94       	cli

00002272 <__stop_program>:
    2272:	ff cf       	rjmp	.-2      	; 0x2272 <__stop_program>
