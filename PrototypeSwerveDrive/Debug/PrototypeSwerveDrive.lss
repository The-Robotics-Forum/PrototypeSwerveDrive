
PrototypeSwerveDrive.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d2  00800200  00003794  00003828  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003794  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000028  008002d2  008002d2  000038fa  2**0
                  ALLOC
  3 .stab         00001c50  00000000  00000000  000038fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000068a  00000000  00000000  0000554c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  00005bd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000027f  00000000  00000000  00005bf6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000018bb  00000000  00000000  00005e75  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000425  00000000  00000000  00007730  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001af7  00000000  00000000  00007b55  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001f0  00000000  00000000  0000964c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000009b6  00000000  00000000  0000983c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000018b8  00000000  00000000  0000a1f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 0000007c  00000000  00000000  0000baaa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000180  00000000  00000000  0000bb26  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__ctors_end>
       4:	0c 94 29 08 	jmp	0x1052	; 0x1052 <__vector_1>
       8:	0c 94 54 08 	jmp	0x10a8	; 0x10a8 <__vector_2>
       c:	0c 94 7f 08 	jmp	0x10fe	; 0x10fe <__vector_3>
      10:	0c 94 aa 08 	jmp	0x1154	; 0x1154 <__vector_4>
      14:	0c 94 d5 08 	jmp	0x11aa	; 0x11aa <__vector_5>
      18:	0c 94 00 09 	jmp	0x1200	; 0x1200 <__vector_6>
      1c:	0c 94 2b 09 	jmp	0x1256	; 0x1256 <__vector_7>
      20:	0c 94 56 09 	jmp	0x12ac	; 0x12ac <__vector_8>
      24:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      28:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      2c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      30:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      34:	0c 94 2e 06 	jmp	0xc5c	; 0xc5c <__vector_13>
      38:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      3c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      40:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      44:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      48:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      4c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      50:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      54:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      58:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      5c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      60:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      64:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      68:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      6c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      70:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      74:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      78:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      7c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      80:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      84:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      88:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      8c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      90:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      94:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      98:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      9c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      a0:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      a4:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      a8:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      ac:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      b0:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      b4:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      b8:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      bc:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      c0:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      c4:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      c8:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      cc:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      d0:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      d4:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      d8:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      dc:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      e0:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>

000000e4 <__ctors_start>:
      e4:	99 19       	sub	r25, r9

000000e6 <__ctors_end>:
      e6:	11 24       	eor	r1, r1
      e8:	1f be       	out	0x3f, r1	; 63
      ea:	cf ef       	ldi	r28, 0xFF	; 255
      ec:	d1 e2       	ldi	r29, 0x21	; 33
      ee:	de bf       	out	0x3e, r29	; 62
      f0:	cd bf       	out	0x3d, r28	; 61
      f2:	00 e0       	ldi	r16, 0x00	; 0
      f4:	0c bf       	out	0x3c, r16	; 60

000000f6 <__do_copy_data>:
      f6:	12 e0       	ldi	r17, 0x02	; 2
      f8:	a0 e0       	ldi	r26, 0x00	; 0
      fa:	b2 e0       	ldi	r27, 0x02	; 2
      fc:	e4 e9       	ldi	r30, 0x94	; 148
      fe:	f7 e3       	ldi	r31, 0x37	; 55
     100:	00 e0       	ldi	r16, 0x00	; 0
     102:	0b bf       	out	0x3b, r16	; 59
     104:	02 c0       	rjmp	.+4      	; 0x10a <__do_copy_data+0x14>
     106:	07 90       	elpm	r0, Z+
     108:	0d 92       	st	X+, r0
     10a:	a2 3d       	cpi	r26, 0xD2	; 210
     10c:	b1 07       	cpc	r27, r17
     10e:	d9 f7       	brne	.-10     	; 0x106 <__do_copy_data+0x10>

00000110 <__do_clear_bss>:
     110:	12 e0       	ldi	r17, 0x02	; 2
     112:	a2 ed       	ldi	r26, 0xD2	; 210
     114:	b2 e0       	ldi	r27, 0x02	; 2
     116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
     118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
     11a:	aa 3f       	cpi	r26, 0xFA	; 250
     11c:	b1 07       	cpc	r27, r17
     11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>

00000120 <__do_global_ctors>:
     120:	10 e0       	ldi	r17, 0x00	; 0
     122:	00 e0       	ldi	r16, 0x00	; 0
     124:	c6 ee       	ldi	r28, 0xE6	; 230
     126:	d0 e0       	ldi	r29, 0x00	; 0
     128:	40 e0       	ldi	r20, 0x00	; 0
     12a:	06 c0       	rjmp	.+12     	; 0x138 <__do_global_ctors+0x18>
     12c:	22 97       	sbiw	r28, 0x02	; 2
     12e:	41 09       	sbc	r20, r1
     130:	fe 01       	movw	r30, r28
     132:	4b bf       	out	0x3b, r20	; 59
     134:	0e 94 c4 1b 	call	0x3788	; 0x3788 <__tablejump_elpm__>
     138:	c4 3e       	cpi	r28, 0xE4	; 228
     13a:	d1 07       	cpc	r29, r17
     13c:	40 07       	cpc	r20, r16
     13e:	b1 f7       	brne	.-20     	; 0x12c <__do_global_ctors+0xc>
     140:	0e 94 94 19 	call	0x3328	; 0x3328 <main>
     144:	0c 94 c8 1b 	jmp	0x3790	; 0x3790 <_exit>

00000148 <__bad_interrupt>:
     148:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000014c <_Z7pinModehh>:
/**************************************************************************************************************************/
//Functions:

void pinMode(uint8_t pInno,uint8_t mOde)
{
  	if(mOde==0)
     14c:	66 23       	and	r22, r22
     14e:	09 f0       	breq	.+2      	; 0x152 <_Z7pinModehh+0x6>
     150:	d0 c0       	rjmp	.+416    	; 0x2f2 <_Z7pinModehh+0x1a6>
    {
    	switch(rEgister[pInno]){
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	fc 01       	movw	r30, r24
     156:	e4 57       	subi	r30, 0x74	; 116
     158:	fd 4f       	sbci	r31, 0xFD	; 253
     15a:	20 81       	ld	r18, Z
     15c:	25 36       	cpi	r18, 0x65	; 101
     15e:	09 f4       	brne	.+2      	; 0x162 <_Z7pinModehh+0x16>
     160:	68 c0       	rjmp	.+208    	; 0x232 <_Z7pinModehh+0xe6>
     162:	26 36       	cpi	r18, 0x66	; 102
     164:	70 f4       	brcc	.+28     	; 0x182 <_Z7pinModehh+0x36>
     166:	22 36       	cpi	r18, 0x62	; 98
     168:	71 f1       	breq	.+92     	; 0x1c6 <_Z7pinModehh+0x7a>
     16a:	23 36       	cpi	r18, 0x63	; 99
     16c:	20 f4       	brcc	.+8      	; 0x176 <_Z7pinModehh+0x2a>
     16e:	21 36       	cpi	r18, 0x61	; 97
     170:	09 f0       	breq	.+2      	; 0x174 <_Z7pinModehh+0x28>
     172:	8e c1       	rjmp	.+796    	; 0x490 <_Z7pinModehh+0x344>
     174:	16 c0       	rjmp	.+44     	; 0x1a2 <_Z7pinModehh+0x56>
     176:	23 36       	cpi	r18, 0x63	; 99
     178:	c1 f1       	breq	.+112    	; 0x1ea <_Z7pinModehh+0x9e>
     17a:	24 36       	cpi	r18, 0x64	; 100
     17c:	09 f0       	breq	.+2      	; 0x180 <_Z7pinModehh+0x34>
     17e:	88 c1       	rjmp	.+784    	; 0x490 <_Z7pinModehh+0x344>
     180:	46 c0       	rjmp	.+140    	; 0x20e <_Z7pinModehh+0xc2>
     182:	28 36       	cpi	r18, 0x68	; 104
     184:	09 f4       	brne	.+2      	; 0x188 <_Z7pinModehh+0x3c>
     186:	79 c0       	rjmp	.+242    	; 0x27a <_Z7pinModehh+0x12e>
     188:	29 36       	cpi	r18, 0x69	; 105
     18a:	20 f4       	brcc	.+8      	; 0x194 <_Z7pinModehh+0x48>
     18c:	27 36       	cpi	r18, 0x67	; 103
     18e:	09 f0       	breq	.+2      	; 0x192 <_Z7pinModehh+0x46>
     190:	7f c1       	rjmp	.+766    	; 0x490 <_Z7pinModehh+0x344>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_Z7pinModehh+0x10a>
     194:	2a 36       	cpi	r18, 0x6A	; 106
     196:	09 f4       	brne	.+2      	; 0x19a <_Z7pinModehh+0x4e>
     198:	84 c0       	rjmp	.+264    	; 0x2a2 <_Z7pinModehh+0x156>
     19a:	2c 36       	cpi	r18, 0x6C	; 108
     19c:	09 f0       	breq	.+2      	; 0x1a0 <_Z7pinModehh+0x54>
     19e:	78 c1       	rjmp	.+752    	; 0x490 <_Z7pinModehh+0x344>
     1a0:	94 c0       	rjmp	.+296    	; 0x2ca <_Z7pinModehh+0x17e>
            case'a':
			          DDRA&=~(1<<bIt[pInno]);
     1a2:	21 b1       	in	r18, 0x01	; 1
     1a4:	fc 01       	movw	r30, r24
     1a6:	ee 0f       	add	r30, r30
     1a8:	ff 1f       	adc	r31, r31
     1aa:	e0 50       	subi	r30, 0x00	; 0
     1ac:	fe 4f       	sbci	r31, 0xFE	; 254
     1ae:	81 e0       	ldi	r24, 0x01	; 1
     1b0:	90 e0       	ldi	r25, 0x00	; 0
     1b2:	00 80       	ld	r0, Z
     1b4:	02 c0       	rjmp	.+4      	; 0x1ba <_Z7pinModehh+0x6e>
     1b6:	88 0f       	add	r24, r24
     1b8:	99 1f       	adc	r25, r25
     1ba:	0a 94       	dec	r0
     1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <_Z7pinModehh+0x6a>
     1be:	80 95       	com	r24
     1c0:	82 23       	and	r24, r18
     1c2:	81 b9       	out	0x01, r24	; 1
					  break;
     1c4:	08 95       	ret
          	case'b':
                  DDRB&=~(1<<bIt[pInno]);
     1c6:	24 b1       	in	r18, 0x04	; 4
     1c8:	fc 01       	movw	r30, r24
     1ca:	ee 0f       	add	r30, r30
     1cc:	ff 1f       	adc	r31, r31
     1ce:	e0 50       	subi	r30, 0x00	; 0
     1d0:	fe 4f       	sbci	r31, 0xFE	; 254
     1d2:	81 e0       	ldi	r24, 0x01	; 1
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	00 80       	ld	r0, Z
     1d8:	02 c0       	rjmp	.+4      	; 0x1de <_Z7pinModehh+0x92>
     1da:	88 0f       	add	r24, r24
     1dc:	99 1f       	adc	r25, r25
     1de:	0a 94       	dec	r0
     1e0:	e2 f7       	brpl	.-8      	; 0x1da <_Z7pinModehh+0x8e>
     1e2:	80 95       	com	r24
     1e4:	82 23       	and	r24, r18
     1e6:	84 b9       	out	0x04, r24	; 4
		           break;
     1e8:	08 95       	ret
          	case'c':
                 DDRC&=~(1<<bIt[pInno]);
     1ea:	27 b1       	in	r18, 0x07	; 7
     1ec:	fc 01       	movw	r30, r24
     1ee:	ee 0f       	add	r30, r30
     1f0:	ff 1f       	adc	r31, r31
     1f2:	e0 50       	subi	r30, 0x00	; 0
     1f4:	fe 4f       	sbci	r31, 0xFE	; 254
     1f6:	81 e0       	ldi	r24, 0x01	; 1
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	00 80       	ld	r0, Z
     1fc:	02 c0       	rjmp	.+4      	; 0x202 <_Z7pinModehh+0xb6>
     1fe:	88 0f       	add	r24, r24
     200:	99 1f       	adc	r25, r25
     202:	0a 94       	dec	r0
     204:	e2 f7       	brpl	.-8      	; 0x1fe <_Z7pinModehh+0xb2>
     206:	80 95       	com	r24
     208:	82 23       	and	r24, r18
     20a:	87 b9       	out	0x07, r24	; 7
		          break;
     20c:	08 95       	ret
          	case'd':
                 DDRD&=~(1<<bIt[pInno]);
     20e:	2a b1       	in	r18, 0x0a	; 10
     210:	fc 01       	movw	r30, r24
     212:	ee 0f       	add	r30, r30
     214:	ff 1f       	adc	r31, r31
     216:	e0 50       	subi	r30, 0x00	; 0
     218:	fe 4f       	sbci	r31, 0xFE	; 254
     21a:	81 e0       	ldi	r24, 0x01	; 1
     21c:	90 e0       	ldi	r25, 0x00	; 0
     21e:	00 80       	ld	r0, Z
     220:	02 c0       	rjmp	.+4      	; 0x226 <_Z7pinModehh+0xda>
     222:	88 0f       	add	r24, r24
     224:	99 1f       	adc	r25, r25
     226:	0a 94       	dec	r0
     228:	e2 f7       	brpl	.-8      	; 0x222 <_Z7pinModehh+0xd6>
     22a:	80 95       	com	r24
     22c:	82 23       	and	r24, r18
     22e:	8a b9       	out	0x0a, r24	; 10
		          break;
     230:	08 95       	ret
	      	case'e':
                  DDRE&=~(1<<bIt[pInno]);
     232:	2d b1       	in	r18, 0x0d	; 13
     234:	fc 01       	movw	r30, r24
     236:	ee 0f       	add	r30, r30
     238:	ff 1f       	adc	r31, r31
     23a:	e0 50       	subi	r30, 0x00	; 0
     23c:	fe 4f       	sbci	r31, 0xFE	; 254
     23e:	81 e0       	ldi	r24, 0x01	; 1
     240:	90 e0       	ldi	r25, 0x00	; 0
     242:	00 80       	ld	r0, Z
     244:	02 c0       	rjmp	.+4      	; 0x24a <_Z7pinModehh+0xfe>
     246:	88 0f       	add	r24, r24
     248:	99 1f       	adc	r25, r25
     24a:	0a 94       	dec	r0
     24c:	e2 f7       	brpl	.-8      	; 0x246 <_Z7pinModehh+0xfa>
     24e:	80 95       	com	r24
     250:	82 23       	and	r24, r18
     252:	8d b9       	out	0x0d, r24	; 13
		           break;
     254:	08 95       	ret
		    case'g':
                  DDRG&=~(1<<bIt[pInno]);
     256:	23 b3       	in	r18, 0x13	; 19
     258:	fc 01       	movw	r30, r24
     25a:	ee 0f       	add	r30, r30
     25c:	ff 1f       	adc	r31, r31
     25e:	e0 50       	subi	r30, 0x00	; 0
     260:	fe 4f       	sbci	r31, 0xFE	; 254
     262:	81 e0       	ldi	r24, 0x01	; 1
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	00 80       	ld	r0, Z
     268:	02 c0       	rjmp	.+4      	; 0x26e <_Z7pinModehh+0x122>
     26a:	88 0f       	add	r24, r24
     26c:	99 1f       	adc	r25, r25
     26e:	0a 94       	dec	r0
     270:	e2 f7       	brpl	.-8      	; 0x26a <_Z7pinModehh+0x11e>
     272:	80 95       	com	r24
     274:	82 23       	and	r24, r18
     276:	83 bb       	out	0x13, r24	; 19
		           break;
     278:	08 95       	ret
			case'h':
                  DDRH&=~(1<<bIt[pInno]);
     27a:	e1 e0       	ldi	r30, 0x01	; 1
     27c:	f1 e0       	ldi	r31, 0x01	; 1
     27e:	20 81       	ld	r18, Z
     280:	dc 01       	movw	r26, r24
     282:	aa 0f       	add	r26, r26
     284:	bb 1f       	adc	r27, r27
     286:	a0 50       	subi	r26, 0x00	; 0
     288:	be 4f       	sbci	r27, 0xFE	; 254
     28a:	81 e0       	ldi	r24, 0x01	; 1
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	0c 90       	ld	r0, X
     290:	02 c0       	rjmp	.+4      	; 0x296 <_Z7pinModehh+0x14a>
     292:	88 0f       	add	r24, r24
     294:	99 1f       	adc	r25, r25
     296:	0a 94       	dec	r0
     298:	e2 f7       	brpl	.-8      	; 0x292 <_Z7pinModehh+0x146>
     29a:	80 95       	com	r24
     29c:	82 23       	and	r24, r18
     29e:	80 83       	st	Z, r24
				  break;
     2a0:	08 95       	ret
		    case'j':
                  DDRJ&=~(1<<bIt[pInno]);
     2a2:	e4 e0       	ldi	r30, 0x04	; 4
     2a4:	f1 e0       	ldi	r31, 0x01	; 1
     2a6:	20 81       	ld	r18, Z
     2a8:	dc 01       	movw	r26, r24
     2aa:	aa 0f       	add	r26, r26
     2ac:	bb 1f       	adc	r27, r27
     2ae:	a0 50       	subi	r26, 0x00	; 0
     2b0:	be 4f       	sbci	r27, 0xFE	; 254
     2b2:	81 e0       	ldi	r24, 0x01	; 1
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	0c 90       	ld	r0, X
     2b8:	02 c0       	rjmp	.+4      	; 0x2be <_Z7pinModehh+0x172>
     2ba:	88 0f       	add	r24, r24
     2bc:	99 1f       	adc	r25, r25
     2be:	0a 94       	dec	r0
     2c0:	e2 f7       	brpl	.-8      	; 0x2ba <_Z7pinModehh+0x16e>
     2c2:	80 95       	com	r24
     2c4:	82 23       	and	r24, r18
     2c6:	80 83       	st	Z, r24
		          break;
     2c8:	08 95       	ret
			case'l':
                  DDRL&=~(1<<bIt[pInno]);
     2ca:	ea e0       	ldi	r30, 0x0A	; 10
     2cc:	f1 e0       	ldi	r31, 0x01	; 1
     2ce:	20 81       	ld	r18, Z
     2d0:	dc 01       	movw	r26, r24
     2d2:	aa 0f       	add	r26, r26
     2d4:	bb 1f       	adc	r27, r27
     2d6:	a0 50       	subi	r26, 0x00	; 0
     2d8:	be 4f       	sbci	r27, 0xFE	; 254
     2da:	81 e0       	ldi	r24, 0x01	; 1
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	0c 90       	ld	r0, X
     2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <_Z7pinModehh+0x19a>
     2e2:	88 0f       	add	r24, r24
     2e4:	99 1f       	adc	r25, r25
     2e6:	0a 94       	dec	r0
     2e8:	e2 f7       	brpl	.-8      	; 0x2e2 <_Z7pinModehh+0x196>
     2ea:	80 95       	com	r24
     2ec:	82 23       	and	r24, r18
     2ee:	80 83       	st	Z, r24
		          break;
     2f0:	08 95       	ret
     	}
	}
	else{
			switch(rEgister[pInno])
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	fc 01       	movw	r30, r24
     2f6:	e4 57       	subi	r30, 0x74	; 116
     2f8:	fd 4f       	sbci	r31, 0xFD	; 253
     2fa:	20 81       	ld	r18, Z
     2fc:	25 36       	cpi	r18, 0x65	; 101
     2fe:	09 f4       	brne	.+2      	; 0x302 <_Z7pinModehh+0x1b6>
     300:	68 c0       	rjmp	.+208    	; 0x3d2 <_Z7pinModehh+0x286>
     302:	26 36       	cpi	r18, 0x66	; 102
     304:	70 f4       	brcc	.+28     	; 0x322 <_Z7pinModehh+0x1d6>
     306:	22 36       	cpi	r18, 0x62	; 98
     308:	71 f1       	breq	.+92     	; 0x366 <_Z7pinModehh+0x21a>
     30a:	23 36       	cpi	r18, 0x63	; 99
     30c:	20 f4       	brcc	.+8      	; 0x316 <_Z7pinModehh+0x1ca>
     30e:	21 36       	cpi	r18, 0x61	; 97
     310:	09 f0       	breq	.+2      	; 0x314 <_Z7pinModehh+0x1c8>
     312:	be c0       	rjmp	.+380    	; 0x490 <_Z7pinModehh+0x344>
     314:	16 c0       	rjmp	.+44     	; 0x342 <_Z7pinModehh+0x1f6>
     316:	23 36       	cpi	r18, 0x63	; 99
     318:	c1 f1       	breq	.+112    	; 0x38a <_Z7pinModehh+0x23e>
     31a:	24 36       	cpi	r18, 0x64	; 100
     31c:	09 f0       	breq	.+2      	; 0x320 <_Z7pinModehh+0x1d4>
     31e:	b8 c0       	rjmp	.+368    	; 0x490 <_Z7pinModehh+0x344>
     320:	46 c0       	rjmp	.+140    	; 0x3ae <_Z7pinModehh+0x262>
     322:	28 36       	cpi	r18, 0x68	; 104
     324:	09 f4       	brne	.+2      	; 0x328 <_Z7pinModehh+0x1dc>
     326:	79 c0       	rjmp	.+242    	; 0x41a <_Z7pinModehh+0x2ce>
     328:	29 36       	cpi	r18, 0x69	; 105
     32a:	20 f4       	brcc	.+8      	; 0x334 <_Z7pinModehh+0x1e8>
     32c:	27 36       	cpi	r18, 0x67	; 103
     32e:	09 f0       	breq	.+2      	; 0x332 <_Z7pinModehh+0x1e6>
     330:	af c0       	rjmp	.+350    	; 0x490 <_Z7pinModehh+0x344>
     332:	61 c0       	rjmp	.+194    	; 0x3f6 <_Z7pinModehh+0x2aa>
     334:	2a 36       	cpi	r18, 0x6A	; 106
     336:	09 f4       	brne	.+2      	; 0x33a <_Z7pinModehh+0x1ee>
     338:	84 c0       	rjmp	.+264    	; 0x442 <_Z7pinModehh+0x2f6>
     33a:	2c 36       	cpi	r18, 0x6C	; 108
     33c:	09 f0       	breq	.+2      	; 0x340 <_Z7pinModehh+0x1f4>
     33e:	a8 c0       	rjmp	.+336    	; 0x490 <_Z7pinModehh+0x344>
     340:	94 c0       	rjmp	.+296    	; 0x46a <_Z7pinModehh+0x31e>
         	{   case'a':
			          DDRA|=(1<<bIt[pInno]);
     342:	41 b1       	in	r20, 0x01	; 1
     344:	fc 01       	movw	r30, r24
     346:	ee 0f       	add	r30, r30
     348:	ff 1f       	adc	r31, r31
     34a:	e0 50       	subi	r30, 0x00	; 0
     34c:	fe 4f       	sbci	r31, 0xFE	; 254
     34e:	21 e0       	ldi	r18, 0x01	; 1
     350:	30 e0       	ldi	r19, 0x00	; 0
     352:	c9 01       	movw	r24, r18
     354:	00 80       	ld	r0, Z
     356:	02 c0       	rjmp	.+4      	; 0x35c <_Z7pinModehh+0x210>
     358:	88 0f       	add	r24, r24
     35a:	99 1f       	adc	r25, r25
     35c:	0a 94       	dec	r0
     35e:	e2 f7       	brpl	.-8      	; 0x358 <_Z7pinModehh+0x20c>
     360:	84 2b       	or	r24, r20
     362:	81 b9       	out	0x01, r24	; 1
					  break;
     364:	08 95       	ret

	        	case'b':
	            	DDRB|=(1<<bIt[pInno]);
     366:	44 b1       	in	r20, 0x04	; 4
     368:	fc 01       	movw	r30, r24
     36a:	ee 0f       	add	r30, r30
     36c:	ff 1f       	adc	r31, r31
     36e:	e0 50       	subi	r30, 0x00	; 0
     370:	fe 4f       	sbci	r31, 0xFE	; 254
     372:	21 e0       	ldi	r18, 0x01	; 1
     374:	30 e0       	ldi	r19, 0x00	; 0
     376:	c9 01       	movw	r24, r18
     378:	00 80       	ld	r0, Z
     37a:	02 c0       	rjmp	.+4      	; 0x380 <_Z7pinModehh+0x234>
     37c:	88 0f       	add	r24, r24
     37e:	99 1f       	adc	r25, r25
     380:	0a 94       	dec	r0
     382:	e2 f7       	brpl	.-8      	; 0x37c <_Z7pinModehh+0x230>
     384:	84 2b       	or	r24, r20
     386:	84 b9       	out	0x04, r24	; 4
			    	break;
     388:	08 95       	ret
	          	case'c':
	                DDRC|=(1<<bIt[pInno]);
     38a:	47 b1       	in	r20, 0x07	; 7
     38c:	fc 01       	movw	r30, r24
     38e:	ee 0f       	add	r30, r30
     390:	ff 1f       	adc	r31, r31
     392:	e0 50       	subi	r30, 0x00	; 0
     394:	fe 4f       	sbci	r31, 0xFE	; 254
     396:	21 e0       	ldi	r18, 0x01	; 1
     398:	30 e0       	ldi	r19, 0x00	; 0
     39a:	c9 01       	movw	r24, r18
     39c:	00 80       	ld	r0, Z
     39e:	02 c0       	rjmp	.+4      	; 0x3a4 <_Z7pinModehh+0x258>
     3a0:	88 0f       	add	r24, r24
     3a2:	99 1f       	adc	r25, r25
     3a4:	0a 94       	dec	r0
     3a6:	e2 f7       	brpl	.-8      	; 0x3a0 <_Z7pinModehh+0x254>
     3a8:	84 2b       	or	r24, r20
     3aa:	87 b9       	out	0x07, r24	; 7
			        break;
     3ac:	08 95       	ret
	          	case'd':
	                DDRD|=(1<<bIt[pInno]);
     3ae:	4a b1       	in	r20, 0x0a	; 10
     3b0:	fc 01       	movw	r30, r24
     3b2:	ee 0f       	add	r30, r30
     3b4:	ff 1f       	adc	r31, r31
     3b6:	e0 50       	subi	r30, 0x00	; 0
     3b8:	fe 4f       	sbci	r31, 0xFE	; 254
     3ba:	21 e0       	ldi	r18, 0x01	; 1
     3bc:	30 e0       	ldi	r19, 0x00	; 0
     3be:	c9 01       	movw	r24, r18
     3c0:	00 80       	ld	r0, Z
     3c2:	02 c0       	rjmp	.+4      	; 0x3c8 <_Z7pinModehh+0x27c>
     3c4:	88 0f       	add	r24, r24
     3c6:	99 1f       	adc	r25, r25
     3c8:	0a 94       	dec	r0
     3ca:	e2 f7       	brpl	.-8      	; 0x3c4 <_Z7pinModehh+0x278>
     3cc:	84 2b       	or	r24, r20
     3ce:	8a b9       	out	0x0a, r24	; 10
			        break;
     3d0:	08 95       	ret
		      	case'e':
	                DDRE|=(1<<bIt[pInno]);
     3d2:	4d b1       	in	r20, 0x0d	; 13
     3d4:	fc 01       	movw	r30, r24
     3d6:	ee 0f       	add	r30, r30
     3d8:	ff 1f       	adc	r31, r31
     3da:	e0 50       	subi	r30, 0x00	; 0
     3dc:	fe 4f       	sbci	r31, 0xFE	; 254
     3de:	21 e0       	ldi	r18, 0x01	; 1
     3e0:	30 e0       	ldi	r19, 0x00	; 0
     3e2:	c9 01       	movw	r24, r18
     3e4:	00 80       	ld	r0, Z
     3e6:	02 c0       	rjmp	.+4      	; 0x3ec <_Z7pinModehh+0x2a0>
     3e8:	88 0f       	add	r24, r24
     3ea:	99 1f       	adc	r25, r25
     3ec:	0a 94       	dec	r0
     3ee:	e2 f7       	brpl	.-8      	; 0x3e8 <_Z7pinModehh+0x29c>
     3f0:	84 2b       	or	r24, r20
     3f2:	8d b9       	out	0x0d, r24	; 13
			        break;
     3f4:	08 95       	ret
			    case'g':
	                DDRG|=(1<<bIt[pInno]);
     3f6:	43 b3       	in	r20, 0x13	; 19
     3f8:	fc 01       	movw	r30, r24
     3fa:	ee 0f       	add	r30, r30
     3fc:	ff 1f       	adc	r31, r31
     3fe:	e0 50       	subi	r30, 0x00	; 0
     400:	fe 4f       	sbci	r31, 0xFE	; 254
     402:	21 e0       	ldi	r18, 0x01	; 1
     404:	30 e0       	ldi	r19, 0x00	; 0
     406:	c9 01       	movw	r24, r18
     408:	00 80       	ld	r0, Z
     40a:	02 c0       	rjmp	.+4      	; 0x410 <_Z7pinModehh+0x2c4>
     40c:	88 0f       	add	r24, r24
     40e:	99 1f       	adc	r25, r25
     410:	0a 94       	dec	r0
     412:	e2 f7       	brpl	.-8      	; 0x40c <_Z7pinModehh+0x2c0>
     414:	84 2b       	or	r24, r20
     416:	83 bb       	out	0x13, r24	; 19
			        break;
     418:	08 95       	ret
			 	case'h':
	                DDRH|=(1<<bIt[pInno]);
     41a:	e1 e0       	ldi	r30, 0x01	; 1
     41c:	f1 e0       	ldi	r31, 0x01	; 1
     41e:	40 81       	ld	r20, Z
     420:	dc 01       	movw	r26, r24
     422:	aa 0f       	add	r26, r26
     424:	bb 1f       	adc	r27, r27
     426:	a0 50       	subi	r26, 0x00	; 0
     428:	be 4f       	sbci	r27, 0xFE	; 254
     42a:	21 e0       	ldi	r18, 0x01	; 1
     42c:	30 e0       	ldi	r19, 0x00	; 0
     42e:	c9 01       	movw	r24, r18
     430:	0c 90       	ld	r0, X
     432:	02 c0       	rjmp	.+4      	; 0x438 <_Z7pinModehh+0x2ec>
     434:	88 0f       	add	r24, r24
     436:	99 1f       	adc	r25, r25
     438:	0a 94       	dec	r0
     43a:	e2 f7       	brpl	.-8      	; 0x434 <_Z7pinModehh+0x2e8>
     43c:	84 2b       	or	r24, r20
     43e:	80 83       	st	Z, r24
			        break;
     440:	08 95       	ret
			    case'j':
	                DDRJ|=(1<<bIt[pInno]);
     442:	e4 e0       	ldi	r30, 0x04	; 4
     444:	f1 e0       	ldi	r31, 0x01	; 1
     446:	40 81       	ld	r20, Z
     448:	dc 01       	movw	r26, r24
     44a:	aa 0f       	add	r26, r26
     44c:	bb 1f       	adc	r27, r27
     44e:	a0 50       	subi	r26, 0x00	; 0
     450:	be 4f       	sbci	r27, 0xFE	; 254
     452:	21 e0       	ldi	r18, 0x01	; 1
     454:	30 e0       	ldi	r19, 0x00	; 0
     456:	c9 01       	movw	r24, r18
     458:	0c 90       	ld	r0, X
     45a:	02 c0       	rjmp	.+4      	; 0x460 <_Z7pinModehh+0x314>
     45c:	88 0f       	add	r24, r24
     45e:	99 1f       	adc	r25, r25
     460:	0a 94       	dec	r0
     462:	e2 f7       	brpl	.-8      	; 0x45c <_Z7pinModehh+0x310>
     464:	84 2b       	or	r24, r20
     466:	80 83       	st	Z, r24
			        break;
     468:	08 95       	ret
				case'l':
	                DDRL|=(1<<bIt[pInno]);
     46a:	ea e0       	ldi	r30, 0x0A	; 10
     46c:	f1 e0       	ldi	r31, 0x01	; 1
     46e:	40 81       	ld	r20, Z
     470:	dc 01       	movw	r26, r24
     472:	aa 0f       	add	r26, r26
     474:	bb 1f       	adc	r27, r27
     476:	a0 50       	subi	r26, 0x00	; 0
     478:	be 4f       	sbci	r27, 0xFE	; 254
     47a:	21 e0       	ldi	r18, 0x01	; 1
     47c:	30 e0       	ldi	r19, 0x00	; 0
     47e:	c9 01       	movw	r24, r18
     480:	0c 90       	ld	r0, X
     482:	02 c0       	rjmp	.+4      	; 0x488 <_Z7pinModehh+0x33c>
     484:	88 0f       	add	r24, r24
     486:	99 1f       	adc	r25, r25
     488:	0a 94       	dec	r0
     48a:	e2 f7       	brpl	.-8      	; 0x484 <_Z7pinModehh+0x338>
     48c:	84 2b       	or	r24, r20
     48e:	80 83       	st	Z, r24
     490:	08 95       	ret

00000492 <_Z12digitalWritehh>:
	}
}

void digitalWrite (uint8_t pInno ,uint8_t mOde)
{
   if(mOde==0){
     492:	66 23       	and	r22, r22
     494:	09 f0       	breq	.+2      	; 0x498 <_Z12digitalWritehh+0x6>
     496:	d0 c0       	rjmp	.+416    	; 0x638 <_Z12digitalWritehh+0x1a6>
    	switch(rEgister[pInno])
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	fc 01       	movw	r30, r24
     49c:	e4 57       	subi	r30, 0x74	; 116
     49e:	fd 4f       	sbci	r31, 0xFD	; 253
     4a0:	20 81       	ld	r18, Z
     4a2:	25 36       	cpi	r18, 0x65	; 101
     4a4:	09 f4       	brne	.+2      	; 0x4a8 <_Z12digitalWritehh+0x16>
     4a6:	68 c0       	rjmp	.+208    	; 0x578 <_Z12digitalWritehh+0xe6>
     4a8:	26 36       	cpi	r18, 0x66	; 102
     4aa:	70 f4       	brcc	.+28     	; 0x4c8 <_Z12digitalWritehh+0x36>
     4ac:	22 36       	cpi	r18, 0x62	; 98
     4ae:	71 f1       	breq	.+92     	; 0x50c <_Z12digitalWritehh+0x7a>
     4b0:	23 36       	cpi	r18, 0x63	; 99
     4b2:	20 f4       	brcc	.+8      	; 0x4bc <_Z12digitalWritehh+0x2a>
     4b4:	21 36       	cpi	r18, 0x61	; 97
     4b6:	09 f0       	breq	.+2      	; 0x4ba <_Z12digitalWritehh+0x28>
     4b8:	8e c1       	rjmp	.+796    	; 0x7d6 <_Z12digitalWritehh+0x344>
     4ba:	16 c0       	rjmp	.+44     	; 0x4e8 <_Z12digitalWritehh+0x56>
     4bc:	23 36       	cpi	r18, 0x63	; 99
     4be:	c1 f1       	breq	.+112    	; 0x530 <_Z12digitalWritehh+0x9e>
     4c0:	24 36       	cpi	r18, 0x64	; 100
     4c2:	09 f0       	breq	.+2      	; 0x4c6 <_Z12digitalWritehh+0x34>
     4c4:	88 c1       	rjmp	.+784    	; 0x7d6 <_Z12digitalWritehh+0x344>
     4c6:	46 c0       	rjmp	.+140    	; 0x554 <_Z12digitalWritehh+0xc2>
     4c8:	28 36       	cpi	r18, 0x68	; 104
     4ca:	09 f4       	brne	.+2      	; 0x4ce <_Z12digitalWritehh+0x3c>
     4cc:	79 c0       	rjmp	.+242    	; 0x5c0 <_Z12digitalWritehh+0x12e>
     4ce:	29 36       	cpi	r18, 0x69	; 105
     4d0:	20 f4       	brcc	.+8      	; 0x4da <_Z12digitalWritehh+0x48>
     4d2:	27 36       	cpi	r18, 0x67	; 103
     4d4:	09 f0       	breq	.+2      	; 0x4d8 <_Z12digitalWritehh+0x46>
     4d6:	7f c1       	rjmp	.+766    	; 0x7d6 <_Z12digitalWritehh+0x344>
     4d8:	61 c0       	rjmp	.+194    	; 0x59c <_Z12digitalWritehh+0x10a>
     4da:	2a 36       	cpi	r18, 0x6A	; 106
     4dc:	09 f4       	brne	.+2      	; 0x4e0 <_Z12digitalWritehh+0x4e>
     4de:	84 c0       	rjmp	.+264    	; 0x5e8 <_Z12digitalWritehh+0x156>
     4e0:	2c 36       	cpi	r18, 0x6C	; 108
     4e2:	09 f0       	breq	.+2      	; 0x4e6 <_Z12digitalWritehh+0x54>
     4e4:	78 c1       	rjmp	.+752    	; 0x7d6 <_Z12digitalWritehh+0x344>
     4e6:	94 c0       	rjmp	.+296    	; 0x610 <_Z12digitalWritehh+0x17e>
     	{    case'a':
			          PORTA&=~(1<<bIt[pInno]);
     4e8:	22 b1       	in	r18, 0x02	; 2
     4ea:	fc 01       	movw	r30, r24
     4ec:	ee 0f       	add	r30, r30
     4ee:	ff 1f       	adc	r31, r31
     4f0:	e0 50       	subi	r30, 0x00	; 0
     4f2:	fe 4f       	sbci	r31, 0xFE	; 254
     4f4:	81 e0       	ldi	r24, 0x01	; 1
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	00 80       	ld	r0, Z
     4fa:	02 c0       	rjmp	.+4      	; 0x500 <_Z12digitalWritehh+0x6e>
     4fc:	88 0f       	add	r24, r24
     4fe:	99 1f       	adc	r25, r25
     500:	0a 94       	dec	r0
     502:	e2 f7       	brpl	.-8      	; 0x4fc <_Z12digitalWritehh+0x6a>
     504:	80 95       	com	r24
     506:	82 23       	and	r24, r18
     508:	82 b9       	out	0x02, r24	; 2
					  break;
     50a:	08 95       	ret

	        case'b':
	            PORTB&=~(1<<bIt[pInno]);
     50c:	25 b1       	in	r18, 0x05	; 5
     50e:	fc 01       	movw	r30, r24
     510:	ee 0f       	add	r30, r30
     512:	ff 1f       	adc	r31, r31
     514:	e0 50       	subi	r30, 0x00	; 0
     516:	fe 4f       	sbci	r31, 0xFE	; 254
     518:	81 e0       	ldi	r24, 0x01	; 1
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	00 80       	ld	r0, Z
     51e:	02 c0       	rjmp	.+4      	; 0x524 <_Z12digitalWritehh+0x92>
     520:	88 0f       	add	r24, r24
     522:	99 1f       	adc	r25, r25
     524:	0a 94       	dec	r0
     526:	e2 f7       	brpl	.-8      	; 0x520 <_Z12digitalWritehh+0x8e>
     528:	80 95       	com	r24
     52a:	82 23       	and	r24, r18
     52c:	85 b9       	out	0x05, r24	; 5
			    break;
     52e:	08 95       	ret

	        case'c':
	            PORTC&=~(1<<bIt[pInno]);
     530:	28 b1       	in	r18, 0x08	; 8
     532:	fc 01       	movw	r30, r24
     534:	ee 0f       	add	r30, r30
     536:	ff 1f       	adc	r31, r31
     538:	e0 50       	subi	r30, 0x00	; 0
     53a:	fe 4f       	sbci	r31, 0xFE	; 254
     53c:	81 e0       	ldi	r24, 0x01	; 1
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	00 80       	ld	r0, Z
     542:	02 c0       	rjmp	.+4      	; 0x548 <_Z12digitalWritehh+0xb6>
     544:	88 0f       	add	r24, r24
     546:	99 1f       	adc	r25, r25
     548:	0a 94       	dec	r0
     54a:	e2 f7       	brpl	.-8      	; 0x544 <_Z12digitalWritehh+0xb2>
     54c:	80 95       	com	r24
     54e:	82 23       	and	r24, r18
     550:	88 b9       	out	0x08, r24	; 8
			    break;
     552:	08 95       	ret

	        case'd':
	            PORTD&=~(1<<bIt[pInno]);
     554:	2b b1       	in	r18, 0x0b	; 11
     556:	fc 01       	movw	r30, r24
     558:	ee 0f       	add	r30, r30
     55a:	ff 1f       	adc	r31, r31
     55c:	e0 50       	subi	r30, 0x00	; 0
     55e:	fe 4f       	sbci	r31, 0xFE	; 254
     560:	81 e0       	ldi	r24, 0x01	; 1
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	00 80       	ld	r0, Z
     566:	02 c0       	rjmp	.+4      	; 0x56c <_Z12digitalWritehh+0xda>
     568:	88 0f       	add	r24, r24
     56a:	99 1f       	adc	r25, r25
     56c:	0a 94       	dec	r0
     56e:	e2 f7       	brpl	.-8      	; 0x568 <_Z12digitalWritehh+0xd6>
     570:	80 95       	com	r24
     572:	82 23       	and	r24, r18
     574:	8b b9       	out	0x0b, r24	; 11
			    break;
     576:	08 95       	ret

		    case'e':
	        	PORTE&=~(1<<bIt[pInno]);
     578:	2e b1       	in	r18, 0x0e	; 14
     57a:	fc 01       	movw	r30, r24
     57c:	ee 0f       	add	r30, r30
     57e:	ff 1f       	adc	r31, r31
     580:	e0 50       	subi	r30, 0x00	; 0
     582:	fe 4f       	sbci	r31, 0xFE	; 254
     584:	81 e0       	ldi	r24, 0x01	; 1
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	00 80       	ld	r0, Z
     58a:	02 c0       	rjmp	.+4      	; 0x590 <_Z12digitalWritehh+0xfe>
     58c:	88 0f       	add	r24, r24
     58e:	99 1f       	adc	r25, r25
     590:	0a 94       	dec	r0
     592:	e2 f7       	brpl	.-8      	; 0x58c <_Z12digitalWritehh+0xfa>
     594:	80 95       	com	r24
     596:	82 23       	and	r24, r18
     598:	8e b9       	out	0x0e, r24	; 14
			    break;
     59a:	08 95       	ret

			case'g':
	        	PORTG&=~(1<<bIt[pInno]);
     59c:	24 b3       	in	r18, 0x14	; 20
     59e:	fc 01       	movw	r30, r24
     5a0:	ee 0f       	add	r30, r30
     5a2:	ff 1f       	adc	r31, r31
     5a4:	e0 50       	subi	r30, 0x00	; 0
     5a6:	fe 4f       	sbci	r31, 0xFE	; 254
     5a8:	81 e0       	ldi	r24, 0x01	; 1
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	00 80       	ld	r0, Z
     5ae:	02 c0       	rjmp	.+4      	; 0x5b4 <_Z12digitalWritehh+0x122>
     5b0:	88 0f       	add	r24, r24
     5b2:	99 1f       	adc	r25, r25
     5b4:	0a 94       	dec	r0
     5b6:	e2 f7       	brpl	.-8      	; 0x5b0 <_Z12digitalWritehh+0x11e>
     5b8:	80 95       	com	r24
     5ba:	82 23       	and	r24, r18
     5bc:	84 bb       	out	0x14, r24	; 20
			    break;
     5be:	08 95       	ret

			case'h':
	            PORTH&=~(1<<bIt[pInno]);
     5c0:	e2 e0       	ldi	r30, 0x02	; 2
     5c2:	f1 e0       	ldi	r31, 0x01	; 1
     5c4:	20 81       	ld	r18, Z
     5c6:	dc 01       	movw	r26, r24
     5c8:	aa 0f       	add	r26, r26
     5ca:	bb 1f       	adc	r27, r27
     5cc:	a0 50       	subi	r26, 0x00	; 0
     5ce:	be 4f       	sbci	r27, 0xFE	; 254
     5d0:	81 e0       	ldi	r24, 0x01	; 1
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	0c 90       	ld	r0, X
     5d6:	02 c0       	rjmp	.+4      	; 0x5dc <_Z12digitalWritehh+0x14a>
     5d8:	88 0f       	add	r24, r24
     5da:	99 1f       	adc	r25, r25
     5dc:	0a 94       	dec	r0
     5de:	e2 f7       	brpl	.-8      	; 0x5d8 <_Z12digitalWritehh+0x146>
     5e0:	80 95       	com	r24
     5e2:	82 23       	and	r24, r18
     5e4:	80 83       	st	Z, r24
			    break;
     5e6:	08 95       	ret

			case'j':
	            PORTJ&=~(1<<bIt[pInno]);
     5e8:	e5 e0       	ldi	r30, 0x05	; 5
     5ea:	f1 e0       	ldi	r31, 0x01	; 1
     5ec:	20 81       	ld	r18, Z
     5ee:	dc 01       	movw	r26, r24
     5f0:	aa 0f       	add	r26, r26
     5f2:	bb 1f       	adc	r27, r27
     5f4:	a0 50       	subi	r26, 0x00	; 0
     5f6:	be 4f       	sbci	r27, 0xFE	; 254
     5f8:	81 e0       	ldi	r24, 0x01	; 1
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	0c 90       	ld	r0, X
     5fe:	02 c0       	rjmp	.+4      	; 0x604 <_Z12digitalWritehh+0x172>
     600:	88 0f       	add	r24, r24
     602:	99 1f       	adc	r25, r25
     604:	0a 94       	dec	r0
     606:	e2 f7       	brpl	.-8      	; 0x600 <_Z12digitalWritehh+0x16e>
     608:	80 95       	com	r24
     60a:	82 23       	and	r24, r18
     60c:	80 83       	st	Z, r24
			    break;
     60e:	08 95       	ret

			case'l':
	            PORTL&=~(1<<bIt[pInno]);
     610:	eb e0       	ldi	r30, 0x0B	; 11
     612:	f1 e0       	ldi	r31, 0x01	; 1
     614:	20 81       	ld	r18, Z
     616:	dc 01       	movw	r26, r24
     618:	aa 0f       	add	r26, r26
     61a:	bb 1f       	adc	r27, r27
     61c:	a0 50       	subi	r26, 0x00	; 0
     61e:	be 4f       	sbci	r27, 0xFE	; 254
     620:	81 e0       	ldi	r24, 0x01	; 1
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	0c 90       	ld	r0, X
     626:	02 c0       	rjmp	.+4      	; 0x62c <_Z12digitalWritehh+0x19a>
     628:	88 0f       	add	r24, r24
     62a:	99 1f       	adc	r25, r25
     62c:	0a 94       	dec	r0
     62e:	e2 f7       	brpl	.-8      	; 0x628 <_Z12digitalWritehh+0x196>
     630:	80 95       	com	r24
     632:	82 23       	and	r24, r18
     634:	80 83       	st	Z, r24
			    break;
     636:	08 95       	ret
	    }
	}
	else{
		switch(rEgister[pInno])
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	fc 01       	movw	r30, r24
     63c:	e4 57       	subi	r30, 0x74	; 116
     63e:	fd 4f       	sbci	r31, 0xFD	; 253
     640:	20 81       	ld	r18, Z
     642:	25 36       	cpi	r18, 0x65	; 101
     644:	09 f4       	brne	.+2      	; 0x648 <_Z12digitalWritehh+0x1b6>
     646:	68 c0       	rjmp	.+208    	; 0x718 <_Z12digitalWritehh+0x286>
     648:	26 36       	cpi	r18, 0x66	; 102
     64a:	70 f4       	brcc	.+28     	; 0x668 <_Z12digitalWritehh+0x1d6>
     64c:	22 36       	cpi	r18, 0x62	; 98
     64e:	71 f1       	breq	.+92     	; 0x6ac <_Z12digitalWritehh+0x21a>
     650:	23 36       	cpi	r18, 0x63	; 99
     652:	20 f4       	brcc	.+8      	; 0x65c <_Z12digitalWritehh+0x1ca>
     654:	21 36       	cpi	r18, 0x61	; 97
     656:	09 f0       	breq	.+2      	; 0x65a <_Z12digitalWritehh+0x1c8>
     658:	be c0       	rjmp	.+380    	; 0x7d6 <_Z12digitalWritehh+0x344>
     65a:	16 c0       	rjmp	.+44     	; 0x688 <_Z12digitalWritehh+0x1f6>
     65c:	23 36       	cpi	r18, 0x63	; 99
     65e:	c1 f1       	breq	.+112    	; 0x6d0 <_Z12digitalWritehh+0x23e>
     660:	24 36       	cpi	r18, 0x64	; 100
     662:	09 f0       	breq	.+2      	; 0x666 <_Z12digitalWritehh+0x1d4>
     664:	b8 c0       	rjmp	.+368    	; 0x7d6 <_Z12digitalWritehh+0x344>
     666:	46 c0       	rjmp	.+140    	; 0x6f4 <_Z12digitalWritehh+0x262>
     668:	28 36       	cpi	r18, 0x68	; 104
     66a:	09 f4       	brne	.+2      	; 0x66e <_Z12digitalWritehh+0x1dc>
     66c:	79 c0       	rjmp	.+242    	; 0x760 <_Z12digitalWritehh+0x2ce>
     66e:	29 36       	cpi	r18, 0x69	; 105
     670:	20 f4       	brcc	.+8      	; 0x67a <_Z12digitalWritehh+0x1e8>
     672:	27 36       	cpi	r18, 0x67	; 103
     674:	09 f0       	breq	.+2      	; 0x678 <_Z12digitalWritehh+0x1e6>
     676:	af c0       	rjmp	.+350    	; 0x7d6 <_Z12digitalWritehh+0x344>
     678:	61 c0       	rjmp	.+194    	; 0x73c <_Z12digitalWritehh+0x2aa>
     67a:	2a 36       	cpi	r18, 0x6A	; 106
     67c:	09 f4       	brne	.+2      	; 0x680 <_Z12digitalWritehh+0x1ee>
     67e:	84 c0       	rjmp	.+264    	; 0x788 <_Z12digitalWritehh+0x2f6>
     680:	2c 36       	cpi	r18, 0x6C	; 108
     682:	09 f0       	breq	.+2      	; 0x686 <_Z12digitalWritehh+0x1f4>
     684:	a8 c0       	rjmp	.+336    	; 0x7d6 <_Z12digitalWritehh+0x344>
     686:	94 c0       	rjmp	.+296    	; 0x7b0 <_Z12digitalWritehh+0x31e>
		{   case'a':
			          PORTA|=(1<<bIt[pInno]);
     688:	42 b1       	in	r20, 0x02	; 2
     68a:	fc 01       	movw	r30, r24
     68c:	ee 0f       	add	r30, r30
     68e:	ff 1f       	adc	r31, r31
     690:	e0 50       	subi	r30, 0x00	; 0
     692:	fe 4f       	sbci	r31, 0xFE	; 254
     694:	21 e0       	ldi	r18, 0x01	; 1
     696:	30 e0       	ldi	r19, 0x00	; 0
     698:	c9 01       	movw	r24, r18
     69a:	00 80       	ld	r0, Z
     69c:	02 c0       	rjmp	.+4      	; 0x6a2 <_Z12digitalWritehh+0x210>
     69e:	88 0f       	add	r24, r24
     6a0:	99 1f       	adc	r25, r25
     6a2:	0a 94       	dec	r0
     6a4:	e2 f7       	brpl	.-8      	; 0x69e <_Z12digitalWritehh+0x20c>
     6a6:	84 2b       	or	r24, r20
     6a8:	82 b9       	out	0x02, r24	; 2
					  break;
     6aa:	08 95       	ret

	        case'b':
	        	PORTB|=(1<<bIt[pInno]);
     6ac:	45 b1       	in	r20, 0x05	; 5
     6ae:	fc 01       	movw	r30, r24
     6b0:	ee 0f       	add	r30, r30
     6b2:	ff 1f       	adc	r31, r31
     6b4:	e0 50       	subi	r30, 0x00	; 0
     6b6:	fe 4f       	sbci	r31, 0xFE	; 254
     6b8:	21 e0       	ldi	r18, 0x01	; 1
     6ba:	30 e0       	ldi	r19, 0x00	; 0
     6bc:	c9 01       	movw	r24, r18
     6be:	00 80       	ld	r0, Z
     6c0:	02 c0       	rjmp	.+4      	; 0x6c6 <_Z12digitalWritehh+0x234>
     6c2:	88 0f       	add	r24, r24
     6c4:	99 1f       	adc	r25, r25
     6c6:	0a 94       	dec	r0
     6c8:	e2 f7       	brpl	.-8      	; 0x6c2 <_Z12digitalWritehh+0x230>
     6ca:	84 2b       	or	r24, r20
     6cc:	85 b9       	out	0x05, r24	; 5
			    break;
     6ce:	08 95       	ret

	        case'c':
	        	PORTC|=(1<<bIt[pInno]);
     6d0:	48 b1       	in	r20, 0x08	; 8
     6d2:	fc 01       	movw	r30, r24
     6d4:	ee 0f       	add	r30, r30
     6d6:	ff 1f       	adc	r31, r31
     6d8:	e0 50       	subi	r30, 0x00	; 0
     6da:	fe 4f       	sbci	r31, 0xFE	; 254
     6dc:	21 e0       	ldi	r18, 0x01	; 1
     6de:	30 e0       	ldi	r19, 0x00	; 0
     6e0:	c9 01       	movw	r24, r18
     6e2:	00 80       	ld	r0, Z
     6e4:	02 c0       	rjmp	.+4      	; 0x6ea <_Z12digitalWritehh+0x258>
     6e6:	88 0f       	add	r24, r24
     6e8:	99 1f       	adc	r25, r25
     6ea:	0a 94       	dec	r0
     6ec:	e2 f7       	brpl	.-8      	; 0x6e6 <_Z12digitalWritehh+0x254>
     6ee:	84 2b       	or	r24, r20
     6f0:	88 b9       	out	0x08, r24	; 8
			    break;
     6f2:	08 95       	ret

	        case'd':
	            PORTD|=(1<<bIt[pInno]);
     6f4:	4b b1       	in	r20, 0x0b	; 11
     6f6:	fc 01       	movw	r30, r24
     6f8:	ee 0f       	add	r30, r30
     6fa:	ff 1f       	adc	r31, r31
     6fc:	e0 50       	subi	r30, 0x00	; 0
     6fe:	fe 4f       	sbci	r31, 0xFE	; 254
     700:	21 e0       	ldi	r18, 0x01	; 1
     702:	30 e0       	ldi	r19, 0x00	; 0
     704:	c9 01       	movw	r24, r18
     706:	00 80       	ld	r0, Z
     708:	02 c0       	rjmp	.+4      	; 0x70e <_Z12digitalWritehh+0x27c>
     70a:	88 0f       	add	r24, r24
     70c:	99 1f       	adc	r25, r25
     70e:	0a 94       	dec	r0
     710:	e2 f7       	brpl	.-8      	; 0x70a <_Z12digitalWritehh+0x278>
     712:	84 2b       	or	r24, r20
     714:	8b b9       	out	0x0b, r24	; 11
			    break;
     716:	08 95       	ret

		    case'e':
	            PORTE|=(1<<bIt[pInno]);
     718:	4e b1       	in	r20, 0x0e	; 14
     71a:	fc 01       	movw	r30, r24
     71c:	ee 0f       	add	r30, r30
     71e:	ff 1f       	adc	r31, r31
     720:	e0 50       	subi	r30, 0x00	; 0
     722:	fe 4f       	sbci	r31, 0xFE	; 254
     724:	21 e0       	ldi	r18, 0x01	; 1
     726:	30 e0       	ldi	r19, 0x00	; 0
     728:	c9 01       	movw	r24, r18
     72a:	00 80       	ld	r0, Z
     72c:	02 c0       	rjmp	.+4      	; 0x732 <_Z12digitalWritehh+0x2a0>
     72e:	88 0f       	add	r24, r24
     730:	99 1f       	adc	r25, r25
     732:	0a 94       	dec	r0
     734:	e2 f7       	brpl	.-8      	; 0x72e <_Z12digitalWritehh+0x29c>
     736:	84 2b       	or	r24, r20
     738:	8e b9       	out	0x0e, r24	; 14
			    break;
     73a:	08 95       	ret

			case'g':
	            PORTG|=(1<<bIt[pInno]);
     73c:	44 b3       	in	r20, 0x14	; 20
     73e:	fc 01       	movw	r30, r24
     740:	ee 0f       	add	r30, r30
     742:	ff 1f       	adc	r31, r31
     744:	e0 50       	subi	r30, 0x00	; 0
     746:	fe 4f       	sbci	r31, 0xFE	; 254
     748:	21 e0       	ldi	r18, 0x01	; 1
     74a:	30 e0       	ldi	r19, 0x00	; 0
     74c:	c9 01       	movw	r24, r18
     74e:	00 80       	ld	r0, Z
     750:	02 c0       	rjmp	.+4      	; 0x756 <_Z12digitalWritehh+0x2c4>
     752:	88 0f       	add	r24, r24
     754:	99 1f       	adc	r25, r25
     756:	0a 94       	dec	r0
     758:	e2 f7       	brpl	.-8      	; 0x752 <_Z12digitalWritehh+0x2c0>
     75a:	84 2b       	or	r24, r20
     75c:	84 bb       	out	0x14, r24	; 20
			    break;
     75e:	08 95       	ret

			case'h':
	            PORTH|=(1<<bIt[pInno]);
     760:	e2 e0       	ldi	r30, 0x02	; 2
     762:	f1 e0       	ldi	r31, 0x01	; 1
     764:	40 81       	ld	r20, Z
     766:	dc 01       	movw	r26, r24
     768:	aa 0f       	add	r26, r26
     76a:	bb 1f       	adc	r27, r27
     76c:	a0 50       	subi	r26, 0x00	; 0
     76e:	be 4f       	sbci	r27, 0xFE	; 254
     770:	21 e0       	ldi	r18, 0x01	; 1
     772:	30 e0       	ldi	r19, 0x00	; 0
     774:	c9 01       	movw	r24, r18
     776:	0c 90       	ld	r0, X
     778:	02 c0       	rjmp	.+4      	; 0x77e <_Z12digitalWritehh+0x2ec>
     77a:	88 0f       	add	r24, r24
     77c:	99 1f       	adc	r25, r25
     77e:	0a 94       	dec	r0
     780:	e2 f7       	brpl	.-8      	; 0x77a <_Z12digitalWritehh+0x2e8>
     782:	84 2b       	or	r24, r20
     784:	80 83       	st	Z, r24
			    break;
     786:	08 95       	ret

			case'j':
	        	PORTJ|=(1<<bIt[pInno]);
     788:	e5 e0       	ldi	r30, 0x05	; 5
     78a:	f1 e0       	ldi	r31, 0x01	; 1
     78c:	40 81       	ld	r20, Z
     78e:	dc 01       	movw	r26, r24
     790:	aa 0f       	add	r26, r26
     792:	bb 1f       	adc	r27, r27
     794:	a0 50       	subi	r26, 0x00	; 0
     796:	be 4f       	sbci	r27, 0xFE	; 254
     798:	21 e0       	ldi	r18, 0x01	; 1
     79a:	30 e0       	ldi	r19, 0x00	; 0
     79c:	c9 01       	movw	r24, r18
     79e:	0c 90       	ld	r0, X
     7a0:	02 c0       	rjmp	.+4      	; 0x7a6 <_Z12digitalWritehh+0x314>
     7a2:	88 0f       	add	r24, r24
     7a4:	99 1f       	adc	r25, r25
     7a6:	0a 94       	dec	r0
     7a8:	e2 f7       	brpl	.-8      	; 0x7a2 <_Z12digitalWritehh+0x310>
     7aa:	84 2b       	or	r24, r20
     7ac:	80 83       	st	Z, r24
			    break;
     7ae:	08 95       	ret

			case'l':
	            PORTL|=(1<<bIt[pInno]);
     7b0:	eb e0       	ldi	r30, 0x0B	; 11
     7b2:	f1 e0       	ldi	r31, 0x01	; 1
     7b4:	40 81       	ld	r20, Z
     7b6:	dc 01       	movw	r26, r24
     7b8:	aa 0f       	add	r26, r26
     7ba:	bb 1f       	adc	r27, r27
     7bc:	a0 50       	subi	r26, 0x00	; 0
     7be:	be 4f       	sbci	r27, 0xFE	; 254
     7c0:	21 e0       	ldi	r18, 0x01	; 1
     7c2:	30 e0       	ldi	r19, 0x00	; 0
     7c4:	c9 01       	movw	r24, r18
     7c6:	0c 90       	ld	r0, X
     7c8:	02 c0       	rjmp	.+4      	; 0x7ce <_Z12digitalWritehh+0x33c>
     7ca:	88 0f       	add	r24, r24
     7cc:	99 1f       	adc	r25, r25
     7ce:	0a 94       	dec	r0
     7d0:	e2 f7       	brpl	.-8      	; 0x7ca <_Z12digitalWritehh+0x338>
     7d2:	84 2b       	or	r24, r20
     7d4:	80 83       	st	Z, r24
     7d6:	08 95       	ret

000007d8 <_Z11digitalReadh>:

uint8_t digitalRead(uint8_t pInno)
{
	uint8_t digitalstatus;
	uint8_t reference=0;				//not a good practice
   switch(rEgister[pInno])
     7d8:	28 2f       	mov	r18, r24
     7da:	30 e0       	ldi	r19, 0x00	; 0
     7dc:	f9 01       	movw	r30, r18
     7de:	e4 57       	subi	r30, 0x74	; 116
     7e0:	fd 4f       	sbci	r31, 0xFD	; 253
     7e2:	80 81       	ld	r24, Z
     7e4:	85 36       	cpi	r24, 0x65	; 101
     7e6:	09 f4       	brne	.+2      	; 0x7ea <_Z11digitalReadh+0x12>
     7e8:	75 c0       	rjmp	.+234    	; 0x8d4 <_Z11digitalReadh+0xfc>
     7ea:	86 36       	cpi	r24, 0x66	; 102
     7ec:	78 f4       	brcc	.+30     	; 0x80c <_Z11digitalReadh+0x34>
     7ee:	82 36       	cpi	r24, 0x62	; 98
     7f0:	91 f1       	breq	.+100    	; 0x856 <_Z11digitalReadh+0x7e>
     7f2:	83 36       	cpi	r24, 0x63	; 99
     7f4:	20 f4       	brcc	.+8      	; 0x7fe <_Z11digitalReadh+0x26>
     7f6:	81 36       	cpi	r24, 0x61	; 97
     7f8:	09 f0       	breq	.+2      	; 0x7fc <_Z11digitalReadh+0x24>
     7fa:	d4 c0       	rjmp	.+424    	; 0x9a4 <_Z11digitalReadh+0x1cc>
     7fc:	17 c0       	rjmp	.+46     	; 0x82c <_Z11digitalReadh+0x54>
     7fe:	83 36       	cpi	r24, 0x63	; 99
     800:	09 f4       	brne	.+2      	; 0x804 <_Z11digitalReadh+0x2c>
     802:	3e c0       	rjmp	.+124    	; 0x880 <_Z11digitalReadh+0xa8>
     804:	84 36       	cpi	r24, 0x64	; 100
     806:	09 f0       	breq	.+2      	; 0x80a <_Z11digitalReadh+0x32>
     808:	cd c0       	rjmp	.+410    	; 0x9a4 <_Z11digitalReadh+0x1cc>
     80a:	4f c0       	rjmp	.+158    	; 0x8aa <_Z11digitalReadh+0xd2>
     80c:	88 36       	cpi	r24, 0x68	; 104
     80e:	09 f4       	brne	.+2      	; 0x812 <_Z11digitalReadh+0x3a>
     810:	8b c0       	rjmp	.+278    	; 0x928 <_Z11digitalReadh+0x150>
     812:	89 36       	cpi	r24, 0x69	; 105
     814:	20 f4       	brcc	.+8      	; 0x81e <_Z11digitalReadh+0x46>
     816:	87 36       	cpi	r24, 0x67	; 103
     818:	09 f0       	breq	.+2      	; 0x81c <_Z11digitalReadh+0x44>
     81a:	c4 c0       	rjmp	.+392    	; 0x9a4 <_Z11digitalReadh+0x1cc>
     81c:	70 c0       	rjmp	.+224    	; 0x8fe <_Z11digitalReadh+0x126>
     81e:	8a 36       	cpi	r24, 0x6A	; 106
     820:	09 f4       	brne	.+2      	; 0x824 <_Z11digitalReadh+0x4c>
     822:	97 c0       	rjmp	.+302    	; 0x952 <_Z11digitalReadh+0x17a>
     824:	8c 36       	cpi	r24, 0x6C	; 108
     826:	09 f0       	breq	.+2      	; 0x82a <_Z11digitalReadh+0x52>
     828:	bd c0       	rjmp	.+378    	; 0x9a4 <_Z11digitalReadh+0x1cc>
     82a:	a8 c0       	rjmp	.+336    	; 0x97c <_Z11digitalReadh+0x1a4>
      {   case'a':      reference=(1<<bIt[pInno]);
				        digitalstatus=!(!(PINA&reference));
     82c:	40 b1       	in	r20, 0x00	; 0
uint8_t digitalRead(uint8_t pInno)
{
	uint8_t digitalstatus;
	uint8_t reference=0;				//not a good practice
   switch(rEgister[pInno])
      {   case'a':      reference=(1<<bIt[pInno]);
     82e:	f9 01       	movw	r30, r18
     830:	ee 0f       	add	r30, r30
     832:	ff 1f       	adc	r31, r31
     834:	e0 50       	subi	r30, 0x00	; 0
     836:	fe 4f       	sbci	r31, 0xFE	; 254
     838:	21 e0       	ldi	r18, 0x01	; 1
     83a:	30 e0       	ldi	r19, 0x00	; 0
     83c:	c9 01       	movw	r24, r18
     83e:	00 80       	ld	r0, Z
     840:	02 c0       	rjmp	.+4      	; 0x846 <_Z11digitalReadh+0x6e>
     842:	88 0f       	add	r24, r24
     844:	99 1f       	adc	r25, r25
     846:	0a 94       	dec	r0
     848:	e2 f7       	brpl	.-8      	; 0x842 <_Z11digitalReadh+0x6a>
				        digitalstatus=!(!(PINA&reference));
     84a:	84 23       	and	r24, r20
     84c:	91 e0       	ldi	r25, 0x01	; 1
     84e:	09 f0       	breq	.+2      	; 0x852 <_Z11digitalReadh+0x7a>
     850:	a9 c0       	rjmp	.+338    	; 0x9a4 <_Z11digitalReadh+0x1cc>
     852:	90 e0       	ldi	r25, 0x00	; 0
						break;
     854:	a7 c0       	rjmp	.+334    	; 0x9a4 <_Z11digitalReadh+0x1cc>
	        case'b':    reference=(1<<bIt[pInno]);
				    	digitalstatus=!(!(PINB&reference));
     856:	43 b1       	in	r20, 0x03	; 3
	uint8_t reference=0;				//not a good practice
   switch(rEgister[pInno])
      {   case'a':      reference=(1<<bIt[pInno]);
				        digitalstatus=!(!(PINA&reference));
						break;
	        case'b':    reference=(1<<bIt[pInno]);
     858:	f9 01       	movw	r30, r18
     85a:	ee 0f       	add	r30, r30
     85c:	ff 1f       	adc	r31, r31
     85e:	e0 50       	subi	r30, 0x00	; 0
     860:	fe 4f       	sbci	r31, 0xFE	; 254
     862:	21 e0       	ldi	r18, 0x01	; 1
     864:	30 e0       	ldi	r19, 0x00	; 0
     866:	c9 01       	movw	r24, r18
     868:	00 80       	ld	r0, Z
     86a:	02 c0       	rjmp	.+4      	; 0x870 <_Z11digitalReadh+0x98>
     86c:	88 0f       	add	r24, r24
     86e:	99 1f       	adc	r25, r25
     870:	0a 94       	dec	r0
     872:	e2 f7       	brpl	.-8      	; 0x86c <_Z11digitalReadh+0x94>
				    	digitalstatus=!(!(PINB&reference));
     874:	84 23       	and	r24, r20
     876:	91 e0       	ldi	r25, 0x01	; 1
     878:	09 f0       	breq	.+2      	; 0x87c <_Z11digitalReadh+0xa4>
     87a:	94 c0       	rjmp	.+296    	; 0x9a4 <_Z11digitalReadh+0x1cc>
     87c:	90 e0       	ldi	r25, 0x00	; 0
			            break;
     87e:	92 c0       	rjmp	.+292    	; 0x9a4 <_Z11digitalReadh+0x1cc>
	        case'c':    reference=(1<<bIt[pInno]);
					    digitalstatus=!(!(PINC&reference));
     880:	46 b1       	in	r20, 0x06	; 6
				        digitalstatus=!(!(PINA&reference));
						break;
	        case'b':    reference=(1<<bIt[pInno]);
				    	digitalstatus=!(!(PINB&reference));
			            break;
	        case'c':    reference=(1<<bIt[pInno]);
     882:	f9 01       	movw	r30, r18
     884:	ee 0f       	add	r30, r30
     886:	ff 1f       	adc	r31, r31
     888:	e0 50       	subi	r30, 0x00	; 0
     88a:	fe 4f       	sbci	r31, 0xFE	; 254
     88c:	21 e0       	ldi	r18, 0x01	; 1
     88e:	30 e0       	ldi	r19, 0x00	; 0
     890:	c9 01       	movw	r24, r18
     892:	00 80       	ld	r0, Z
     894:	02 c0       	rjmp	.+4      	; 0x89a <_Z11digitalReadh+0xc2>
     896:	88 0f       	add	r24, r24
     898:	99 1f       	adc	r25, r25
     89a:	0a 94       	dec	r0
     89c:	e2 f7       	brpl	.-8      	; 0x896 <_Z11digitalReadh+0xbe>
					    digitalstatus=!(!(PINC&reference));
     89e:	84 23       	and	r24, r20
     8a0:	91 e0       	ldi	r25, 0x01	; 1
     8a2:	09 f0       	breq	.+2      	; 0x8a6 <_Z11digitalReadh+0xce>
     8a4:	7f c0       	rjmp	.+254    	; 0x9a4 <_Z11digitalReadh+0x1cc>
     8a6:	90 e0       	ldi	r25, 0x00	; 0
			            break;
     8a8:	7d c0       	rjmp	.+250    	; 0x9a4 <_Z11digitalReadh+0x1cc>
	        case'd':    reference=(1<<bIt[pInno]);
					    digitalstatus=!(!(PIND&reference));
     8aa:	49 b1       	in	r20, 0x09	; 9
				    	digitalstatus=!(!(PINB&reference));
			            break;
	        case'c':    reference=(1<<bIt[pInno]);
					    digitalstatus=!(!(PINC&reference));
			            break;
	        case'd':    reference=(1<<bIt[pInno]);
     8ac:	f9 01       	movw	r30, r18
     8ae:	ee 0f       	add	r30, r30
     8b0:	ff 1f       	adc	r31, r31
     8b2:	e0 50       	subi	r30, 0x00	; 0
     8b4:	fe 4f       	sbci	r31, 0xFE	; 254
     8b6:	21 e0       	ldi	r18, 0x01	; 1
     8b8:	30 e0       	ldi	r19, 0x00	; 0
     8ba:	c9 01       	movw	r24, r18
     8bc:	00 80       	ld	r0, Z
     8be:	02 c0       	rjmp	.+4      	; 0x8c4 <_Z11digitalReadh+0xec>
     8c0:	88 0f       	add	r24, r24
     8c2:	99 1f       	adc	r25, r25
     8c4:	0a 94       	dec	r0
     8c6:	e2 f7       	brpl	.-8      	; 0x8c0 <_Z11digitalReadh+0xe8>
					    digitalstatus=!(!(PIND&reference));
     8c8:	84 23       	and	r24, r20
     8ca:	91 e0       	ldi	r25, 0x01	; 1
     8cc:	09 f0       	breq	.+2      	; 0x8d0 <_Z11digitalReadh+0xf8>
     8ce:	6a c0       	rjmp	.+212    	; 0x9a4 <_Z11digitalReadh+0x1cc>
     8d0:	90 e0       	ldi	r25, 0x00	; 0
			            break;
     8d2:	68 c0       	rjmp	.+208    	; 0x9a4 <_Z11digitalReadh+0x1cc>
		      case'e':  reference=(1<<bIt[pInno]);
			            digitalstatus=!(!(PINE&reference));
     8d4:	4c b1       	in	r20, 0x0c	; 12
					    digitalstatus=!(!(PINC&reference));
			            break;
	        case'd':    reference=(1<<bIt[pInno]);
					    digitalstatus=!(!(PIND&reference));
			            break;
		      case'e':  reference=(1<<bIt[pInno]);
     8d6:	f9 01       	movw	r30, r18
     8d8:	ee 0f       	add	r30, r30
     8da:	ff 1f       	adc	r31, r31
     8dc:	e0 50       	subi	r30, 0x00	; 0
     8de:	fe 4f       	sbci	r31, 0xFE	; 254
     8e0:	21 e0       	ldi	r18, 0x01	; 1
     8e2:	30 e0       	ldi	r19, 0x00	; 0
     8e4:	c9 01       	movw	r24, r18
     8e6:	00 80       	ld	r0, Z
     8e8:	02 c0       	rjmp	.+4      	; 0x8ee <_Z11digitalReadh+0x116>
     8ea:	88 0f       	add	r24, r24
     8ec:	99 1f       	adc	r25, r25
     8ee:	0a 94       	dec	r0
     8f0:	e2 f7       	brpl	.-8      	; 0x8ea <_Z11digitalReadh+0x112>
			            digitalstatus=!(!(PINE&reference));
     8f2:	84 23       	and	r24, r20
     8f4:	91 e0       	ldi	r25, 0x01	; 1
     8f6:	09 f0       	breq	.+2      	; 0x8fa <_Z11digitalReadh+0x122>
     8f8:	55 c0       	rjmp	.+170    	; 0x9a4 <_Z11digitalReadh+0x1cc>
     8fa:	90 e0       	ldi	r25, 0x00	; 0
			            break;
     8fc:	53 c0       	rjmp	.+166    	; 0x9a4 <_Z11digitalReadh+0x1cc>
		    	case'g':reference=(1<<bIt[pInno]);
			            digitalstatus=!(!(PING&reference));
     8fe:	42 b3       	in	r20, 0x12	; 18
					    digitalstatus=!(!(PIND&reference));
			            break;
		      case'e':  reference=(1<<bIt[pInno]);
			            digitalstatus=!(!(PINE&reference));
			            break;
		    	case'g':reference=(1<<bIt[pInno]);
     900:	f9 01       	movw	r30, r18
     902:	ee 0f       	add	r30, r30
     904:	ff 1f       	adc	r31, r31
     906:	e0 50       	subi	r30, 0x00	; 0
     908:	fe 4f       	sbci	r31, 0xFE	; 254
     90a:	21 e0       	ldi	r18, 0x01	; 1
     90c:	30 e0       	ldi	r19, 0x00	; 0
     90e:	c9 01       	movw	r24, r18
     910:	00 80       	ld	r0, Z
     912:	02 c0       	rjmp	.+4      	; 0x918 <_Z11digitalReadh+0x140>
     914:	88 0f       	add	r24, r24
     916:	99 1f       	adc	r25, r25
     918:	0a 94       	dec	r0
     91a:	e2 f7       	brpl	.-8      	; 0x914 <_Z11digitalReadh+0x13c>
			            digitalstatus=!(!(PING&reference));
     91c:	84 23       	and	r24, r20
     91e:	91 e0       	ldi	r25, 0x01	; 1
     920:	09 f0       	breq	.+2      	; 0x924 <_Z11digitalReadh+0x14c>
     922:	40 c0       	rjmp	.+128    	; 0x9a4 <_Z11digitalReadh+0x1cc>
     924:	90 e0       	ldi	r25, 0x00	; 0
			            break;
     926:	3e c0       	rjmp	.+124    	; 0x9a4 <_Z11digitalReadh+0x1cc>
			    case'h':reference=(1<<bIt[pInno]);
		              digitalstatus=!(!(PINH&reference));
     928:	40 91 00 01 	lds	r20, 0x0100
			            digitalstatus=!(!(PINE&reference));
			            break;
		    	case'g':reference=(1<<bIt[pInno]);
			            digitalstatus=!(!(PING&reference));
			            break;
			    case'h':reference=(1<<bIt[pInno]);
     92c:	f9 01       	movw	r30, r18
     92e:	ee 0f       	add	r30, r30
     930:	ff 1f       	adc	r31, r31
     932:	e0 50       	subi	r30, 0x00	; 0
     934:	fe 4f       	sbci	r31, 0xFE	; 254
     936:	21 e0       	ldi	r18, 0x01	; 1
     938:	30 e0       	ldi	r19, 0x00	; 0
     93a:	c9 01       	movw	r24, r18
     93c:	00 80       	ld	r0, Z
     93e:	02 c0       	rjmp	.+4      	; 0x944 <_Z11digitalReadh+0x16c>
     940:	88 0f       	add	r24, r24
     942:	99 1f       	adc	r25, r25
     944:	0a 94       	dec	r0
     946:	e2 f7       	brpl	.-8      	; 0x940 <_Z11digitalReadh+0x168>
		              digitalstatus=!(!(PINH&reference));
     948:	84 23       	and	r24, r20
     94a:	91 e0       	ldi	r25, 0x01	; 1
     94c:	59 f5       	brne	.+86     	; 0x9a4 <_Z11digitalReadh+0x1cc>
     94e:	90 e0       	ldi	r25, 0x00	; 0
		              break;
     950:	29 c0       	rjmp	.+82     	; 0x9a4 <_Z11digitalReadh+0x1cc>
			    case'j':reference=(1<<bIt[pInno]);
		              digitalstatus=!(!(PINJ&reference));
     952:	40 91 03 01 	lds	r20, 0x0103
			            digitalstatus=!(!(PING&reference));
			            break;
			    case'h':reference=(1<<bIt[pInno]);
		              digitalstatus=!(!(PINH&reference));
		              break;
			    case'j':reference=(1<<bIt[pInno]);
     956:	f9 01       	movw	r30, r18
     958:	ee 0f       	add	r30, r30
     95a:	ff 1f       	adc	r31, r31
     95c:	e0 50       	subi	r30, 0x00	; 0
     95e:	fe 4f       	sbci	r31, 0xFE	; 254
     960:	21 e0       	ldi	r18, 0x01	; 1
     962:	30 e0       	ldi	r19, 0x00	; 0
     964:	c9 01       	movw	r24, r18
     966:	00 80       	ld	r0, Z
     968:	02 c0       	rjmp	.+4      	; 0x96e <_Z11digitalReadh+0x196>
     96a:	88 0f       	add	r24, r24
     96c:	99 1f       	adc	r25, r25
     96e:	0a 94       	dec	r0
     970:	e2 f7       	brpl	.-8      	; 0x96a <_Z11digitalReadh+0x192>
		              digitalstatus=!(!(PINJ&reference));
     972:	84 23       	and	r24, r20
     974:	91 e0       	ldi	r25, 0x01	; 1
     976:	b1 f4       	brne	.+44     	; 0x9a4 <_Z11digitalReadh+0x1cc>
     978:	90 e0       	ldi	r25, 0x00	; 0
		              break;
     97a:	14 c0       	rjmp	.+40     	; 0x9a4 <_Z11digitalReadh+0x1cc>
			    case'l':reference=(1<<bIt[pInno]);
			            digitalstatus=!(!(PINL&reference));
     97c:	40 91 09 01 	lds	r20, 0x0109
		              digitalstatus=!(!(PINH&reference));
		              break;
			    case'j':reference=(1<<bIt[pInno]);
		              digitalstatus=!(!(PINJ&reference));
		              break;
			    case'l':reference=(1<<bIt[pInno]);
     980:	f9 01       	movw	r30, r18
     982:	ee 0f       	add	r30, r30
     984:	ff 1f       	adc	r31, r31
     986:	e0 50       	subi	r30, 0x00	; 0
     988:	fe 4f       	sbci	r31, 0xFE	; 254
     98a:	21 e0       	ldi	r18, 0x01	; 1
     98c:	30 e0       	ldi	r19, 0x00	; 0
     98e:	c9 01       	movw	r24, r18
     990:	00 80       	ld	r0, Z
     992:	02 c0       	rjmp	.+4      	; 0x998 <_Z11digitalReadh+0x1c0>
     994:	88 0f       	add	r24, r24
     996:	99 1f       	adc	r25, r25
     998:	0a 94       	dec	r0
     99a:	e2 f7       	brpl	.-8      	; 0x994 <_Z11digitalReadh+0x1bc>
			            digitalstatus=!(!(PINL&reference));
     99c:	84 23       	and	r24, r20
     99e:	91 e0       	ldi	r25, 0x01	; 1
     9a0:	09 f4       	brne	.+2      	; 0x9a4 <_Z11digitalReadh+0x1cc>
     9a2:	90 e0       	ldi	r25, 0x00	; 0
			            break;
	     }
return digitalstatus;
}
     9a4:	89 2f       	mov	r24, r25
     9a6:	08 95       	ret

000009a8 <_Z20microsecondsToInchesm>:
{
  // According to Parallax's datasheet for the PING))), there are 73.746
  // microseconds per inch (i.e. sound travels at 1130 feet per second).
  // This gives the distance travelled by the ping, outbound and return,
  // so we divide by 2 to get the distance of the obstacle.
  return (mIcroseconds*0.00669/ 2);
     9a8:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <__floatunsisf>
     9ac:	2a ec       	ldi	r18, 0xCA	; 202
     9ae:	37 e3       	ldi	r19, 0x37	; 55
     9b0:	4b ed       	ldi	r20, 0xDB	; 219
     9b2:	5b e3       	ldi	r21, 0x3B	; 59
     9b4:	0e 94 de 1a 	call	0x35bc	; 0x35bc <__mulsf3>
     9b8:	20 e0       	ldi	r18, 0x00	; 0
     9ba:	30 e0       	ldi	r19, 0x00	; 0
     9bc:	40 e0       	ldi	r20, 0x00	; 0
     9be:	5f e3       	ldi	r21, 0x3F	; 63
     9c0:	0e 94 de 1a 	call	0x35bc	; 0x35bc <__mulsf3>
     9c4:	0e 94 24 1a 	call	0x3448	; 0x3448 <__fixunssfsi>
}
     9c8:	08 95       	ret

000009ca <_Z25microsecondsToCentimetersm>:
long unsigned int microsecondsToCentimeters(long unsigned int microseconds)
{
  // The speed of sound is 340 m/s or 29 microseconds per centimeter.
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
     9ca:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <__floatunsisf>
     9ce:	2b e7       	ldi	r18, 0x7B	; 123
     9d0:	34 e1       	ldi	r19, 0x14	; 20
     9d2:	4e e2       	ldi	r20, 0x2E	; 46
     9d4:	5e e3       	ldi	r21, 0x3E	; 62
     9d6:	0e 94 de 1a 	call	0x35bc	; 0x35bc <__mulsf3>
     9da:	20 e0       	ldi	r18, 0x00	; 0
     9dc:	30 e0       	ldi	r19, 0x00	; 0
     9de:	40 e0       	ldi	r20, 0x00	; 0
     9e0:	5f e3       	ldi	r21, 0x3F	; 63
     9e2:	0e 94 de 1a 	call	0x35bc	; 0x35bc <__mulsf3>
     9e6:	0e 94 24 1a 	call	0x3448	; 0x3448 <__fixunssfsi>
}
     9ea:	08 95       	ret

000009ec <_Z7initADCv>:
Serial1 Serial1;
Serial2 Serial2;
Serial3 Serial3;
void initADC()
{
	ADMUX=(1<<REFS0);				//Aref=AVcc
     9ec:	80 e4       	ldi	r24, 0x40	; 64
     9ee:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1);		//ADC enabled, Prescaler 64
     9f2:	86 e8       	ldi	r24, 0x86	; 134
     9f4:	80 93 7a 00 	sts	0x007A, r24
}
     9f8:	08 95       	ret

000009fa <_Z10analogReadi>:

int analogRead(int (pInno))
{
     9fa:	0f 93       	push	r16
     9fc:	1f 93       	push	r17
     9fe:	cf 93       	push	r28
     a00:	df 93       	push	r29
     a02:	8c 01       	movw	r16, r24
        //prescalar set to default
  	initADC();
     a04:	0e 94 f6 04 	call	0x9ec	; 0x9ec <_Z7initADCv>
  	ADMUX=(1<<REFS0)|(0<<REFS1);
     a08:	cc e7       	ldi	r28, 0x7C	; 124
     a0a:	d0 e0       	ldi	r29, 0x00	; 0
     a0c:	80 e4       	ldi	r24, 0x40	; 64
     a0e:	88 83       	st	Y, r24
  	ADCSRA|=(1<<ADEN);
     a10:	ea e7       	ldi	r30, 0x7A	; 122
     a12:	f0 e0       	ldi	r31, 0x00	; 0
     a14:	80 81       	ld	r24, Z
     a16:	80 68       	ori	r24, 0x80	; 128
     a18:	80 83       	st	Z, r24
    ADMUX|=(pInno%8);//chose value from 0 to 7 to chose adc pin accordingly
     a1a:	28 81       	ld	r18, Y
     a1c:	c8 01       	movw	r24, r16
     a1e:	68 e0       	ldi	r22, 0x08	; 8
     a20:	70 e0       	ldi	r23, 0x00	; 0
     a22:	0e 94 60 1b 	call	0x36c0	; 0x36c0 <__divmodhi4>
     a26:	28 2b       	or	r18, r24
     a28:	28 83       	st	Y, r18
    ADCSRA|=(1<<ADEN);
     a2a:	80 81       	ld	r24, Z
     a2c:	80 68       	ori	r24, 0x80	; 128
     a2e:	80 83       	st	Z, r24
    ADCSRA|=(1<<ADSC);
     a30:	80 81       	ld	r24, Z
     a32:	80 64       	ori	r24, 0x40	; 64
     a34:	80 83       	st	Z, r24
	while(ADCSRA&(1<<ADSC));
     a36:	80 81       	ld	r24, Z
     a38:	86 fd       	sbrc	r24, 6
     a3a:	fd cf       	rjmp	.-6      	; 0xa36 <_Z10analogReadi+0x3c>
	return (ADC);
     a3c:	20 91 78 00 	lds	r18, 0x0078
     a40:	30 91 79 00 	lds	r19, 0x0079
}
     a44:	82 2f       	mov	r24, r18
     a46:	93 2f       	mov	r25, r19
     a48:	df 91       	pop	r29
     a4a:	cf 91       	pop	r28
     a4c:	1f 91       	pop	r17
     a4e:	0f 91       	pop	r16
     a50:	08 95       	ret

00000a52 <_Z11analogWritehh>:

void analogWrite(uint8_t pInno,uint8_t dUtycY)
{
  switch(pInno)
     a52:	89 30       	cpi	r24, 0x09	; 9
     a54:	09 f4       	brne	.+2      	; 0xa58 <_Z11analogWritehh+0x6>
     a56:	59 c0       	rjmp	.+178    	; 0xb0a <_Z11analogWritehh+0xb8>
     a58:	8a 30       	cpi	r24, 0x0A	; 10
     a5a:	98 f4       	brcc	.+38     	; 0xa82 <_Z11analogWritehh+0x30>
     a5c:	85 30       	cpi	r24, 0x05	; 5
     a5e:	09 f4       	brne	.+2      	; 0xa62 <_Z11analogWritehh+0x10>
     a60:	66 c0       	rjmp	.+204    	; 0xb2e <_Z11analogWritehh+0xdc>
     a62:	86 30       	cpi	r24, 0x06	; 6
     a64:	38 f4       	brcc	.+14     	; 0xa74 <_Z11analogWritehh+0x22>
     a66:	82 30       	cpi	r24, 0x02	; 2
     a68:	09 f4       	brne	.+2      	; 0xa6c <_Z11analogWritehh+0x1a>
     a6a:	72 c0       	rjmp	.+228    	; 0xb50 <_Z11analogWritehh+0xfe>
     a6c:	84 30       	cpi	r24, 0x04	; 4
     a6e:	09 f0       	breq	.+2      	; 0xa72 <_Z11analogWritehh+0x20>
     a70:	e5 c0       	rjmp	.+458    	; 0xc3c <_Z11analogWritehh+0x1ea>
     a72:	b2 c0       	rjmp	.+356    	; 0xbd8 <_Z11analogWritehh+0x186>
     a74:	86 30       	cpi	r24, 0x06	; 6
     a76:	09 f4       	brne	.+2      	; 0xa7a <_Z11analogWritehh+0x28>
     a78:	b8 c0       	rjmp	.+368    	; 0xbea <_Z11analogWritehh+0x198>
     a7a:	87 30       	cpi	r24, 0x07	; 7
     a7c:	09 f0       	breq	.+2      	; 0xa80 <_Z11analogWritehh+0x2e>
     a7e:	de c0       	rjmp	.+444    	; 0xc3c <_Z11analogWritehh+0x1ea>
     a80:	c9 c0       	rjmp	.+402    	; 0xc14 <_Z11analogWritehh+0x1c2>
     a82:	8c 30       	cpi	r24, 0x0C	; 12
     a84:	19 f1       	breq	.+70     	; 0xacc <_Z11analogWritehh+0x7a>
     a86:	8d 30       	cpi	r24, 0x0D	; 13
     a88:	30 f4       	brcc	.+12     	; 0xa96 <_Z11analogWritehh+0x44>
     a8a:	8a 30       	cpi	r24, 0x0A	; 10
     a8c:	81 f1       	breq	.+96     	; 0xaee <_Z11analogWritehh+0x9c>
     a8e:	8b 30       	cpi	r24, 0x0B	; 11
     a90:	09 f0       	breq	.+2      	; 0xa94 <_Z11analogWritehh+0x42>
     a92:	d4 c0       	rjmp	.+424    	; 0xc3c <_Z11analogWritehh+0x1ea>
     a94:	0a c0       	rjmp	.+20     	; 0xaaa <_Z11analogWritehh+0x58>
     a96:	8d 32       	cpi	r24, 0x2D	; 45
     a98:	09 f4       	brne	.+2      	; 0xa9c <_Z11analogWritehh+0x4a>
     a9a:	80 c0       	rjmp	.+256    	; 0xb9c <_Z11analogWritehh+0x14a>
     a9c:	8e 32       	cpi	r24, 0x2E	; 46
     a9e:	09 f4       	brne	.+2      	; 0xaa2 <_Z11analogWritehh+0x50>
     aa0:	68 c0       	rjmp	.+208    	; 0xb72 <_Z11analogWritehh+0x120>
     aa2:	8d 30       	cpi	r24, 0x0D	; 13
     aa4:	09 f0       	breq	.+2      	; 0xaa8 <_Z11analogWritehh+0x56>
     aa6:	ca c0       	rjmp	.+404    	; 0xc3c <_Z11analogWritehh+0x1ea>
     aa8:	8e c0       	rjmp	.+284    	; 0xbc6 <_Z11analogWritehh+0x174>
  {
	  case 11:
		   DDRB|=(1<<PB5);
     aaa:	25 9a       	sbi	0x04, 5	; 4
		   TCCR1A|=(1<<WGM10)|(1<<WGM12)|(1<<COM1A1);
     aac:	e0 e8       	ldi	r30, 0x80	; 128
     aae:	f0 e0       	ldi	r31, 0x00	; 0
     ab0:	80 81       	ld	r24, Z
     ab2:	89 68       	ori	r24, 0x89	; 137
     ab4:	80 83       	st	Z, r24
		   TCCR1B|=(1<<CS11)|(1<<CS10);
     ab6:	e1 e8       	ldi	r30, 0x81	; 129
     ab8:	f0 e0       	ldi	r31, 0x00	; 0
     aba:	80 81       	ld	r24, Z
     abc:	83 60       	ori	r24, 0x03	; 3
     abe:	80 83       	st	Z, r24
		   OCR1A=dUtycY;
     ac0:	70 e0       	ldi	r23, 0x00	; 0
     ac2:	70 93 89 00 	sts	0x0089, r23
     ac6:	60 93 88 00 	sts	0x0088, r22
		   break;
     aca:	08 95       	ret
	  case 12:
		  DDRB|=(1<<PB6);
     acc:	26 9a       	sbi	0x04, 6	; 4
		  TCCR1A|=(1<<WGM10)|(1<<WGM12)|(1<<COM1B1);
     ace:	e0 e8       	ldi	r30, 0x80	; 128
     ad0:	f0 e0       	ldi	r31, 0x00	; 0
     ad2:	80 81       	ld	r24, Z
     ad4:	89 62       	ori	r24, 0x29	; 41
     ad6:	80 83       	st	Z, r24
		  TCCR1B|=(1<<CS11)|(1<<CS10);
     ad8:	e1 e8       	ldi	r30, 0x81	; 129
     ada:	f0 e0       	ldi	r31, 0x00	; 0
     adc:	80 81       	ld	r24, Z
     ade:	83 60       	ori	r24, 0x03	; 3
     ae0:	80 83       	st	Z, r24
		  OCR1B=dUtycY;
     ae2:	70 e0       	ldi	r23, 0x00	; 0
     ae4:	70 93 8b 00 	sts	0x008B, r23
     ae8:	60 93 8a 00 	sts	0x008A, r22
		  break;
     aec:	08 95       	ret
	  case 10:
		  DDRB|=(1<<PB4);
     aee:	24 9a       	sbi	0x04, 4	; 4
		  TCCR2A|=(1<<COM2A1)|(1<<WGM21)|(1<<WGM20);
     af0:	e0 eb       	ldi	r30, 0xB0	; 176
     af2:	f0 e0       	ldi	r31, 0x00	; 0
     af4:	80 81       	ld	r24, Z
     af6:	83 68       	ori	r24, 0x83	; 131
     af8:	80 83       	st	Z, r24
		  TCCR2B|=(1<<CS20);
     afa:	e1 eb       	ldi	r30, 0xB1	; 177
     afc:	f0 e0       	ldi	r31, 0x00	; 0
     afe:	80 81       	ld	r24, Z
     b00:	81 60       	ori	r24, 0x01	; 1
     b02:	80 83       	st	Z, r24
		  OCR2A=dUtycY;
     b04:	60 93 b3 00 	sts	0x00B3, r22
		  break;
     b08:	08 95       	ret
	  case 9:
		   DDRH|=(1<<PH6);
     b0a:	e1 e0       	ldi	r30, 0x01	; 1
     b0c:	f1 e0       	ldi	r31, 0x01	; 1
     b0e:	80 81       	ld	r24, Z
     b10:	80 64       	ori	r24, 0x40	; 64
     b12:	80 83       	st	Z, r24
		   TCCR2A|=(1<<WGM21)|(1<<WGM20)|(1<<COM2B1);
     b14:	e0 eb       	ldi	r30, 0xB0	; 176
     b16:	f0 e0       	ldi	r31, 0x00	; 0
     b18:	80 81       	ld	r24, Z
     b1a:	83 62       	ori	r24, 0x23	; 35
     b1c:	80 83       	st	Z, r24
		   TCCR2B|=(1<<CS20);
     b1e:	e1 eb       	ldi	r30, 0xB1	; 177
     b20:	f0 e0       	ldi	r31, 0x00	; 0
     b22:	80 81       	ld	r24, Z
     b24:	81 60       	ori	r24, 0x01	; 1
     b26:	80 83       	st	Z, r24
		   OCR2B=dUtycY;
     b28:	60 93 b4 00 	sts	0x00B4, r22
		   break;
     b2c:	08 95       	ret
	  case 5:
		  DDRE|=(1<<PE3);
     b2e:	6b 9a       	sbi	0x0d, 3	; 13
		  TCCR3A|=(1<<WGM32)|(1<<WGM30)|(1<<COM3A1);
     b30:	e0 e9       	ldi	r30, 0x90	; 144
     b32:	f0 e0       	ldi	r31, 0x00	; 0
     b34:	80 81       	ld	r24, Z
     b36:	89 68       	ori	r24, 0x89	; 137
     b38:	80 83       	st	Z, r24
		  TCCR3B|=(1<<CS30);
     b3a:	e1 e9       	ldi	r30, 0x91	; 145
     b3c:	f0 e0       	ldi	r31, 0x00	; 0
     b3e:	80 81       	ld	r24, Z
     b40:	81 60       	ori	r24, 0x01	; 1
     b42:	80 83       	st	Z, r24
		  OCR3A=dUtycY;
     b44:	70 e0       	ldi	r23, 0x00	; 0
     b46:	70 93 99 00 	sts	0x0099, r23
     b4a:	60 93 98 00 	sts	0x0098, r22
		  break;
     b4e:	08 95       	ret
	  case 2:
	  	  DDRE|=(1<<PE4);
     b50:	6c 9a       	sbi	0x0d, 4	; 13
		  TCCR3A|=(1<<WGM32)|(1<<WGM30)|(1<<COM3B1);
     b52:	e0 e9       	ldi	r30, 0x90	; 144
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	89 62       	ori	r24, 0x29	; 41
     b5a:	80 83       	st	Z, r24
		  TCCR3B|=(1<<CS30);
     b5c:	e1 e9       	ldi	r30, 0x91	; 145
     b5e:	f0 e0       	ldi	r31, 0x00	; 0
     b60:	80 81       	ld	r24, Z
     b62:	81 60       	ori	r24, 0x01	; 1
     b64:	80 83       	st	Z, r24
		  OCR3B=dUtycY;
     b66:	70 e0       	ldi	r23, 0x00	; 0
     b68:	70 93 9b 00 	sts	0x009B, r23
     b6c:	60 93 9a 00 	sts	0x009A, r22
		  break;
     b70:	08 95       	ret
	  case 46:
		  DDRL|=(1<<PL3);
     b72:	ea e0       	ldi	r30, 0x0A	; 10
     b74:	f1 e0       	ldi	r31, 0x01	; 1
     b76:	80 81       	ld	r24, Z
     b78:	88 60       	ori	r24, 0x08	; 8
     b7a:	80 83       	st	Z, r24
		  TCCR5A|=(1<<WGM52)|(1<<WGM50)|(1<<COM5A1);
     b7c:	e0 e2       	ldi	r30, 0x20	; 32
     b7e:	f1 e0       	ldi	r31, 0x01	; 1
     b80:	80 81       	ld	r24, Z
     b82:	89 68       	ori	r24, 0x89	; 137
     b84:	80 83       	st	Z, r24
		  TCCR5B|=(1<<CS50);
     b86:	e1 e2       	ldi	r30, 0x21	; 33
     b88:	f1 e0       	ldi	r31, 0x01	; 1
     b8a:	80 81       	ld	r24, Z
     b8c:	81 60       	ori	r24, 0x01	; 1
     b8e:	80 83       	st	Z, r24
		  OCR5A=dUtycY;
     b90:	70 e0       	ldi	r23, 0x00	; 0
     b92:	70 93 29 01 	sts	0x0129, r23
     b96:	60 93 28 01 	sts	0x0128, r22
		  break;
     b9a:	08 95       	ret
	  case 45:
		  DDRL|=(1<<PL4);
     b9c:	ea e0       	ldi	r30, 0x0A	; 10
     b9e:	f1 e0       	ldi	r31, 0x01	; 1
     ba0:	80 81       	ld	r24, Z
     ba2:	80 61       	ori	r24, 0x10	; 16
     ba4:	80 83       	st	Z, r24
		  TCCR5A|=(1<<WGM52)|(1<<WGM50)|(1<<COM5B1);
     ba6:	e0 e2       	ldi	r30, 0x20	; 32
     ba8:	f1 e0       	ldi	r31, 0x01	; 1
     baa:	80 81       	ld	r24, Z
     bac:	89 62       	ori	r24, 0x29	; 41
     bae:	80 83       	st	Z, r24
		  TCCR5B|=(1<<CS50);
     bb0:	e1 e2       	ldi	r30, 0x21	; 33
     bb2:	f1 e0       	ldi	r31, 0x01	; 1
     bb4:	80 81       	ld	r24, Z
     bb6:	81 60       	ori	r24, 0x01	; 1
     bb8:	80 83       	st	Z, r24
		  OCR5B=dUtycY;
     bba:	70 e0       	ldi	r23, 0x00	; 0
     bbc:	70 93 2b 01 	sts	0x012B, r23
     bc0:	60 93 2a 01 	sts	0x012A, r22
		  break;
     bc4:	08 95       	ret
	  case 13:
		  DDRB|=(1<<PB7);
     bc6:	27 9a       	sbi	0x04, 7	; 4
		  TCCR0A|=(1<<WGM10)|(1<<WGM00)|(1<<COM0A1);
     bc8:	84 b5       	in	r24, 0x24	; 36
     bca:	81 68       	ori	r24, 0x81	; 129
     bcc:	84 bd       	out	0x24, r24	; 36
		  TCCR0B|=(1<<CS00);
     bce:	85 b5       	in	r24, 0x25	; 37
     bd0:	81 60       	ori	r24, 0x01	; 1
     bd2:	85 bd       	out	0x25, r24	; 37
		  OCR0A=dUtycY;
     bd4:	67 bd       	out	0x27, r22	; 39
		  break;
     bd6:	08 95       	ret
	  case 4:
	  	DDRG|=(1<<PG5);
     bd8:	9d 9a       	sbi	0x13, 5	; 19
		TCCR0A|=(1<<WGM10)|(1<<WGM00)|(1<<COM0B1);
     bda:	84 b5       	in	r24, 0x24	; 36
     bdc:	81 62       	ori	r24, 0x21	; 33
     bde:	84 bd       	out	0x24, r24	; 36
		TCCR0B|=(1<<CS00);
     be0:	85 b5       	in	r24, 0x25	; 37
     be2:	81 60       	ori	r24, 0x01	; 1
     be4:	85 bd       	out	0x25, r24	; 37
		OCR0B=dUtycY;
     be6:	68 bd       	out	0x28, r22	; 40
		break;
     be8:	08 95       	ret

	  case 6:
		  DDRH|=(1<<PH3);
     bea:	e1 e0       	ldi	r30, 0x01	; 1
     bec:	f1 e0       	ldi	r31, 0x01	; 1
     bee:	80 81       	ld	r24, Z
     bf0:	88 60       	ori	r24, 0x08	; 8
     bf2:	80 83       	st	Z, r24
		  TCCR4A|=(1<<WGM42)|(1<<WGM40)|(1<<COM4A1);
     bf4:	e0 ea       	ldi	r30, 0xA0	; 160
     bf6:	f0 e0       	ldi	r31, 0x00	; 0
     bf8:	80 81       	ld	r24, Z
     bfa:	89 68       	ori	r24, 0x89	; 137
     bfc:	80 83       	st	Z, r24
		  TCCR4B|=(1<<CS40);
     bfe:	e1 ea       	ldi	r30, 0xA1	; 161
     c00:	f0 e0       	ldi	r31, 0x00	; 0
     c02:	80 81       	ld	r24, Z
     c04:	81 60       	ori	r24, 0x01	; 1
     c06:	80 83       	st	Z, r24
		  OCR4A=dUtycY;
     c08:	70 e0       	ldi	r23, 0x00	; 0
     c0a:	70 93 a9 00 	sts	0x00A9, r23
     c0e:	60 93 a8 00 	sts	0x00A8, r22
		  break;
     c12:	08 95       	ret
	  case 7:

		  DDRH|=(1<<PH4);
     c14:	e1 e0       	ldi	r30, 0x01	; 1
     c16:	f1 e0       	ldi	r31, 0x01	; 1
     c18:	80 81       	ld	r24, Z
     c1a:	80 61       	ori	r24, 0x10	; 16
     c1c:	80 83       	st	Z, r24
		TCCR4A|=(1<<WGM42)|(1<<WGM40)|(1<<COM4B1);
     c1e:	e0 ea       	ldi	r30, 0xA0	; 160
     c20:	f0 e0       	ldi	r31, 0x00	; 0
     c22:	80 81       	ld	r24, Z
     c24:	89 62       	ori	r24, 0x29	; 41
     c26:	80 83       	st	Z, r24
		  TCCR4B|=(1<<CS40);
     c28:	e1 ea       	ldi	r30, 0xA1	; 161
     c2a:	f0 e0       	ldi	r31, 0x00	; 0
     c2c:	80 81       	ld	r24, Z
     c2e:	81 60       	ori	r24, 0x01	; 1
     c30:	80 83       	st	Z, r24
		  OCR4B=dUtycY;
     c32:	70 e0       	ldi	r23, 0x00	; 0
     c34:	70 93 ab 00 	sts	0x00AB, r23
     c38:	60 93 aa 00 	sts	0x00AA, r22
     c3c:	08 95       	ret

00000c3e <_Z6millisv>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     c3e:	f8 94       	cli
{
    unsigned long millis_return;

    // Ensure this cannot be disrupted
    ATOMIC_BLOCK(ATOMIC_FORCEON) {
        millis_return = tImer2_millis;
     c40:	20 91 d2 02 	lds	r18, 0x02D2
     c44:	30 91 d3 02 	lds	r19, 0x02D3
     c48:	40 91 d4 02 	lds	r20, 0x02D4
     c4c:	50 91 d5 02 	lds	r21, 0x02D5
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
     c50:	78 94       	sei
    }

    return millis_return;
}
     c52:	62 2f       	mov	r22, r18
     c54:	73 2f       	mov	r23, r19
     c56:	84 2f       	mov	r24, r20
     c58:	95 2f       	mov	r25, r21
     c5a:	08 95       	ret

00000c5c <__vector_13>:

ISR (TIMER2_COMPA_vect)
{
     c5c:	1f 92       	push	r1
     c5e:	0f 92       	push	r0
     c60:	0f b6       	in	r0, 0x3f	; 63
     c62:	0f 92       	push	r0
     c64:	11 24       	eor	r1, r1
     c66:	8f 93       	push	r24
     c68:	9f 93       	push	r25
     c6a:	af 93       	push	r26
     c6c:	bf 93       	push	r27
    tImer2_millis++;
     c6e:	80 91 d2 02 	lds	r24, 0x02D2
     c72:	90 91 d3 02 	lds	r25, 0x02D3
     c76:	a0 91 d4 02 	lds	r26, 0x02D4
     c7a:	b0 91 d5 02 	lds	r27, 0x02D5
     c7e:	01 96       	adiw	r24, 0x01	; 1
     c80:	a1 1d       	adc	r26, r1
     c82:	b1 1d       	adc	r27, r1
     c84:	80 93 d2 02 	sts	0x02D2, r24
     c88:	90 93 d3 02 	sts	0x02D3, r25
     c8c:	a0 93 d4 02 	sts	0x02D4, r26
     c90:	b0 93 d5 02 	sts	0x02D5, r27
}
     c94:	bf 91       	pop	r27
     c96:	af 91       	pop	r26
     c98:	9f 91       	pop	r25
     c9a:	8f 91       	pop	r24
     c9c:	0f 90       	pop	r0
     c9e:	0f be       	out	0x3f, r0	; 63
     ca0:	0f 90       	pop	r0
     ca2:	1f 90       	pop	r1
     ca4:	18 95       	reti

00000ca6 <_Z5tinitv>:

void tinit()
{
	TCCR2B |= (1 << WGM22) | (1 << CS21);
     ca6:	e1 eb       	ldi	r30, 0xB1	; 177
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	80 81       	ld	r24, Z
     cac:	8a 60       	ori	r24, 0x0A	; 10
     cae:	80 83       	st	Z, r24

    // Load the high byte, then the low byte
    // into the output compare
    OCR2A = CTC_MATCH_OVERFLOW;
     cb0:	8d e7       	ldi	r24, 0x7D	; 125
     cb2:	80 93 b3 00 	sts	0x00B3, r24

    // Enable the compare match interrupt
    TIMSK2 |= (1 << OCIE2A);
     cb6:	e0 e7       	ldi	r30, 0x70	; 112
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	80 81       	ld	r24, Z
     cbc:	82 60       	ori	r24, 0x02	; 2
     cbe:	80 83       	st	Z, r24

    // Now enable global interrupts
    sei();
     cc0:	78 94       	sei
}
     cc2:	08 95       	ret

00000cc4 <_Z5delaym>:


void delay(unsigned long mIllisec)
{
     cc4:	9b 01       	movw	r18, r22
     cc6:	ac 01       	movw	r20, r24
	int i;
	for(i=0;i<mIllisec;i++)
     cc8:	61 15       	cp	r22, r1
     cca:	71 05       	cpc	r23, r1
     ccc:	81 05       	cpc	r24, r1
     cce:	91 05       	cpc	r25, r1
     cd0:	a1 f0       	breq	.+40     	; 0xcfa <_Z5delaym+0x36>
     cd2:	60 e0       	ldi	r22, 0x00	; 0
     cd4:	70 e0       	ldi	r23, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     cd6:	89 ef       	ldi	r24, 0xF9	; 249
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	01 97       	sbiw	r24, 0x01	; 1
     cdc:	f1 f7       	brne	.-4      	; 0xcda <_Z5delaym+0x16>
     cde:	00 c0       	rjmp	.+0      	; 0xce0 <_Z5delaym+0x1c>
     ce0:	00 00       	nop
     ce2:	6f 5f       	subi	r22, 0xFF	; 255
     ce4:	7f 4f       	sbci	r23, 0xFF	; 255
     ce6:	cb 01       	movw	r24, r22
     ce8:	aa 27       	eor	r26, r26
     cea:	97 fd       	sbrc	r25, 7
     cec:	a0 95       	com	r26
     cee:	ba 2f       	mov	r27, r26
     cf0:	82 17       	cp	r24, r18
     cf2:	93 07       	cpc	r25, r19
     cf4:	a4 07       	cpc	r26, r20
     cf6:	b5 07       	cpc	r27, r21
     cf8:	70 f3       	brcs	.-36     	; 0xcd6 <_Z5delaym+0x12>
     cfa:	08 95       	ret

00000cfc <_Z17delayMicrosecondsm>:
	}
	return;
}

void delayMicroseconds(unsigned long mIcrosec)
{
     cfc:	9b 01       	movw	r18, r22
     cfe:	ac 01       	movw	r20, r24
	int i;
	for(i=0;i<mIcrosec;i++)
     d00:	61 15       	cp	r22, r1
     d02:	71 05       	cpc	r23, r1
     d04:	81 05       	cpc	r24, r1
     d06:	91 05       	cpc	r25, r1
     d08:	79 f0       	breq	.+30     	; 0xd28 <_Z17delayMicrosecondsm+0x2c>
     d0a:	60 e0       	ldi	r22, 0x00	; 0
     d0c:	70 e0       	ldi	r23, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d0e:	00 00       	nop
     d10:	6f 5f       	subi	r22, 0xFF	; 255
     d12:	7f 4f       	sbci	r23, 0xFF	; 255
     d14:	cb 01       	movw	r24, r22
     d16:	aa 27       	eor	r26, r26
     d18:	97 fd       	sbrc	r25, 7
     d1a:	a0 95       	com	r26
     d1c:	ba 2f       	mov	r27, r26
     d1e:	82 17       	cp	r24, r18
     d20:	93 07       	cpc	r25, r19
     d22:	a4 07       	cpc	r26, r20
     d24:	b5 07       	cpc	r27, r21
     d26:	98 f3       	brcs	.-26     	; 0xd0e <_Z17delayMicrosecondsm+0x12>
     d28:	08 95       	ret

00000d2a <_Z3maplllll>:
	}
	return;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
     d2a:	2f 92       	push	r2
     d2c:	3f 92       	push	r3
     d2e:	4f 92       	push	r4
     d30:	5f 92       	push	r5
     d32:	6f 92       	push	r6
     d34:	7f 92       	push	r7
     d36:	8f 92       	push	r8
     d38:	9f 92       	push	r9
     d3a:	af 92       	push	r10
     d3c:	bf 92       	push	r11
     d3e:	cf 92       	push	r12
     d40:	df 92       	push	r13
     d42:	ef 92       	push	r14
     d44:	ff 92       	push	r15
     d46:	0f 93       	push	r16
     d48:	1f 93       	push	r17
     d4a:	df 93       	push	r29
     d4c:	cf 93       	push	r28
     d4e:	cd b7       	in	r28, 0x3d	; 61
     d50:	de b7       	in	r29, 0x3e	; 62
     d52:	dc 01       	movw	r26, r24
     d54:	cb 01       	movw	r24, r22
     d56:	39 01       	movw	r6, r18
     d58:	4a 01       	movw	r8, r20
     d5a:	17 01       	movw	r2, r14
     d5c:	28 01       	movw	r4, r16
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
     d5e:	ee 88       	ldd	r14, Y+22	; 0x16
     d60:	ff 88       	ldd	r15, Y+23	; 0x17
     d62:	08 8d       	ldd	r16, Y+24	; 0x18
     d64:	19 8d       	ldd	r17, Y+25	; 0x19
     d66:	ea 18       	sub	r14, r10
     d68:	fb 08       	sbc	r15, r11
     d6a:	0c 09       	sbc	r16, r12
     d6c:	1d 09       	sbc	r17, r13
     d6e:	9c 01       	movw	r18, r24
     d70:	ad 01       	movw	r20, r26
     d72:	26 19       	sub	r18, r6
     d74:	37 09       	sbc	r19, r7
     d76:	48 09       	sbc	r20, r8
     d78:	59 09       	sbc	r21, r9
     d7a:	c8 01       	movw	r24, r16
     d7c:	b7 01       	movw	r22, r14
     d7e:	0e 94 41 1b 	call	0x3682	; 0x3682 <__mulsi3>
     d82:	a2 01       	movw	r20, r4
     d84:	91 01       	movw	r18, r2
     d86:	26 19       	sub	r18, r6
     d88:	37 09       	sbc	r19, r7
     d8a:	48 09       	sbc	r20, r8
     d8c:	59 09       	sbc	r21, r9
     d8e:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <__divmodsi4>
     d92:	2a 0d       	add	r18, r10
     d94:	3b 1d       	adc	r19, r11
     d96:	4c 1d       	adc	r20, r12
     d98:	5d 1d       	adc	r21, r13
}
     d9a:	62 2f       	mov	r22, r18
     d9c:	73 2f       	mov	r23, r19
     d9e:	84 2f       	mov	r24, r20
     da0:	95 2f       	mov	r25, r21
     da2:	cf 91       	pop	r28
     da4:	df 91       	pop	r29
     da6:	1f 91       	pop	r17
     da8:	0f 91       	pop	r16
     daa:	ff 90       	pop	r15
     dac:	ef 90       	pop	r14
     dae:	df 90       	pop	r13
     db0:	cf 90       	pop	r12
     db2:	bf 90       	pop	r11
     db4:	af 90       	pop	r10
     db6:	9f 90       	pop	r9
     db8:	8f 90       	pop	r8
     dba:	7f 90       	pop	r7
     dbc:	6f 90       	pop	r6
     dbe:	5f 90       	pop	r5
     dc0:	4f 90       	pop	r4
     dc2:	3f 90       	pop	r3
     dc4:	2f 90       	pop	r2
     dc6:	08 95       	ret

00000dc8 <_Z9constrainlll>:

long constrain(long nUm, long lOwer, long uPper)
{
     dc8:	ef 92       	push	r14
     dca:	ff 92       	push	r15
     dcc:	0f 93       	push	r16
     dce:	1f 93       	push	r17
     dd0:	dc 01       	movw	r26, r24
     dd2:	cb 01       	movw	r24, r22
	if(nUm>uPper){
     dd4:	e8 16       	cp	r14, r24
     dd6:	f9 06       	cpc	r15, r25
     dd8:	0a 07       	cpc	r16, r26
     dda:	1b 07       	cpc	r17, r27
     ddc:	5c f0       	brlt	.+22     	; 0xdf4 <_Z9constrainlll+0x2c>
     dde:	e2 2e       	mov	r14, r18
     de0:	f3 2e       	mov	r15, r19
     de2:	04 2f       	mov	r16, r20
     de4:	15 2f       	mov	r17, r21
     de6:	e8 16       	cp	r14, r24
     de8:	f9 06       	cpc	r15, r25
     dea:	0a 07       	cpc	r16, r26
     dec:	1b 07       	cpc	r17, r27
     dee:	14 f4       	brge	.+4      	; 0xdf4 <_Z9constrainlll+0x2c>
     df0:	7c 01       	movw	r14, r24
     df2:	8d 01       	movw	r16, r26
    else if(nUm<lOwer){
      return lOwer;
  	}
    else
    return nUm;
}
     df4:	6e 2d       	mov	r22, r14
     df6:	7f 2d       	mov	r23, r15
     df8:	80 2f       	mov	r24, r16
     dfa:	91 2f       	mov	r25, r17
     dfc:	1f 91       	pop	r17
     dfe:	0f 91       	pop	r16
     e00:	ff 90       	pop	r15
     e02:	ef 90       	pop	r14
     e04:	08 95       	ret

00000e06 <_Z15attachIntteruptiPFvvEi>:
void attachIntterupt(int pIn, void (*iSrfunc)(void), int cOmpare)		//cOmpare:LOW=0,HIGH1,RISING=2,FALLING=3
{
	sei();
     e06:	78 94       	sei
	cAllisr=iSrfunc;
     e08:	70 93 d7 02 	sts	0x02D7, r23
     e0c:	60 93 d6 02 	sts	0x02D6, r22
	switch(pIn)	  //enabling interrupt pin
     e10:	83 30       	cpi	r24, 0x03	; 3
     e12:	91 05       	cpc	r25, r1
     e14:	09 f4       	brne	.+2      	; 0xe18 <_Z15attachIntteruptiPFvvEi+0x12>
     e16:	7d c0       	rjmp	.+250    	; 0xf12 <_Z15attachIntteruptiPFvvEi+0x10c>
     e18:	84 30       	cpi	r24, 0x04	; 4
     e1a:	91 05       	cpc	r25, r1
     e1c:	54 f4       	brge	.+20     	; 0xe32 <_Z15attachIntteruptiPFvvEi+0x2c>
     e1e:	81 30       	cpi	r24, 0x01	; 1
     e20:	91 05       	cpc	r25, r1
     e22:	c9 f1       	breq	.+114    	; 0xe96 <_Z15attachIntteruptiPFvvEi+0x90>
     e24:	82 30       	cpi	r24, 0x02	; 2
     e26:	91 05       	cpc	r25, r1
     e28:	0c f0       	brlt	.+2      	; 0xe2c <_Z15attachIntteruptiPFvvEi+0x26>
     e2a:	54 c0       	rjmp	.+168    	; 0xed4 <_Z15attachIntteruptiPFvvEi+0xce>
     e2c:	00 97       	sbiw	r24, 0x00	; 0
     e2e:	91 f0       	breq	.+36     	; 0xe54 <_Z15attachIntteruptiPFvvEi+0x4e>
     e30:	0b c1       	rjmp	.+534    	; 0x1048 <_Z15attachIntteruptiPFvvEi+0x242>
     e32:	85 30       	cpi	r24, 0x05	; 5
     e34:	91 05       	cpc	r25, r1
     e36:	09 f4       	brne	.+2      	; 0xe3a <_Z15attachIntteruptiPFvvEi+0x34>
     e38:	aa c0       	rjmp	.+340    	; 0xf8e <_Z15attachIntteruptiPFvvEi+0x188>
     e3a:	85 30       	cpi	r24, 0x05	; 5
     e3c:	91 05       	cpc	r25, r1
     e3e:	0c f4       	brge	.+2      	; 0xe42 <_Z15attachIntteruptiPFvvEi+0x3c>
     e40:	87 c0       	rjmp	.+270    	; 0xf50 <_Z15attachIntteruptiPFvvEi+0x14a>
     e42:	86 30       	cpi	r24, 0x06	; 6
     e44:	91 05       	cpc	r25, r1
     e46:	09 f4       	brne	.+2      	; 0xe4a <_Z15attachIntteruptiPFvvEi+0x44>
     e48:	c1 c0       	rjmp	.+386    	; 0xfcc <_Z15attachIntteruptiPFvvEi+0x1c6>
     e4a:	87 30       	cpi	r24, 0x07	; 7
     e4c:	91 05       	cpc	r25, r1
     e4e:	09 f0       	breq	.+2      	; 0xe52 <_Z15attachIntteruptiPFvvEi+0x4c>
     e50:	fb c0       	rjmp	.+502    	; 0x1048 <_Z15attachIntteruptiPFvvEi+0x242>
     e52:	db c0       	rjmp	.+438    	; 0x100a <_Z15attachIntteruptiPFvvEi+0x204>
	{
		case 0:
		EIMSK|=1<<INT0;
     e54:	e8 9a       	sbi	0x1d, 0	; 29
		switch(cOmpare){
     e56:	43 30       	cpi	r20, 0x03	; 3
     e58:	51 05       	cpc	r21, r1
     e5a:	61 f0       	breq	.+24     	; 0xe74 <_Z15attachIntteruptiPFvvEi+0x6e>
     e5c:	44 30       	cpi	r20, 0x04	; 4
     e5e:	51 05       	cpc	r21, r1
     e60:	79 f0       	breq	.+30     	; 0xe80 <_Z15attachIntteruptiPFvvEi+0x7a>
     e62:	42 30       	cpi	r20, 0x02	; 2
     e64:	51 05       	cpc	r21, r1
     e66:	91 f4       	brne	.+36     	; 0xe8c <_Z15attachIntteruptiPFvvEi+0x86>
			case 2:
			EICRA|=(1<<ISC00)|(1<<ISC01);
     e68:	e9 e6       	ldi	r30, 0x69	; 105
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	83 60       	ori	r24, 0x03	; 3
     e70:	80 83       	st	Z, r24
			break;
     e72:	08 95       	ret
			case 3:
			EICRA|=(0<<ISC00)|(1<<ISC01);
     e74:	e9 e6       	ldi	r30, 0x69	; 105
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	80 81       	ld	r24, Z
     e7a:	82 60       	ori	r24, 0x02	; 2
     e7c:	80 83       	st	Z, r24
			break;
     e7e:	08 95       	ret
			case 4:
			EICRA|=(1<<ISC00)|(0<<ISC01);
     e80:	e9 e6       	ldi	r30, 0x69	; 105
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	81 60       	ori	r24, 0x01	; 1
     e88:	80 83       	st	Z, r24
			break;
     e8a:	08 95       	ret
			default:
			EICRA|=(0<<ISC00)|(0<<ISC01);
     e8c:	e9 e6       	ldi	r30, 0x69	; 105
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	80 81       	ld	r24, Z
     e92:	80 83       	st	Z, r24
     e94:	08 95       	ret
		}
		break;

		case 1:
		EIMSK|=1<<INT1;
     e96:	e9 9a       	sbi	0x1d, 1	; 29
                switch(cOmpare)
     e98:	43 30       	cpi	r20, 0x03	; 3
     e9a:	51 05       	cpc	r21, r1
     e9c:	61 f0       	breq	.+24     	; 0xeb6 <_Z15attachIntteruptiPFvvEi+0xb0>
     e9e:	44 30       	cpi	r20, 0x04	; 4
     ea0:	51 05       	cpc	r21, r1
     ea2:	69 f0       	breq	.+26     	; 0xebe <_Z15attachIntteruptiPFvvEi+0xb8>
     ea4:	42 30       	cpi	r20, 0x02	; 2
     ea6:	51 05       	cpc	r21, r1
     ea8:	81 f4       	brne	.+32     	; 0xeca <_Z15attachIntteruptiPFvvEi+0xc4>
		{
			case 2:
			EICRA|=(1<<ISC10)|(1<<ISC11);
     eaa:	e9 e6       	ldi	r30, 0x69	; 105
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	8c 60       	ori	r24, 0x0C	; 12
     eb2:	80 83       	st	Z, r24
			break;
     eb4:	08 95       	ret
			case 3:
			EICRA=(0<<ISC10)|(1<<ISC11);
     eb6:	88 e0       	ldi	r24, 0x08	; 8
     eb8:	80 93 69 00 	sts	0x0069, r24
			break;
     ebc:	08 95       	ret
			case 4:
			EICRA|=(1<<ISC10)|(0<<ISC11);
     ebe:	e9 e6       	ldi	r30, 0x69	; 105
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	84 60       	ori	r24, 0x04	; 4
     ec6:	80 83       	st	Z, r24
			break;
     ec8:	08 95       	ret
			default:
			EICRA|=(0<<ISC10)|(0<<ISC11);
     eca:	e9 e6       	ldi	r30, 0x69	; 105
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	80 81       	ld	r24, Z
     ed0:	80 83       	st	Z, r24
     ed2:	08 95       	ret
		}
		break;

		case 2:
		EIMSK|=1<<INT2;
     ed4:	ea 9a       	sbi	0x1d, 2	; 29
		switch(cOmpare)
     ed6:	43 30       	cpi	r20, 0x03	; 3
     ed8:	51 05       	cpc	r21, r1
     eda:	61 f0       	breq	.+24     	; 0xef4 <_Z15attachIntteruptiPFvvEi+0xee>
     edc:	44 30       	cpi	r20, 0x04	; 4
     ede:	51 05       	cpc	r21, r1
     ee0:	69 f0       	breq	.+26     	; 0xefc <_Z15attachIntteruptiPFvvEi+0xf6>
     ee2:	42 30       	cpi	r20, 0x02	; 2
     ee4:	51 05       	cpc	r21, r1
     ee6:	81 f4       	brne	.+32     	; 0xf08 <_Z15attachIntteruptiPFvvEi+0x102>
		{
			case 2:
			EICRA|=(1<<ISC20)|(1<<ISC21);
     ee8:	e9 e6       	ldi	r30, 0x69	; 105
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	80 63       	ori	r24, 0x30	; 48
     ef0:	80 83       	st	Z, r24
			break;
     ef2:	08 95       	ret
			case 3:
			EICRA=(0<<ISC20)|(1<<ISC21);
     ef4:	80 e2       	ldi	r24, 0x20	; 32
     ef6:	80 93 69 00 	sts	0x0069, r24
			break;
     efa:	08 95       	ret
			case 4:
			EICRA|=(1<<ISC20)|(0<<ISC21);
     efc:	e9 e6       	ldi	r30, 0x69	; 105
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	80 81       	ld	r24, Z
     f02:	80 61       	ori	r24, 0x10	; 16
     f04:	80 83       	st	Z, r24
			break;
     f06:	08 95       	ret
			default:
			EICRA|=(0<<ISC20)|(0<<ISC21);
     f08:	e9 e6       	ldi	r30, 0x69	; 105
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	80 81       	ld	r24, Z
     f0e:	80 83       	st	Z, r24
     f10:	08 95       	ret
		}
		break;

		case 3:
		EIMSK|=1<<INT3;
     f12:	eb 9a       	sbi	0x1d, 3	; 29
		switch(cOmpare)
     f14:	43 30       	cpi	r20, 0x03	; 3
     f16:	51 05       	cpc	r21, r1
     f18:	61 f0       	breq	.+24     	; 0xf32 <_Z15attachIntteruptiPFvvEi+0x12c>
     f1a:	44 30       	cpi	r20, 0x04	; 4
     f1c:	51 05       	cpc	r21, r1
     f1e:	69 f0       	breq	.+26     	; 0xf3a <_Z15attachIntteruptiPFvvEi+0x134>
     f20:	42 30       	cpi	r20, 0x02	; 2
     f22:	51 05       	cpc	r21, r1
     f24:	81 f4       	brne	.+32     	; 0xf46 <_Z15attachIntteruptiPFvvEi+0x140>
		{
			case 2:
			EICRA|=(1<<ISC30)|(1<<ISC31);
     f26:	e9 e6       	ldi	r30, 0x69	; 105
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	80 81       	ld	r24, Z
     f2c:	80 6c       	ori	r24, 0xC0	; 192
     f2e:	80 83       	st	Z, r24
			break;
     f30:	08 95       	ret
			case 3:
			EICRA=(0<<ISC30)|(1<<ISC31);
     f32:	80 e8       	ldi	r24, 0x80	; 128
     f34:	80 93 69 00 	sts	0x0069, r24
			break;
     f38:	08 95       	ret
			case 4:
			EICRA|=(1<<ISC30)|(0<<ISC31);
     f3a:	e9 e6       	ldi	r30, 0x69	; 105
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	80 64       	ori	r24, 0x40	; 64
     f42:	80 83       	st	Z, r24
			break;
     f44:	08 95       	ret
			default:
			EICRA|=(0<<ISC30)|(0<<ISC31);
     f46:	e9 e6       	ldi	r30, 0x69	; 105
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	80 83       	st	Z, r24
     f4e:	08 95       	ret
		}
		break;

		case 4:
		EIMSK|=1<<INT4;
     f50:	ec 9a       	sbi	0x1d, 4	; 29
                switch(cOmpare)
     f52:	43 30       	cpi	r20, 0x03	; 3
     f54:	51 05       	cpc	r21, r1
     f56:	61 f0       	breq	.+24     	; 0xf70 <_Z15attachIntteruptiPFvvEi+0x16a>
     f58:	44 30       	cpi	r20, 0x04	; 4
     f5a:	51 05       	cpc	r21, r1
     f5c:	69 f0       	breq	.+26     	; 0xf78 <_Z15attachIntteruptiPFvvEi+0x172>
     f5e:	42 30       	cpi	r20, 0x02	; 2
     f60:	51 05       	cpc	r21, r1
     f62:	81 f4       	brne	.+32     	; 0xf84 <_Z15attachIntteruptiPFvvEi+0x17e>
		{
			case 2:
			EICRB|=(1<<ISC40)|(1<<ISC41);
     f64:	ea e6       	ldi	r30, 0x6A	; 106
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	80 81       	ld	r24, Z
     f6a:	83 60       	ori	r24, 0x03	; 3
     f6c:	80 83       	st	Z, r24
			break;
     f6e:	08 95       	ret
			case 3:
			EICRB=(0<<ISC40)|(1<<ISC41);
     f70:	82 e0       	ldi	r24, 0x02	; 2
     f72:	80 93 6a 00 	sts	0x006A, r24
			break;
     f76:	08 95       	ret
			case 4:
			EICRB|=(1<<ISC40)|(0<<ISC41);
     f78:	ea e6       	ldi	r30, 0x6A	; 106
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	81 60       	ori	r24, 0x01	; 1
     f80:	80 83       	st	Z, r24
			break;
     f82:	08 95       	ret
			default:
			EICRB|=(0<<ISC40)|(0<<ISC41);
     f84:	ea e6       	ldi	r30, 0x6A	; 106
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	80 81       	ld	r24, Z
     f8a:	80 83       	st	Z, r24
     f8c:	08 95       	ret
		}
		break;

		case 5:
		EIMSK|=1<<INT5;
     f8e:	ed 9a       	sbi	0x1d, 5	; 29
		switch(cOmpare)
     f90:	43 30       	cpi	r20, 0x03	; 3
     f92:	51 05       	cpc	r21, r1
     f94:	61 f0       	breq	.+24     	; 0xfae <_Z15attachIntteruptiPFvvEi+0x1a8>
     f96:	44 30       	cpi	r20, 0x04	; 4
     f98:	51 05       	cpc	r21, r1
     f9a:	69 f0       	breq	.+26     	; 0xfb6 <_Z15attachIntteruptiPFvvEi+0x1b0>
     f9c:	42 30       	cpi	r20, 0x02	; 2
     f9e:	51 05       	cpc	r21, r1
     fa0:	81 f4       	brne	.+32     	; 0xfc2 <_Z15attachIntteruptiPFvvEi+0x1bc>
		{
			case 2:
			EICRB|=(1<<ISC50)|(1<<ISC51);
     fa2:	ea e6       	ldi	r30, 0x6A	; 106
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	80 81       	ld	r24, Z
     fa8:	8c 60       	ori	r24, 0x0C	; 12
     faa:	80 83       	st	Z, r24
			break;
     fac:	08 95       	ret
			case 3:
			EICRB=(0<<ISC50)|(1<<ISC51);
     fae:	88 e0       	ldi	r24, 0x08	; 8
     fb0:	80 93 6a 00 	sts	0x006A, r24
			break;
     fb4:	08 95       	ret
			case 4:
			EICRB|=(1<<ISC50)|(0<<ISC51);
     fb6:	ea e6       	ldi	r30, 0x6A	; 106
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	84 60       	ori	r24, 0x04	; 4
     fbe:	80 83       	st	Z, r24
			break;
     fc0:	08 95       	ret
			default:
                 	EICRB|=(0<<ISC40)|(0<<ISC41);
     fc2:	ea e6       	ldi	r30, 0x6A	; 106
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	80 81       	ld	r24, Z
     fc8:	80 83       	st	Z, r24
     fca:	08 95       	ret

		}
		break;

		case 6:
		EIMSK|=1<<INT6;
     fcc:	ee 9a       	sbi	0x1d, 6	; 29
	        switch(cOmpare)
     fce:	43 30       	cpi	r20, 0x03	; 3
     fd0:	51 05       	cpc	r21, r1
     fd2:	61 f0       	breq	.+24     	; 0xfec <_Z15attachIntteruptiPFvvEi+0x1e6>
     fd4:	44 30       	cpi	r20, 0x04	; 4
     fd6:	51 05       	cpc	r21, r1
     fd8:	69 f0       	breq	.+26     	; 0xff4 <_Z15attachIntteruptiPFvvEi+0x1ee>
     fda:	42 30       	cpi	r20, 0x02	; 2
     fdc:	51 05       	cpc	r21, r1
     fde:	81 f4       	brne	.+32     	; 0x1000 <_Z15attachIntteruptiPFvvEi+0x1fa>
		{
			case 2:
			EICRB|=(1<<ISC60)|(1<<ISC61);
     fe0:	ea e6       	ldi	r30, 0x6A	; 106
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	80 63       	ori	r24, 0x30	; 48
     fe8:	80 83       	st	Z, r24
			break;
     fea:	08 95       	ret
			case 3:
			EICRB=(0<<ISC60)|(1<<ISC61);
     fec:	80 e2       	ldi	r24, 0x20	; 32
     fee:	80 93 6a 00 	sts	0x006A, r24
			break;
     ff2:	08 95       	ret
			case 4:
			EICRB|=(1<<ISC60)|(0<<ISC61);
     ff4:	ea e6       	ldi	r30, 0x6A	; 106
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	80 81       	ld	r24, Z
     ffa:	80 61       	ori	r24, 0x10	; 16
     ffc:	80 83       	st	Z, r24
			break;
     ffe:	08 95       	ret
			default:
			EICRB|=(0<<ISC60)|(0<<ISC61);
    1000:	ea e6       	ldi	r30, 0x6A	; 106
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	80 81       	ld	r24, Z
    1006:	80 83       	st	Z, r24
    1008:	08 95       	ret

		}
		break;

		case 7:
		EIMSK|=1<<INT7;
    100a:	ef 9a       	sbi	0x1d, 7	; 29
		switch(cOmpare)
    100c:	43 30       	cpi	r20, 0x03	; 3
    100e:	51 05       	cpc	r21, r1
    1010:	61 f0       	breq	.+24     	; 0x102a <_Z15attachIntteruptiPFvvEi+0x224>
    1012:	44 30       	cpi	r20, 0x04	; 4
    1014:	51 05       	cpc	r21, r1
    1016:	69 f0       	breq	.+26     	; 0x1032 <_Z15attachIntteruptiPFvvEi+0x22c>
    1018:	42 30       	cpi	r20, 0x02	; 2
    101a:	51 05       	cpc	r21, r1
    101c:	81 f4       	brne	.+32     	; 0x103e <_Z15attachIntteruptiPFvvEi+0x238>
		{
			case 2:
			EICRB|=(1<<ISC70)|(1<<ISC71);
    101e:	ea e6       	ldi	r30, 0x6A	; 106
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	80 81       	ld	r24, Z
    1024:	80 6c       	ori	r24, 0xC0	; 192
    1026:	80 83       	st	Z, r24
			break;
    1028:	08 95       	ret
			case 3:
			EICRB=(0<<ISC70)|(1<<ISC71);
    102a:	80 e8       	ldi	r24, 0x80	; 128
    102c:	80 93 6a 00 	sts	0x006A, r24
			break;
    1030:	08 95       	ret
			case 4:
			EICRB|=(1<<ISC70)|(0<<ISC71);
    1032:	ea e6       	ldi	r30, 0x6A	; 106
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	80 81       	ld	r24, Z
    1038:	80 64       	ori	r24, 0x40	; 64
    103a:	80 83       	st	Z, r24
			break;
    103c:	08 95       	ret
			default:
			EICRB|=(0<<ISC70)|(0<<ISC71);
    103e:	ea e6       	ldi	r30, 0x6A	; 106
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	80 81       	ld	r24, Z
    1044:	80 83       	st	Z, r24
    1046:	08 95       	ret
		}
		break;

	        default:EICRA|=(0<<ISC01)|(0<<ISC00);
    1048:	e9 e6       	ldi	r30, 0x69	; 105
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	80 81       	ld	r24, Z
    104e:	80 83       	st	Z, r24
    1050:	08 95       	ret

00001052 <__vector_1>:
	}
}
ISR(INT0_vect)
{
    1052:	1f 92       	push	r1
    1054:	0f 92       	push	r0
    1056:	0f b6       	in	r0, 0x3f	; 63
    1058:	0f 92       	push	r0
    105a:	0b b6       	in	r0, 0x3b	; 59
    105c:	0f 92       	push	r0
    105e:	11 24       	eor	r1, r1
    1060:	2f 93       	push	r18
    1062:	3f 93       	push	r19
    1064:	4f 93       	push	r20
    1066:	5f 93       	push	r21
    1068:	6f 93       	push	r22
    106a:	7f 93       	push	r23
    106c:	8f 93       	push	r24
    106e:	9f 93       	push	r25
    1070:	af 93       	push	r26
    1072:	bf 93       	push	r27
    1074:	ef 93       	push	r30
    1076:	ff 93       	push	r31
   cAllisr();
    1078:	e0 91 d6 02 	lds	r30, 0x02D6
    107c:	f0 91 d7 02 	lds	r31, 0x02D7
    1080:	19 95       	eicall
}
    1082:	ff 91       	pop	r31
    1084:	ef 91       	pop	r30
    1086:	bf 91       	pop	r27
    1088:	af 91       	pop	r26
    108a:	9f 91       	pop	r25
    108c:	8f 91       	pop	r24
    108e:	7f 91       	pop	r23
    1090:	6f 91       	pop	r22
    1092:	5f 91       	pop	r21
    1094:	4f 91       	pop	r20
    1096:	3f 91       	pop	r19
    1098:	2f 91       	pop	r18
    109a:	0f 90       	pop	r0
    109c:	0b be       	out	0x3b, r0	; 59
    109e:	0f 90       	pop	r0
    10a0:	0f be       	out	0x3f, r0	; 63
    10a2:	0f 90       	pop	r0
    10a4:	1f 90       	pop	r1
    10a6:	18 95       	reti

000010a8 <__vector_2>:
ISR(INT1_vect)
{
    10a8:	1f 92       	push	r1
    10aa:	0f 92       	push	r0
    10ac:	0f b6       	in	r0, 0x3f	; 63
    10ae:	0f 92       	push	r0
    10b0:	0b b6       	in	r0, 0x3b	; 59
    10b2:	0f 92       	push	r0
    10b4:	11 24       	eor	r1, r1
    10b6:	2f 93       	push	r18
    10b8:	3f 93       	push	r19
    10ba:	4f 93       	push	r20
    10bc:	5f 93       	push	r21
    10be:	6f 93       	push	r22
    10c0:	7f 93       	push	r23
    10c2:	8f 93       	push	r24
    10c4:	9f 93       	push	r25
    10c6:	af 93       	push	r26
    10c8:	bf 93       	push	r27
    10ca:	ef 93       	push	r30
    10cc:	ff 93       	push	r31
   cAllisr();
    10ce:	e0 91 d6 02 	lds	r30, 0x02D6
    10d2:	f0 91 d7 02 	lds	r31, 0x02D7
    10d6:	19 95       	eicall
}
    10d8:	ff 91       	pop	r31
    10da:	ef 91       	pop	r30
    10dc:	bf 91       	pop	r27
    10de:	af 91       	pop	r26
    10e0:	9f 91       	pop	r25
    10e2:	8f 91       	pop	r24
    10e4:	7f 91       	pop	r23
    10e6:	6f 91       	pop	r22
    10e8:	5f 91       	pop	r21
    10ea:	4f 91       	pop	r20
    10ec:	3f 91       	pop	r19
    10ee:	2f 91       	pop	r18
    10f0:	0f 90       	pop	r0
    10f2:	0b be       	out	0x3b, r0	; 59
    10f4:	0f 90       	pop	r0
    10f6:	0f be       	out	0x3f, r0	; 63
    10f8:	0f 90       	pop	r0
    10fa:	1f 90       	pop	r1
    10fc:	18 95       	reti

000010fe <__vector_3>:
ISR(INT2_vect)
{
    10fe:	1f 92       	push	r1
    1100:	0f 92       	push	r0
    1102:	0f b6       	in	r0, 0x3f	; 63
    1104:	0f 92       	push	r0
    1106:	0b b6       	in	r0, 0x3b	; 59
    1108:	0f 92       	push	r0
    110a:	11 24       	eor	r1, r1
    110c:	2f 93       	push	r18
    110e:	3f 93       	push	r19
    1110:	4f 93       	push	r20
    1112:	5f 93       	push	r21
    1114:	6f 93       	push	r22
    1116:	7f 93       	push	r23
    1118:	8f 93       	push	r24
    111a:	9f 93       	push	r25
    111c:	af 93       	push	r26
    111e:	bf 93       	push	r27
    1120:	ef 93       	push	r30
    1122:	ff 93       	push	r31
   cAllisr();
    1124:	e0 91 d6 02 	lds	r30, 0x02D6
    1128:	f0 91 d7 02 	lds	r31, 0x02D7
    112c:	19 95       	eicall
}
    112e:	ff 91       	pop	r31
    1130:	ef 91       	pop	r30
    1132:	bf 91       	pop	r27
    1134:	af 91       	pop	r26
    1136:	9f 91       	pop	r25
    1138:	8f 91       	pop	r24
    113a:	7f 91       	pop	r23
    113c:	6f 91       	pop	r22
    113e:	5f 91       	pop	r21
    1140:	4f 91       	pop	r20
    1142:	3f 91       	pop	r19
    1144:	2f 91       	pop	r18
    1146:	0f 90       	pop	r0
    1148:	0b be       	out	0x3b, r0	; 59
    114a:	0f 90       	pop	r0
    114c:	0f be       	out	0x3f, r0	; 63
    114e:	0f 90       	pop	r0
    1150:	1f 90       	pop	r1
    1152:	18 95       	reti

00001154 <__vector_4>:
ISR(INT3_vect)
{
    1154:	1f 92       	push	r1
    1156:	0f 92       	push	r0
    1158:	0f b6       	in	r0, 0x3f	; 63
    115a:	0f 92       	push	r0
    115c:	0b b6       	in	r0, 0x3b	; 59
    115e:	0f 92       	push	r0
    1160:	11 24       	eor	r1, r1
    1162:	2f 93       	push	r18
    1164:	3f 93       	push	r19
    1166:	4f 93       	push	r20
    1168:	5f 93       	push	r21
    116a:	6f 93       	push	r22
    116c:	7f 93       	push	r23
    116e:	8f 93       	push	r24
    1170:	9f 93       	push	r25
    1172:	af 93       	push	r26
    1174:	bf 93       	push	r27
    1176:	ef 93       	push	r30
    1178:	ff 93       	push	r31
   cAllisr();
    117a:	e0 91 d6 02 	lds	r30, 0x02D6
    117e:	f0 91 d7 02 	lds	r31, 0x02D7
    1182:	19 95       	eicall
}
    1184:	ff 91       	pop	r31
    1186:	ef 91       	pop	r30
    1188:	bf 91       	pop	r27
    118a:	af 91       	pop	r26
    118c:	9f 91       	pop	r25
    118e:	8f 91       	pop	r24
    1190:	7f 91       	pop	r23
    1192:	6f 91       	pop	r22
    1194:	5f 91       	pop	r21
    1196:	4f 91       	pop	r20
    1198:	3f 91       	pop	r19
    119a:	2f 91       	pop	r18
    119c:	0f 90       	pop	r0
    119e:	0b be       	out	0x3b, r0	; 59
    11a0:	0f 90       	pop	r0
    11a2:	0f be       	out	0x3f, r0	; 63
    11a4:	0f 90       	pop	r0
    11a6:	1f 90       	pop	r1
    11a8:	18 95       	reti

000011aa <__vector_5>:
ISR(INT4_vect)
{
    11aa:	1f 92       	push	r1
    11ac:	0f 92       	push	r0
    11ae:	0f b6       	in	r0, 0x3f	; 63
    11b0:	0f 92       	push	r0
    11b2:	0b b6       	in	r0, 0x3b	; 59
    11b4:	0f 92       	push	r0
    11b6:	11 24       	eor	r1, r1
    11b8:	2f 93       	push	r18
    11ba:	3f 93       	push	r19
    11bc:	4f 93       	push	r20
    11be:	5f 93       	push	r21
    11c0:	6f 93       	push	r22
    11c2:	7f 93       	push	r23
    11c4:	8f 93       	push	r24
    11c6:	9f 93       	push	r25
    11c8:	af 93       	push	r26
    11ca:	bf 93       	push	r27
    11cc:	ef 93       	push	r30
    11ce:	ff 93       	push	r31
    cAllisr();
    11d0:	e0 91 d6 02 	lds	r30, 0x02D6
    11d4:	f0 91 d7 02 	lds	r31, 0x02D7
    11d8:	19 95       	eicall
}
    11da:	ff 91       	pop	r31
    11dc:	ef 91       	pop	r30
    11de:	bf 91       	pop	r27
    11e0:	af 91       	pop	r26
    11e2:	9f 91       	pop	r25
    11e4:	8f 91       	pop	r24
    11e6:	7f 91       	pop	r23
    11e8:	6f 91       	pop	r22
    11ea:	5f 91       	pop	r21
    11ec:	4f 91       	pop	r20
    11ee:	3f 91       	pop	r19
    11f0:	2f 91       	pop	r18
    11f2:	0f 90       	pop	r0
    11f4:	0b be       	out	0x3b, r0	; 59
    11f6:	0f 90       	pop	r0
    11f8:	0f be       	out	0x3f, r0	; 63
    11fa:	0f 90       	pop	r0
    11fc:	1f 90       	pop	r1
    11fe:	18 95       	reti

00001200 <__vector_6>:
ISR(INT5_vect)
{
    1200:	1f 92       	push	r1
    1202:	0f 92       	push	r0
    1204:	0f b6       	in	r0, 0x3f	; 63
    1206:	0f 92       	push	r0
    1208:	0b b6       	in	r0, 0x3b	; 59
    120a:	0f 92       	push	r0
    120c:	11 24       	eor	r1, r1
    120e:	2f 93       	push	r18
    1210:	3f 93       	push	r19
    1212:	4f 93       	push	r20
    1214:	5f 93       	push	r21
    1216:	6f 93       	push	r22
    1218:	7f 93       	push	r23
    121a:	8f 93       	push	r24
    121c:	9f 93       	push	r25
    121e:	af 93       	push	r26
    1220:	bf 93       	push	r27
    1222:	ef 93       	push	r30
    1224:	ff 93       	push	r31
    cAllisr();
    1226:	e0 91 d6 02 	lds	r30, 0x02D6
    122a:	f0 91 d7 02 	lds	r31, 0x02D7
    122e:	19 95       	eicall
}
    1230:	ff 91       	pop	r31
    1232:	ef 91       	pop	r30
    1234:	bf 91       	pop	r27
    1236:	af 91       	pop	r26
    1238:	9f 91       	pop	r25
    123a:	8f 91       	pop	r24
    123c:	7f 91       	pop	r23
    123e:	6f 91       	pop	r22
    1240:	5f 91       	pop	r21
    1242:	4f 91       	pop	r20
    1244:	3f 91       	pop	r19
    1246:	2f 91       	pop	r18
    1248:	0f 90       	pop	r0
    124a:	0b be       	out	0x3b, r0	; 59
    124c:	0f 90       	pop	r0
    124e:	0f be       	out	0x3f, r0	; 63
    1250:	0f 90       	pop	r0
    1252:	1f 90       	pop	r1
    1254:	18 95       	reti

00001256 <__vector_7>:
ISR(INT6_vect)
{
    1256:	1f 92       	push	r1
    1258:	0f 92       	push	r0
    125a:	0f b6       	in	r0, 0x3f	; 63
    125c:	0f 92       	push	r0
    125e:	0b b6       	in	r0, 0x3b	; 59
    1260:	0f 92       	push	r0
    1262:	11 24       	eor	r1, r1
    1264:	2f 93       	push	r18
    1266:	3f 93       	push	r19
    1268:	4f 93       	push	r20
    126a:	5f 93       	push	r21
    126c:	6f 93       	push	r22
    126e:	7f 93       	push	r23
    1270:	8f 93       	push	r24
    1272:	9f 93       	push	r25
    1274:	af 93       	push	r26
    1276:	bf 93       	push	r27
    1278:	ef 93       	push	r30
    127a:	ff 93       	push	r31
    cAllisr();
    127c:	e0 91 d6 02 	lds	r30, 0x02D6
    1280:	f0 91 d7 02 	lds	r31, 0x02D7
    1284:	19 95       	eicall
}
    1286:	ff 91       	pop	r31
    1288:	ef 91       	pop	r30
    128a:	bf 91       	pop	r27
    128c:	af 91       	pop	r26
    128e:	9f 91       	pop	r25
    1290:	8f 91       	pop	r24
    1292:	7f 91       	pop	r23
    1294:	6f 91       	pop	r22
    1296:	5f 91       	pop	r21
    1298:	4f 91       	pop	r20
    129a:	3f 91       	pop	r19
    129c:	2f 91       	pop	r18
    129e:	0f 90       	pop	r0
    12a0:	0b be       	out	0x3b, r0	; 59
    12a2:	0f 90       	pop	r0
    12a4:	0f be       	out	0x3f, r0	; 63
    12a6:	0f 90       	pop	r0
    12a8:	1f 90       	pop	r1
    12aa:	18 95       	reti

000012ac <__vector_8>:
ISR(INT7_vect)
{
    12ac:	1f 92       	push	r1
    12ae:	0f 92       	push	r0
    12b0:	0f b6       	in	r0, 0x3f	; 63
    12b2:	0f 92       	push	r0
    12b4:	0b b6       	in	r0, 0x3b	; 59
    12b6:	0f 92       	push	r0
    12b8:	11 24       	eor	r1, r1
    12ba:	2f 93       	push	r18
    12bc:	3f 93       	push	r19
    12be:	4f 93       	push	r20
    12c0:	5f 93       	push	r21
    12c2:	6f 93       	push	r22
    12c4:	7f 93       	push	r23
    12c6:	8f 93       	push	r24
    12c8:	9f 93       	push	r25
    12ca:	af 93       	push	r26
    12cc:	bf 93       	push	r27
    12ce:	ef 93       	push	r30
    12d0:	ff 93       	push	r31
    cAllisr();
    12d2:	e0 91 d6 02 	lds	r30, 0x02D6
    12d6:	f0 91 d7 02 	lds	r31, 0x02D7
    12da:	19 95       	eicall
}
    12dc:	ff 91       	pop	r31
    12de:	ef 91       	pop	r30
    12e0:	bf 91       	pop	r27
    12e2:	af 91       	pop	r26
    12e4:	9f 91       	pop	r25
    12e6:	8f 91       	pop	r24
    12e8:	7f 91       	pop	r23
    12ea:	6f 91       	pop	r22
    12ec:	5f 91       	pop	r21
    12ee:	4f 91       	pop	r20
    12f0:	3f 91       	pop	r19
    12f2:	2f 91       	pop	r18
    12f4:	0f 90       	pop	r0
    12f6:	0b be       	out	0x3b, r0	; 59
    12f8:	0f 90       	pop	r0
    12fa:	0f be       	out	0x3f, r0	; 63
    12fc:	0f 90       	pop	r0
    12fe:	1f 90       	pop	r1
    1300:	18 95       	reti

00001302 <_Z7forwardv>:
char prevDir;

/******************Main Code********************/

void forward()
{
    1302:	2f 92       	push	r2
    1304:	3f 92       	push	r3
    1306:	4f 92       	push	r4
    1308:	5f 92       	push	r5
    130a:	6f 92       	push	r6
    130c:	7f 92       	push	r7
    130e:	8f 92       	push	r8
    1310:	9f 92       	push	r9
    1312:	af 92       	push	r10
    1314:	bf 92       	push	r11
    1316:	cf 92       	push	r12
    1318:	df 92       	push	r13
    131a:	ef 92       	push	r14
    131c:	ff 92       	push	r15
    131e:	0f 93       	push	r16
    1320:	1f 93       	push	r17
    1322:	df 93       	push	r29
    1324:	cf 93       	push	r28
    1326:	cd b7       	in	r28, 0x3d	; 61
    1328:	de b7       	in	r29, 0x3e	; 62
    132a:	60 97       	sbiw	r28, 0x10	; 16
    132c:	0f b6       	in	r0, 0x3f	; 63
    132e:	f8 94       	cli
    1330:	de bf       	out	0x3e, r29	; 62
    1332:	0f be       	out	0x3f, r0	; 63
    1334:	cd bf       	out	0x3d, r28	; 61
	if(prevDir=='b')
    1336:	80 91 f9 02 	lds	r24, 0x02F9
    133a:	82 36       	cpi	r24, 0x62	; 98
    133c:	09 f0       	breq	.+2      	; 0x1340 <_Z7forwardv+0x3e>
    133e:	14 c1       	rjmp	.+552    	; 0x1568 <_Z7forwardv+0x266>
				delay(interval);		
			}
			
		}

		else if(pWm<lAstpwm||pWm1<lAstpwm1||pWm2<lAstpwm2||pWm3<lAstpwm3){				//decelerate
    1340:	80 91 ea 02 	lds	r24, 0x02EA
    1344:	88 23       	and	r24, r24
    1346:	09 f0       	breq	.+2      	; 0x134a <_Z7forwardv+0x48>
    1348:	9b c0       	rjmp	.+310    	; 0x1480 <_Z7forwardv+0x17e>
    134a:	80 91 ef 02 	lds	r24, 0x02EF
    134e:	88 23       	and	r24, r24
    1350:	09 f0       	breq	.+2      	; 0x1354 <_Z7forwardv+0x52>
    1352:	96 c0       	rjmp	.+300    	; 0x1480 <_Z7forwardv+0x17e>
    1354:	80 91 f3 02 	lds	r24, 0x02F3
    1358:	88 23       	and	r24, r24
    135a:	09 f0       	breq	.+2      	; 0x135e <_Z7forwardv+0x5c>
    135c:	91 c0       	rjmp	.+290    	; 0x1480 <_Z7forwardv+0x17e>
    135e:	80 91 f7 02 	lds	r24, 0x02F7
    1362:	88 23       	and	r24, r24
    1364:	09 f0       	breq	.+2      	; 0x1368 <_Z7forwardv+0x66>
    1366:	8c c0       	rjmp	.+280    	; 0x1480 <_Z7forwardv+0x17e>
    1368:	eb c0       	rjmp	.+470    	; 0x1540 <_Z7forwardv+0x23e>

			for(lAstpwm=lAstpwm,lAstpwm1=lAstpwm1,lAstpwm2=lAstpwm2,lAstpwm3=lAstpwm3;lAstpwm>pWm||lAstpwm1>pWm1||lAstpwm2>pWm2||lAstpwm3>pWm3;){		//decrease the speed step by step
				if (pWm<lAstpwm){
					lAstpwm-=step1;
    136a:	f2 01       	movw	r30, r4
    136c:	80 81       	ld	r24, Z
    136e:	68 1b       	sub	r22, r24
    1370:	e9 81       	ldd	r30, Y+1	; 0x01
    1372:	fa 81       	ldd	r31, Y+2	; 0x02
    1374:	60 83       	st	Z, r22
					analogWrite(pWmpin,constrain(lAstpwm,pWm,255));
    1376:	70 e0       	ldi	r23, 0x00	; 0
    1378:	80 e0       	ldi	r24, 0x00	; 0
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	20 e0       	ldi	r18, 0x00	; 0
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	a9 01       	movw	r20, r18
    1382:	0f 2e       	mov	r0, r31
    1384:	ff ef       	ldi	r31, 0xFF	; 255
    1386:	ef 2e       	mov	r14, r31
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	ff 2e       	mov	r15, r31
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	0f 2f       	mov	r16, r31
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	1f 2f       	mov	r17, r31
    1394:	f0 2d       	mov	r31, r0
    1396:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <_Z9constrainlll>
    139a:	eb 81       	ldd	r30, Y+3	; 0x03
    139c:	fc 81       	ldd	r31, Y+4	; 0x04
    139e:	80 81       	ld	r24, Z
    13a0:	0e 94 29 05 	call	0xa52	; 0xa52 <_Z11analogWritehh>
				}
				if (pWm1<lAstpwm1){
    13a4:	ef ee       	ldi	r30, 0xEF	; 239
    13a6:	f2 e0       	ldi	r31, 0x02	; 2
    13a8:	60 81       	ld	r22, Z
    13aa:	66 23       	and	r22, r22
    13ac:	e9 f0       	breq	.+58     	; 0x13e8 <_Z7forwardv+0xe6>
					lAstpwm1-=step2;
    13ae:	f1 01       	movw	r30, r2
    13b0:	80 81       	ld	r24, Z
    13b2:	68 1b       	sub	r22, r24
    13b4:	ed 81       	ldd	r30, Y+5	; 0x05
    13b6:	fe 81       	ldd	r31, Y+6	; 0x06
    13b8:	60 83       	st	Z, r22
					analogWrite(pWmpin1,constrain(lAstpwm1,pWm1,255));
    13ba:	70 e0       	ldi	r23, 0x00	; 0
    13bc:	80 e0       	ldi	r24, 0x00	; 0
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	20 e0       	ldi	r18, 0x00	; 0
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	a9 01       	movw	r20, r18
    13c6:	0f 2e       	mov	r0, r31
    13c8:	ff ef       	ldi	r31, 0xFF	; 255
    13ca:	ef 2e       	mov	r14, r31
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	ff 2e       	mov	r15, r31
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	0f 2f       	mov	r16, r31
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	1f 2f       	mov	r17, r31
    13d8:	f0 2d       	mov	r31, r0
    13da:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <_Z9constrainlll>
    13de:	ef 81       	ldd	r30, Y+7	; 0x07
    13e0:	f8 85       	ldd	r31, Y+8	; 0x08
    13e2:	80 81       	ld	r24, Z
    13e4:	0e 94 29 05 	call	0xa52	; 0xa52 <_Z11analogWritehh>
				}
				if (pWm2<lAstpwm2){
    13e8:	f6 01       	movw	r30, r12
    13ea:	60 81       	ld	r22, Z
    13ec:	66 23       	and	r22, r22
    13ee:	f1 f0       	breq	.+60     	; 0x142c <_Z7forwardv+0x12a>
					lAstpwm2-=step3;
    13f0:	e4 ef       	ldi	r30, 0xF4	; 244
    13f2:	f2 e0       	ldi	r31, 0x02	; 2
    13f4:	80 81       	ld	r24, Z
    13f6:	68 1b       	sub	r22, r24
    13f8:	e9 85       	ldd	r30, Y+9	; 0x09
    13fa:	fa 85       	ldd	r31, Y+10	; 0x0a
    13fc:	60 83       	st	Z, r22
					analogWrite(pWmpin2,constrain(lAstpwm2,pWm2,255));
    13fe:	70 e0       	ldi	r23, 0x00	; 0
    1400:	80 e0       	ldi	r24, 0x00	; 0
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	20 e0       	ldi	r18, 0x00	; 0
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	a9 01       	movw	r20, r18
    140a:	0f 2e       	mov	r0, r31
    140c:	ff ef       	ldi	r31, 0xFF	; 255
    140e:	ef 2e       	mov	r14, r31
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	ff 2e       	mov	r15, r31
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	0f 2f       	mov	r16, r31
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	1f 2f       	mov	r17, r31
    141c:	f0 2d       	mov	r31, r0
    141e:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <_Z9constrainlll>
    1422:	eb 85       	ldd	r30, Y+11	; 0x0b
    1424:	fc 85       	ldd	r31, Y+12	; 0x0c
    1426:	80 81       	ld	r24, Z
    1428:	0e 94 29 05 	call	0xa52	; 0xa52 <_Z11analogWritehh>
				}
				if (pWm3<lAstpwm3){
    142c:	f5 01       	movw	r30, r10
    142e:	60 81       	ld	r22, Z
    1430:	66 23       	and	r22, r22
    1432:	f1 f0       	breq	.+60     	; 0x1470 <_Z7forwardv+0x16e>
					lAstpwm3-=step4;
    1434:	e8 ef       	ldi	r30, 0xF8	; 248
    1436:	f2 e0       	ldi	r31, 0x02	; 2
    1438:	80 81       	ld	r24, Z
    143a:	68 1b       	sub	r22, r24
    143c:	ed 85       	ldd	r30, Y+13	; 0x0d
    143e:	fe 85       	ldd	r31, Y+14	; 0x0e
    1440:	60 83       	st	Z, r22
					analogWrite(pWmpin3,constrain(lAstpwm3,pWm3,255));
    1442:	70 e0       	ldi	r23, 0x00	; 0
    1444:	80 e0       	ldi	r24, 0x00	; 0
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	20 e0       	ldi	r18, 0x00	; 0
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	a9 01       	movw	r20, r18
    144e:	0f 2e       	mov	r0, r31
    1450:	ff ef       	ldi	r31, 0xFF	; 255
    1452:	ef 2e       	mov	r14, r31
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	ff 2e       	mov	r15, r31
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	0f 2f       	mov	r16, r31
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	1f 2f       	mov	r17, r31
    1460:	f0 2d       	mov	r31, r0
    1462:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <_Z9constrainlll>
    1466:	ef 85       	ldd	r30, Y+15	; 0x0f
    1468:	f8 89       	ldd	r31, Y+16	; 0x10
    146a:	80 81       	ld	r24, Z
    146c:	0e 94 29 05 	call	0xa52	; 0xa52 <_Z11analogWritehh>
				}
				delay(interval);		
    1470:	f3 01       	movw	r30, r6
    1472:	60 81       	ld	r22, Z
    1474:	70 e0       	ldi	r23, 0x00	; 0
    1476:	80 e0       	ldi	r24, 0x00	; 0
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	0e 94 62 06 	call	0xcc4	; 0xcc4 <_Z5delaym>
    147e:	4b c0       	rjmp	.+150    	; 0x1516 <_Z7forwardv+0x214>
			
		}

		else if(pWm<lAstpwm||pWm1<lAstpwm1||pWm2<lAstpwm2||pWm3<lAstpwm3){				//decelerate

			for(lAstpwm=lAstpwm,lAstpwm1=lAstpwm1,lAstpwm2=lAstpwm2,lAstpwm3=lAstpwm3;lAstpwm>pWm||lAstpwm1>pWm1||lAstpwm2>pWm2||lAstpwm3>pWm3;){		//decrease the speed step by step
    1480:	0f 2e       	mov	r0, r31
    1482:	fa ee       	ldi	r31, 0xEA	; 234
    1484:	8f 2e       	mov	r8, r31
    1486:	f2 e0       	ldi	r31, 0x02	; 2
    1488:	9f 2e       	mov	r9, r31
    148a:	f0 2d       	mov	r31, r0
				if (pWm<lAstpwm){
					lAstpwm-=step1;
    148c:	0f 2e       	mov	r0, r31
    148e:	fb ee       	ldi	r31, 0xEB	; 235
    1490:	4f 2e       	mov	r4, r31
    1492:	f2 e0       	ldi	r31, 0x02	; 2
    1494:	5f 2e       	mov	r5, r31
    1496:	f0 2d       	mov	r31, r0
    1498:	a2 01       	movw	r20, r4
    149a:	41 50       	subi	r20, 0x01	; 1
    149c:	50 40       	sbci	r21, 0x00	; 0
    149e:	5a 83       	std	Y+2, r21	; 0x02
    14a0:	49 83       	std	Y+1, r20	; 0x01
					analogWrite(pWmpin,constrain(lAstpwm,pWm,255));
    14a2:	c2 01       	movw	r24, r4
    14a4:	02 97       	sbiw	r24, 0x02	; 2
    14a6:	9c 83       	std	Y+4, r25	; 0x04
    14a8:	8b 83       	std	Y+3, r24	; 0x03
			
		}

		else if(pWm<lAstpwm||pWm1<lAstpwm1||pWm2<lAstpwm2||pWm3<lAstpwm3){				//decelerate

			for(lAstpwm=lAstpwm,lAstpwm1=lAstpwm1,lAstpwm2=lAstpwm2,lAstpwm3=lAstpwm3;lAstpwm>pWm||lAstpwm1>pWm1||lAstpwm2>pWm2||lAstpwm3>pWm3;){		//decrease the speed step by step
    14aa:	0f 2e       	mov	r0, r31
    14ac:	f3 ef       	ldi	r31, 0xF3	; 243
    14ae:	cf 2e       	mov	r12, r31
    14b0:	f2 e0       	ldi	r31, 0x02	; 2
    14b2:	df 2e       	mov	r13, r31
    14b4:	f0 2d       	mov	r31, r0
    14b6:	0f 2e       	mov	r0, r31
    14b8:	f7 ef       	ldi	r31, 0xF7	; 247
    14ba:	af 2e       	mov	r10, r31
    14bc:	f2 e0       	ldi	r31, 0x02	; 2
    14be:	bf 2e       	mov	r11, r31
    14c0:	f0 2d       	mov	r31, r0
				if (pWm<lAstpwm){
					lAstpwm-=step1;
					analogWrite(pWmpin,constrain(lAstpwm,pWm,255));
				}
				if (pWm1<lAstpwm1){
					lAstpwm1-=step2;
    14c2:	0f 2e       	mov	r0, r31
    14c4:	f0 ef       	ldi	r31, 0xF0	; 240
    14c6:	2f 2e       	mov	r2, r31
    14c8:	f2 e0       	ldi	r31, 0x02	; 2
    14ca:	3f 2e       	mov	r3, r31
    14cc:	f0 2d       	mov	r31, r0
    14ce:	f1 01       	movw	r30, r2
    14d0:	31 97       	sbiw	r30, 0x01	; 1
    14d2:	fe 83       	std	Y+6, r31	; 0x06
    14d4:	ed 83       	std	Y+5, r30	; 0x05
					analogWrite(pWmpin1,constrain(lAstpwm1,pWm1,255));
    14d6:	a1 01       	movw	r20, r2
    14d8:	42 50       	subi	r20, 0x02	; 2
    14da:	50 40       	sbci	r21, 0x00	; 0
    14dc:	58 87       	std	Y+8, r21	; 0x08
    14de:	4f 83       	std	Y+7, r20	; 0x07
				}
				if (pWm2<lAstpwm2){
					lAstpwm2-=step3;
    14e0:	84 ef       	ldi	r24, 0xF4	; 244
    14e2:	92 e0       	ldi	r25, 0x02	; 2
    14e4:	01 97       	sbiw	r24, 0x01	; 1
    14e6:	9a 87       	std	Y+10, r25	; 0x0a
    14e8:	89 87       	std	Y+9, r24	; 0x09
					analogWrite(pWmpin2,constrain(lAstpwm2,pWm2,255));
    14ea:	e4 ef       	ldi	r30, 0xF4	; 244
    14ec:	f2 e0       	ldi	r31, 0x02	; 2
    14ee:	32 97       	sbiw	r30, 0x02	; 2
    14f0:	fc 87       	std	Y+12, r31	; 0x0c
    14f2:	eb 87       	std	Y+11, r30	; 0x0b
				}
				if (pWm3<lAstpwm3){
					lAstpwm3-=step4;
    14f4:	48 ef       	ldi	r20, 0xF8	; 248
    14f6:	52 e0       	ldi	r21, 0x02	; 2
    14f8:	41 50       	subi	r20, 0x01	; 1
    14fa:	50 40       	sbci	r21, 0x00	; 0
    14fc:	5e 87       	std	Y+14, r21	; 0x0e
    14fe:	4d 87       	std	Y+13, r20	; 0x0d
					analogWrite(pWmpin3,constrain(lAstpwm3,pWm3,255));
    1500:	88 ef       	ldi	r24, 0xF8	; 248
    1502:	92 e0       	ldi	r25, 0x02	; 2
    1504:	02 97       	sbiw	r24, 0x02	; 2
    1506:	98 8b       	std	Y+16, r25	; 0x10
    1508:	8f 87       	std	Y+15, r24	; 0x0f
				}
				delay(interval);		
    150a:	0f 2e       	mov	r0, r31
    150c:	fc ee       	ldi	r31, 0xEC	; 236
    150e:	6f 2e       	mov	r6, r31
    1510:	f2 e0       	ldi	r31, 0x02	; 2
    1512:	7f 2e       	mov	r7, r31
    1514:	f0 2d       	mov	r31, r0
			
		}

		else if(pWm<lAstpwm||pWm1<lAstpwm1||pWm2<lAstpwm2||pWm3<lAstpwm3){				//decelerate

			for(lAstpwm=lAstpwm,lAstpwm1=lAstpwm1,lAstpwm2=lAstpwm2,lAstpwm3=lAstpwm3;lAstpwm>pWm||lAstpwm1>pWm1||lAstpwm2>pWm2||lAstpwm3>pWm3;){		//decrease the speed step by step
    1516:	f4 01       	movw	r30, r8
    1518:	60 81       	ld	r22, Z
    151a:	66 23       	and	r22, r22
    151c:	09 f0       	breq	.+2      	; 0x1520 <_Z7forwardv+0x21e>
    151e:	25 cf       	rjmp	.-438    	; 0x136a <_Z7forwardv+0x68>
    1520:	ef ee       	ldi	r30, 0xEF	; 239
    1522:	f2 e0       	ldi	r31, 0x02	; 2
    1524:	80 81       	ld	r24, Z
    1526:	88 23       	and	r24, r24
    1528:	09 f0       	breq	.+2      	; 0x152c <_Z7forwardv+0x22a>
    152a:	3c cf       	rjmp	.-392    	; 0x13a4 <_Z7forwardv+0xa2>
    152c:	f6 01       	movw	r30, r12
    152e:	80 81       	ld	r24, Z
    1530:	88 23       	and	r24, r24
    1532:	09 f0       	breq	.+2      	; 0x1536 <_Z7forwardv+0x234>
    1534:	37 cf       	rjmp	.-402    	; 0x13a4 <_Z7forwardv+0xa2>
    1536:	f5 01       	movw	r30, r10
    1538:	80 81       	ld	r24, Z
    153a:	88 23       	and	r24, r24
    153c:	a9 f0       	breq	.+42     	; 0x1568 <_Z7forwardv+0x266>
    153e:	32 cf       	rjmp	.-412    	; 0x13a4 <_Z7forwardv+0xa2>
				delay(interval);		
			}
		}

		else{		//no change
			analogWrite(pWmpin,pWm);
    1540:	80 91 e9 02 	lds	r24, 0x02E9
    1544:	60 e0       	ldi	r22, 0x00	; 0
    1546:	0e 94 29 05 	call	0xa52	; 0xa52 <_Z11analogWritehh>
			analogWrite(pWmpin1,pWm1);
    154a:	80 91 ee 02 	lds	r24, 0x02EE
    154e:	60 e0       	ldi	r22, 0x00	; 0
    1550:	0e 94 29 05 	call	0xa52	; 0xa52 <_Z11analogWritehh>
			analogWrite(pWmpin2,pWm2);
    1554:	80 91 f2 02 	lds	r24, 0x02F2
    1558:	60 e0       	ldi	r22, 0x00	; 0
    155a:	0e 94 29 05 	call	0xa52	; 0xa52 <_Z11analogWritehh>
			analogWrite(pWmpin3,pWm3);
    155e:	80 91 f6 02 	lds	r24, 0x02F6
    1562:	60 e0       	ldi	r22, 0x00	; 0
    1564:	0e 94 29 05 	call	0xa52	; 0xa52 <_Z11analogWritehh>
	motors.drive(0,0,0,0);
	
	angle=120;
    1568:	88 e7       	ldi	r24, 0x78	; 120
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	90 93 d1 02 	sts	0x02D1, r25
    1570:	80 93 d0 02 	sts	0x02D0, r24
     }
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,200,iCr/39,iCr/8.3),iCr/40,iCr/8);
    1574:	a0 90 dc 02 	lds	r10, 0x02DC
    1578:	b0 90 dd 02 	lds	r11, 0x02DD
    157c:	c5 01       	movw	r24, r10
    157e:	67 e2       	ldi	r22, 0x27	; 39
    1580:	70 e0       	ldi	r23, 0x00	; 0
    1582:	0e 94 60 1b 	call	0x36c0	; 0x36c0 <__divmodhi4>
    1586:	6b 01       	movw	r12, r22
    1588:	ee 24       	eor	r14, r14
    158a:	d7 fc       	sbrc	r13, 7
    158c:	e0 94       	com	r14
    158e:	fe 2c       	mov	r15, r14
    1590:	b5 01       	movw	r22, r10
    1592:	88 27       	eor	r24, r24
    1594:	77 fd       	sbrc	r23, 7
    1596:	80 95       	com	r24
    1598:	98 2f       	mov	r25, r24
    159a:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <__floatsisf>
    159e:	2d ec       	ldi	r18, 0xCD	; 205
    15a0:	3c ec       	ldi	r19, 0xCC	; 204
    15a2:	44 e0       	ldi	r20, 0x04	; 4
    15a4:	51 e4       	ldi	r21, 0x41	; 65
    15a6:	0e 94 b7 19 	call	0x336e	; 0x336e <__divsf3>
    15aa:	0e 94 1f 1a 	call	0x343e	; 0x343e <__fixsfsi>
        break; 
    }   
  }
  long mapAngle(long x, long in_min, long in_max, long out_min, long out_max)
  {
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    15ae:	6c 19       	sub	r22, r12
    15b0:	7d 09       	sbc	r23, r13
    15b2:	8e 09       	sbc	r24, r14
    15b4:	9f 09       	sbc	r25, r15
	swerve1.write(angle+correction[0]);
    15b6:	20 91 c8 02 	lds	r18, 0x02C8
    15ba:	30 91 c9 02 	lds	r19, 0x02C9
    15be:	28 58       	subi	r18, 0x88	; 136
    15c0:	3f 4f       	sbci	r19, 0xFF	; 255
     }
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,200,iCr/39,iCr/8.3),iCr/40,iCr/8);
    15c2:	44 27       	eor	r20, r20
    15c4:	37 fd       	sbrc	r19, 7
    15c6:	40 95       	com	r20
    15c8:	54 2f       	mov	r21, r20
        break; 
    }   
  }
  long mapAngle(long x, long in_min, long in_max, long out_min, long out_max)
  {
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    15ca:	0e 94 41 1b 	call	0x3682	; 0x3682 <__mulsi3>
    15ce:	28 ec       	ldi	r18, 0xC8	; 200
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	40 e0       	ldi	r20, 0x00	; 0
    15d4:	50 e0       	ldi	r21, 0x00	; 0
    15d6:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <__divmodsi4>
    15da:	89 01       	movw	r16, r18
    15dc:	9a 01       	movw	r18, r20
    15de:	0c 0d       	add	r16, r12
    15e0:	1d 1d       	adc	r17, r13
    15e2:	2e 1d       	adc	r18, r14
    15e4:	3f 1d       	adc	r19, r15
     }
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,200,iCr/39,iCr/8.3),iCr/40,iCr/8);
    15e6:	c5 01       	movw	r24, r10
    15e8:	bb 20       	and	r11, r11
    15ea:	0c f4       	brge	.+2      	; 0x15ee <_Z7forwardv+0x2ec>
    15ec:	07 96       	adiw	r24, 0x07	; 7
    15ee:	95 95       	asr	r25
    15f0:	87 95       	ror	r24
    15f2:	95 95       	asr	r25
    15f4:	87 95       	ror	r24
    15f6:	95 95       	asr	r25
    15f8:	87 95       	ror	r24
    15fa:	aa 27       	eor	r26, r26
    15fc:	97 fd       	sbrc	r25, 7
    15fe:	a0 95       	com	r26
    1600:	ba 2f       	mov	r27, r26
  {
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  }
  long constraint(long nUm,long lOwer,long uPper)
  {
    if(nUm>uPper){
    1602:	80 17       	cp	r24, r16
    1604:	91 07       	cpc	r25, r17
    1606:	a2 07       	cpc	r26, r18
    1608:	b3 07       	cpc	r27, r19
    160a:	a4 f0       	brlt	.+40     	; 0x1634 <_Z7forwardv+0x332>
     }
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,200,iCr/39,iCr/8.3),iCr/40,iCr/8);
    160c:	c5 01       	movw	r24, r10
    160e:	68 e2       	ldi	r22, 0x28	; 40
    1610:	70 e0       	ldi	r23, 0x00	; 0
    1612:	0e 94 60 1b 	call	0x36c0	; 0x36c0 <__divmodhi4>
    1616:	cb 01       	movw	r24, r22
    1618:	ac 01       	movw	r20, r24
    161a:	66 27       	eor	r22, r22
    161c:	57 fd       	sbrc	r21, 7
    161e:	60 95       	com	r22
    1620:	76 2f       	mov	r23, r22
    1622:	d9 01       	movw	r26, r18
    1624:	c8 01       	movw	r24, r16
    1626:	04 17       	cp	r16, r20
    1628:	15 07       	cpc	r17, r21
    162a:	26 07       	cpc	r18, r22
    162c:	37 07       	cpc	r19, r23
    162e:	14 f4       	brge	.+4      	; 0x1634 <_Z7forwardv+0x332>
    1630:	db 01       	movw	r26, r22
    1632:	ca 01       	movw	r24, r20
    switch(pIn)
    1634:	20 91 de 02 	lds	r18, 0x02DE
    1638:	28 30       	cpi	r18, 0x08	; 8
    163a:	09 f4       	brne	.+2      	; 0x163e <_Z7forwardv+0x33c>
    163c:	7a c0       	rjmp	.+244    	; 0x1732 <_Z7forwardv+0x430>
    163e:	29 30       	cpi	r18, 0x09	; 9
    1640:	90 f4       	brcc	.+36     	; 0x1666 <_Z7forwardv+0x364>
    1642:	25 30       	cpi	r18, 0x05	; 5
    1644:	d1 f1       	breq	.+116    	; 0x16ba <_Z7forwardv+0x3b8>
    1646:	26 30       	cpi	r18, 0x06	; 6
    1648:	38 f4       	brcc	.+14     	; 0x1658 <_Z7forwardv+0x356>
    164a:	22 30       	cpi	r18, 0x02	; 2
    164c:	09 f4       	brne	.+2      	; 0x1650 <_Z7forwardv+0x34e>
    164e:	41 c0       	rjmp	.+130    	; 0x16d2 <_Z7forwardv+0x3d0>
    1650:	23 30       	cpi	r18, 0x03	; 3
    1652:	09 f0       	breq	.+2      	; 0x1656 <_Z7forwardv+0x354>
    1654:	9d c0       	rjmp	.+314    	; 0x1790 <_Z7forwardv+0x48e>
    1656:	49 c0       	rjmp	.+146    	; 0x16ea <_Z7forwardv+0x3e8>
    1658:	26 30       	cpi	r18, 0x06	; 6
    165a:	09 f4       	brne	.+2      	; 0x165e <_Z7forwardv+0x35c>
    165c:	52 c0       	rjmp	.+164    	; 0x1702 <_Z7forwardv+0x400>
    165e:	27 30       	cpi	r18, 0x07	; 7
    1660:	09 f0       	breq	.+2      	; 0x1664 <_Z7forwardv+0x362>
    1662:	96 c0       	rjmp	.+300    	; 0x1790 <_Z7forwardv+0x48e>
    1664:	5a c0       	rjmp	.+180    	; 0x171a <_Z7forwardv+0x418>
    1666:	2c 32       	cpi	r18, 0x2C	; 44
    1668:	09 f4       	brne	.+2      	; 0x166c <_Z7forwardv+0x36a>
    166a:	87 c0       	rjmp	.+270    	; 0x177a <_Z7forwardv+0x478>
    166c:	2d 32       	cpi	r18, 0x2D	; 45
    166e:	30 f4       	brcc	.+12     	; 0x167c <_Z7forwardv+0x37a>
    1670:	2b 30       	cpi	r18, 0x0B	; 11
    1672:	59 f0       	breq	.+22     	; 0x168a <_Z7forwardv+0x388>
    1674:	2c 30       	cpi	r18, 0x0C	; 12
    1676:	09 f0       	breq	.+2      	; 0x167a <_Z7forwardv+0x378>
    1678:	8b c0       	rjmp	.+278    	; 0x1790 <_Z7forwardv+0x48e>
    167a:	13 c0       	rjmp	.+38     	; 0x16a2 <_Z7forwardv+0x3a0>
    167c:	2d 32       	cpi	r18, 0x2D	; 45
    167e:	09 f4       	brne	.+2      	; 0x1682 <_Z7forwardv+0x380>
    1680:	70 c0       	rjmp	.+224    	; 0x1762 <_Z7forwardv+0x460>
    1682:	2e 32       	cpi	r18, 0x2E	; 46
    1684:	09 f0       	breq	.+2      	; 0x1688 <_Z7forwardv+0x386>
    1686:	84 c0       	rjmp	.+264    	; 0x1790 <_Z7forwardv+0x48e>
    1688:	60 c0       	rjmp	.+192    	; 0x174a <_Z7forwardv+0x448>
    {
      case 11:
        OCR1A=ICR1-vAl;
    168a:	20 91 86 00 	lds	r18, 0x0086
    168e:	30 91 87 00 	lds	r19, 0x0087
    1692:	f9 01       	movw	r30, r18
    1694:	e8 1b       	sub	r30, r24
    1696:	f9 0b       	sbc	r31, r25
    1698:	f0 93 89 00 	sts	0x0089, r31
    169c:	e0 93 88 00 	sts	0x0088, r30
    16a0:	77 c0       	rjmp	.+238    	; 0x1790 <_Z7forwardv+0x48e>
        break;
      case 12:
        OCR1B=ICR1-vAl;
    16a2:	20 91 86 00 	lds	r18, 0x0086
    16a6:	30 91 87 00 	lds	r19, 0x0087
    16aa:	a9 01       	movw	r20, r18
    16ac:	48 1b       	sub	r20, r24
    16ae:	59 0b       	sbc	r21, r25
    16b0:	50 93 8b 00 	sts	0x008B, r21
    16b4:	40 93 8a 00 	sts	0x008A, r20
    16b8:	6b c0       	rjmp	.+214    	; 0x1790 <_Z7forwardv+0x48e>
        break;
      case 5:
        OCR3A=ICR3-vAl;
    16ba:	20 91 96 00 	lds	r18, 0x0096
    16be:	30 91 97 00 	lds	r19, 0x0097
    16c2:	f9 01       	movw	r30, r18
    16c4:	e8 1b       	sub	r30, r24
    16c6:	f9 0b       	sbc	r31, r25
    16c8:	f0 93 99 00 	sts	0x0099, r31
    16cc:	e0 93 98 00 	sts	0x0098, r30
    16d0:	5f c0       	rjmp	.+190    	; 0x1790 <_Z7forwardv+0x48e>
        break;
      case 2:
        OCR3B=ICR3-vAl;
    16d2:	20 91 96 00 	lds	r18, 0x0096
    16d6:	30 91 97 00 	lds	r19, 0x0097
    16da:	a9 01       	movw	r20, r18
    16dc:	48 1b       	sub	r20, r24
    16de:	59 0b       	sbc	r21, r25
    16e0:	50 93 9b 00 	sts	0x009B, r21
    16e4:	40 93 9a 00 	sts	0x009A, r20
    16e8:	53 c0       	rjmp	.+166    	; 0x1790 <_Z7forwardv+0x48e>
        break;
      case 3:
        OCR3C=ICR3-vAl;
    16ea:	20 91 96 00 	lds	r18, 0x0096
    16ee:	30 91 97 00 	lds	r19, 0x0097
    16f2:	f9 01       	movw	r30, r18
    16f4:	e8 1b       	sub	r30, r24
    16f6:	f9 0b       	sbc	r31, r25
    16f8:	f0 93 9d 00 	sts	0x009D, r31
    16fc:	e0 93 9c 00 	sts	0x009C, r30
    1700:	47 c0       	rjmp	.+142    	; 0x1790 <_Z7forwardv+0x48e>
        break;
      case 6:
        OCR4A=ICR4-vAl;
    1702:	20 91 a6 00 	lds	r18, 0x00A6
    1706:	30 91 a7 00 	lds	r19, 0x00A7
    170a:	a9 01       	movw	r20, r18
    170c:	48 1b       	sub	r20, r24
    170e:	59 0b       	sbc	r21, r25
    1710:	50 93 a9 00 	sts	0x00A9, r21
    1714:	40 93 a8 00 	sts	0x00A8, r20
    1718:	3b c0       	rjmp	.+118    	; 0x1790 <_Z7forwardv+0x48e>
        break;
      case 7:
        OCR4B=ICR4-vAl;
    171a:	20 91 a6 00 	lds	r18, 0x00A6
    171e:	30 91 a7 00 	lds	r19, 0x00A7
    1722:	f9 01       	movw	r30, r18
    1724:	e8 1b       	sub	r30, r24
    1726:	f9 0b       	sbc	r31, r25
    1728:	f0 93 ab 00 	sts	0x00AB, r31
    172c:	e0 93 aa 00 	sts	0x00AA, r30
    1730:	2f c0       	rjmp	.+94     	; 0x1790 <_Z7forwardv+0x48e>
        break; 
      case 8:
        OCR4C=ICR4-vAl;
    1732:	20 91 a6 00 	lds	r18, 0x00A6
    1736:	30 91 a7 00 	lds	r19, 0x00A7
    173a:	a9 01       	movw	r20, r18
    173c:	48 1b       	sub	r20, r24
    173e:	59 0b       	sbc	r21, r25
    1740:	50 93 ad 00 	sts	0x00AD, r21
    1744:	40 93 ac 00 	sts	0x00AC, r20
    1748:	23 c0       	rjmp	.+70     	; 0x1790 <_Z7forwardv+0x48e>
        break;
      case 46:
        OCR5A=ICR5-vAl;
    174a:	20 91 26 01 	lds	r18, 0x0126
    174e:	30 91 27 01 	lds	r19, 0x0127
    1752:	f9 01       	movw	r30, r18
    1754:	e8 1b       	sub	r30, r24
    1756:	f9 0b       	sbc	r31, r25
    1758:	f0 93 29 01 	sts	0x0129, r31
    175c:	e0 93 28 01 	sts	0x0128, r30
    1760:	17 c0       	rjmp	.+46     	; 0x1790 <_Z7forwardv+0x48e>
        break;
      case 45:
        OCR5B=ICR5-vAl;
    1762:	20 91 26 01 	lds	r18, 0x0126
    1766:	30 91 27 01 	lds	r19, 0x0127
    176a:	a9 01       	movw	r20, r18
    176c:	48 1b       	sub	r20, r24
    176e:	59 0b       	sbc	r21, r25
    1770:	50 93 2b 01 	sts	0x012B, r21
    1774:	40 93 2a 01 	sts	0x012A, r20
    1778:	0b c0       	rjmp	.+22     	; 0x1790 <_Z7forwardv+0x48e>
        break;
      case 44:
        OCR5C=ICR5-vAl;
    177a:	20 91 26 01 	lds	r18, 0x0126
    177e:	30 91 27 01 	lds	r19, 0x0127
    1782:	f9 01       	movw	r30, r18
    1784:	e8 1b       	sub	r30, r24
    1786:	f9 0b       	sbc	r31, r25
    1788:	f0 93 2d 01 	sts	0x012D, r31
    178c:	e0 93 2c 01 	sts	0x012C, r30
     }
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,200,iCr/39,iCr/8.3),iCr/40,iCr/8);
    1790:	a0 90 df 02 	lds	r10, 0x02DF
    1794:	b0 90 e0 02 	lds	r11, 0x02E0
    1798:	c5 01       	movw	r24, r10
    179a:	67 e2       	ldi	r22, 0x27	; 39
    179c:	70 e0       	ldi	r23, 0x00	; 0
    179e:	0e 94 60 1b 	call	0x36c0	; 0x36c0 <__divmodhi4>
    17a2:	6b 01       	movw	r12, r22
    17a4:	ee 24       	eor	r14, r14
    17a6:	d7 fc       	sbrc	r13, 7
    17a8:	e0 94       	com	r14
    17aa:	fe 2c       	mov	r15, r14
    17ac:	b5 01       	movw	r22, r10
    17ae:	88 27       	eor	r24, r24
    17b0:	77 fd       	sbrc	r23, 7
    17b2:	80 95       	com	r24
    17b4:	98 2f       	mov	r25, r24
    17b6:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <__floatsisf>
    17ba:	2d ec       	ldi	r18, 0xCD	; 205
    17bc:	3c ec       	ldi	r19, 0xCC	; 204
    17be:	44 e0       	ldi	r20, 0x04	; 4
    17c0:	51 e4       	ldi	r21, 0x41	; 65
    17c2:	0e 94 b7 19 	call	0x336e	; 0x336e <__divsf3>
    17c6:	0e 94 1f 1a 	call	0x343e	; 0x343e <__fixsfsi>
        break; 
    }   
  }
  long mapAngle(long x, long in_min, long in_max, long out_min, long out_max)
  {
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    17ca:	6c 19       	sub	r22, r12
    17cc:	7d 09       	sbc	r23, r13
    17ce:	8e 09       	sbc	r24, r14
    17d0:	9f 09       	sbc	r25, r15
	swerve2.write(angle+correction[1]);
    17d2:	40 91 d0 02 	lds	r20, 0x02D0
    17d6:	50 91 d1 02 	lds	r21, 0x02D1
    17da:	20 91 ca 02 	lds	r18, 0x02CA
    17de:	30 91 cb 02 	lds	r19, 0x02CB
    17e2:	24 0f       	add	r18, r20
    17e4:	35 1f       	adc	r19, r21
     }
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,200,iCr/39,iCr/8.3),iCr/40,iCr/8);
    17e6:	44 27       	eor	r20, r20
    17e8:	37 fd       	sbrc	r19, 7
    17ea:	40 95       	com	r20
    17ec:	54 2f       	mov	r21, r20
        break; 
    }   
  }
  long mapAngle(long x, long in_min, long in_max, long out_min, long out_max)
  {
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    17ee:	0e 94 41 1b 	call	0x3682	; 0x3682 <__mulsi3>
    17f2:	28 ec       	ldi	r18, 0xC8	; 200
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	40 e0       	ldi	r20, 0x00	; 0
    17f8:	50 e0       	ldi	r21, 0x00	; 0
    17fa:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <__divmodsi4>
    17fe:	89 01       	movw	r16, r18
    1800:	9a 01       	movw	r18, r20
    1802:	0c 0d       	add	r16, r12
    1804:	1d 1d       	adc	r17, r13
    1806:	2e 1d       	adc	r18, r14
    1808:	3f 1d       	adc	r19, r15
     }
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,200,iCr/39,iCr/8.3),iCr/40,iCr/8);
    180a:	c5 01       	movw	r24, r10
    180c:	bb 20       	and	r11, r11
    180e:	0c f4       	brge	.+2      	; 0x1812 <_Z7forwardv+0x510>
    1810:	07 96       	adiw	r24, 0x07	; 7
    1812:	95 95       	asr	r25
    1814:	87 95       	ror	r24
    1816:	95 95       	asr	r25
    1818:	87 95       	ror	r24
    181a:	95 95       	asr	r25
    181c:	87 95       	ror	r24
    181e:	aa 27       	eor	r26, r26
    1820:	97 fd       	sbrc	r25, 7
    1822:	a0 95       	com	r26
    1824:	ba 2f       	mov	r27, r26
  {
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  }
  long constraint(long nUm,long lOwer,long uPper)
  {
    if(nUm>uPper){
    1826:	80 17       	cp	r24, r16
    1828:	91 07       	cpc	r25, r17
    182a:	a2 07       	cpc	r26, r18
    182c:	b3 07       	cpc	r27, r19
    182e:	a4 f0       	brlt	.+40     	; 0x1858 <_Z7forwardv+0x556>
     }
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,200,iCr/39,iCr/8.3),iCr/40,iCr/8);
    1830:	c5 01       	movw	r24, r10
    1832:	68 e2       	ldi	r22, 0x28	; 40
    1834:	70 e0       	ldi	r23, 0x00	; 0
    1836:	0e 94 60 1b 	call	0x36c0	; 0x36c0 <__divmodhi4>
    183a:	cb 01       	movw	r24, r22
    183c:	ac 01       	movw	r20, r24
    183e:	66 27       	eor	r22, r22
    1840:	57 fd       	sbrc	r21, 7
    1842:	60 95       	com	r22
    1844:	76 2f       	mov	r23, r22
    1846:	d9 01       	movw	r26, r18
    1848:	c8 01       	movw	r24, r16
    184a:	04 17       	cp	r16, r20
    184c:	15 07       	cpc	r17, r21
    184e:	26 07       	cpc	r18, r22
    1850:	37 07       	cpc	r19, r23
    1852:	14 f4       	brge	.+4      	; 0x1858 <_Z7forwardv+0x556>
    1854:	db 01       	movw	r26, r22
    1856:	ca 01       	movw	r24, r20
    switch(pIn)
    1858:	20 91 e1 02 	lds	r18, 0x02E1
    185c:	28 30       	cpi	r18, 0x08	; 8
    185e:	09 f4       	brne	.+2      	; 0x1862 <_Z7forwardv+0x560>
    1860:	7a c0       	rjmp	.+244    	; 0x1956 <_Z7forwardv+0x654>
    1862:	29 30       	cpi	r18, 0x09	; 9
    1864:	90 f4       	brcc	.+36     	; 0x188a <_Z7forwardv+0x588>
    1866:	25 30       	cpi	r18, 0x05	; 5
    1868:	d1 f1       	breq	.+116    	; 0x18de <_Z7forwardv+0x5dc>
    186a:	26 30       	cpi	r18, 0x06	; 6
    186c:	38 f4       	brcc	.+14     	; 0x187c <_Z7forwardv+0x57a>
    186e:	22 30       	cpi	r18, 0x02	; 2
    1870:	09 f4       	brne	.+2      	; 0x1874 <_Z7forwardv+0x572>
    1872:	41 c0       	rjmp	.+130    	; 0x18f6 <_Z7forwardv+0x5f4>
    1874:	23 30       	cpi	r18, 0x03	; 3
    1876:	09 f0       	breq	.+2      	; 0x187a <_Z7forwardv+0x578>
    1878:	9d c0       	rjmp	.+314    	; 0x19b4 <_Z7forwardv+0x6b2>
    187a:	49 c0       	rjmp	.+146    	; 0x190e <_Z7forwardv+0x60c>
    187c:	26 30       	cpi	r18, 0x06	; 6
    187e:	09 f4       	brne	.+2      	; 0x1882 <_Z7forwardv+0x580>
    1880:	52 c0       	rjmp	.+164    	; 0x1926 <_Z7forwardv+0x624>
    1882:	27 30       	cpi	r18, 0x07	; 7
    1884:	09 f0       	breq	.+2      	; 0x1888 <_Z7forwardv+0x586>
    1886:	96 c0       	rjmp	.+300    	; 0x19b4 <_Z7forwardv+0x6b2>
    1888:	5a c0       	rjmp	.+180    	; 0x193e <_Z7forwardv+0x63c>
    188a:	2c 32       	cpi	r18, 0x2C	; 44
    188c:	09 f4       	brne	.+2      	; 0x1890 <_Z7forwardv+0x58e>
    188e:	87 c0       	rjmp	.+270    	; 0x199e <_Z7forwardv+0x69c>
    1890:	2d 32       	cpi	r18, 0x2D	; 45
    1892:	30 f4       	brcc	.+12     	; 0x18a0 <_Z7forwardv+0x59e>
    1894:	2b 30       	cpi	r18, 0x0B	; 11
    1896:	59 f0       	breq	.+22     	; 0x18ae <_Z7forwardv+0x5ac>
    1898:	2c 30       	cpi	r18, 0x0C	; 12
    189a:	09 f0       	breq	.+2      	; 0x189e <_Z7forwardv+0x59c>
    189c:	8b c0       	rjmp	.+278    	; 0x19b4 <_Z7forwardv+0x6b2>
    189e:	13 c0       	rjmp	.+38     	; 0x18c6 <_Z7forwardv+0x5c4>
    18a0:	2d 32       	cpi	r18, 0x2D	; 45
    18a2:	09 f4       	brne	.+2      	; 0x18a6 <_Z7forwardv+0x5a4>
    18a4:	70 c0       	rjmp	.+224    	; 0x1986 <_Z7forwardv+0x684>
    18a6:	2e 32       	cpi	r18, 0x2E	; 46
    18a8:	09 f0       	breq	.+2      	; 0x18ac <_Z7forwardv+0x5aa>
    18aa:	84 c0       	rjmp	.+264    	; 0x19b4 <_Z7forwardv+0x6b2>
    18ac:	60 c0       	rjmp	.+192    	; 0x196e <_Z7forwardv+0x66c>
    {
      case 11:
        OCR1A=ICR1-vAl;
    18ae:	20 91 86 00 	lds	r18, 0x0086
    18b2:	30 91 87 00 	lds	r19, 0x0087
    18b6:	f9 01       	movw	r30, r18
    18b8:	e8 1b       	sub	r30, r24
    18ba:	f9 0b       	sbc	r31, r25
    18bc:	f0 93 89 00 	sts	0x0089, r31
    18c0:	e0 93 88 00 	sts	0x0088, r30
    18c4:	77 c0       	rjmp	.+238    	; 0x19b4 <_Z7forwardv+0x6b2>
        break;
      case 12:
        OCR1B=ICR1-vAl;
    18c6:	20 91 86 00 	lds	r18, 0x0086
    18ca:	30 91 87 00 	lds	r19, 0x0087
    18ce:	a9 01       	movw	r20, r18
    18d0:	48 1b       	sub	r20, r24
    18d2:	59 0b       	sbc	r21, r25
    18d4:	50 93 8b 00 	sts	0x008B, r21
    18d8:	40 93 8a 00 	sts	0x008A, r20
    18dc:	6b c0       	rjmp	.+214    	; 0x19b4 <_Z7forwardv+0x6b2>
        break;
      case 5:
        OCR3A=ICR3-vAl;
    18de:	20 91 96 00 	lds	r18, 0x0096
    18e2:	30 91 97 00 	lds	r19, 0x0097
    18e6:	f9 01       	movw	r30, r18
    18e8:	e8 1b       	sub	r30, r24
    18ea:	f9 0b       	sbc	r31, r25
    18ec:	f0 93 99 00 	sts	0x0099, r31
    18f0:	e0 93 98 00 	sts	0x0098, r30
    18f4:	5f c0       	rjmp	.+190    	; 0x19b4 <_Z7forwardv+0x6b2>
        break;
      case 2:
        OCR3B=ICR3-vAl;
    18f6:	20 91 96 00 	lds	r18, 0x0096
    18fa:	30 91 97 00 	lds	r19, 0x0097
    18fe:	a9 01       	movw	r20, r18
    1900:	48 1b       	sub	r20, r24
    1902:	59 0b       	sbc	r21, r25
    1904:	50 93 9b 00 	sts	0x009B, r21
    1908:	40 93 9a 00 	sts	0x009A, r20
    190c:	53 c0       	rjmp	.+166    	; 0x19b4 <_Z7forwardv+0x6b2>
        break;
      case 3:
        OCR3C=ICR3-vAl;
    190e:	20 91 96 00 	lds	r18, 0x0096
    1912:	30 91 97 00 	lds	r19, 0x0097
    1916:	f9 01       	movw	r30, r18
    1918:	e8 1b       	sub	r30, r24
    191a:	f9 0b       	sbc	r31, r25
    191c:	f0 93 9d 00 	sts	0x009D, r31
    1920:	e0 93 9c 00 	sts	0x009C, r30
    1924:	47 c0       	rjmp	.+142    	; 0x19b4 <_Z7forwardv+0x6b2>
        break;
      case 6:
        OCR4A=ICR4-vAl;
    1926:	20 91 a6 00 	lds	r18, 0x00A6
    192a:	30 91 a7 00 	lds	r19, 0x00A7
    192e:	a9 01       	movw	r20, r18
    1930:	48 1b       	sub	r20, r24
    1932:	59 0b       	sbc	r21, r25
    1934:	50 93 a9 00 	sts	0x00A9, r21
    1938:	40 93 a8 00 	sts	0x00A8, r20
    193c:	3b c0       	rjmp	.+118    	; 0x19b4 <_Z7forwardv+0x6b2>
        break;
      case 7:
        OCR4B=ICR4-vAl;
    193e:	20 91 a6 00 	lds	r18, 0x00A6
    1942:	30 91 a7 00 	lds	r19, 0x00A7
    1946:	f9 01       	movw	r30, r18
    1948:	e8 1b       	sub	r30, r24
    194a:	f9 0b       	sbc	r31, r25
    194c:	f0 93 ab 00 	sts	0x00AB, r31
    1950:	e0 93 aa 00 	sts	0x00AA, r30
    1954:	2f c0       	rjmp	.+94     	; 0x19b4 <_Z7forwardv+0x6b2>
        break; 
      case 8:
        OCR4C=ICR4-vAl;
    1956:	20 91 a6 00 	lds	r18, 0x00A6
    195a:	30 91 a7 00 	lds	r19, 0x00A7
    195e:	a9 01       	movw	r20, r18
    1960:	48 1b       	sub	r20, r24
    1962:	59 0b       	sbc	r21, r25
    1964:	50 93 ad 00 	sts	0x00AD, r21
    1968:	40 93 ac 00 	sts	0x00AC, r20
    196c:	23 c0       	rjmp	.+70     	; 0x19b4 <_Z7forwardv+0x6b2>
        break;
      case 46:
        OCR5A=ICR5-vAl;
    196e:	20 91 26 01 	lds	r18, 0x0126
    1972:	30 91 27 01 	lds	r19, 0x0127
    1976:	f9 01       	movw	r30, r18
    1978:	e8 1b       	sub	r30, r24
    197a:	f9 0b       	sbc	r31, r25
    197c:	f0 93 29 01 	sts	0x0129, r31
    1980:	e0 93 28 01 	sts	0x0128, r30
    1984:	17 c0       	rjmp	.+46     	; 0x19b4 <_Z7forwardv+0x6b2>
        break;
      case 45:
        OCR5B=ICR5-vAl;
    1986:	20 91 26 01 	lds	r18, 0x0126
    198a:	30 91 27 01 	lds	r19, 0x0127
    198e:	a9 01       	movw	r20, r18
    1990:	48 1b       	sub	r20, r24
    1992:	59 0b       	sbc	r21, r25
    1994:	50 93 2b 01 	sts	0x012B, r21
    1998:	40 93 2a 01 	sts	0x012A, r20
    199c:	0b c0       	rjmp	.+22     	; 0x19b4 <_Z7forwardv+0x6b2>
        break;
      case 44:
        OCR5C=ICR5-vAl;
    199e:	20 91 26 01 	lds	r18, 0x0126
    19a2:	30 91 27 01 	lds	r19, 0x0127
    19a6:	f9 01       	movw	r30, r18
    19a8:	e8 1b       	sub	r30, r24
    19aa:	f9 0b       	sbc	r31, r25
    19ac:	f0 93 2d 01 	sts	0x012D, r31
    19b0:	e0 93 2c 01 	sts	0x012C, r30
     }
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,200,iCr/39,iCr/8.3),iCr/40,iCr/8);
    19b4:	a0 90 e2 02 	lds	r10, 0x02E2
    19b8:	b0 90 e3 02 	lds	r11, 0x02E3
    19bc:	c5 01       	movw	r24, r10
    19be:	67 e2       	ldi	r22, 0x27	; 39
    19c0:	70 e0       	ldi	r23, 0x00	; 0
    19c2:	0e 94 60 1b 	call	0x36c0	; 0x36c0 <__divmodhi4>
    19c6:	6b 01       	movw	r12, r22
    19c8:	ee 24       	eor	r14, r14
    19ca:	d7 fc       	sbrc	r13, 7
    19cc:	e0 94       	com	r14
    19ce:	fe 2c       	mov	r15, r14
    19d0:	b5 01       	movw	r22, r10
    19d2:	88 27       	eor	r24, r24
    19d4:	77 fd       	sbrc	r23, 7
    19d6:	80 95       	com	r24
    19d8:	98 2f       	mov	r25, r24
    19da:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <__floatsisf>
    19de:	2d ec       	ldi	r18, 0xCD	; 205
    19e0:	3c ec       	ldi	r19, 0xCC	; 204
    19e2:	44 e0       	ldi	r20, 0x04	; 4
    19e4:	51 e4       	ldi	r21, 0x41	; 65
    19e6:	0e 94 b7 19 	call	0x336e	; 0x336e <__divsf3>
    19ea:	0e 94 1f 1a 	call	0x343e	; 0x343e <__fixsfsi>
        break; 
    }   
  }
  long mapAngle(long x, long in_min, long in_max, long out_min, long out_max)
  {
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    19ee:	6c 19       	sub	r22, r12
    19f0:	7d 09       	sbc	r23, r13
    19f2:	8e 09       	sbc	r24, r14
    19f4:	9f 09       	sbc	r25, r15
	swerve3.write(angle+correction[2]);
    19f6:	40 91 d0 02 	lds	r20, 0x02D0
    19fa:	50 91 d1 02 	lds	r21, 0x02D1
    19fe:	20 91 cc 02 	lds	r18, 0x02CC
    1a02:	30 91 cd 02 	lds	r19, 0x02CD
    1a06:	24 0f       	add	r18, r20
    1a08:	35 1f       	adc	r19, r21
     }
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,200,iCr/39,iCr/8.3),iCr/40,iCr/8);
    1a0a:	44 27       	eor	r20, r20
    1a0c:	37 fd       	sbrc	r19, 7
    1a0e:	40 95       	com	r20
    1a10:	54 2f       	mov	r21, r20
        break; 
    }   
  }
  long mapAngle(long x, long in_min, long in_max, long out_min, long out_max)
  {
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    1a12:	0e 94 41 1b 	call	0x3682	; 0x3682 <__mulsi3>
    1a16:	28 ec       	ldi	r18, 0xC8	; 200
    1a18:	30 e0       	ldi	r19, 0x00	; 0
    1a1a:	40 e0       	ldi	r20, 0x00	; 0
    1a1c:	50 e0       	ldi	r21, 0x00	; 0
    1a1e:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <__divmodsi4>
    1a22:	89 01       	movw	r16, r18
    1a24:	9a 01       	movw	r18, r20
    1a26:	0c 0d       	add	r16, r12
    1a28:	1d 1d       	adc	r17, r13
    1a2a:	2e 1d       	adc	r18, r14
    1a2c:	3f 1d       	adc	r19, r15
     }
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,200,iCr/39,iCr/8.3),iCr/40,iCr/8);
    1a2e:	c5 01       	movw	r24, r10
    1a30:	bb 20       	and	r11, r11
    1a32:	0c f4       	brge	.+2      	; 0x1a36 <_Z7forwardv+0x734>
    1a34:	07 96       	adiw	r24, 0x07	; 7
    1a36:	95 95       	asr	r25
    1a38:	87 95       	ror	r24
    1a3a:	95 95       	asr	r25
    1a3c:	87 95       	ror	r24
    1a3e:	95 95       	asr	r25
    1a40:	87 95       	ror	r24
    1a42:	aa 27       	eor	r26, r26
    1a44:	97 fd       	sbrc	r25, 7
    1a46:	a0 95       	com	r26
    1a48:	ba 2f       	mov	r27, r26
  {
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  }
  long constraint(long nUm,long lOwer,long uPper)
  {
    if(nUm>uPper){
    1a4a:	80 17       	cp	r24, r16
    1a4c:	91 07       	cpc	r25, r17
    1a4e:	a2 07       	cpc	r26, r18
    1a50:	b3 07       	cpc	r27, r19
    1a52:	a4 f0       	brlt	.+40     	; 0x1a7c <_Z7forwardv+0x77a>
     }
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,200,iCr/39,iCr/8.3),iCr/40,iCr/8);
    1a54:	c5 01       	movw	r24, r10
    1a56:	68 e2       	ldi	r22, 0x28	; 40
    1a58:	70 e0       	ldi	r23, 0x00	; 0
    1a5a:	0e 94 60 1b 	call	0x36c0	; 0x36c0 <__divmodhi4>
    1a5e:	cb 01       	movw	r24, r22
    1a60:	ac 01       	movw	r20, r24
    1a62:	66 27       	eor	r22, r22
    1a64:	57 fd       	sbrc	r21, 7
    1a66:	60 95       	com	r22
    1a68:	76 2f       	mov	r23, r22
    1a6a:	d9 01       	movw	r26, r18
    1a6c:	c8 01       	movw	r24, r16
    1a6e:	04 17       	cp	r16, r20
    1a70:	15 07       	cpc	r17, r21
    1a72:	26 07       	cpc	r18, r22
    1a74:	37 07       	cpc	r19, r23
    1a76:	14 f4       	brge	.+4      	; 0x1a7c <_Z7forwardv+0x77a>
    1a78:	db 01       	movw	r26, r22
    1a7a:	ca 01       	movw	r24, r20
    switch(pIn)
    1a7c:	20 91 e4 02 	lds	r18, 0x02E4
    1a80:	28 30       	cpi	r18, 0x08	; 8
    1a82:	09 f4       	brne	.+2      	; 0x1a86 <_Z7forwardv+0x784>
    1a84:	7a c0       	rjmp	.+244    	; 0x1b7a <_Z7forwardv+0x878>
    1a86:	29 30       	cpi	r18, 0x09	; 9
    1a88:	90 f4       	brcc	.+36     	; 0x1aae <_Z7forwardv+0x7ac>
    1a8a:	25 30       	cpi	r18, 0x05	; 5
    1a8c:	d1 f1       	breq	.+116    	; 0x1b02 <_Z7forwardv+0x800>
    1a8e:	26 30       	cpi	r18, 0x06	; 6
    1a90:	38 f4       	brcc	.+14     	; 0x1aa0 <_Z7forwardv+0x79e>
    1a92:	22 30       	cpi	r18, 0x02	; 2
    1a94:	09 f4       	brne	.+2      	; 0x1a98 <_Z7forwardv+0x796>
    1a96:	41 c0       	rjmp	.+130    	; 0x1b1a <_Z7forwardv+0x818>
    1a98:	23 30       	cpi	r18, 0x03	; 3
    1a9a:	09 f0       	breq	.+2      	; 0x1a9e <_Z7forwardv+0x79c>
    1a9c:	9d c0       	rjmp	.+314    	; 0x1bd8 <_Z7forwardv+0x8d6>
    1a9e:	49 c0       	rjmp	.+146    	; 0x1b32 <_Z7forwardv+0x830>
    1aa0:	26 30       	cpi	r18, 0x06	; 6
    1aa2:	09 f4       	brne	.+2      	; 0x1aa6 <_Z7forwardv+0x7a4>
    1aa4:	52 c0       	rjmp	.+164    	; 0x1b4a <_Z7forwardv+0x848>
    1aa6:	27 30       	cpi	r18, 0x07	; 7
    1aa8:	09 f0       	breq	.+2      	; 0x1aac <_Z7forwardv+0x7aa>
    1aaa:	96 c0       	rjmp	.+300    	; 0x1bd8 <_Z7forwardv+0x8d6>
    1aac:	5a c0       	rjmp	.+180    	; 0x1b62 <_Z7forwardv+0x860>
    1aae:	2c 32       	cpi	r18, 0x2C	; 44
    1ab0:	09 f4       	brne	.+2      	; 0x1ab4 <_Z7forwardv+0x7b2>
    1ab2:	87 c0       	rjmp	.+270    	; 0x1bc2 <_Z7forwardv+0x8c0>
    1ab4:	2d 32       	cpi	r18, 0x2D	; 45
    1ab6:	30 f4       	brcc	.+12     	; 0x1ac4 <_Z7forwardv+0x7c2>
    1ab8:	2b 30       	cpi	r18, 0x0B	; 11
    1aba:	59 f0       	breq	.+22     	; 0x1ad2 <_Z7forwardv+0x7d0>
    1abc:	2c 30       	cpi	r18, 0x0C	; 12
    1abe:	09 f0       	breq	.+2      	; 0x1ac2 <_Z7forwardv+0x7c0>
    1ac0:	8b c0       	rjmp	.+278    	; 0x1bd8 <_Z7forwardv+0x8d6>
    1ac2:	13 c0       	rjmp	.+38     	; 0x1aea <_Z7forwardv+0x7e8>
    1ac4:	2d 32       	cpi	r18, 0x2D	; 45
    1ac6:	09 f4       	brne	.+2      	; 0x1aca <_Z7forwardv+0x7c8>
    1ac8:	70 c0       	rjmp	.+224    	; 0x1baa <_Z7forwardv+0x8a8>
    1aca:	2e 32       	cpi	r18, 0x2E	; 46
    1acc:	09 f0       	breq	.+2      	; 0x1ad0 <_Z7forwardv+0x7ce>
    1ace:	84 c0       	rjmp	.+264    	; 0x1bd8 <_Z7forwardv+0x8d6>
    1ad0:	60 c0       	rjmp	.+192    	; 0x1b92 <_Z7forwardv+0x890>
    {
      case 11:
        OCR1A=ICR1-vAl;
    1ad2:	20 91 86 00 	lds	r18, 0x0086
    1ad6:	30 91 87 00 	lds	r19, 0x0087
    1ada:	f9 01       	movw	r30, r18
    1adc:	e8 1b       	sub	r30, r24
    1ade:	f9 0b       	sbc	r31, r25
    1ae0:	f0 93 89 00 	sts	0x0089, r31
    1ae4:	e0 93 88 00 	sts	0x0088, r30
    1ae8:	77 c0       	rjmp	.+238    	; 0x1bd8 <_Z7forwardv+0x8d6>
        break;
      case 12:
        OCR1B=ICR1-vAl;
    1aea:	20 91 86 00 	lds	r18, 0x0086
    1aee:	30 91 87 00 	lds	r19, 0x0087
    1af2:	a9 01       	movw	r20, r18
    1af4:	48 1b       	sub	r20, r24
    1af6:	59 0b       	sbc	r21, r25
    1af8:	50 93 8b 00 	sts	0x008B, r21
    1afc:	40 93 8a 00 	sts	0x008A, r20
    1b00:	6b c0       	rjmp	.+214    	; 0x1bd8 <_Z7forwardv+0x8d6>
        break;
      case 5:
        OCR3A=ICR3-vAl;
    1b02:	20 91 96 00 	lds	r18, 0x0096
    1b06:	30 91 97 00 	lds	r19, 0x0097
    1b0a:	f9 01       	movw	r30, r18
    1b0c:	e8 1b       	sub	r30, r24
    1b0e:	f9 0b       	sbc	r31, r25
    1b10:	f0 93 99 00 	sts	0x0099, r31
    1b14:	e0 93 98 00 	sts	0x0098, r30
    1b18:	5f c0       	rjmp	.+190    	; 0x1bd8 <_Z7forwardv+0x8d6>
        break;
      case 2:
        OCR3B=ICR3-vAl;
    1b1a:	20 91 96 00 	lds	r18, 0x0096
    1b1e:	30 91 97 00 	lds	r19, 0x0097
    1b22:	a9 01       	movw	r20, r18
    1b24:	48 1b       	sub	r20, r24
    1b26:	59 0b       	sbc	r21, r25
    1b28:	50 93 9b 00 	sts	0x009B, r21
    1b2c:	40 93 9a 00 	sts	0x009A, r20
    1b30:	53 c0       	rjmp	.+166    	; 0x1bd8 <_Z7forwardv+0x8d6>
        break;
      case 3:
        OCR3C=ICR3-vAl;
    1b32:	20 91 96 00 	lds	r18, 0x0096
    1b36:	30 91 97 00 	lds	r19, 0x0097
    1b3a:	f9 01       	movw	r30, r18
    1b3c:	e8 1b       	sub	r30, r24
    1b3e:	f9 0b       	sbc	r31, r25
    1b40:	f0 93 9d 00 	sts	0x009D, r31
    1b44:	e0 93 9c 00 	sts	0x009C, r30
    1b48:	47 c0       	rjmp	.+142    	; 0x1bd8 <_Z7forwardv+0x8d6>
        break;
      case 6:
        OCR4A=ICR4-vAl;
    1b4a:	20 91 a6 00 	lds	r18, 0x00A6
    1b4e:	30 91 a7 00 	lds	r19, 0x00A7
    1b52:	a9 01       	movw	r20, r18
    1b54:	48 1b       	sub	r20, r24
    1b56:	59 0b       	sbc	r21, r25
    1b58:	50 93 a9 00 	sts	0x00A9, r21
    1b5c:	40 93 a8 00 	sts	0x00A8, r20
    1b60:	3b c0       	rjmp	.+118    	; 0x1bd8 <_Z7forwardv+0x8d6>
        break;
      case 7:
        OCR4B=ICR4-vAl;
    1b62:	20 91 a6 00 	lds	r18, 0x00A6
    1b66:	30 91 a7 00 	lds	r19, 0x00A7
    1b6a:	f9 01       	movw	r30, r18
    1b6c:	e8 1b       	sub	r30, r24
    1b6e:	f9 0b       	sbc	r31, r25
    1b70:	f0 93 ab 00 	sts	0x00AB, r31
    1b74:	e0 93 aa 00 	sts	0x00AA, r30
    1b78:	2f c0       	rjmp	.+94     	; 0x1bd8 <_Z7forwardv+0x8d6>
        break; 
      case 8:
        OCR4C=ICR4-vAl;
    1b7a:	20 91 a6 00 	lds	r18, 0x00A6
    1b7e:	30 91 a7 00 	lds	r19, 0x00A7
    1b82:	a9 01       	movw	r20, r18
    1b84:	48 1b       	sub	r20, r24
    1b86:	59 0b       	sbc	r21, r25
    1b88:	50 93 ad 00 	sts	0x00AD, r21
    1b8c:	40 93 ac 00 	sts	0x00AC, r20
    1b90:	23 c0       	rjmp	.+70     	; 0x1bd8 <_Z7forwardv+0x8d6>
        break;
      case 46:
        OCR5A=ICR5-vAl;
    1b92:	20 91 26 01 	lds	r18, 0x0126
    1b96:	30 91 27 01 	lds	r19, 0x0127
    1b9a:	f9 01       	movw	r30, r18
    1b9c:	e8 1b       	sub	r30, r24
    1b9e:	f9 0b       	sbc	r31, r25
    1ba0:	f0 93 29 01 	sts	0x0129, r31
    1ba4:	e0 93 28 01 	sts	0x0128, r30
    1ba8:	17 c0       	rjmp	.+46     	; 0x1bd8 <_Z7forwardv+0x8d6>
        break;
      case 45:
        OCR5B=ICR5-vAl;
    1baa:	20 91 26 01 	lds	r18, 0x0126
    1bae:	30 91 27 01 	lds	r19, 0x0127
    1bb2:	a9 01       	movw	r20, r18
    1bb4:	48 1b       	sub	r20, r24
    1bb6:	59 0b       	sbc	r21, r25
    1bb8:	50 93 2b 01 	sts	0x012B, r21
    1bbc:	40 93 2a 01 	sts	0x012A, r20
    1bc0:	0b c0       	rjmp	.+22     	; 0x1bd8 <_Z7forwardv+0x8d6>
        break;
      case 44:
        OCR5C=ICR5-vAl;
    1bc2:	20 91 26 01 	lds	r18, 0x0126
    1bc6:	30 91 27 01 	lds	r19, 0x0127
    1bca:	f9 01       	movw	r30, r18
    1bcc:	e8 1b       	sub	r30, r24
    1bce:	f9 0b       	sbc	r31, r25
    1bd0:	f0 93 2d 01 	sts	0x012D, r31
    1bd4:	e0 93 2c 01 	sts	0x012C, r30
     }
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,200,iCr/39,iCr/8.3),iCr/40,iCr/8);
    1bd8:	a0 90 e5 02 	lds	r10, 0x02E5
    1bdc:	b0 90 e6 02 	lds	r11, 0x02E6
    1be0:	c5 01       	movw	r24, r10
    1be2:	67 e2       	ldi	r22, 0x27	; 39
    1be4:	70 e0       	ldi	r23, 0x00	; 0
    1be6:	0e 94 60 1b 	call	0x36c0	; 0x36c0 <__divmodhi4>
    1bea:	6b 01       	movw	r12, r22
    1bec:	ee 24       	eor	r14, r14
    1bee:	d7 fc       	sbrc	r13, 7
    1bf0:	e0 94       	com	r14
    1bf2:	fe 2c       	mov	r15, r14
    1bf4:	b5 01       	movw	r22, r10
    1bf6:	88 27       	eor	r24, r24
    1bf8:	77 fd       	sbrc	r23, 7
    1bfa:	80 95       	com	r24
    1bfc:	98 2f       	mov	r25, r24
    1bfe:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <__floatsisf>
    1c02:	2d ec       	ldi	r18, 0xCD	; 205
    1c04:	3c ec       	ldi	r19, 0xCC	; 204
    1c06:	44 e0       	ldi	r20, 0x04	; 4
    1c08:	51 e4       	ldi	r21, 0x41	; 65
    1c0a:	0e 94 b7 19 	call	0x336e	; 0x336e <__divsf3>
    1c0e:	0e 94 1f 1a 	call	0x343e	; 0x343e <__fixsfsi>
        break; 
    }   
  }
  long mapAngle(long x, long in_min, long in_max, long out_min, long out_max)
  {
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    1c12:	6c 19       	sub	r22, r12
    1c14:	7d 09       	sbc	r23, r13
    1c16:	8e 09       	sbc	r24, r14
    1c18:	9f 09       	sbc	r25, r15
	swerve4.write(angle+correction[3]);
    1c1a:	40 91 d0 02 	lds	r20, 0x02D0
    1c1e:	50 91 d1 02 	lds	r21, 0x02D1
    1c22:	20 91 ce 02 	lds	r18, 0x02CE
    1c26:	30 91 cf 02 	lds	r19, 0x02CF
    1c2a:	24 0f       	add	r18, r20
    1c2c:	35 1f       	adc	r19, r21
     }
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,200,iCr/39,iCr/8.3),iCr/40,iCr/8);
    1c2e:	44 27       	eor	r20, r20
    1c30:	37 fd       	sbrc	r19, 7
    1c32:	40 95       	com	r20
    1c34:	54 2f       	mov	r21, r20
        break; 
    }   
  }
  long mapAngle(long x, long in_min, long in_max, long out_min, long out_max)
  {
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    1c36:	0e 94 41 1b 	call	0x3682	; 0x3682 <__mulsi3>
    1c3a:	28 ec       	ldi	r18, 0xC8	; 200
    1c3c:	30 e0       	ldi	r19, 0x00	; 0
    1c3e:	40 e0       	ldi	r20, 0x00	; 0
    1c40:	50 e0       	ldi	r21, 0x00	; 0
    1c42:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <__divmodsi4>
    1c46:	89 01       	movw	r16, r18
    1c48:	9a 01       	movw	r18, r20
    1c4a:	0c 0d       	add	r16, r12
    1c4c:	1d 1d       	adc	r17, r13
    1c4e:	2e 1d       	adc	r18, r14
    1c50:	3f 1d       	adc	r19, r15
     }
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,200,iCr/39,iCr/8.3),iCr/40,iCr/8);
    1c52:	c5 01       	movw	r24, r10
    1c54:	bb 20       	and	r11, r11
    1c56:	0c f4       	brge	.+2      	; 0x1c5a <_Z7forwardv+0x958>
    1c58:	07 96       	adiw	r24, 0x07	; 7
    1c5a:	95 95       	asr	r25
    1c5c:	87 95       	ror	r24
    1c5e:	95 95       	asr	r25
    1c60:	87 95       	ror	r24
    1c62:	95 95       	asr	r25
    1c64:	87 95       	ror	r24
    1c66:	aa 27       	eor	r26, r26
    1c68:	97 fd       	sbrc	r25, 7
    1c6a:	a0 95       	com	r26
    1c6c:	ba 2f       	mov	r27, r26
  {
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  }
  long constraint(long nUm,long lOwer,long uPper)
  {
    if(nUm>uPper){
    1c6e:	80 17       	cp	r24, r16
    1c70:	91 07       	cpc	r25, r17
    1c72:	a2 07       	cpc	r26, r18
    1c74:	b3 07       	cpc	r27, r19
    1c76:	a4 f0       	brlt	.+40     	; 0x1ca0 <_Z7forwardv+0x99e>
     }
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,200,iCr/39,iCr/8.3),iCr/40,iCr/8);
    1c78:	c5 01       	movw	r24, r10
    1c7a:	68 e2       	ldi	r22, 0x28	; 40
    1c7c:	70 e0       	ldi	r23, 0x00	; 0
    1c7e:	0e 94 60 1b 	call	0x36c0	; 0x36c0 <__divmodhi4>
    1c82:	cb 01       	movw	r24, r22
    1c84:	ac 01       	movw	r20, r24
    1c86:	66 27       	eor	r22, r22
    1c88:	57 fd       	sbrc	r21, 7
    1c8a:	60 95       	com	r22
    1c8c:	76 2f       	mov	r23, r22
    1c8e:	d9 01       	movw	r26, r18
    1c90:	c8 01       	movw	r24, r16
    1c92:	04 17       	cp	r16, r20
    1c94:	15 07       	cpc	r17, r21
    1c96:	26 07       	cpc	r18, r22
    1c98:	37 07       	cpc	r19, r23
    1c9a:	14 f4       	brge	.+4      	; 0x1ca0 <_Z7forwardv+0x99e>
    1c9c:	db 01       	movw	r26, r22
    1c9e:	ca 01       	movw	r24, r20
    switch(pIn)
    1ca0:	20 91 e7 02 	lds	r18, 0x02E7
    1ca4:	28 30       	cpi	r18, 0x08	; 8
    1ca6:	09 f4       	brne	.+2      	; 0x1caa <_Z7forwardv+0x9a8>
    1ca8:	7a c0       	rjmp	.+244    	; 0x1d9e <_Z7forwardv+0xa9c>
    1caa:	29 30       	cpi	r18, 0x09	; 9
    1cac:	90 f4       	brcc	.+36     	; 0x1cd2 <_Z7forwardv+0x9d0>
    1cae:	25 30       	cpi	r18, 0x05	; 5
    1cb0:	d1 f1       	breq	.+116    	; 0x1d26 <_Z7forwardv+0xa24>
    1cb2:	26 30       	cpi	r18, 0x06	; 6
    1cb4:	38 f4       	brcc	.+14     	; 0x1cc4 <_Z7forwardv+0x9c2>
    1cb6:	22 30       	cpi	r18, 0x02	; 2
    1cb8:	09 f4       	brne	.+2      	; 0x1cbc <_Z7forwardv+0x9ba>
    1cba:	41 c0       	rjmp	.+130    	; 0x1d3e <_Z7forwardv+0xa3c>
    1cbc:	23 30       	cpi	r18, 0x03	; 3
    1cbe:	09 f0       	breq	.+2      	; 0x1cc2 <_Z7forwardv+0x9c0>
    1cc0:	9d c0       	rjmp	.+314    	; 0x1dfc <_Z7forwardv+0xafa>
    1cc2:	49 c0       	rjmp	.+146    	; 0x1d56 <_Z7forwardv+0xa54>
    1cc4:	26 30       	cpi	r18, 0x06	; 6
    1cc6:	09 f4       	brne	.+2      	; 0x1cca <_Z7forwardv+0x9c8>
    1cc8:	52 c0       	rjmp	.+164    	; 0x1d6e <_Z7forwardv+0xa6c>
    1cca:	27 30       	cpi	r18, 0x07	; 7
    1ccc:	09 f0       	breq	.+2      	; 0x1cd0 <_Z7forwardv+0x9ce>
    1cce:	96 c0       	rjmp	.+300    	; 0x1dfc <_Z7forwardv+0xafa>
    1cd0:	5a c0       	rjmp	.+180    	; 0x1d86 <_Z7forwardv+0xa84>
    1cd2:	2c 32       	cpi	r18, 0x2C	; 44
    1cd4:	09 f4       	brne	.+2      	; 0x1cd8 <_Z7forwardv+0x9d6>
    1cd6:	87 c0       	rjmp	.+270    	; 0x1de6 <_Z7forwardv+0xae4>
    1cd8:	2d 32       	cpi	r18, 0x2D	; 45
    1cda:	30 f4       	brcc	.+12     	; 0x1ce8 <_Z7forwardv+0x9e6>
    1cdc:	2b 30       	cpi	r18, 0x0B	; 11
    1cde:	59 f0       	breq	.+22     	; 0x1cf6 <_Z7forwardv+0x9f4>
    1ce0:	2c 30       	cpi	r18, 0x0C	; 12
    1ce2:	09 f0       	breq	.+2      	; 0x1ce6 <_Z7forwardv+0x9e4>
    1ce4:	8b c0       	rjmp	.+278    	; 0x1dfc <_Z7forwardv+0xafa>
    1ce6:	13 c0       	rjmp	.+38     	; 0x1d0e <_Z7forwardv+0xa0c>
    1ce8:	2d 32       	cpi	r18, 0x2D	; 45
    1cea:	09 f4       	brne	.+2      	; 0x1cee <_Z7forwardv+0x9ec>
    1cec:	70 c0       	rjmp	.+224    	; 0x1dce <_Z7forwardv+0xacc>
    1cee:	2e 32       	cpi	r18, 0x2E	; 46
    1cf0:	09 f0       	breq	.+2      	; 0x1cf4 <_Z7forwardv+0x9f2>
    1cf2:	84 c0       	rjmp	.+264    	; 0x1dfc <_Z7forwardv+0xafa>
    1cf4:	60 c0       	rjmp	.+192    	; 0x1db6 <_Z7forwardv+0xab4>
    {
      case 11:
        OCR1A=ICR1-vAl;
    1cf6:	20 91 86 00 	lds	r18, 0x0086
    1cfa:	30 91 87 00 	lds	r19, 0x0087
    1cfe:	f9 01       	movw	r30, r18
    1d00:	e8 1b       	sub	r30, r24
    1d02:	f9 0b       	sbc	r31, r25
    1d04:	f0 93 89 00 	sts	0x0089, r31
    1d08:	e0 93 88 00 	sts	0x0088, r30
    1d0c:	77 c0       	rjmp	.+238    	; 0x1dfc <_Z7forwardv+0xafa>
        break;
      case 12:
        OCR1B=ICR1-vAl;
    1d0e:	20 91 86 00 	lds	r18, 0x0086
    1d12:	30 91 87 00 	lds	r19, 0x0087
    1d16:	a9 01       	movw	r20, r18
    1d18:	48 1b       	sub	r20, r24
    1d1a:	59 0b       	sbc	r21, r25
    1d1c:	50 93 8b 00 	sts	0x008B, r21
    1d20:	40 93 8a 00 	sts	0x008A, r20
    1d24:	6b c0       	rjmp	.+214    	; 0x1dfc <_Z7forwardv+0xafa>
        break;
      case 5:
        OCR3A=ICR3-vAl;
    1d26:	20 91 96 00 	lds	r18, 0x0096
    1d2a:	30 91 97 00 	lds	r19, 0x0097
    1d2e:	f9 01       	movw	r30, r18
    1d30:	e8 1b       	sub	r30, r24
    1d32:	f9 0b       	sbc	r31, r25
    1d34:	f0 93 99 00 	sts	0x0099, r31
    1d38:	e0 93 98 00 	sts	0x0098, r30
    1d3c:	5f c0       	rjmp	.+190    	; 0x1dfc <_Z7forwardv+0xafa>
        break;
      case 2:
        OCR3B=ICR3-vAl;
    1d3e:	20 91 96 00 	lds	r18, 0x0096
    1d42:	30 91 97 00 	lds	r19, 0x0097
    1d46:	a9 01       	movw	r20, r18
    1d48:	48 1b       	sub	r20, r24
    1d4a:	59 0b       	sbc	r21, r25
    1d4c:	50 93 9b 00 	sts	0x009B, r21
    1d50:	40 93 9a 00 	sts	0x009A, r20
    1d54:	53 c0       	rjmp	.+166    	; 0x1dfc <_Z7forwardv+0xafa>
        break;
      case 3:
        OCR3C=ICR3-vAl;
    1d56:	20 91 96 00 	lds	r18, 0x0096
    1d5a:	30 91 97 00 	lds	r19, 0x0097
    1d5e:	f9 01       	movw	r30, r18
    1d60:	e8 1b       	sub	r30, r24
    1d62:	f9 0b       	sbc	r31, r25
    1d64:	f0 93 9d 00 	sts	0x009D, r31
    1d68:	e0 93 9c 00 	sts	0x009C, r30
    1d6c:	47 c0       	rjmp	.+142    	; 0x1dfc <_Z7forwardv+0xafa>
        break;
      case 6:
        OCR4A=ICR4-vAl;
    1d6e:	20 91 a6 00 	lds	r18, 0x00A6
    1d72:	30 91 a7 00 	lds	r19, 0x00A7
    1d76:	a9 01       	movw	r20, r18
    1d78:	48 1b       	sub	r20, r24
    1d7a:	59 0b       	sbc	r21, r25
    1d7c:	50 93 a9 00 	sts	0x00A9, r21
    1d80:	40 93 a8 00 	sts	0x00A8, r20
    1d84:	3b c0       	rjmp	.+118    	; 0x1dfc <_Z7forwardv+0xafa>
        break;
      case 7:
        OCR4B=ICR4-vAl;
    1d86:	20 91 a6 00 	lds	r18, 0x00A6
    1d8a:	30 91 a7 00 	lds	r19, 0x00A7
    1d8e:	f9 01       	movw	r30, r18
    1d90:	e8 1b       	sub	r30, r24
    1d92:	f9 0b       	sbc	r31, r25
    1d94:	f0 93 ab 00 	sts	0x00AB, r31
    1d98:	e0 93 aa 00 	sts	0x00AA, r30
    1d9c:	2f c0       	rjmp	.+94     	; 0x1dfc <_Z7forwardv+0xafa>
        break; 
      case 8:
        OCR4C=ICR4-vAl;
    1d9e:	20 91 a6 00 	lds	r18, 0x00A6
    1da2:	30 91 a7 00 	lds	r19, 0x00A7
    1da6:	a9 01       	movw	r20, r18
    1da8:	48 1b       	sub	r20, r24
    1daa:	59 0b       	sbc	r21, r25
    1dac:	50 93 ad 00 	sts	0x00AD, r21
    1db0:	40 93 ac 00 	sts	0x00AC, r20
    1db4:	23 c0       	rjmp	.+70     	; 0x1dfc <_Z7forwardv+0xafa>
        break;
      case 46:
        OCR5A=ICR5-vAl;
    1db6:	20 91 26 01 	lds	r18, 0x0126
    1dba:	30 91 27 01 	lds	r19, 0x0127
    1dbe:	f9 01       	movw	r30, r18
    1dc0:	e8 1b       	sub	r30, r24
    1dc2:	f9 0b       	sbc	r31, r25
    1dc4:	f0 93 29 01 	sts	0x0129, r31
    1dc8:	e0 93 28 01 	sts	0x0128, r30
    1dcc:	17 c0       	rjmp	.+46     	; 0x1dfc <_Z7forwardv+0xafa>
        break;
      case 45:
        OCR5B=ICR5-vAl;
    1dce:	20 91 26 01 	lds	r18, 0x0126
    1dd2:	30 91 27 01 	lds	r19, 0x0127
    1dd6:	a9 01       	movw	r20, r18
    1dd8:	48 1b       	sub	r20, r24
    1dda:	59 0b       	sbc	r21, r25
    1ddc:	50 93 2b 01 	sts	0x012B, r21
    1de0:	40 93 2a 01 	sts	0x012A, r20
    1de4:	0b c0       	rjmp	.+22     	; 0x1dfc <_Z7forwardv+0xafa>
        break;
      case 44:
        OCR5C=ICR5-vAl;
    1de6:	20 91 26 01 	lds	r18, 0x0126
    1dea:	30 91 27 01 	lds	r19, 0x0127
    1dee:	f9 01       	movw	r30, r18
    1df0:	e8 1b       	sub	r30, r24
    1df2:	f9 0b       	sbc	r31, r25
    1df4:	f0 93 2d 01 	sts	0x012D, r31
    1df8:	e0 93 2c 01 	sts	0x012C, r30
		digitalWrite(dIrpin1,dIrection1);
		digitalWrite(dIrpin2,dIrection2);
	}

	void direction(uint8_t dIrection, uint8_t dIrection1, uint8_t dIrection2, uint8_t dIrection3){
		pinMode(dIrpin,OUTPUT);     //sets direction pin as output
    1dfc:	80 91 e8 02 	lds	r24, 0x02E8
    1e00:	61 e0       	ldi	r22, 0x01	; 1
    1e02:	0e 94 a6 00 	call	0x14c	; 0x14c <_Z7pinModehh>
	    pinMode(dIrpin1,OUTPUT);
    1e06:	80 91 ed 02 	lds	r24, 0x02ED
    1e0a:	61 e0       	ldi	r22, 0x01	; 1
    1e0c:	0e 94 a6 00 	call	0x14c	; 0x14c <_Z7pinModehh>
	    pinMode(dIrpin2,OUTPUT);
    1e10:	80 91 f1 02 	lds	r24, 0x02F1
    1e14:	61 e0       	ldi	r22, 0x01	; 1
    1e16:	0e 94 a6 00 	call	0x14c	; 0x14c <_Z7pinModehh>
	    pinMode(dIrpin3,OUTPUT);
    1e1a:	80 91 f5 02 	lds	r24, 0x02F5
    1e1e:	61 e0       	ldi	r22, 0x01	; 1
    1e20:	0e 94 a6 00 	call	0x14c	; 0x14c <_Z7pinModehh>
		digitalWrite(dIrpin,dIrection);
    1e24:	80 91 e8 02 	lds	r24, 0x02E8
    1e28:	61 e0       	ldi	r22, 0x01	; 1
    1e2a:	0e 94 49 02 	call	0x492	; 0x492 <_Z12digitalWritehh>
		digitalWrite(dIrpin1,dIrection1);
    1e2e:	80 91 ed 02 	lds	r24, 0x02ED
    1e32:	61 e0       	ldi	r22, 0x01	; 1
    1e34:	0e 94 49 02 	call	0x492	; 0x492 <_Z12digitalWritehh>
		digitalWrite(dIrpin2,dIrection2);
    1e38:	80 91 f1 02 	lds	r24, 0x02F1
    1e3c:	61 e0       	ldi	r22, 0x01	; 1
    1e3e:	0e 94 49 02 	call	0x492	; 0x492 <_Z12digitalWritehh>
		digitalWrite(dIrpin3,dIrection3);
    1e42:	80 91 f5 02 	lds	r24, 0x02F5
    1e46:	61 e0       	ldi	r22, 0x01	; 1
    1e48:	0e 94 49 02 	call	0x492	; 0x492 <_Z12digitalWritehh>
	}	
	
	//FOUR MOTORS
	void drive(uint8_t pWm, uint8_t pWm1, uint8_t pWm2, uint8_t pWm3){
		
		if(pWm>lAstpwm||pWm1>lAstpwm1||pWm2>lAstpwm2||pWm3>lAstpwm3){		//accelerate
    1e4c:	80 91 ea 02 	lds	r24, 0x02EA
    1e50:	88 3c       	cpi	r24, 0xC8	; 200
    1e52:	08 f4       	brcc	.+2      	; 0x1e56 <_Z7forwardv+0xb54>
    1e54:	9f c0       	rjmp	.+318    	; 0x1f94 <_Z7forwardv+0xc92>
    1e56:	90 91 ef 02 	lds	r25, 0x02EF
    1e5a:	98 3c       	cpi	r25, 0xC8	; 200
    1e5c:	08 f4       	brcc	.+2      	; 0x1e60 <_Z7forwardv+0xb5e>
    1e5e:	9a c0       	rjmp	.+308    	; 0x1f94 <_Z7forwardv+0xc92>
    1e60:	20 91 f3 02 	lds	r18, 0x02F3
    1e64:	28 3c       	cpi	r18, 0xC8	; 200
    1e66:	08 f4       	brcc	.+2      	; 0x1e6a <_Z7forwardv+0xb68>
    1e68:	95 c0       	rjmp	.+298    	; 0x1f94 <_Z7forwardv+0xc92>
    1e6a:	30 91 f7 02 	lds	r19, 0x02F7
    1e6e:	38 3c       	cpi	r19, 0xC8	; 200
    1e70:	08 f4       	brcc	.+2      	; 0x1e74 <_Z7forwardv+0xb72>
    1e72:	90 c0       	rjmp	.+288    	; 0x1f94 <_Z7forwardv+0xc92>
    1e74:	f0 c0       	rjmp	.+480    	; 0x2056 <_Z7forwardv+0xd54>

			for(lAstpwm=lAstpwm,lAstpwm1=lAstpwm1,lAstpwm2=lAstpwm2,lAstpwm3=lAstpwm3;lAstpwm<pWm||lAstpwm1<pWm1||lAstpwm2<pWm2||lAstpwm3<pWm3;){		//increase the speed step by step
				if (pWm>lAstpwm){
					lAstpwm+=step1;
    1e76:	f2 01       	movw	r30, r4
    1e78:	60 81       	ld	r22, Z
    1e7a:	86 0f       	add	r24, r22
    1e7c:	e9 81       	ldd	r30, Y+1	; 0x01
    1e7e:	fa 81       	ldd	r31, Y+2	; 0x02
    1e80:	80 83       	st	Z, r24
					analogWrite(pWmpin,constrain(lAstpwm,0,pWm));
    1e82:	68 2f       	mov	r22, r24
    1e84:	70 e0       	ldi	r23, 0x00	; 0
    1e86:	80 e0       	ldi	r24, 0x00	; 0
    1e88:	90 e0       	ldi	r25, 0x00	; 0
    1e8a:	20 e0       	ldi	r18, 0x00	; 0
    1e8c:	30 e0       	ldi	r19, 0x00	; 0
    1e8e:	a9 01       	movw	r20, r18
    1e90:	0f 2e       	mov	r0, r31
    1e92:	f8 ec       	ldi	r31, 0xC8	; 200
    1e94:	ef 2e       	mov	r14, r31
    1e96:	f0 e0       	ldi	r31, 0x00	; 0
    1e98:	ff 2e       	mov	r15, r31
    1e9a:	f0 e0       	ldi	r31, 0x00	; 0
    1e9c:	0f 2f       	mov	r16, r31
    1e9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ea0:	1f 2f       	mov	r17, r31
    1ea2:	f0 2d       	mov	r31, r0
    1ea4:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <_Z9constrainlll>
    1ea8:	eb 81       	ldd	r30, Y+3	; 0x03
    1eaa:	fc 81       	ldd	r31, Y+4	; 0x04
    1eac:	80 81       	ld	r24, Z
    1eae:	0e 94 29 05 	call	0xa52	; 0xa52 <_Z11analogWritehh>
				}
				if (pWm1>lAstpwm1){
    1eb2:	ef ee       	ldi	r30, 0xEF	; 239
    1eb4:	f2 e0       	ldi	r31, 0x02	; 2
    1eb6:	80 81       	ld	r24, Z
    1eb8:	88 3c       	cpi	r24, 0xC8	; 200
    1eba:	f0 f4       	brcc	.+60     	; 0x1ef8 <_Z7forwardv+0xbf6>
					lAstpwm1+=step2;
    1ebc:	f1 01       	movw	r30, r2
    1ebe:	60 81       	ld	r22, Z
    1ec0:	86 0f       	add	r24, r22
    1ec2:	ed 81       	ldd	r30, Y+5	; 0x05
    1ec4:	fe 81       	ldd	r31, Y+6	; 0x06
    1ec6:	80 83       	st	Z, r24
					analogWrite(pWmpin1,constrain(lAstpwm1,0,pWm1));
    1ec8:	68 2f       	mov	r22, r24
    1eca:	70 e0       	ldi	r23, 0x00	; 0
    1ecc:	80 e0       	ldi	r24, 0x00	; 0
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	20 e0       	ldi	r18, 0x00	; 0
    1ed2:	30 e0       	ldi	r19, 0x00	; 0
    1ed4:	a9 01       	movw	r20, r18
    1ed6:	0f 2e       	mov	r0, r31
    1ed8:	f8 ec       	ldi	r31, 0xC8	; 200
    1eda:	ef 2e       	mov	r14, r31
    1edc:	f0 e0       	ldi	r31, 0x00	; 0
    1ede:	ff 2e       	mov	r15, r31
    1ee0:	f0 e0       	ldi	r31, 0x00	; 0
    1ee2:	0f 2f       	mov	r16, r31
    1ee4:	f0 e0       	ldi	r31, 0x00	; 0
    1ee6:	1f 2f       	mov	r17, r31
    1ee8:	f0 2d       	mov	r31, r0
    1eea:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <_Z9constrainlll>
    1eee:	ef 81       	ldd	r30, Y+7	; 0x07
    1ef0:	f8 85       	ldd	r31, Y+8	; 0x08
    1ef2:	80 81       	ld	r24, Z
    1ef4:	0e 94 29 05 	call	0xa52	; 0xa52 <_Z11analogWritehh>
				}
				if (pWm2>lAstpwm2){
    1ef8:	f6 01       	movw	r30, r12
    1efa:	80 81       	ld	r24, Z
    1efc:	88 3c       	cpi	r24, 0xC8	; 200
    1efe:	f8 f4       	brcc	.+62     	; 0x1f3e <_Z7forwardv+0xc3c>
					lAstpwm2+=step3;
    1f00:	e4 ef       	ldi	r30, 0xF4	; 244
    1f02:	f2 e0       	ldi	r31, 0x02	; 2
    1f04:	60 81       	ld	r22, Z
    1f06:	86 0f       	add	r24, r22
    1f08:	e9 85       	ldd	r30, Y+9	; 0x09
    1f0a:	fa 85       	ldd	r31, Y+10	; 0x0a
    1f0c:	80 83       	st	Z, r24
					analogWrite(pWmpin2,constrain(lAstpwm2,0,pWm2));
    1f0e:	68 2f       	mov	r22, r24
    1f10:	70 e0       	ldi	r23, 0x00	; 0
    1f12:	80 e0       	ldi	r24, 0x00	; 0
    1f14:	90 e0       	ldi	r25, 0x00	; 0
    1f16:	20 e0       	ldi	r18, 0x00	; 0
    1f18:	30 e0       	ldi	r19, 0x00	; 0
    1f1a:	a9 01       	movw	r20, r18
    1f1c:	0f 2e       	mov	r0, r31
    1f1e:	f8 ec       	ldi	r31, 0xC8	; 200
    1f20:	ef 2e       	mov	r14, r31
    1f22:	f0 e0       	ldi	r31, 0x00	; 0
    1f24:	ff 2e       	mov	r15, r31
    1f26:	f0 e0       	ldi	r31, 0x00	; 0
    1f28:	0f 2f       	mov	r16, r31
    1f2a:	f0 e0       	ldi	r31, 0x00	; 0
    1f2c:	1f 2f       	mov	r17, r31
    1f2e:	f0 2d       	mov	r31, r0
    1f30:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <_Z9constrainlll>
    1f34:	eb 85       	ldd	r30, Y+11	; 0x0b
    1f36:	fc 85       	ldd	r31, Y+12	; 0x0c
    1f38:	80 81       	ld	r24, Z
    1f3a:	0e 94 29 05 	call	0xa52	; 0xa52 <_Z11analogWritehh>
				}
				if (pWm3>lAstpwm3){
    1f3e:	f5 01       	movw	r30, r10
    1f40:	80 81       	ld	r24, Z
    1f42:	88 3c       	cpi	r24, 0xC8	; 200
    1f44:	f8 f4       	brcc	.+62     	; 0x1f84 <_Z7forwardv+0xc82>
					lAstpwm3+=step4;
    1f46:	e8 ef       	ldi	r30, 0xF8	; 248
    1f48:	f2 e0       	ldi	r31, 0x02	; 2
    1f4a:	60 81       	ld	r22, Z
    1f4c:	86 0f       	add	r24, r22
    1f4e:	ed 85       	ldd	r30, Y+13	; 0x0d
    1f50:	fe 85       	ldd	r31, Y+14	; 0x0e
    1f52:	80 83       	st	Z, r24
					analogWrite(pWmpin3,constrain(lAstpwm3,0,pWm3));
    1f54:	68 2f       	mov	r22, r24
    1f56:	70 e0       	ldi	r23, 0x00	; 0
    1f58:	80 e0       	ldi	r24, 0x00	; 0
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	20 e0       	ldi	r18, 0x00	; 0
    1f5e:	30 e0       	ldi	r19, 0x00	; 0
    1f60:	a9 01       	movw	r20, r18
    1f62:	0f 2e       	mov	r0, r31
    1f64:	f8 ec       	ldi	r31, 0xC8	; 200
    1f66:	ef 2e       	mov	r14, r31
    1f68:	f0 e0       	ldi	r31, 0x00	; 0
    1f6a:	ff 2e       	mov	r15, r31
    1f6c:	f0 e0       	ldi	r31, 0x00	; 0
    1f6e:	0f 2f       	mov	r16, r31
    1f70:	f0 e0       	ldi	r31, 0x00	; 0
    1f72:	1f 2f       	mov	r17, r31
    1f74:	f0 2d       	mov	r31, r0
    1f76:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <_Z9constrainlll>
    1f7a:	ef 85       	ldd	r30, Y+15	; 0x0f
    1f7c:	f8 89       	ldd	r31, Y+16	; 0x10
    1f7e:	80 81       	ld	r24, Z
    1f80:	0e 94 29 05 	call	0xa52	; 0xa52 <_Z11analogWritehh>
				}	
				delay(interval);		
    1f84:	f3 01       	movw	r30, r6
    1f86:	60 81       	ld	r22, Z
    1f88:	70 e0       	ldi	r23, 0x00	; 0
    1f8a:	80 e0       	ldi	r24, 0x00	; 0
    1f8c:	90 e0       	ldi	r25, 0x00	; 0
    1f8e:	0e 94 62 06 	call	0xcc4	; 0xcc4 <_Z5delaym>
    1f92:	4b c0       	rjmp	.+150    	; 0x202a <_Z7forwardv+0xd28>
	//FOUR MOTORS
	void drive(uint8_t pWm, uint8_t pWm1, uint8_t pWm2, uint8_t pWm3){
		
		if(pWm>lAstpwm||pWm1>lAstpwm1||pWm2>lAstpwm2||pWm3>lAstpwm3){		//accelerate

			for(lAstpwm=lAstpwm,lAstpwm1=lAstpwm1,lAstpwm2=lAstpwm2,lAstpwm3=lAstpwm3;lAstpwm<pWm||lAstpwm1<pWm1||lAstpwm2<pWm2||lAstpwm3<pWm3;){		//increase the speed step by step
    1f94:	0f 2e       	mov	r0, r31
    1f96:	fa ee       	ldi	r31, 0xEA	; 234
    1f98:	8f 2e       	mov	r8, r31
    1f9a:	f2 e0       	ldi	r31, 0x02	; 2
    1f9c:	9f 2e       	mov	r9, r31
    1f9e:	f0 2d       	mov	r31, r0
				if (pWm>lAstpwm){
					lAstpwm+=step1;
    1fa0:	0f 2e       	mov	r0, r31
    1fa2:	fb ee       	ldi	r31, 0xEB	; 235
    1fa4:	4f 2e       	mov	r4, r31
    1fa6:	f2 e0       	ldi	r31, 0x02	; 2
    1fa8:	5f 2e       	mov	r5, r31
    1faa:	f0 2d       	mov	r31, r0
    1fac:	a2 01       	movw	r20, r4
    1fae:	41 50       	subi	r20, 0x01	; 1
    1fb0:	50 40       	sbci	r21, 0x00	; 0
    1fb2:	5a 83       	std	Y+2, r21	; 0x02
    1fb4:	49 83       	std	Y+1, r20	; 0x01
					analogWrite(pWmpin,constrain(lAstpwm,0,pWm));
    1fb6:	c2 01       	movw	r24, r4
    1fb8:	02 97       	sbiw	r24, 0x02	; 2
    1fba:	9c 83       	std	Y+4, r25	; 0x04
    1fbc:	8b 83       	std	Y+3, r24	; 0x03
	//FOUR MOTORS
	void drive(uint8_t pWm, uint8_t pWm1, uint8_t pWm2, uint8_t pWm3){
		
		if(pWm>lAstpwm||pWm1>lAstpwm1||pWm2>lAstpwm2||pWm3>lAstpwm3){		//accelerate

			for(lAstpwm=lAstpwm,lAstpwm1=lAstpwm1,lAstpwm2=lAstpwm2,lAstpwm3=lAstpwm3;lAstpwm<pWm||lAstpwm1<pWm1||lAstpwm2<pWm2||lAstpwm3<pWm3;){		//increase the speed step by step
    1fbe:	0f 2e       	mov	r0, r31
    1fc0:	f3 ef       	ldi	r31, 0xF3	; 243
    1fc2:	cf 2e       	mov	r12, r31
    1fc4:	f2 e0       	ldi	r31, 0x02	; 2
    1fc6:	df 2e       	mov	r13, r31
    1fc8:	f0 2d       	mov	r31, r0
    1fca:	0f 2e       	mov	r0, r31
    1fcc:	f7 ef       	ldi	r31, 0xF7	; 247
    1fce:	af 2e       	mov	r10, r31
    1fd0:	f2 e0       	ldi	r31, 0x02	; 2
    1fd2:	bf 2e       	mov	r11, r31
    1fd4:	f0 2d       	mov	r31, r0
				if (pWm>lAstpwm){
					lAstpwm+=step1;
					analogWrite(pWmpin,constrain(lAstpwm,0,pWm));
				}
				if (pWm1>lAstpwm1){
					lAstpwm1+=step2;
    1fd6:	0f 2e       	mov	r0, r31
    1fd8:	f0 ef       	ldi	r31, 0xF0	; 240
    1fda:	2f 2e       	mov	r2, r31
    1fdc:	f2 e0       	ldi	r31, 0x02	; 2
    1fde:	3f 2e       	mov	r3, r31
    1fe0:	f0 2d       	mov	r31, r0
    1fe2:	f1 01       	movw	r30, r2
    1fe4:	31 97       	sbiw	r30, 0x01	; 1
    1fe6:	fe 83       	std	Y+6, r31	; 0x06
    1fe8:	ed 83       	std	Y+5, r30	; 0x05
					analogWrite(pWmpin1,constrain(lAstpwm1,0,pWm1));
    1fea:	a1 01       	movw	r20, r2
    1fec:	42 50       	subi	r20, 0x02	; 2
    1fee:	50 40       	sbci	r21, 0x00	; 0
    1ff0:	58 87       	std	Y+8, r21	; 0x08
    1ff2:	4f 83       	std	Y+7, r20	; 0x07
				}
				if (pWm2>lAstpwm2){
					lAstpwm2+=step3;
    1ff4:	84 ef       	ldi	r24, 0xF4	; 244
    1ff6:	92 e0       	ldi	r25, 0x02	; 2
    1ff8:	01 97       	sbiw	r24, 0x01	; 1
    1ffa:	9a 87       	std	Y+10, r25	; 0x0a
    1ffc:	89 87       	std	Y+9, r24	; 0x09
					analogWrite(pWmpin2,constrain(lAstpwm2,0,pWm2));
    1ffe:	e4 ef       	ldi	r30, 0xF4	; 244
    2000:	f2 e0       	ldi	r31, 0x02	; 2
    2002:	32 97       	sbiw	r30, 0x02	; 2
    2004:	fc 87       	std	Y+12, r31	; 0x0c
    2006:	eb 87       	std	Y+11, r30	; 0x0b
				}
				if (pWm3>lAstpwm3){
					lAstpwm3+=step4;
    2008:	48 ef       	ldi	r20, 0xF8	; 248
    200a:	52 e0       	ldi	r21, 0x02	; 2
    200c:	41 50       	subi	r20, 0x01	; 1
    200e:	50 40       	sbci	r21, 0x00	; 0
    2010:	5e 87       	std	Y+14, r21	; 0x0e
    2012:	4d 87       	std	Y+13, r20	; 0x0d
					analogWrite(pWmpin3,constrain(lAstpwm3,0,pWm3));
    2014:	88 ef       	ldi	r24, 0xF8	; 248
    2016:	92 e0       	ldi	r25, 0x02	; 2
    2018:	02 97       	sbiw	r24, 0x02	; 2
    201a:	98 8b       	std	Y+16, r25	; 0x10
    201c:	8f 87       	std	Y+15, r24	; 0x0f
				}	
				delay(interval);		
    201e:	0f 2e       	mov	r0, r31
    2020:	fc ee       	ldi	r31, 0xEC	; 236
    2022:	6f 2e       	mov	r6, r31
    2024:	f2 e0       	ldi	r31, 0x02	; 2
    2026:	7f 2e       	mov	r7, r31
    2028:	f0 2d       	mov	r31, r0
	//FOUR MOTORS
	void drive(uint8_t pWm, uint8_t pWm1, uint8_t pWm2, uint8_t pWm3){
		
		if(pWm>lAstpwm||pWm1>lAstpwm1||pWm2>lAstpwm2||pWm3>lAstpwm3){		//accelerate

			for(lAstpwm=lAstpwm,lAstpwm1=lAstpwm1,lAstpwm2=lAstpwm2,lAstpwm3=lAstpwm3;lAstpwm<pWm||lAstpwm1<pWm1||lAstpwm2<pWm2||lAstpwm3<pWm3;){		//increase the speed step by step
    202a:	f4 01       	movw	r30, r8
    202c:	80 81       	ld	r24, Z
    202e:	88 3c       	cpi	r24, 0xC8	; 200
    2030:	08 f4       	brcc	.+2      	; 0x2034 <_Z7forwardv+0xd32>
    2032:	21 cf       	rjmp	.-446    	; 0x1e76 <_Z7forwardv+0xb74>
    2034:	ef ee       	ldi	r30, 0xEF	; 239
    2036:	f2 e0       	ldi	r31, 0x02	; 2
    2038:	80 81       	ld	r24, Z
    203a:	88 3c       	cpi	r24, 0xC8	; 200
    203c:	08 f4       	brcc	.+2      	; 0x2040 <_Z7forwardv+0xd3e>
    203e:	39 cf       	rjmp	.-398    	; 0x1eb2 <_Z7forwardv+0xbb0>
    2040:	f6 01       	movw	r30, r12
    2042:	80 81       	ld	r24, Z
    2044:	88 3c       	cpi	r24, 0xC8	; 200
    2046:	08 f4       	brcc	.+2      	; 0x204a <_Z7forwardv+0xd48>
    2048:	34 cf       	rjmp	.-408    	; 0x1eb2 <_Z7forwardv+0xbb0>
    204a:	f5 01       	movw	r30, r10
    204c:	80 81       	ld	r24, Z
    204e:	88 3c       	cpi	r24, 0xC8	; 200
    2050:	08 f0       	brcs	.+2      	; 0x2054 <_Z7forwardv+0xd52>
    2052:	11 c1       	rjmp	.+546    	; 0x2276 <__stack+0x77>
    2054:	2e cf       	rjmp	.-420    	; 0x1eb2 <_Z7forwardv+0xbb0>
				delay(interval);		
			}
			
		}

		else if(pWm<lAstpwm||pWm1<lAstpwm1||pWm2<lAstpwm2||pWm3<lAstpwm3){				//decelerate
    2056:	89 3c       	cpi	r24, 0xC9	; 201
    2058:	08 f0       	brcs	.+2      	; 0x205c <_Z7forwardv+0xd5a>
    205a:	99 c0       	rjmp	.+306    	; 0x218e <_Z7forwardv+0xe8c>
    205c:	99 3c       	cpi	r25, 0xC9	; 201
    205e:	08 f0       	brcs	.+2      	; 0x2062 <_Z7forwardv+0xd60>
    2060:	96 c0       	rjmp	.+300    	; 0x218e <_Z7forwardv+0xe8c>
    2062:	29 3c       	cpi	r18, 0xC9	; 201
    2064:	08 f0       	brcs	.+2      	; 0x2068 <_Z7forwardv+0xd66>
    2066:	93 c0       	rjmp	.+294    	; 0x218e <_Z7forwardv+0xe8c>
    2068:	39 3c       	cpi	r19, 0xC9	; 201
    206a:	08 f0       	brcs	.+2      	; 0x206e <_Z7forwardv+0xd6c>
    206c:	90 c0       	rjmp	.+288    	; 0x218e <_Z7forwardv+0xe8c>
    206e:	ef c0       	rjmp	.+478    	; 0x224e <__stack+0x4f>

			for(lAstpwm=lAstpwm,lAstpwm1=lAstpwm1,lAstpwm2=lAstpwm2,lAstpwm3=lAstpwm3;lAstpwm>pWm||lAstpwm1>pWm1||lAstpwm2>pWm2||lAstpwm3>pWm3;){		//decrease the speed step by step
				if (pWm<lAstpwm){
					lAstpwm-=step1;
    2070:	f2 01       	movw	r30, r4
    2072:	80 81       	ld	r24, Z
    2074:	68 1b       	sub	r22, r24
    2076:	e9 81       	ldd	r30, Y+1	; 0x01
    2078:	fa 81       	ldd	r31, Y+2	; 0x02
    207a:	60 83       	st	Z, r22
					analogWrite(pWmpin,constrain(lAstpwm,pWm,255));
    207c:	70 e0       	ldi	r23, 0x00	; 0
    207e:	80 e0       	ldi	r24, 0x00	; 0
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	28 ec       	ldi	r18, 0xC8	; 200
    2084:	30 e0       	ldi	r19, 0x00	; 0
    2086:	40 e0       	ldi	r20, 0x00	; 0
    2088:	50 e0       	ldi	r21, 0x00	; 0
    208a:	0f 2e       	mov	r0, r31
    208c:	ff ef       	ldi	r31, 0xFF	; 255
    208e:	ef 2e       	mov	r14, r31
    2090:	f0 e0       	ldi	r31, 0x00	; 0
    2092:	ff 2e       	mov	r15, r31
    2094:	f0 e0       	ldi	r31, 0x00	; 0
    2096:	0f 2f       	mov	r16, r31
    2098:	f0 e0       	ldi	r31, 0x00	; 0
    209a:	1f 2f       	mov	r17, r31
    209c:	f0 2d       	mov	r31, r0
    209e:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <_Z9constrainlll>
    20a2:	eb 81       	ldd	r30, Y+3	; 0x03
    20a4:	fc 81       	ldd	r31, Y+4	; 0x04
    20a6:	80 81       	ld	r24, Z
    20a8:	0e 94 29 05 	call	0xa52	; 0xa52 <_Z11analogWritehh>
				}
				if (pWm1<lAstpwm1){
    20ac:	ef ee       	ldi	r30, 0xEF	; 239
    20ae:	f2 e0       	ldi	r31, 0x02	; 2
    20b0:	60 81       	ld	r22, Z
    20b2:	69 3c       	cpi	r22, 0xC9	; 201
    20b4:	f0 f0       	brcs	.+60     	; 0x20f2 <_Z7forwardv+0xdf0>
					lAstpwm1-=step2;
    20b6:	f1 01       	movw	r30, r2
    20b8:	80 81       	ld	r24, Z
    20ba:	68 1b       	sub	r22, r24
    20bc:	ed 81       	ldd	r30, Y+5	; 0x05
    20be:	fe 81       	ldd	r31, Y+6	; 0x06
    20c0:	60 83       	st	Z, r22
					analogWrite(pWmpin1,constrain(lAstpwm1,pWm1,255));
    20c2:	70 e0       	ldi	r23, 0x00	; 0
    20c4:	80 e0       	ldi	r24, 0x00	; 0
    20c6:	90 e0       	ldi	r25, 0x00	; 0
    20c8:	28 ec       	ldi	r18, 0xC8	; 200
    20ca:	30 e0       	ldi	r19, 0x00	; 0
    20cc:	40 e0       	ldi	r20, 0x00	; 0
    20ce:	50 e0       	ldi	r21, 0x00	; 0
    20d0:	0f 2e       	mov	r0, r31
    20d2:	ff ef       	ldi	r31, 0xFF	; 255
    20d4:	ef 2e       	mov	r14, r31
    20d6:	f0 e0       	ldi	r31, 0x00	; 0
    20d8:	ff 2e       	mov	r15, r31
    20da:	f0 e0       	ldi	r31, 0x00	; 0
    20dc:	0f 2f       	mov	r16, r31
    20de:	f0 e0       	ldi	r31, 0x00	; 0
    20e0:	1f 2f       	mov	r17, r31
    20e2:	f0 2d       	mov	r31, r0
    20e4:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <_Z9constrainlll>
    20e8:	ef 81       	ldd	r30, Y+7	; 0x07
    20ea:	f8 85       	ldd	r31, Y+8	; 0x08
    20ec:	80 81       	ld	r24, Z
    20ee:	0e 94 29 05 	call	0xa52	; 0xa52 <_Z11analogWritehh>
				}
				if (pWm2<lAstpwm2){
    20f2:	f6 01       	movw	r30, r12
    20f4:	60 81       	ld	r22, Z
    20f6:	69 3c       	cpi	r22, 0xC9	; 201
    20f8:	f8 f0       	brcs	.+62     	; 0x2138 <_Z7forwardv+0xe36>
					lAstpwm2-=step3;
    20fa:	e4 ef       	ldi	r30, 0xF4	; 244
    20fc:	f2 e0       	ldi	r31, 0x02	; 2
    20fe:	80 81       	ld	r24, Z
    2100:	68 1b       	sub	r22, r24
    2102:	e9 85       	ldd	r30, Y+9	; 0x09
    2104:	fa 85       	ldd	r31, Y+10	; 0x0a
    2106:	60 83       	st	Z, r22
					analogWrite(pWmpin2,constrain(lAstpwm2,pWm2,255));
    2108:	70 e0       	ldi	r23, 0x00	; 0
    210a:	80 e0       	ldi	r24, 0x00	; 0
    210c:	90 e0       	ldi	r25, 0x00	; 0
    210e:	28 ec       	ldi	r18, 0xC8	; 200
    2110:	30 e0       	ldi	r19, 0x00	; 0
    2112:	40 e0       	ldi	r20, 0x00	; 0
    2114:	50 e0       	ldi	r21, 0x00	; 0
    2116:	0f 2e       	mov	r0, r31
    2118:	ff ef       	ldi	r31, 0xFF	; 255
    211a:	ef 2e       	mov	r14, r31
    211c:	f0 e0       	ldi	r31, 0x00	; 0
    211e:	ff 2e       	mov	r15, r31
    2120:	f0 e0       	ldi	r31, 0x00	; 0
    2122:	0f 2f       	mov	r16, r31
    2124:	f0 e0       	ldi	r31, 0x00	; 0
    2126:	1f 2f       	mov	r17, r31
    2128:	f0 2d       	mov	r31, r0
    212a:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <_Z9constrainlll>
    212e:	eb 85       	ldd	r30, Y+11	; 0x0b
    2130:	fc 85       	ldd	r31, Y+12	; 0x0c
    2132:	80 81       	ld	r24, Z
    2134:	0e 94 29 05 	call	0xa52	; 0xa52 <_Z11analogWritehh>
				}
				if (pWm3<lAstpwm3){
    2138:	f5 01       	movw	r30, r10
    213a:	60 81       	ld	r22, Z
    213c:	69 3c       	cpi	r22, 0xC9	; 201
    213e:	f8 f0       	brcs	.+62     	; 0x217e <_Z7forwardv+0xe7c>
					lAstpwm3-=step4;
    2140:	e8 ef       	ldi	r30, 0xF8	; 248
    2142:	f2 e0       	ldi	r31, 0x02	; 2
    2144:	80 81       	ld	r24, Z
    2146:	68 1b       	sub	r22, r24
    2148:	ed 85       	ldd	r30, Y+13	; 0x0d
    214a:	fe 85       	ldd	r31, Y+14	; 0x0e
    214c:	60 83       	st	Z, r22
					analogWrite(pWmpin3,constrain(lAstpwm3,pWm3,255));
    214e:	70 e0       	ldi	r23, 0x00	; 0
    2150:	80 e0       	ldi	r24, 0x00	; 0
    2152:	90 e0       	ldi	r25, 0x00	; 0
    2154:	28 ec       	ldi	r18, 0xC8	; 200
    2156:	30 e0       	ldi	r19, 0x00	; 0
    2158:	40 e0       	ldi	r20, 0x00	; 0
    215a:	50 e0       	ldi	r21, 0x00	; 0
    215c:	0f 2e       	mov	r0, r31
    215e:	ff ef       	ldi	r31, 0xFF	; 255
    2160:	ef 2e       	mov	r14, r31
    2162:	f0 e0       	ldi	r31, 0x00	; 0
    2164:	ff 2e       	mov	r15, r31
    2166:	f0 e0       	ldi	r31, 0x00	; 0
    2168:	0f 2f       	mov	r16, r31
    216a:	f0 e0       	ldi	r31, 0x00	; 0
    216c:	1f 2f       	mov	r17, r31
    216e:	f0 2d       	mov	r31, r0
    2170:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <_Z9constrainlll>
    2174:	ef 85       	ldd	r30, Y+15	; 0x0f
    2176:	f8 89       	ldd	r31, Y+16	; 0x10
    2178:	80 81       	ld	r24, Z
    217a:	0e 94 29 05 	call	0xa52	; 0xa52 <_Z11analogWritehh>
				}
				delay(interval);		
    217e:	f3 01       	movw	r30, r6
    2180:	60 81       	ld	r22, Z
    2182:	70 e0       	ldi	r23, 0x00	; 0
    2184:	80 e0       	ldi	r24, 0x00	; 0
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	0e 94 62 06 	call	0xcc4	; 0xcc4 <_Z5delaym>
    218c:	4b c0       	rjmp	.+150    	; 0x2224 <__stack+0x25>
			
		}

		else if(pWm<lAstpwm||pWm1<lAstpwm1||pWm2<lAstpwm2||pWm3<lAstpwm3){				//decelerate

			for(lAstpwm=lAstpwm,lAstpwm1=lAstpwm1,lAstpwm2=lAstpwm2,lAstpwm3=lAstpwm3;lAstpwm>pWm||lAstpwm1>pWm1||lAstpwm2>pWm2||lAstpwm3>pWm3;){		//decrease the speed step by step
    218e:	0f 2e       	mov	r0, r31
    2190:	fa ee       	ldi	r31, 0xEA	; 234
    2192:	8f 2e       	mov	r8, r31
    2194:	f2 e0       	ldi	r31, 0x02	; 2
    2196:	9f 2e       	mov	r9, r31
    2198:	f0 2d       	mov	r31, r0
				if (pWm<lAstpwm){
					lAstpwm-=step1;
    219a:	0f 2e       	mov	r0, r31
    219c:	fb ee       	ldi	r31, 0xEB	; 235
    219e:	4f 2e       	mov	r4, r31
    21a0:	f2 e0       	ldi	r31, 0x02	; 2
    21a2:	5f 2e       	mov	r5, r31
    21a4:	f0 2d       	mov	r31, r0
    21a6:	a2 01       	movw	r20, r4
    21a8:	41 50       	subi	r20, 0x01	; 1
    21aa:	50 40       	sbci	r21, 0x00	; 0
    21ac:	5a 83       	std	Y+2, r21	; 0x02
    21ae:	49 83       	std	Y+1, r20	; 0x01
					analogWrite(pWmpin,constrain(lAstpwm,pWm,255));
    21b0:	c2 01       	movw	r24, r4
    21b2:	02 97       	sbiw	r24, 0x02	; 2
    21b4:	9c 83       	std	Y+4, r25	; 0x04
    21b6:	8b 83       	std	Y+3, r24	; 0x03
			
		}

		else if(pWm<lAstpwm||pWm1<lAstpwm1||pWm2<lAstpwm2||pWm3<lAstpwm3){				//decelerate

			for(lAstpwm=lAstpwm,lAstpwm1=lAstpwm1,lAstpwm2=lAstpwm2,lAstpwm3=lAstpwm3;lAstpwm>pWm||lAstpwm1>pWm1||lAstpwm2>pWm2||lAstpwm3>pWm3;){		//decrease the speed step by step
    21b8:	0f 2e       	mov	r0, r31
    21ba:	f3 ef       	ldi	r31, 0xF3	; 243
    21bc:	cf 2e       	mov	r12, r31
    21be:	f2 e0       	ldi	r31, 0x02	; 2
    21c0:	df 2e       	mov	r13, r31
    21c2:	f0 2d       	mov	r31, r0
    21c4:	0f 2e       	mov	r0, r31
    21c6:	f7 ef       	ldi	r31, 0xF7	; 247
    21c8:	af 2e       	mov	r10, r31
    21ca:	f2 e0       	ldi	r31, 0x02	; 2
    21cc:	bf 2e       	mov	r11, r31
    21ce:	f0 2d       	mov	r31, r0
				if (pWm<lAstpwm){
					lAstpwm-=step1;
					analogWrite(pWmpin,constrain(lAstpwm,pWm,255));
				}
				if (pWm1<lAstpwm1){
					lAstpwm1-=step2;
    21d0:	0f 2e       	mov	r0, r31
    21d2:	f0 ef       	ldi	r31, 0xF0	; 240
    21d4:	2f 2e       	mov	r2, r31
    21d6:	f2 e0       	ldi	r31, 0x02	; 2
    21d8:	3f 2e       	mov	r3, r31
    21da:	f0 2d       	mov	r31, r0
    21dc:	f1 01       	movw	r30, r2
    21de:	31 97       	sbiw	r30, 0x01	; 1
    21e0:	fe 83       	std	Y+6, r31	; 0x06
    21e2:	ed 83       	std	Y+5, r30	; 0x05
					analogWrite(pWmpin1,constrain(lAstpwm1,pWm1,255));
    21e4:	a1 01       	movw	r20, r2
    21e6:	42 50       	subi	r20, 0x02	; 2
    21e8:	50 40       	sbci	r21, 0x00	; 0
    21ea:	58 87       	std	Y+8, r21	; 0x08
    21ec:	4f 83       	std	Y+7, r20	; 0x07
				}
				if (pWm2<lAstpwm2){
					lAstpwm2-=step3;
    21ee:	84 ef       	ldi	r24, 0xF4	; 244
    21f0:	92 e0       	ldi	r25, 0x02	; 2
    21f2:	01 97       	sbiw	r24, 0x01	; 1
    21f4:	9a 87       	std	Y+10, r25	; 0x0a
    21f6:	89 87       	std	Y+9, r24	; 0x09
					analogWrite(pWmpin2,constrain(lAstpwm2,pWm2,255));
    21f8:	e4 ef       	ldi	r30, 0xF4	; 244
    21fa:	f2 e0       	ldi	r31, 0x02	; 2
    21fc:	32 97       	sbiw	r30, 0x02	; 2
    21fe:	fc 87       	std	Y+12, r31	; 0x0c
    2200:	eb 87       	std	Y+11, r30	; 0x0b
				}
				if (pWm3<lAstpwm3){
					lAstpwm3-=step4;
    2202:	48 ef       	ldi	r20, 0xF8	; 248
    2204:	52 e0       	ldi	r21, 0x02	; 2
    2206:	41 50       	subi	r20, 0x01	; 1
    2208:	50 40       	sbci	r21, 0x00	; 0
    220a:	5e 87       	std	Y+14, r21	; 0x0e
    220c:	4d 87       	std	Y+13, r20	; 0x0d
					analogWrite(pWmpin3,constrain(lAstpwm3,pWm3,255));
    220e:	88 ef       	ldi	r24, 0xF8	; 248
    2210:	92 e0       	ldi	r25, 0x02	; 2
    2212:	02 97       	sbiw	r24, 0x02	; 2
    2214:	98 8b       	std	Y+16, r25	; 0x10
    2216:	8f 87       	std	Y+15, r24	; 0x0f
				}
				delay(interval);		
    2218:	0f 2e       	mov	r0, r31
    221a:	fc ee       	ldi	r31, 0xEC	; 236
    221c:	6f 2e       	mov	r6, r31
    221e:	f2 e0       	ldi	r31, 0x02	; 2
    2220:	7f 2e       	mov	r7, r31
    2222:	f0 2d       	mov	r31, r0
			
		}

		else if(pWm<lAstpwm||pWm1<lAstpwm1||pWm2<lAstpwm2||pWm3<lAstpwm3){				//decelerate

			for(lAstpwm=lAstpwm,lAstpwm1=lAstpwm1,lAstpwm2=lAstpwm2,lAstpwm3=lAstpwm3;lAstpwm>pWm||lAstpwm1>pWm1||lAstpwm2>pWm2||lAstpwm3>pWm3;){		//decrease the speed step by step
    2224:	f4 01       	movw	r30, r8
    2226:	60 81       	ld	r22, Z
    2228:	69 3c       	cpi	r22, 0xC9	; 201
    222a:	08 f0       	brcs	.+2      	; 0x222e <__stack+0x2f>
    222c:	21 cf       	rjmp	.-446    	; 0x2070 <_Z7forwardv+0xd6e>
    222e:	ef ee       	ldi	r30, 0xEF	; 239
    2230:	f2 e0       	ldi	r31, 0x02	; 2
    2232:	80 81       	ld	r24, Z
    2234:	89 3c       	cpi	r24, 0xC9	; 201
    2236:	08 f0       	brcs	.+2      	; 0x223a <__stack+0x3b>
    2238:	39 cf       	rjmp	.-398    	; 0x20ac <_Z7forwardv+0xdaa>
    223a:	f6 01       	movw	r30, r12
    223c:	80 81       	ld	r24, Z
    223e:	89 3c       	cpi	r24, 0xC9	; 201
    2240:	08 f0       	brcs	.+2      	; 0x2244 <__stack+0x45>
    2242:	34 cf       	rjmp	.-408    	; 0x20ac <_Z7forwardv+0xdaa>
    2244:	f5 01       	movw	r30, r10
    2246:	80 81       	ld	r24, Z
    2248:	89 3c       	cpi	r24, 0xC9	; 201
    224a:	a8 f0       	brcs	.+42     	; 0x2276 <__stack+0x77>
    224c:	2f cf       	rjmp	.-418    	; 0x20ac <_Z7forwardv+0xdaa>
				delay(interval);		
			}
		}

		else{		//no change
			analogWrite(pWmpin,pWm);
    224e:	80 91 e9 02 	lds	r24, 0x02E9
    2252:	68 ec       	ldi	r22, 0xC8	; 200
    2254:	0e 94 29 05 	call	0xa52	; 0xa52 <_Z11analogWritehh>
			analogWrite(pWmpin1,pWm1);
    2258:	80 91 ee 02 	lds	r24, 0x02EE
    225c:	68 ec       	ldi	r22, 0xC8	; 200
    225e:	0e 94 29 05 	call	0xa52	; 0xa52 <_Z11analogWritehh>
			analogWrite(pWmpin2,pWm2);
    2262:	80 91 f2 02 	lds	r24, 0x02F2
    2266:	68 ec       	ldi	r22, 0xC8	; 200
    2268:	0e 94 29 05 	call	0xa52	; 0xa52 <_Z11analogWritehh>
			analogWrite(pWmpin3,pWm3);
    226c:	80 91 f6 02 	lds	r24, 0x02F6
    2270:	68 ec       	ldi	r22, 0xC8	; 200
    2272:	0e 94 29 05 	call	0xa52	; 0xa52 <_Z11analogWritehh>
	motors.direction(1,1,1,1);
	motors.drive(200,200,200,200);
	prevDir='f';
    2276:	86 e6       	ldi	r24, 0x66	; 102
    2278:	80 93 f9 02 	sts	0x02F9, r24
}
    227c:	60 96       	adiw	r28, 0x10	; 16
    227e:	0f b6       	in	r0, 0x3f	; 63
    2280:	f8 94       	cli
    2282:	de bf       	out	0x3e, r29	; 62
    2284:	0f be       	out	0x3f, r0	; 63
    2286:	cd bf       	out	0x3d, r28	; 61
    2288:	cf 91       	pop	r28
    228a:	df 91       	pop	r29
    228c:	1f 91       	pop	r17
    228e:	0f 91       	pop	r16
    2290:	ff 90       	pop	r15
    2292:	ef 90       	pop	r14
    2294:	df 90       	pop	r13
    2296:	cf 90       	pop	r12
    2298:	bf 90       	pop	r11
    229a:	af 90       	pop	r10
    229c:	9f 90       	pop	r9
    229e:	8f 90       	pop	r8
    22a0:	7f 90       	pop	r7
    22a2:	6f 90       	pop	r6
    22a4:	5f 90       	pop	r5
    22a6:	4f 90       	pop	r4
    22a8:	3f 90       	pop	r3
    22aa:	2f 90       	pop	r2
    22ac:	08 95       	ret

000022ae <_Z8backwardv>:
void backward()
{	
    22ae:	2f 92       	push	r2
    22b0:	3f 92       	push	r3
    22b2:	4f 92       	push	r4
    22b4:	5f 92       	push	r5
    22b6:	6f 92       	push	r6
    22b8:	7f 92       	push	r7
    22ba:	8f 92       	push	r8
    22bc:	9f 92       	push	r9
    22be:	af 92       	push	r10
    22c0:	bf 92       	push	r11
    22c2:	cf 92       	push	r12
    22c4:	df 92       	push	r13
    22c6:	ef 92       	push	r14
    22c8:	ff 92       	push	r15
    22ca:	0f 93       	push	r16
    22cc:	1f 93       	push	r17
    22ce:	df 93       	push	r29
    22d0:	cf 93       	push	r28
    22d2:	cd b7       	in	r28, 0x3d	; 61
    22d4:	de b7       	in	r29, 0x3e	; 62
    22d6:	60 97       	sbiw	r28, 0x10	; 16
    22d8:	0f b6       	in	r0, 0x3f	; 63
    22da:	f8 94       	cli
    22dc:	de bf       	out	0x3e, r29	; 62
    22de:	0f be       	out	0x3f, r0	; 63
    22e0:	cd bf       	out	0x3d, r28	; 61
	if(prevDir=='f')
    22e2:	80 91 f9 02 	lds	r24, 0x02F9
    22e6:	86 36       	cpi	r24, 0x66	; 102
    22e8:	09 f0       	breq	.+2      	; 0x22ec <_Z8backwardv+0x3e>
    22ea:	14 c1       	rjmp	.+552    	; 0x2514 <_Z8backwardv+0x266>
				delay(interval);		
			}
			
		}

		else if(pWm<lAstpwm||pWm1<lAstpwm1||pWm2<lAstpwm2||pWm3<lAstpwm3){				//decelerate
    22ec:	80 91 ea 02 	lds	r24, 0x02EA
    22f0:	88 23       	and	r24, r24
    22f2:	09 f0       	breq	.+2      	; 0x22f6 <_Z8backwardv+0x48>
    22f4:	9b c0       	rjmp	.+310    	; 0x242c <_Z8backwardv+0x17e>
    22f6:	80 91 ef 02 	lds	r24, 0x02EF
    22fa:	88 23       	and	r24, r24
    22fc:	09 f0       	breq	.+2      	; 0x2300 <_Z8backwardv+0x52>
    22fe:	96 c0       	rjmp	.+300    	; 0x242c <_Z8backwardv+0x17e>
    2300:	80 91 f3 02 	lds	r24, 0x02F3
    2304:	88 23       	and	r24, r24
    2306:	09 f0       	breq	.+2      	; 0x230a <_Z8backwardv+0x5c>
    2308:	91 c0       	rjmp	.+290    	; 0x242c <_Z8backwardv+0x17e>
    230a:	80 91 f7 02 	lds	r24, 0x02F7
    230e:	88 23       	and	r24, r24
    2310:	09 f0       	breq	.+2      	; 0x2314 <_Z8backwardv+0x66>
    2312:	8c c0       	rjmp	.+280    	; 0x242c <_Z8backwardv+0x17e>
    2314:	eb c0       	rjmp	.+470    	; 0x24ec <_Z8backwardv+0x23e>

			for(lAstpwm=lAstpwm,lAstpwm1=lAstpwm1,lAstpwm2=lAstpwm2,lAstpwm3=lAstpwm3;lAstpwm>pWm||lAstpwm1>pWm1||lAstpwm2>pWm2||lAstpwm3>pWm3;){		//decrease the speed step by step
				if (pWm<lAstpwm){
					lAstpwm-=step1;
    2316:	f2 01       	movw	r30, r4
    2318:	80 81       	ld	r24, Z
    231a:	68 1b       	sub	r22, r24
    231c:	e9 81       	ldd	r30, Y+1	; 0x01
    231e:	fa 81       	ldd	r31, Y+2	; 0x02
    2320:	60 83       	st	Z, r22
					analogWrite(pWmpin,constrain(lAstpwm,pWm,255));
    2322:	70 e0       	ldi	r23, 0x00	; 0
    2324:	80 e0       	ldi	r24, 0x00	; 0
    2326:	90 e0       	ldi	r25, 0x00	; 0
    2328:	20 e0       	ldi	r18, 0x00	; 0
    232a:	30 e0       	ldi	r19, 0x00	; 0
    232c:	a9 01       	movw	r20, r18
    232e:	0f 2e       	mov	r0, r31
    2330:	ff ef       	ldi	r31, 0xFF	; 255
    2332:	ef 2e       	mov	r14, r31
    2334:	f0 e0       	ldi	r31, 0x00	; 0
    2336:	ff 2e       	mov	r15, r31
    2338:	f0 e0       	ldi	r31, 0x00	; 0
    233a:	0f 2f       	mov	r16, r31
    233c:	f0 e0       	ldi	r31, 0x00	; 0
    233e:	1f 2f       	mov	r17, r31
    2340:	f0 2d       	mov	r31, r0
    2342:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <_Z9constrainlll>
    2346:	eb 81       	ldd	r30, Y+3	; 0x03
    2348:	fc 81       	ldd	r31, Y+4	; 0x04
    234a:	80 81       	ld	r24, Z
    234c:	0e 94 29 05 	call	0xa52	; 0xa52 <_Z11analogWritehh>
				}
				if (pWm1<lAstpwm1){
    2350:	ef ee       	ldi	r30, 0xEF	; 239
    2352:	f2 e0       	ldi	r31, 0x02	; 2
    2354:	60 81       	ld	r22, Z
    2356:	66 23       	and	r22, r22
    2358:	e9 f0       	breq	.+58     	; 0x2394 <_Z8backwardv+0xe6>
					lAstpwm1-=step2;
    235a:	f1 01       	movw	r30, r2
    235c:	80 81       	ld	r24, Z
    235e:	68 1b       	sub	r22, r24
    2360:	ed 81       	ldd	r30, Y+5	; 0x05
    2362:	fe 81       	ldd	r31, Y+6	; 0x06
    2364:	60 83       	st	Z, r22
					analogWrite(pWmpin1,constrain(lAstpwm1,pWm1,255));
    2366:	70 e0       	ldi	r23, 0x00	; 0
    2368:	80 e0       	ldi	r24, 0x00	; 0
    236a:	90 e0       	ldi	r25, 0x00	; 0
    236c:	20 e0       	ldi	r18, 0x00	; 0
    236e:	30 e0       	ldi	r19, 0x00	; 0
    2370:	a9 01       	movw	r20, r18
    2372:	0f 2e       	mov	r0, r31
    2374:	ff ef       	ldi	r31, 0xFF	; 255
    2376:	ef 2e       	mov	r14, r31
    2378:	f0 e0       	ldi	r31, 0x00	; 0
    237a:	ff 2e       	mov	r15, r31
    237c:	f0 e0       	ldi	r31, 0x00	; 0
    237e:	0f 2f       	mov	r16, r31
    2380:	f0 e0       	ldi	r31, 0x00	; 0
    2382:	1f 2f       	mov	r17, r31
    2384:	f0 2d       	mov	r31, r0
    2386:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <_Z9constrainlll>
    238a:	ef 81       	ldd	r30, Y+7	; 0x07
    238c:	f8 85       	ldd	r31, Y+8	; 0x08
    238e:	80 81       	ld	r24, Z
    2390:	0e 94 29 05 	call	0xa52	; 0xa52 <_Z11analogWritehh>
				}
				if (pWm2<lAstpwm2){
    2394:	f6 01       	movw	r30, r12
    2396:	60 81       	ld	r22, Z
    2398:	66 23       	and	r22, r22
    239a:	f1 f0       	breq	.+60     	; 0x23d8 <_Z8backwardv+0x12a>
					lAstpwm2-=step3;
    239c:	e4 ef       	ldi	r30, 0xF4	; 244
    239e:	f2 e0       	ldi	r31, 0x02	; 2
    23a0:	80 81       	ld	r24, Z
    23a2:	68 1b       	sub	r22, r24
    23a4:	e9 85       	ldd	r30, Y+9	; 0x09
    23a6:	fa 85       	ldd	r31, Y+10	; 0x0a
    23a8:	60 83       	st	Z, r22
					analogWrite(pWmpin2,constrain(lAstpwm2,pWm2,255));
    23aa:	70 e0       	ldi	r23, 0x00	; 0
    23ac:	80 e0       	ldi	r24, 0x00	; 0
    23ae:	90 e0       	ldi	r25, 0x00	; 0
    23b0:	20 e0       	ldi	r18, 0x00	; 0
    23b2:	30 e0       	ldi	r19, 0x00	; 0
    23b4:	a9 01       	movw	r20, r18
    23b6:	0f 2e       	mov	r0, r31
    23b8:	ff ef       	ldi	r31, 0xFF	; 255
    23ba:	ef 2e       	mov	r14, r31
    23bc:	f0 e0       	ldi	r31, 0x00	; 0
    23be:	ff 2e       	mov	r15, r31
    23c0:	f0 e0       	ldi	r31, 0x00	; 0
    23c2:	0f 2f       	mov	r16, r31
    23c4:	f0 e0       	ldi	r31, 0x00	; 0
    23c6:	1f 2f       	mov	r17, r31
    23c8:	f0 2d       	mov	r31, r0
    23ca:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <_Z9constrainlll>
    23ce:	eb 85       	ldd	r30, Y+11	; 0x0b
    23d0:	fc 85       	ldd	r31, Y+12	; 0x0c
    23d2:	80 81       	ld	r24, Z
    23d4:	0e 94 29 05 	call	0xa52	; 0xa52 <_Z11analogWritehh>
				}
				if (pWm3<lAstpwm3){
    23d8:	f5 01       	movw	r30, r10
    23da:	60 81       	ld	r22, Z
    23dc:	66 23       	and	r22, r22
    23de:	f1 f0       	breq	.+60     	; 0x241c <_Z8backwardv+0x16e>
					lAstpwm3-=step4;
    23e0:	e8 ef       	ldi	r30, 0xF8	; 248
    23e2:	f2 e0       	ldi	r31, 0x02	; 2
    23e4:	80 81       	ld	r24, Z
    23e6:	68 1b       	sub	r22, r24
    23e8:	ed 85       	ldd	r30, Y+13	; 0x0d
    23ea:	fe 85       	ldd	r31, Y+14	; 0x0e
    23ec:	60 83       	st	Z, r22
					analogWrite(pWmpin3,constrain(lAstpwm3,pWm3,255));
    23ee:	70 e0       	ldi	r23, 0x00	; 0
    23f0:	80 e0       	ldi	r24, 0x00	; 0
    23f2:	90 e0       	ldi	r25, 0x00	; 0
    23f4:	20 e0       	ldi	r18, 0x00	; 0
    23f6:	30 e0       	ldi	r19, 0x00	; 0
    23f8:	a9 01       	movw	r20, r18
    23fa:	0f 2e       	mov	r0, r31
    23fc:	ff ef       	ldi	r31, 0xFF	; 255
    23fe:	ef 2e       	mov	r14, r31
    2400:	f0 e0       	ldi	r31, 0x00	; 0
    2402:	ff 2e       	mov	r15, r31
    2404:	f0 e0       	ldi	r31, 0x00	; 0
    2406:	0f 2f       	mov	r16, r31
    2408:	f0 e0       	ldi	r31, 0x00	; 0
    240a:	1f 2f       	mov	r17, r31
    240c:	f0 2d       	mov	r31, r0
    240e:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <_Z9constrainlll>
    2412:	ef 85       	ldd	r30, Y+15	; 0x0f
    2414:	f8 89       	ldd	r31, Y+16	; 0x10
    2416:	80 81       	ld	r24, Z
    2418:	0e 94 29 05 	call	0xa52	; 0xa52 <_Z11analogWritehh>
				}
				delay(interval);		
    241c:	f3 01       	movw	r30, r6
    241e:	60 81       	ld	r22, Z
    2420:	70 e0       	ldi	r23, 0x00	; 0
    2422:	80 e0       	ldi	r24, 0x00	; 0
    2424:	90 e0       	ldi	r25, 0x00	; 0
    2426:	0e 94 62 06 	call	0xcc4	; 0xcc4 <_Z5delaym>
    242a:	4b c0       	rjmp	.+150    	; 0x24c2 <_Z8backwardv+0x214>
			
		}

		else if(pWm<lAstpwm||pWm1<lAstpwm1||pWm2<lAstpwm2||pWm3<lAstpwm3){				//decelerate

			for(lAstpwm=lAstpwm,lAstpwm1=lAstpwm1,lAstpwm2=lAstpwm2,lAstpwm3=lAstpwm3;lAstpwm>pWm||lAstpwm1>pWm1||lAstpwm2>pWm2||lAstpwm3>pWm3;){		//decrease the speed step by step
    242c:	0f 2e       	mov	r0, r31
    242e:	fa ee       	ldi	r31, 0xEA	; 234
    2430:	8f 2e       	mov	r8, r31
    2432:	f2 e0       	ldi	r31, 0x02	; 2
    2434:	9f 2e       	mov	r9, r31
    2436:	f0 2d       	mov	r31, r0
				if (pWm<lAstpwm){
					lAstpwm-=step1;
    2438:	0f 2e       	mov	r0, r31
    243a:	fb ee       	ldi	r31, 0xEB	; 235
    243c:	4f 2e       	mov	r4, r31
    243e:	f2 e0       	ldi	r31, 0x02	; 2
    2440:	5f 2e       	mov	r5, r31
    2442:	f0 2d       	mov	r31, r0
    2444:	a2 01       	movw	r20, r4
    2446:	41 50       	subi	r20, 0x01	; 1
    2448:	50 40       	sbci	r21, 0x00	; 0
    244a:	5a 83       	std	Y+2, r21	; 0x02
    244c:	49 83       	std	Y+1, r20	; 0x01
					analogWrite(pWmpin,constrain(lAstpwm,pWm,255));
    244e:	c2 01       	movw	r24, r4
    2450:	02 97       	sbiw	r24, 0x02	; 2
    2452:	9c 83       	std	Y+4, r25	; 0x04
    2454:	8b 83       	std	Y+3, r24	; 0x03
			
		}

		else if(pWm<lAstpwm||pWm1<lAstpwm1||pWm2<lAstpwm2||pWm3<lAstpwm3){				//decelerate

			for(lAstpwm=lAstpwm,lAstpwm1=lAstpwm1,lAstpwm2=lAstpwm2,lAstpwm3=lAstpwm3;lAstpwm>pWm||lAstpwm1>pWm1||lAstpwm2>pWm2||lAstpwm3>pWm3;){		//decrease the speed step by step
    2456:	0f 2e       	mov	r0, r31
    2458:	f3 ef       	ldi	r31, 0xF3	; 243
    245a:	cf 2e       	mov	r12, r31
    245c:	f2 e0       	ldi	r31, 0x02	; 2
    245e:	df 2e       	mov	r13, r31
    2460:	f0 2d       	mov	r31, r0
    2462:	0f 2e       	mov	r0, r31
    2464:	f7 ef       	ldi	r31, 0xF7	; 247
    2466:	af 2e       	mov	r10, r31
    2468:	f2 e0       	ldi	r31, 0x02	; 2
    246a:	bf 2e       	mov	r11, r31
    246c:	f0 2d       	mov	r31, r0
				if (pWm<lAstpwm){
					lAstpwm-=step1;
					analogWrite(pWmpin,constrain(lAstpwm,pWm,255));
				}
				if (pWm1<lAstpwm1){
					lAstpwm1-=step2;
    246e:	0f 2e       	mov	r0, r31
    2470:	f0 ef       	ldi	r31, 0xF0	; 240
    2472:	2f 2e       	mov	r2, r31
    2474:	f2 e0       	ldi	r31, 0x02	; 2
    2476:	3f 2e       	mov	r3, r31
    2478:	f0 2d       	mov	r31, r0
    247a:	f1 01       	movw	r30, r2
    247c:	31 97       	sbiw	r30, 0x01	; 1
    247e:	fe 83       	std	Y+6, r31	; 0x06
    2480:	ed 83       	std	Y+5, r30	; 0x05
					analogWrite(pWmpin1,constrain(lAstpwm1,pWm1,255));
    2482:	a1 01       	movw	r20, r2
    2484:	42 50       	subi	r20, 0x02	; 2
    2486:	50 40       	sbci	r21, 0x00	; 0
    2488:	58 87       	std	Y+8, r21	; 0x08
    248a:	4f 83       	std	Y+7, r20	; 0x07
				}
				if (pWm2<lAstpwm2){
					lAstpwm2-=step3;
    248c:	84 ef       	ldi	r24, 0xF4	; 244
    248e:	92 e0       	ldi	r25, 0x02	; 2
    2490:	01 97       	sbiw	r24, 0x01	; 1
    2492:	9a 87       	std	Y+10, r25	; 0x0a
    2494:	89 87       	std	Y+9, r24	; 0x09
					analogWrite(pWmpin2,constrain(lAstpwm2,pWm2,255));
    2496:	e4 ef       	ldi	r30, 0xF4	; 244
    2498:	f2 e0       	ldi	r31, 0x02	; 2
    249a:	32 97       	sbiw	r30, 0x02	; 2
    249c:	fc 87       	std	Y+12, r31	; 0x0c
    249e:	eb 87       	std	Y+11, r30	; 0x0b
				}
				if (pWm3<lAstpwm3){
					lAstpwm3-=step4;
    24a0:	48 ef       	ldi	r20, 0xF8	; 248
    24a2:	52 e0       	ldi	r21, 0x02	; 2
    24a4:	41 50       	subi	r20, 0x01	; 1
    24a6:	50 40       	sbci	r21, 0x00	; 0
    24a8:	5e 87       	std	Y+14, r21	; 0x0e
    24aa:	4d 87       	std	Y+13, r20	; 0x0d
					analogWrite(pWmpin3,constrain(lAstpwm3,pWm3,255));
    24ac:	88 ef       	ldi	r24, 0xF8	; 248
    24ae:	92 e0       	ldi	r25, 0x02	; 2
    24b0:	02 97       	sbiw	r24, 0x02	; 2
    24b2:	98 8b       	std	Y+16, r25	; 0x10
    24b4:	8f 87       	std	Y+15, r24	; 0x0f
				}
				delay(interval);		
    24b6:	0f 2e       	mov	r0, r31
    24b8:	fc ee       	ldi	r31, 0xEC	; 236
    24ba:	6f 2e       	mov	r6, r31
    24bc:	f2 e0       	ldi	r31, 0x02	; 2
    24be:	7f 2e       	mov	r7, r31
    24c0:	f0 2d       	mov	r31, r0
			
		}

		else if(pWm<lAstpwm||pWm1<lAstpwm1||pWm2<lAstpwm2||pWm3<lAstpwm3){				//decelerate

			for(lAstpwm=lAstpwm,lAstpwm1=lAstpwm1,lAstpwm2=lAstpwm2,lAstpwm3=lAstpwm3;lAstpwm>pWm||lAstpwm1>pWm1||lAstpwm2>pWm2||lAstpwm3>pWm3;){		//decrease the speed step by step
    24c2:	f4 01       	movw	r30, r8
    24c4:	60 81       	ld	r22, Z
    24c6:	66 23       	and	r22, r22
    24c8:	09 f0       	breq	.+2      	; 0x24cc <_Z8backwardv+0x21e>
    24ca:	25 cf       	rjmp	.-438    	; 0x2316 <_Z8backwardv+0x68>
    24cc:	ef ee       	ldi	r30, 0xEF	; 239
    24ce:	f2 e0       	ldi	r31, 0x02	; 2
    24d0:	80 81       	ld	r24, Z
    24d2:	88 23       	and	r24, r24
    24d4:	09 f0       	breq	.+2      	; 0x24d8 <_Z8backwardv+0x22a>
    24d6:	3c cf       	rjmp	.-392    	; 0x2350 <_Z8backwardv+0xa2>
    24d8:	f6 01       	movw	r30, r12
    24da:	80 81       	ld	r24, Z
    24dc:	88 23       	and	r24, r24
    24de:	09 f0       	breq	.+2      	; 0x24e2 <_Z8backwardv+0x234>
    24e0:	37 cf       	rjmp	.-402    	; 0x2350 <_Z8backwardv+0xa2>
    24e2:	f5 01       	movw	r30, r10
    24e4:	80 81       	ld	r24, Z
    24e6:	88 23       	and	r24, r24
    24e8:	a9 f0       	breq	.+42     	; 0x2514 <_Z8backwardv+0x266>
    24ea:	32 cf       	rjmp	.-412    	; 0x2350 <_Z8backwardv+0xa2>
				delay(interval);		
			}
		}

		else{		//no change
			analogWrite(pWmpin,pWm);
    24ec:	80 91 e9 02 	lds	r24, 0x02E9
    24f0:	60 e0       	ldi	r22, 0x00	; 0
    24f2:	0e 94 29 05 	call	0xa52	; 0xa52 <_Z11analogWritehh>
			analogWrite(pWmpin1,pWm1);
    24f6:	80 91 ee 02 	lds	r24, 0x02EE
    24fa:	60 e0       	ldi	r22, 0x00	; 0
    24fc:	0e 94 29 05 	call	0xa52	; 0xa52 <_Z11analogWritehh>
			analogWrite(pWmpin2,pWm2);
    2500:	80 91 f2 02 	lds	r24, 0x02F2
    2504:	60 e0       	ldi	r22, 0x00	; 0
    2506:	0e 94 29 05 	call	0xa52	; 0xa52 <_Z11analogWritehh>
			analogWrite(pWmpin3,pWm3);
    250a:	80 91 f6 02 	lds	r24, 0x02F6
    250e:	60 e0       	ldi	r22, 0x00	; 0
    2510:	0e 94 29 05 	call	0xa52	; 0xa52 <_Z11analogWritehh>
	motors.drive(0,0,0,0);

	angle=120;
    2514:	88 e7       	ldi	r24, 0x78	; 120
    2516:	90 e0       	ldi	r25, 0x00	; 0
    2518:	90 93 d1 02 	sts	0x02D1, r25
    251c:	80 93 d0 02 	sts	0x02D0, r24
     }
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,200,iCr/39,iCr/8.3),iCr/40,iCr/8);
    2520:	a0 90 dc 02 	lds	r10, 0x02DC
    2524:	b0 90 dd 02 	lds	r11, 0x02DD
    2528:	c5 01       	movw	r24, r10
    252a:	67 e2       	ldi	r22, 0x27	; 39
    252c:	70 e0       	ldi	r23, 0x00	; 0
    252e:	0e 94 60 1b 	call	0x36c0	; 0x36c0 <__divmodhi4>
    2532:	6b 01       	movw	r12, r22
    2534:	ee 24       	eor	r14, r14
    2536:	d7 fc       	sbrc	r13, 7
    2538:	e0 94       	com	r14
    253a:	fe 2c       	mov	r15, r14
    253c:	b5 01       	movw	r22, r10
    253e:	88 27       	eor	r24, r24
    2540:	77 fd       	sbrc	r23, 7
    2542:	80 95       	com	r24
    2544:	98 2f       	mov	r25, r24
    2546:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <__floatsisf>
    254a:	2d ec       	ldi	r18, 0xCD	; 205
    254c:	3c ec       	ldi	r19, 0xCC	; 204
    254e:	44 e0       	ldi	r20, 0x04	; 4
    2550:	51 e4       	ldi	r21, 0x41	; 65
    2552:	0e 94 b7 19 	call	0x336e	; 0x336e <__divsf3>
    2556:	0e 94 1f 1a 	call	0x343e	; 0x343e <__fixsfsi>
        break; 
    }   
  }
  long mapAngle(long x, long in_min, long in_max, long out_min, long out_max)
  {
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    255a:	6c 19       	sub	r22, r12
    255c:	7d 09       	sbc	r23, r13
    255e:	8e 09       	sbc	r24, r14
    2560:	9f 09       	sbc	r25, r15
	swerve1.write(angle+correction[0]);
    2562:	20 91 c8 02 	lds	r18, 0x02C8
    2566:	30 91 c9 02 	lds	r19, 0x02C9
    256a:	28 58       	subi	r18, 0x88	; 136
    256c:	3f 4f       	sbci	r19, 0xFF	; 255
     }
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,200,iCr/39,iCr/8.3),iCr/40,iCr/8);
    256e:	44 27       	eor	r20, r20
    2570:	37 fd       	sbrc	r19, 7
    2572:	40 95       	com	r20
    2574:	54 2f       	mov	r21, r20
        break; 
    }   
  }
  long mapAngle(long x, long in_min, long in_max, long out_min, long out_max)
  {
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    2576:	0e 94 41 1b 	call	0x3682	; 0x3682 <__mulsi3>
    257a:	28 ec       	ldi	r18, 0xC8	; 200
    257c:	30 e0       	ldi	r19, 0x00	; 0
    257e:	40 e0       	ldi	r20, 0x00	; 0
    2580:	50 e0       	ldi	r21, 0x00	; 0
    2582:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <__divmodsi4>
    2586:	89 01       	movw	r16, r18
    2588:	9a 01       	movw	r18, r20
    258a:	0c 0d       	add	r16, r12
    258c:	1d 1d       	adc	r17, r13
    258e:	2e 1d       	adc	r18, r14
    2590:	3f 1d       	adc	r19, r15
     }
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,200,iCr/39,iCr/8.3),iCr/40,iCr/8);
    2592:	c5 01       	movw	r24, r10
    2594:	bb 20       	and	r11, r11
    2596:	0c f4       	brge	.+2      	; 0x259a <_Z8backwardv+0x2ec>
    2598:	07 96       	adiw	r24, 0x07	; 7
    259a:	95 95       	asr	r25
    259c:	87 95       	ror	r24
    259e:	95 95       	asr	r25
    25a0:	87 95       	ror	r24
    25a2:	95 95       	asr	r25
    25a4:	87 95       	ror	r24
    25a6:	aa 27       	eor	r26, r26
    25a8:	97 fd       	sbrc	r25, 7
    25aa:	a0 95       	com	r26
    25ac:	ba 2f       	mov	r27, r26
  {
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  }
  long constraint(long nUm,long lOwer,long uPper)
  {
    if(nUm>uPper){
    25ae:	80 17       	cp	r24, r16
    25b0:	91 07       	cpc	r25, r17
    25b2:	a2 07       	cpc	r26, r18
    25b4:	b3 07       	cpc	r27, r19
    25b6:	a4 f0       	brlt	.+40     	; 0x25e0 <_Z8backwardv+0x332>
     }
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,200,iCr/39,iCr/8.3),iCr/40,iCr/8);
    25b8:	c5 01       	movw	r24, r10
    25ba:	68 e2       	ldi	r22, 0x28	; 40
    25bc:	70 e0       	ldi	r23, 0x00	; 0
    25be:	0e 94 60 1b 	call	0x36c0	; 0x36c0 <__divmodhi4>
    25c2:	cb 01       	movw	r24, r22
    25c4:	ac 01       	movw	r20, r24
    25c6:	66 27       	eor	r22, r22
    25c8:	57 fd       	sbrc	r21, 7
    25ca:	60 95       	com	r22
    25cc:	76 2f       	mov	r23, r22
    25ce:	d9 01       	movw	r26, r18
    25d0:	c8 01       	movw	r24, r16
    25d2:	04 17       	cp	r16, r20
    25d4:	15 07       	cpc	r17, r21
    25d6:	26 07       	cpc	r18, r22
    25d8:	37 07       	cpc	r19, r23
    25da:	14 f4       	brge	.+4      	; 0x25e0 <_Z8backwardv+0x332>
    25dc:	db 01       	movw	r26, r22
    25de:	ca 01       	movw	r24, r20
    switch(pIn)
    25e0:	20 91 de 02 	lds	r18, 0x02DE
    25e4:	28 30       	cpi	r18, 0x08	; 8
    25e6:	09 f4       	brne	.+2      	; 0x25ea <_Z8backwardv+0x33c>
    25e8:	7a c0       	rjmp	.+244    	; 0x26de <_Z8backwardv+0x430>
    25ea:	29 30       	cpi	r18, 0x09	; 9
    25ec:	90 f4       	brcc	.+36     	; 0x2612 <_Z8backwardv+0x364>
    25ee:	25 30       	cpi	r18, 0x05	; 5
    25f0:	d1 f1       	breq	.+116    	; 0x2666 <_Z8backwardv+0x3b8>
    25f2:	26 30       	cpi	r18, 0x06	; 6
    25f4:	38 f4       	brcc	.+14     	; 0x2604 <_Z8backwardv+0x356>
    25f6:	22 30       	cpi	r18, 0x02	; 2
    25f8:	09 f4       	brne	.+2      	; 0x25fc <_Z8backwardv+0x34e>
    25fa:	41 c0       	rjmp	.+130    	; 0x267e <_Z8backwardv+0x3d0>
    25fc:	23 30       	cpi	r18, 0x03	; 3
    25fe:	09 f0       	breq	.+2      	; 0x2602 <_Z8backwardv+0x354>
    2600:	9d c0       	rjmp	.+314    	; 0x273c <_Z8backwardv+0x48e>
    2602:	49 c0       	rjmp	.+146    	; 0x2696 <_Z8backwardv+0x3e8>
    2604:	26 30       	cpi	r18, 0x06	; 6
    2606:	09 f4       	brne	.+2      	; 0x260a <_Z8backwardv+0x35c>
    2608:	52 c0       	rjmp	.+164    	; 0x26ae <_Z8backwardv+0x400>
    260a:	27 30       	cpi	r18, 0x07	; 7
    260c:	09 f0       	breq	.+2      	; 0x2610 <_Z8backwardv+0x362>
    260e:	96 c0       	rjmp	.+300    	; 0x273c <_Z8backwardv+0x48e>
    2610:	5a c0       	rjmp	.+180    	; 0x26c6 <_Z8backwardv+0x418>
    2612:	2c 32       	cpi	r18, 0x2C	; 44
    2614:	09 f4       	brne	.+2      	; 0x2618 <_Z8backwardv+0x36a>
    2616:	87 c0       	rjmp	.+270    	; 0x2726 <_Z8backwardv+0x478>
    2618:	2d 32       	cpi	r18, 0x2D	; 45
    261a:	30 f4       	brcc	.+12     	; 0x2628 <_Z8backwardv+0x37a>
    261c:	2b 30       	cpi	r18, 0x0B	; 11
    261e:	59 f0       	breq	.+22     	; 0x2636 <_Z8backwardv+0x388>
    2620:	2c 30       	cpi	r18, 0x0C	; 12
    2622:	09 f0       	breq	.+2      	; 0x2626 <_Z8backwardv+0x378>
    2624:	8b c0       	rjmp	.+278    	; 0x273c <_Z8backwardv+0x48e>
    2626:	13 c0       	rjmp	.+38     	; 0x264e <_Z8backwardv+0x3a0>
    2628:	2d 32       	cpi	r18, 0x2D	; 45
    262a:	09 f4       	brne	.+2      	; 0x262e <_Z8backwardv+0x380>
    262c:	70 c0       	rjmp	.+224    	; 0x270e <_Z8backwardv+0x460>
    262e:	2e 32       	cpi	r18, 0x2E	; 46
    2630:	09 f0       	breq	.+2      	; 0x2634 <_Z8backwardv+0x386>
    2632:	84 c0       	rjmp	.+264    	; 0x273c <_Z8backwardv+0x48e>
    2634:	60 c0       	rjmp	.+192    	; 0x26f6 <_Z8backwardv+0x448>
    {
      case 11:
        OCR1A=ICR1-vAl;
    2636:	20 91 86 00 	lds	r18, 0x0086
    263a:	30 91 87 00 	lds	r19, 0x0087
    263e:	f9 01       	movw	r30, r18
    2640:	e8 1b       	sub	r30, r24
    2642:	f9 0b       	sbc	r31, r25
    2644:	f0 93 89 00 	sts	0x0089, r31
    2648:	e0 93 88 00 	sts	0x0088, r30
    264c:	77 c0       	rjmp	.+238    	; 0x273c <_Z8backwardv+0x48e>
        break;
      case 12:
        OCR1B=ICR1-vAl;
    264e:	20 91 86 00 	lds	r18, 0x0086
    2652:	30 91 87 00 	lds	r19, 0x0087
    2656:	a9 01       	movw	r20, r18
    2658:	48 1b       	sub	r20, r24
    265a:	59 0b       	sbc	r21, r25
    265c:	50 93 8b 00 	sts	0x008B, r21
    2660:	40 93 8a 00 	sts	0x008A, r20
    2664:	6b c0       	rjmp	.+214    	; 0x273c <_Z8backwardv+0x48e>
        break;
      case 5:
        OCR3A=ICR3-vAl;
    2666:	20 91 96 00 	lds	r18, 0x0096
    266a:	30 91 97 00 	lds	r19, 0x0097
    266e:	f9 01       	movw	r30, r18
    2670:	e8 1b       	sub	r30, r24
    2672:	f9 0b       	sbc	r31, r25
    2674:	f0 93 99 00 	sts	0x0099, r31
    2678:	e0 93 98 00 	sts	0x0098, r30
    267c:	5f c0       	rjmp	.+190    	; 0x273c <_Z8backwardv+0x48e>
        break;
      case 2:
        OCR3B=ICR3-vAl;
    267e:	20 91 96 00 	lds	r18, 0x0096
    2682:	30 91 97 00 	lds	r19, 0x0097
    2686:	a9 01       	movw	r20, r18
    2688:	48 1b       	sub	r20, r24
    268a:	59 0b       	sbc	r21, r25
    268c:	50 93 9b 00 	sts	0x009B, r21
    2690:	40 93 9a 00 	sts	0x009A, r20
    2694:	53 c0       	rjmp	.+166    	; 0x273c <_Z8backwardv+0x48e>
        break;
      case 3:
        OCR3C=ICR3-vAl;
    2696:	20 91 96 00 	lds	r18, 0x0096
    269a:	30 91 97 00 	lds	r19, 0x0097
    269e:	f9 01       	movw	r30, r18
    26a0:	e8 1b       	sub	r30, r24
    26a2:	f9 0b       	sbc	r31, r25
    26a4:	f0 93 9d 00 	sts	0x009D, r31
    26a8:	e0 93 9c 00 	sts	0x009C, r30
    26ac:	47 c0       	rjmp	.+142    	; 0x273c <_Z8backwardv+0x48e>
        break;
      case 6:
        OCR4A=ICR4-vAl;
    26ae:	20 91 a6 00 	lds	r18, 0x00A6
    26b2:	30 91 a7 00 	lds	r19, 0x00A7
    26b6:	a9 01       	movw	r20, r18
    26b8:	48 1b       	sub	r20, r24
    26ba:	59 0b       	sbc	r21, r25
    26bc:	50 93 a9 00 	sts	0x00A9, r21
    26c0:	40 93 a8 00 	sts	0x00A8, r20
    26c4:	3b c0       	rjmp	.+118    	; 0x273c <_Z8backwardv+0x48e>
        break;
      case 7:
        OCR4B=ICR4-vAl;
    26c6:	20 91 a6 00 	lds	r18, 0x00A6
    26ca:	30 91 a7 00 	lds	r19, 0x00A7
    26ce:	f9 01       	movw	r30, r18
    26d0:	e8 1b       	sub	r30, r24
    26d2:	f9 0b       	sbc	r31, r25
    26d4:	f0 93 ab 00 	sts	0x00AB, r31
    26d8:	e0 93 aa 00 	sts	0x00AA, r30
    26dc:	2f c0       	rjmp	.+94     	; 0x273c <_Z8backwardv+0x48e>
        break; 
      case 8:
        OCR4C=ICR4-vAl;
    26de:	20 91 a6 00 	lds	r18, 0x00A6
    26e2:	30 91 a7 00 	lds	r19, 0x00A7
    26e6:	a9 01       	movw	r20, r18
    26e8:	48 1b       	sub	r20, r24
    26ea:	59 0b       	sbc	r21, r25
    26ec:	50 93 ad 00 	sts	0x00AD, r21
    26f0:	40 93 ac 00 	sts	0x00AC, r20
    26f4:	23 c0       	rjmp	.+70     	; 0x273c <_Z8backwardv+0x48e>
        break;
      case 46:
        OCR5A=ICR5-vAl;
    26f6:	20 91 26 01 	lds	r18, 0x0126
    26fa:	30 91 27 01 	lds	r19, 0x0127
    26fe:	f9 01       	movw	r30, r18
    2700:	e8 1b       	sub	r30, r24
    2702:	f9 0b       	sbc	r31, r25
    2704:	f0 93 29 01 	sts	0x0129, r31
    2708:	e0 93 28 01 	sts	0x0128, r30
    270c:	17 c0       	rjmp	.+46     	; 0x273c <_Z8backwardv+0x48e>
        break;
      case 45:
        OCR5B=ICR5-vAl;
    270e:	20 91 26 01 	lds	r18, 0x0126
    2712:	30 91 27 01 	lds	r19, 0x0127
    2716:	a9 01       	movw	r20, r18
    2718:	48 1b       	sub	r20, r24
    271a:	59 0b       	sbc	r21, r25
    271c:	50 93 2b 01 	sts	0x012B, r21
    2720:	40 93 2a 01 	sts	0x012A, r20
    2724:	0b c0       	rjmp	.+22     	; 0x273c <_Z8backwardv+0x48e>
        break;
      case 44:
        OCR5C=ICR5-vAl;
    2726:	20 91 26 01 	lds	r18, 0x0126
    272a:	30 91 27 01 	lds	r19, 0x0127
    272e:	f9 01       	movw	r30, r18
    2730:	e8 1b       	sub	r30, r24
    2732:	f9 0b       	sbc	r31, r25
    2734:	f0 93 2d 01 	sts	0x012D, r31
    2738:	e0 93 2c 01 	sts	0x012C, r30
     }
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,200,iCr/39,iCr/8.3),iCr/40,iCr/8);
    273c:	a0 90 df 02 	lds	r10, 0x02DF
    2740:	b0 90 e0 02 	lds	r11, 0x02E0
    2744:	c5 01       	movw	r24, r10
    2746:	67 e2       	ldi	r22, 0x27	; 39
    2748:	70 e0       	ldi	r23, 0x00	; 0
    274a:	0e 94 60 1b 	call	0x36c0	; 0x36c0 <__divmodhi4>
    274e:	6b 01       	movw	r12, r22
    2750:	ee 24       	eor	r14, r14
    2752:	d7 fc       	sbrc	r13, 7
    2754:	e0 94       	com	r14
    2756:	fe 2c       	mov	r15, r14
    2758:	b5 01       	movw	r22, r10
    275a:	88 27       	eor	r24, r24
    275c:	77 fd       	sbrc	r23, 7
    275e:	80 95       	com	r24
    2760:	98 2f       	mov	r25, r24
    2762:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <__floatsisf>
    2766:	2d ec       	ldi	r18, 0xCD	; 205
    2768:	3c ec       	ldi	r19, 0xCC	; 204
    276a:	44 e0       	ldi	r20, 0x04	; 4
    276c:	51 e4       	ldi	r21, 0x41	; 65
    276e:	0e 94 b7 19 	call	0x336e	; 0x336e <__divsf3>
    2772:	0e 94 1f 1a 	call	0x343e	; 0x343e <__fixsfsi>
        break; 
    }   
  }
  long mapAngle(long x, long in_min, long in_max, long out_min, long out_max)
  {
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    2776:	6c 19       	sub	r22, r12
    2778:	7d 09       	sbc	r23, r13
    277a:	8e 09       	sbc	r24, r14
    277c:	9f 09       	sbc	r25, r15
	swerve2.write(angle+correction[1]);
    277e:	40 91 d0 02 	lds	r20, 0x02D0
    2782:	50 91 d1 02 	lds	r21, 0x02D1
    2786:	20 91 ca 02 	lds	r18, 0x02CA
    278a:	30 91 cb 02 	lds	r19, 0x02CB
    278e:	24 0f       	add	r18, r20
    2790:	35 1f       	adc	r19, r21
     }
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,200,iCr/39,iCr/8.3),iCr/40,iCr/8);
    2792:	44 27       	eor	r20, r20
    2794:	37 fd       	sbrc	r19, 7
    2796:	40 95       	com	r20
    2798:	54 2f       	mov	r21, r20
        break; 
    }   
  }
  long mapAngle(long x, long in_min, long in_max, long out_min, long out_max)
  {
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    279a:	0e 94 41 1b 	call	0x3682	; 0x3682 <__mulsi3>
    279e:	28 ec       	ldi	r18, 0xC8	; 200
    27a0:	30 e0       	ldi	r19, 0x00	; 0
    27a2:	40 e0       	ldi	r20, 0x00	; 0
    27a4:	50 e0       	ldi	r21, 0x00	; 0
    27a6:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <__divmodsi4>
    27aa:	89 01       	movw	r16, r18
    27ac:	9a 01       	movw	r18, r20
    27ae:	0c 0d       	add	r16, r12
    27b0:	1d 1d       	adc	r17, r13
    27b2:	2e 1d       	adc	r18, r14
    27b4:	3f 1d       	adc	r19, r15
     }
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,200,iCr/39,iCr/8.3),iCr/40,iCr/8);
    27b6:	c5 01       	movw	r24, r10
    27b8:	bb 20       	and	r11, r11
    27ba:	0c f4       	brge	.+2      	; 0x27be <_Z8backwardv+0x510>
    27bc:	07 96       	adiw	r24, 0x07	; 7
    27be:	95 95       	asr	r25
    27c0:	87 95       	ror	r24
    27c2:	95 95       	asr	r25
    27c4:	87 95       	ror	r24
    27c6:	95 95       	asr	r25
    27c8:	87 95       	ror	r24
    27ca:	aa 27       	eor	r26, r26
    27cc:	97 fd       	sbrc	r25, 7
    27ce:	a0 95       	com	r26
    27d0:	ba 2f       	mov	r27, r26
  {
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  }
  long constraint(long nUm,long lOwer,long uPper)
  {
    if(nUm>uPper){
    27d2:	80 17       	cp	r24, r16
    27d4:	91 07       	cpc	r25, r17
    27d6:	a2 07       	cpc	r26, r18
    27d8:	b3 07       	cpc	r27, r19
    27da:	a4 f0       	brlt	.+40     	; 0x2804 <_Z8backwardv+0x556>
     }
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,200,iCr/39,iCr/8.3),iCr/40,iCr/8);
    27dc:	c5 01       	movw	r24, r10
    27de:	68 e2       	ldi	r22, 0x28	; 40
    27e0:	70 e0       	ldi	r23, 0x00	; 0
    27e2:	0e 94 60 1b 	call	0x36c0	; 0x36c0 <__divmodhi4>
    27e6:	cb 01       	movw	r24, r22
    27e8:	ac 01       	movw	r20, r24
    27ea:	66 27       	eor	r22, r22
    27ec:	57 fd       	sbrc	r21, 7
    27ee:	60 95       	com	r22
    27f0:	76 2f       	mov	r23, r22
    27f2:	d9 01       	movw	r26, r18
    27f4:	c8 01       	movw	r24, r16
    27f6:	04 17       	cp	r16, r20
    27f8:	15 07       	cpc	r17, r21
    27fa:	26 07       	cpc	r18, r22
    27fc:	37 07       	cpc	r19, r23
    27fe:	14 f4       	brge	.+4      	; 0x2804 <_Z8backwardv+0x556>
    2800:	db 01       	movw	r26, r22
    2802:	ca 01       	movw	r24, r20
    switch(pIn)
    2804:	20 91 e1 02 	lds	r18, 0x02E1
    2808:	28 30       	cpi	r18, 0x08	; 8
    280a:	09 f4       	brne	.+2      	; 0x280e <_Z8backwardv+0x560>
    280c:	7a c0       	rjmp	.+244    	; 0x2902 <_Z8backwardv+0x654>
    280e:	29 30       	cpi	r18, 0x09	; 9
    2810:	90 f4       	brcc	.+36     	; 0x2836 <_Z8backwardv+0x588>
    2812:	25 30       	cpi	r18, 0x05	; 5
    2814:	d1 f1       	breq	.+116    	; 0x288a <_Z8backwardv+0x5dc>
    2816:	26 30       	cpi	r18, 0x06	; 6
    2818:	38 f4       	brcc	.+14     	; 0x2828 <_Z8backwardv+0x57a>
    281a:	22 30       	cpi	r18, 0x02	; 2
    281c:	09 f4       	brne	.+2      	; 0x2820 <_Z8backwardv+0x572>
    281e:	41 c0       	rjmp	.+130    	; 0x28a2 <_Z8backwardv+0x5f4>
    2820:	23 30       	cpi	r18, 0x03	; 3
    2822:	09 f0       	breq	.+2      	; 0x2826 <_Z8backwardv+0x578>
    2824:	9d c0       	rjmp	.+314    	; 0x2960 <_Z8backwardv+0x6b2>
    2826:	49 c0       	rjmp	.+146    	; 0x28ba <_Z8backwardv+0x60c>
    2828:	26 30       	cpi	r18, 0x06	; 6
    282a:	09 f4       	brne	.+2      	; 0x282e <_Z8backwardv+0x580>
    282c:	52 c0       	rjmp	.+164    	; 0x28d2 <_Z8backwardv+0x624>
    282e:	27 30       	cpi	r18, 0x07	; 7
    2830:	09 f0       	breq	.+2      	; 0x2834 <_Z8backwardv+0x586>
    2832:	96 c0       	rjmp	.+300    	; 0x2960 <_Z8backwardv+0x6b2>
    2834:	5a c0       	rjmp	.+180    	; 0x28ea <_Z8backwardv+0x63c>
    2836:	2c 32       	cpi	r18, 0x2C	; 44
    2838:	09 f4       	brne	.+2      	; 0x283c <_Z8backwardv+0x58e>
    283a:	87 c0       	rjmp	.+270    	; 0x294a <_Z8backwardv+0x69c>
    283c:	2d 32       	cpi	r18, 0x2D	; 45
    283e:	30 f4       	brcc	.+12     	; 0x284c <_Z8backwardv+0x59e>
    2840:	2b 30       	cpi	r18, 0x0B	; 11
    2842:	59 f0       	breq	.+22     	; 0x285a <_Z8backwardv+0x5ac>
    2844:	2c 30       	cpi	r18, 0x0C	; 12
    2846:	09 f0       	breq	.+2      	; 0x284a <_Z8backwardv+0x59c>
    2848:	8b c0       	rjmp	.+278    	; 0x2960 <_Z8backwardv+0x6b2>
    284a:	13 c0       	rjmp	.+38     	; 0x2872 <_Z8backwardv+0x5c4>
    284c:	2d 32       	cpi	r18, 0x2D	; 45
    284e:	09 f4       	brne	.+2      	; 0x2852 <_Z8backwardv+0x5a4>
    2850:	70 c0       	rjmp	.+224    	; 0x2932 <_Z8backwardv+0x684>
    2852:	2e 32       	cpi	r18, 0x2E	; 46
    2854:	09 f0       	breq	.+2      	; 0x2858 <_Z8backwardv+0x5aa>
    2856:	84 c0       	rjmp	.+264    	; 0x2960 <_Z8backwardv+0x6b2>
    2858:	60 c0       	rjmp	.+192    	; 0x291a <_Z8backwardv+0x66c>
    {
      case 11:
        OCR1A=ICR1-vAl;
    285a:	20 91 86 00 	lds	r18, 0x0086
    285e:	30 91 87 00 	lds	r19, 0x0087
    2862:	f9 01       	movw	r30, r18
    2864:	e8 1b       	sub	r30, r24
    2866:	f9 0b       	sbc	r31, r25
    2868:	f0 93 89 00 	sts	0x0089, r31
    286c:	e0 93 88 00 	sts	0x0088, r30
    2870:	77 c0       	rjmp	.+238    	; 0x2960 <_Z8backwardv+0x6b2>
        break;
      case 12:
        OCR1B=ICR1-vAl;
    2872:	20 91 86 00 	lds	r18, 0x0086
    2876:	30 91 87 00 	lds	r19, 0x0087
    287a:	a9 01       	movw	r20, r18
    287c:	48 1b       	sub	r20, r24
    287e:	59 0b       	sbc	r21, r25
    2880:	50 93 8b 00 	sts	0x008B, r21
    2884:	40 93 8a 00 	sts	0x008A, r20
    2888:	6b c0       	rjmp	.+214    	; 0x2960 <_Z8backwardv+0x6b2>
        break;
      case 5:
        OCR3A=ICR3-vAl;
    288a:	20 91 96 00 	lds	r18, 0x0096
    288e:	30 91 97 00 	lds	r19, 0x0097
    2892:	f9 01       	movw	r30, r18
    2894:	e8 1b       	sub	r30, r24
    2896:	f9 0b       	sbc	r31, r25
    2898:	f0 93 99 00 	sts	0x0099, r31
    289c:	e0 93 98 00 	sts	0x0098, r30
    28a0:	5f c0       	rjmp	.+190    	; 0x2960 <_Z8backwardv+0x6b2>
        break;
      case 2:
        OCR3B=ICR3-vAl;
    28a2:	20 91 96 00 	lds	r18, 0x0096
    28a6:	30 91 97 00 	lds	r19, 0x0097
    28aa:	a9 01       	movw	r20, r18
    28ac:	48 1b       	sub	r20, r24
    28ae:	59 0b       	sbc	r21, r25
    28b0:	50 93 9b 00 	sts	0x009B, r21
    28b4:	40 93 9a 00 	sts	0x009A, r20
    28b8:	53 c0       	rjmp	.+166    	; 0x2960 <_Z8backwardv+0x6b2>
        break;
      case 3:
        OCR3C=ICR3-vAl;
    28ba:	20 91 96 00 	lds	r18, 0x0096
    28be:	30 91 97 00 	lds	r19, 0x0097
    28c2:	f9 01       	movw	r30, r18
    28c4:	e8 1b       	sub	r30, r24
    28c6:	f9 0b       	sbc	r31, r25
    28c8:	f0 93 9d 00 	sts	0x009D, r31
    28cc:	e0 93 9c 00 	sts	0x009C, r30
    28d0:	47 c0       	rjmp	.+142    	; 0x2960 <_Z8backwardv+0x6b2>
        break;
      case 6:
        OCR4A=ICR4-vAl;
    28d2:	20 91 a6 00 	lds	r18, 0x00A6
    28d6:	30 91 a7 00 	lds	r19, 0x00A7
    28da:	a9 01       	movw	r20, r18
    28dc:	48 1b       	sub	r20, r24
    28de:	59 0b       	sbc	r21, r25
    28e0:	50 93 a9 00 	sts	0x00A9, r21
    28e4:	40 93 a8 00 	sts	0x00A8, r20
    28e8:	3b c0       	rjmp	.+118    	; 0x2960 <_Z8backwardv+0x6b2>
        break;
      case 7:
        OCR4B=ICR4-vAl;
    28ea:	20 91 a6 00 	lds	r18, 0x00A6
    28ee:	30 91 a7 00 	lds	r19, 0x00A7
    28f2:	f9 01       	movw	r30, r18
    28f4:	e8 1b       	sub	r30, r24
    28f6:	f9 0b       	sbc	r31, r25
    28f8:	f0 93 ab 00 	sts	0x00AB, r31
    28fc:	e0 93 aa 00 	sts	0x00AA, r30
    2900:	2f c0       	rjmp	.+94     	; 0x2960 <_Z8backwardv+0x6b2>
        break; 
      case 8:
        OCR4C=ICR4-vAl;
    2902:	20 91 a6 00 	lds	r18, 0x00A6
    2906:	30 91 a7 00 	lds	r19, 0x00A7
    290a:	a9 01       	movw	r20, r18
    290c:	48 1b       	sub	r20, r24
    290e:	59 0b       	sbc	r21, r25
    2910:	50 93 ad 00 	sts	0x00AD, r21
    2914:	40 93 ac 00 	sts	0x00AC, r20
    2918:	23 c0       	rjmp	.+70     	; 0x2960 <_Z8backwardv+0x6b2>
        break;
      case 46:
        OCR5A=ICR5-vAl;
    291a:	20 91 26 01 	lds	r18, 0x0126
    291e:	30 91 27 01 	lds	r19, 0x0127
    2922:	f9 01       	movw	r30, r18
    2924:	e8 1b       	sub	r30, r24
    2926:	f9 0b       	sbc	r31, r25
    2928:	f0 93 29 01 	sts	0x0129, r31
    292c:	e0 93 28 01 	sts	0x0128, r30
    2930:	17 c0       	rjmp	.+46     	; 0x2960 <_Z8backwardv+0x6b2>
        break;
      case 45:
        OCR5B=ICR5-vAl;
    2932:	20 91 26 01 	lds	r18, 0x0126
    2936:	30 91 27 01 	lds	r19, 0x0127
    293a:	a9 01       	movw	r20, r18
    293c:	48 1b       	sub	r20, r24
    293e:	59 0b       	sbc	r21, r25
    2940:	50 93 2b 01 	sts	0x012B, r21
    2944:	40 93 2a 01 	sts	0x012A, r20
    2948:	0b c0       	rjmp	.+22     	; 0x2960 <_Z8backwardv+0x6b2>
        break;
      case 44:
        OCR5C=ICR5-vAl;
    294a:	20 91 26 01 	lds	r18, 0x0126
    294e:	30 91 27 01 	lds	r19, 0x0127
    2952:	f9 01       	movw	r30, r18
    2954:	e8 1b       	sub	r30, r24
    2956:	f9 0b       	sbc	r31, r25
    2958:	f0 93 2d 01 	sts	0x012D, r31
    295c:	e0 93 2c 01 	sts	0x012C, r30
     }
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,200,iCr/39,iCr/8.3),iCr/40,iCr/8);
    2960:	a0 90 e2 02 	lds	r10, 0x02E2
    2964:	b0 90 e3 02 	lds	r11, 0x02E3
    2968:	c5 01       	movw	r24, r10
    296a:	67 e2       	ldi	r22, 0x27	; 39
    296c:	70 e0       	ldi	r23, 0x00	; 0
    296e:	0e 94 60 1b 	call	0x36c0	; 0x36c0 <__divmodhi4>
    2972:	6b 01       	movw	r12, r22
    2974:	ee 24       	eor	r14, r14
    2976:	d7 fc       	sbrc	r13, 7
    2978:	e0 94       	com	r14
    297a:	fe 2c       	mov	r15, r14
    297c:	b5 01       	movw	r22, r10
    297e:	88 27       	eor	r24, r24
    2980:	77 fd       	sbrc	r23, 7
    2982:	80 95       	com	r24
    2984:	98 2f       	mov	r25, r24
    2986:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <__floatsisf>
    298a:	2d ec       	ldi	r18, 0xCD	; 205
    298c:	3c ec       	ldi	r19, 0xCC	; 204
    298e:	44 e0       	ldi	r20, 0x04	; 4
    2990:	51 e4       	ldi	r21, 0x41	; 65
    2992:	0e 94 b7 19 	call	0x336e	; 0x336e <__divsf3>
    2996:	0e 94 1f 1a 	call	0x343e	; 0x343e <__fixsfsi>
        break; 
    }   
  }
  long mapAngle(long x, long in_min, long in_max, long out_min, long out_max)
  {
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    299a:	6c 19       	sub	r22, r12
    299c:	7d 09       	sbc	r23, r13
    299e:	8e 09       	sbc	r24, r14
    29a0:	9f 09       	sbc	r25, r15
	swerve3.write(angle+correction[2]);
    29a2:	40 91 d0 02 	lds	r20, 0x02D0
    29a6:	50 91 d1 02 	lds	r21, 0x02D1
    29aa:	20 91 cc 02 	lds	r18, 0x02CC
    29ae:	30 91 cd 02 	lds	r19, 0x02CD
    29b2:	24 0f       	add	r18, r20
    29b4:	35 1f       	adc	r19, r21
     }
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,200,iCr/39,iCr/8.3),iCr/40,iCr/8);
    29b6:	44 27       	eor	r20, r20
    29b8:	37 fd       	sbrc	r19, 7
    29ba:	40 95       	com	r20
    29bc:	54 2f       	mov	r21, r20
        break; 
    }   
  }
  long mapAngle(long x, long in_min, long in_max, long out_min, long out_max)
  {
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    29be:	0e 94 41 1b 	call	0x3682	; 0x3682 <__mulsi3>
    29c2:	28 ec       	ldi	r18, 0xC8	; 200
    29c4:	30 e0       	ldi	r19, 0x00	; 0
    29c6:	40 e0       	ldi	r20, 0x00	; 0
    29c8:	50 e0       	ldi	r21, 0x00	; 0
    29ca:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <__divmodsi4>
    29ce:	89 01       	movw	r16, r18
    29d0:	9a 01       	movw	r18, r20
    29d2:	0c 0d       	add	r16, r12
    29d4:	1d 1d       	adc	r17, r13
    29d6:	2e 1d       	adc	r18, r14
    29d8:	3f 1d       	adc	r19, r15
     }
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,200,iCr/39,iCr/8.3),iCr/40,iCr/8);
    29da:	c5 01       	movw	r24, r10
    29dc:	bb 20       	and	r11, r11
    29de:	0c f4       	brge	.+2      	; 0x29e2 <_Z8backwardv+0x734>
    29e0:	07 96       	adiw	r24, 0x07	; 7
    29e2:	95 95       	asr	r25
    29e4:	87 95       	ror	r24
    29e6:	95 95       	asr	r25
    29e8:	87 95       	ror	r24
    29ea:	95 95       	asr	r25
    29ec:	87 95       	ror	r24
    29ee:	aa 27       	eor	r26, r26
    29f0:	97 fd       	sbrc	r25, 7
    29f2:	a0 95       	com	r26
    29f4:	ba 2f       	mov	r27, r26
  {
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  }
  long constraint(long nUm,long lOwer,long uPper)
  {
    if(nUm>uPper){
    29f6:	80 17       	cp	r24, r16
    29f8:	91 07       	cpc	r25, r17
    29fa:	a2 07       	cpc	r26, r18
    29fc:	b3 07       	cpc	r27, r19
    29fe:	a4 f0       	brlt	.+40     	; 0x2a28 <_Z8backwardv+0x77a>
     }
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,200,iCr/39,iCr/8.3),iCr/40,iCr/8);
    2a00:	c5 01       	movw	r24, r10
    2a02:	68 e2       	ldi	r22, 0x28	; 40
    2a04:	70 e0       	ldi	r23, 0x00	; 0
    2a06:	0e 94 60 1b 	call	0x36c0	; 0x36c0 <__divmodhi4>
    2a0a:	cb 01       	movw	r24, r22
    2a0c:	ac 01       	movw	r20, r24
    2a0e:	66 27       	eor	r22, r22
    2a10:	57 fd       	sbrc	r21, 7
    2a12:	60 95       	com	r22
    2a14:	76 2f       	mov	r23, r22
    2a16:	d9 01       	movw	r26, r18
    2a18:	c8 01       	movw	r24, r16
    2a1a:	04 17       	cp	r16, r20
    2a1c:	15 07       	cpc	r17, r21
    2a1e:	26 07       	cpc	r18, r22
    2a20:	37 07       	cpc	r19, r23
    2a22:	14 f4       	brge	.+4      	; 0x2a28 <_Z8backwardv+0x77a>
    2a24:	db 01       	movw	r26, r22
    2a26:	ca 01       	movw	r24, r20
    switch(pIn)
    2a28:	20 91 e4 02 	lds	r18, 0x02E4
    2a2c:	28 30       	cpi	r18, 0x08	; 8
    2a2e:	09 f4       	brne	.+2      	; 0x2a32 <_Z8backwardv+0x784>
    2a30:	7a c0       	rjmp	.+244    	; 0x2b26 <_Z8backwardv+0x878>
    2a32:	29 30       	cpi	r18, 0x09	; 9
    2a34:	90 f4       	brcc	.+36     	; 0x2a5a <_Z8backwardv+0x7ac>
    2a36:	25 30       	cpi	r18, 0x05	; 5
    2a38:	d1 f1       	breq	.+116    	; 0x2aae <_Z8backwardv+0x800>
    2a3a:	26 30       	cpi	r18, 0x06	; 6
    2a3c:	38 f4       	brcc	.+14     	; 0x2a4c <_Z8backwardv+0x79e>
    2a3e:	22 30       	cpi	r18, 0x02	; 2
    2a40:	09 f4       	brne	.+2      	; 0x2a44 <_Z8backwardv+0x796>
    2a42:	41 c0       	rjmp	.+130    	; 0x2ac6 <_Z8backwardv+0x818>
    2a44:	23 30       	cpi	r18, 0x03	; 3
    2a46:	09 f0       	breq	.+2      	; 0x2a4a <_Z8backwardv+0x79c>
    2a48:	9d c0       	rjmp	.+314    	; 0x2b84 <_Z8backwardv+0x8d6>
    2a4a:	49 c0       	rjmp	.+146    	; 0x2ade <_Z8backwardv+0x830>
    2a4c:	26 30       	cpi	r18, 0x06	; 6
    2a4e:	09 f4       	brne	.+2      	; 0x2a52 <_Z8backwardv+0x7a4>
    2a50:	52 c0       	rjmp	.+164    	; 0x2af6 <_Z8backwardv+0x848>
    2a52:	27 30       	cpi	r18, 0x07	; 7
    2a54:	09 f0       	breq	.+2      	; 0x2a58 <_Z8backwardv+0x7aa>
    2a56:	96 c0       	rjmp	.+300    	; 0x2b84 <_Z8backwardv+0x8d6>
    2a58:	5a c0       	rjmp	.+180    	; 0x2b0e <_Z8backwardv+0x860>
    2a5a:	2c 32       	cpi	r18, 0x2C	; 44
    2a5c:	09 f4       	brne	.+2      	; 0x2a60 <_Z8backwardv+0x7b2>
    2a5e:	87 c0       	rjmp	.+270    	; 0x2b6e <_Z8backwardv+0x8c0>
    2a60:	2d 32       	cpi	r18, 0x2D	; 45
    2a62:	30 f4       	brcc	.+12     	; 0x2a70 <_Z8backwardv+0x7c2>
    2a64:	2b 30       	cpi	r18, 0x0B	; 11
    2a66:	59 f0       	breq	.+22     	; 0x2a7e <_Z8backwardv+0x7d0>
    2a68:	2c 30       	cpi	r18, 0x0C	; 12
    2a6a:	09 f0       	breq	.+2      	; 0x2a6e <_Z8backwardv+0x7c0>
    2a6c:	8b c0       	rjmp	.+278    	; 0x2b84 <_Z8backwardv+0x8d6>
    2a6e:	13 c0       	rjmp	.+38     	; 0x2a96 <_Z8backwardv+0x7e8>
    2a70:	2d 32       	cpi	r18, 0x2D	; 45
    2a72:	09 f4       	brne	.+2      	; 0x2a76 <_Z8backwardv+0x7c8>
    2a74:	70 c0       	rjmp	.+224    	; 0x2b56 <_Z8backwardv+0x8a8>
    2a76:	2e 32       	cpi	r18, 0x2E	; 46
    2a78:	09 f0       	breq	.+2      	; 0x2a7c <_Z8backwardv+0x7ce>
    2a7a:	84 c0       	rjmp	.+264    	; 0x2b84 <_Z8backwardv+0x8d6>
    2a7c:	60 c0       	rjmp	.+192    	; 0x2b3e <_Z8backwardv+0x890>
    {
      case 11:
        OCR1A=ICR1-vAl;
    2a7e:	20 91 86 00 	lds	r18, 0x0086
    2a82:	30 91 87 00 	lds	r19, 0x0087
    2a86:	f9 01       	movw	r30, r18
    2a88:	e8 1b       	sub	r30, r24
    2a8a:	f9 0b       	sbc	r31, r25
    2a8c:	f0 93 89 00 	sts	0x0089, r31
    2a90:	e0 93 88 00 	sts	0x0088, r30
    2a94:	77 c0       	rjmp	.+238    	; 0x2b84 <_Z8backwardv+0x8d6>
        break;
      case 12:
        OCR1B=ICR1-vAl;
    2a96:	20 91 86 00 	lds	r18, 0x0086
    2a9a:	30 91 87 00 	lds	r19, 0x0087
    2a9e:	a9 01       	movw	r20, r18
    2aa0:	48 1b       	sub	r20, r24
    2aa2:	59 0b       	sbc	r21, r25
    2aa4:	50 93 8b 00 	sts	0x008B, r21
    2aa8:	40 93 8a 00 	sts	0x008A, r20
    2aac:	6b c0       	rjmp	.+214    	; 0x2b84 <_Z8backwardv+0x8d6>
        break;
      case 5:
        OCR3A=ICR3-vAl;
    2aae:	20 91 96 00 	lds	r18, 0x0096
    2ab2:	30 91 97 00 	lds	r19, 0x0097
    2ab6:	f9 01       	movw	r30, r18
    2ab8:	e8 1b       	sub	r30, r24
    2aba:	f9 0b       	sbc	r31, r25
    2abc:	f0 93 99 00 	sts	0x0099, r31
    2ac0:	e0 93 98 00 	sts	0x0098, r30
    2ac4:	5f c0       	rjmp	.+190    	; 0x2b84 <_Z8backwardv+0x8d6>
        break;
      case 2:
        OCR3B=ICR3-vAl;
    2ac6:	20 91 96 00 	lds	r18, 0x0096
    2aca:	30 91 97 00 	lds	r19, 0x0097
    2ace:	a9 01       	movw	r20, r18
    2ad0:	48 1b       	sub	r20, r24
    2ad2:	59 0b       	sbc	r21, r25
    2ad4:	50 93 9b 00 	sts	0x009B, r21
    2ad8:	40 93 9a 00 	sts	0x009A, r20
    2adc:	53 c0       	rjmp	.+166    	; 0x2b84 <_Z8backwardv+0x8d6>
        break;
      case 3:
        OCR3C=ICR3-vAl;
    2ade:	20 91 96 00 	lds	r18, 0x0096
    2ae2:	30 91 97 00 	lds	r19, 0x0097
    2ae6:	f9 01       	movw	r30, r18
    2ae8:	e8 1b       	sub	r30, r24
    2aea:	f9 0b       	sbc	r31, r25
    2aec:	f0 93 9d 00 	sts	0x009D, r31
    2af0:	e0 93 9c 00 	sts	0x009C, r30
    2af4:	47 c0       	rjmp	.+142    	; 0x2b84 <_Z8backwardv+0x8d6>
        break;
      case 6:
        OCR4A=ICR4-vAl;
    2af6:	20 91 a6 00 	lds	r18, 0x00A6
    2afa:	30 91 a7 00 	lds	r19, 0x00A7
    2afe:	a9 01       	movw	r20, r18
    2b00:	48 1b       	sub	r20, r24
    2b02:	59 0b       	sbc	r21, r25
    2b04:	50 93 a9 00 	sts	0x00A9, r21
    2b08:	40 93 a8 00 	sts	0x00A8, r20
    2b0c:	3b c0       	rjmp	.+118    	; 0x2b84 <_Z8backwardv+0x8d6>
        break;
      case 7:
        OCR4B=ICR4-vAl;
    2b0e:	20 91 a6 00 	lds	r18, 0x00A6
    2b12:	30 91 a7 00 	lds	r19, 0x00A7
    2b16:	f9 01       	movw	r30, r18
    2b18:	e8 1b       	sub	r30, r24
    2b1a:	f9 0b       	sbc	r31, r25
    2b1c:	f0 93 ab 00 	sts	0x00AB, r31
    2b20:	e0 93 aa 00 	sts	0x00AA, r30
    2b24:	2f c0       	rjmp	.+94     	; 0x2b84 <_Z8backwardv+0x8d6>
        break; 
      case 8:
        OCR4C=ICR4-vAl;
    2b26:	20 91 a6 00 	lds	r18, 0x00A6
    2b2a:	30 91 a7 00 	lds	r19, 0x00A7
    2b2e:	a9 01       	movw	r20, r18
    2b30:	48 1b       	sub	r20, r24
    2b32:	59 0b       	sbc	r21, r25
    2b34:	50 93 ad 00 	sts	0x00AD, r21
    2b38:	40 93 ac 00 	sts	0x00AC, r20
    2b3c:	23 c0       	rjmp	.+70     	; 0x2b84 <_Z8backwardv+0x8d6>
        break;
      case 46:
        OCR5A=ICR5-vAl;
    2b3e:	20 91 26 01 	lds	r18, 0x0126
    2b42:	30 91 27 01 	lds	r19, 0x0127
    2b46:	f9 01       	movw	r30, r18
    2b48:	e8 1b       	sub	r30, r24
    2b4a:	f9 0b       	sbc	r31, r25
    2b4c:	f0 93 29 01 	sts	0x0129, r31
    2b50:	e0 93 28 01 	sts	0x0128, r30
    2b54:	17 c0       	rjmp	.+46     	; 0x2b84 <_Z8backwardv+0x8d6>
        break;
      case 45:
        OCR5B=ICR5-vAl;
    2b56:	20 91 26 01 	lds	r18, 0x0126
    2b5a:	30 91 27 01 	lds	r19, 0x0127
    2b5e:	a9 01       	movw	r20, r18
    2b60:	48 1b       	sub	r20, r24
    2b62:	59 0b       	sbc	r21, r25
    2b64:	50 93 2b 01 	sts	0x012B, r21
    2b68:	40 93 2a 01 	sts	0x012A, r20
    2b6c:	0b c0       	rjmp	.+22     	; 0x2b84 <_Z8backwardv+0x8d6>
        break;
      case 44:
        OCR5C=ICR5-vAl;
    2b6e:	20 91 26 01 	lds	r18, 0x0126
    2b72:	30 91 27 01 	lds	r19, 0x0127
    2b76:	f9 01       	movw	r30, r18
    2b78:	e8 1b       	sub	r30, r24
    2b7a:	f9 0b       	sbc	r31, r25
    2b7c:	f0 93 2d 01 	sts	0x012D, r31
    2b80:	e0 93 2c 01 	sts	0x012C, r30
     }
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,200,iCr/39,iCr/8.3),iCr/40,iCr/8);
    2b84:	a0 90 e5 02 	lds	r10, 0x02E5
    2b88:	b0 90 e6 02 	lds	r11, 0x02E6
    2b8c:	c5 01       	movw	r24, r10
    2b8e:	67 e2       	ldi	r22, 0x27	; 39
    2b90:	70 e0       	ldi	r23, 0x00	; 0
    2b92:	0e 94 60 1b 	call	0x36c0	; 0x36c0 <__divmodhi4>
    2b96:	6b 01       	movw	r12, r22
    2b98:	ee 24       	eor	r14, r14
    2b9a:	d7 fc       	sbrc	r13, 7
    2b9c:	e0 94       	com	r14
    2b9e:	fe 2c       	mov	r15, r14
    2ba0:	b5 01       	movw	r22, r10
    2ba2:	88 27       	eor	r24, r24
    2ba4:	77 fd       	sbrc	r23, 7
    2ba6:	80 95       	com	r24
    2ba8:	98 2f       	mov	r25, r24
    2baa:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <__floatsisf>
    2bae:	2d ec       	ldi	r18, 0xCD	; 205
    2bb0:	3c ec       	ldi	r19, 0xCC	; 204
    2bb2:	44 e0       	ldi	r20, 0x04	; 4
    2bb4:	51 e4       	ldi	r21, 0x41	; 65
    2bb6:	0e 94 b7 19 	call	0x336e	; 0x336e <__divsf3>
    2bba:	0e 94 1f 1a 	call	0x343e	; 0x343e <__fixsfsi>
        break; 
    }   
  }
  long mapAngle(long x, long in_min, long in_max, long out_min, long out_max)
  {
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    2bbe:	6c 19       	sub	r22, r12
    2bc0:	7d 09       	sbc	r23, r13
    2bc2:	8e 09       	sbc	r24, r14
    2bc4:	9f 09       	sbc	r25, r15
	swerve4.write(angle+correction[3]);
    2bc6:	40 91 d0 02 	lds	r20, 0x02D0
    2bca:	50 91 d1 02 	lds	r21, 0x02D1
    2bce:	20 91 ce 02 	lds	r18, 0x02CE
    2bd2:	30 91 cf 02 	lds	r19, 0x02CF
    2bd6:	24 0f       	add	r18, r20
    2bd8:	35 1f       	adc	r19, r21
     }
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,200,iCr/39,iCr/8.3),iCr/40,iCr/8);
    2bda:	44 27       	eor	r20, r20
    2bdc:	37 fd       	sbrc	r19, 7
    2bde:	40 95       	com	r20
    2be0:	54 2f       	mov	r21, r20
        break; 
    }   
  }
  long mapAngle(long x, long in_min, long in_max, long out_min, long out_max)
  {
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    2be2:	0e 94 41 1b 	call	0x3682	; 0x3682 <__mulsi3>
    2be6:	28 ec       	ldi	r18, 0xC8	; 200
    2be8:	30 e0       	ldi	r19, 0x00	; 0
    2bea:	40 e0       	ldi	r20, 0x00	; 0
    2bec:	50 e0       	ldi	r21, 0x00	; 0
    2bee:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <__divmodsi4>
    2bf2:	89 01       	movw	r16, r18
    2bf4:	9a 01       	movw	r18, r20
    2bf6:	0c 0d       	add	r16, r12
    2bf8:	1d 1d       	adc	r17, r13
    2bfa:	2e 1d       	adc	r18, r14
    2bfc:	3f 1d       	adc	r19, r15
     }
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,200,iCr/39,iCr/8.3),iCr/40,iCr/8);
    2bfe:	c5 01       	movw	r24, r10
    2c00:	bb 20       	and	r11, r11
    2c02:	0c f4       	brge	.+2      	; 0x2c06 <_Z8backwardv+0x958>
    2c04:	07 96       	adiw	r24, 0x07	; 7
    2c06:	95 95       	asr	r25
    2c08:	87 95       	ror	r24
    2c0a:	95 95       	asr	r25
    2c0c:	87 95       	ror	r24
    2c0e:	95 95       	asr	r25
    2c10:	87 95       	ror	r24
    2c12:	aa 27       	eor	r26, r26
    2c14:	97 fd       	sbrc	r25, 7
    2c16:	a0 95       	com	r26
    2c18:	ba 2f       	mov	r27, r26
  {
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  }
  long constraint(long nUm,long lOwer,long uPper)
  {
    if(nUm>uPper){
    2c1a:	80 17       	cp	r24, r16
    2c1c:	91 07       	cpc	r25, r17
    2c1e:	a2 07       	cpc	r26, r18
    2c20:	b3 07       	cpc	r27, r19
    2c22:	a4 f0       	brlt	.+40     	; 0x2c4c <_Z8backwardv+0x99e>
     }
  }

  void write(int vAl)           //PIN=servo pin no. on mega,vAl=angle F_CPU for the servo at pin
  {
    vAl=constraint(mapAngle(vAl,0,200,iCr/39,iCr/8.3),iCr/40,iCr/8);
    2c24:	c5 01       	movw	r24, r10
    2c26:	68 e2       	ldi	r22, 0x28	; 40
    2c28:	70 e0       	ldi	r23, 0x00	; 0
    2c2a:	0e 94 60 1b 	call	0x36c0	; 0x36c0 <__divmodhi4>
    2c2e:	cb 01       	movw	r24, r22
    2c30:	ac 01       	movw	r20, r24
    2c32:	66 27       	eor	r22, r22
    2c34:	57 fd       	sbrc	r21, 7
    2c36:	60 95       	com	r22
    2c38:	76 2f       	mov	r23, r22
    2c3a:	d9 01       	movw	r26, r18
    2c3c:	c8 01       	movw	r24, r16
    2c3e:	04 17       	cp	r16, r20
    2c40:	15 07       	cpc	r17, r21
    2c42:	26 07       	cpc	r18, r22
    2c44:	37 07       	cpc	r19, r23
    2c46:	14 f4       	brge	.+4      	; 0x2c4c <_Z8backwardv+0x99e>
    2c48:	db 01       	movw	r26, r22
    2c4a:	ca 01       	movw	r24, r20
    switch(pIn)
    2c4c:	20 91 e7 02 	lds	r18, 0x02E7
    2c50:	28 30       	cpi	r18, 0x08	; 8
    2c52:	09 f4       	brne	.+2      	; 0x2c56 <_Z8backwardv+0x9a8>
    2c54:	7a c0       	rjmp	.+244    	; 0x2d4a <_Z8backwardv+0xa9c>
    2c56:	29 30       	cpi	r18, 0x09	; 9
    2c58:	90 f4       	brcc	.+36     	; 0x2c7e <_Z8backwardv+0x9d0>
    2c5a:	25 30       	cpi	r18, 0x05	; 5
    2c5c:	d1 f1       	breq	.+116    	; 0x2cd2 <_Z8backwardv+0xa24>
    2c5e:	26 30       	cpi	r18, 0x06	; 6
    2c60:	38 f4       	brcc	.+14     	; 0x2c70 <_Z8backwardv+0x9c2>
    2c62:	22 30       	cpi	r18, 0x02	; 2
    2c64:	09 f4       	brne	.+2      	; 0x2c68 <_Z8backwardv+0x9ba>
    2c66:	41 c0       	rjmp	.+130    	; 0x2cea <_Z8backwardv+0xa3c>
    2c68:	23 30       	cpi	r18, 0x03	; 3
    2c6a:	09 f0       	breq	.+2      	; 0x2c6e <_Z8backwardv+0x9c0>
    2c6c:	9d c0       	rjmp	.+314    	; 0x2da8 <_Z8backwardv+0xafa>
    2c6e:	49 c0       	rjmp	.+146    	; 0x2d02 <_Z8backwardv+0xa54>
    2c70:	26 30       	cpi	r18, 0x06	; 6
    2c72:	09 f4       	brne	.+2      	; 0x2c76 <_Z8backwardv+0x9c8>
    2c74:	52 c0       	rjmp	.+164    	; 0x2d1a <_Z8backwardv+0xa6c>
    2c76:	27 30       	cpi	r18, 0x07	; 7
    2c78:	09 f0       	breq	.+2      	; 0x2c7c <_Z8backwardv+0x9ce>
    2c7a:	96 c0       	rjmp	.+300    	; 0x2da8 <_Z8backwardv+0xafa>
    2c7c:	5a c0       	rjmp	.+180    	; 0x2d32 <_Z8backwardv+0xa84>
    2c7e:	2c 32       	cpi	r18, 0x2C	; 44
    2c80:	09 f4       	brne	.+2      	; 0x2c84 <_Z8backwardv+0x9d6>
    2c82:	87 c0       	rjmp	.+270    	; 0x2d92 <_Z8backwardv+0xae4>
    2c84:	2d 32       	cpi	r18, 0x2D	; 45
    2c86:	30 f4       	brcc	.+12     	; 0x2c94 <_Z8backwardv+0x9e6>
    2c88:	2b 30       	cpi	r18, 0x0B	; 11
    2c8a:	59 f0       	breq	.+22     	; 0x2ca2 <_Z8backwardv+0x9f4>
    2c8c:	2c 30       	cpi	r18, 0x0C	; 12
    2c8e:	09 f0       	breq	.+2      	; 0x2c92 <_Z8backwardv+0x9e4>
    2c90:	8b c0       	rjmp	.+278    	; 0x2da8 <_Z8backwardv+0xafa>
    2c92:	13 c0       	rjmp	.+38     	; 0x2cba <_Z8backwardv+0xa0c>
    2c94:	2d 32       	cpi	r18, 0x2D	; 45
    2c96:	09 f4       	brne	.+2      	; 0x2c9a <_Z8backwardv+0x9ec>
    2c98:	70 c0       	rjmp	.+224    	; 0x2d7a <_Z8backwardv+0xacc>
    2c9a:	2e 32       	cpi	r18, 0x2E	; 46
    2c9c:	09 f0       	breq	.+2      	; 0x2ca0 <_Z8backwardv+0x9f2>
    2c9e:	84 c0       	rjmp	.+264    	; 0x2da8 <_Z8backwardv+0xafa>
    2ca0:	60 c0       	rjmp	.+192    	; 0x2d62 <_Z8backwardv+0xab4>
    {
      case 11:
        OCR1A=ICR1-vAl;
    2ca2:	20 91 86 00 	lds	r18, 0x0086
    2ca6:	30 91 87 00 	lds	r19, 0x0087
    2caa:	f9 01       	movw	r30, r18
    2cac:	e8 1b       	sub	r30, r24
    2cae:	f9 0b       	sbc	r31, r25
    2cb0:	f0 93 89 00 	sts	0x0089, r31
    2cb4:	e0 93 88 00 	sts	0x0088, r30
    2cb8:	77 c0       	rjmp	.+238    	; 0x2da8 <_Z8backwardv+0xafa>
        break;
      case 12:
        OCR1B=ICR1-vAl;
    2cba:	20 91 86 00 	lds	r18, 0x0086
    2cbe:	30 91 87 00 	lds	r19, 0x0087
    2cc2:	a9 01       	movw	r20, r18
    2cc4:	48 1b       	sub	r20, r24
    2cc6:	59 0b       	sbc	r21, r25
    2cc8:	50 93 8b 00 	sts	0x008B, r21
    2ccc:	40 93 8a 00 	sts	0x008A, r20
    2cd0:	6b c0       	rjmp	.+214    	; 0x2da8 <_Z8backwardv+0xafa>
        break;
      case 5:
        OCR3A=ICR3-vAl;
    2cd2:	20 91 96 00 	lds	r18, 0x0096
    2cd6:	30 91 97 00 	lds	r19, 0x0097
    2cda:	f9 01       	movw	r30, r18
    2cdc:	e8 1b       	sub	r30, r24
    2cde:	f9 0b       	sbc	r31, r25
    2ce0:	f0 93 99 00 	sts	0x0099, r31
    2ce4:	e0 93 98 00 	sts	0x0098, r30
    2ce8:	5f c0       	rjmp	.+190    	; 0x2da8 <_Z8backwardv+0xafa>
        break;
      case 2:
        OCR3B=ICR3-vAl;
    2cea:	20 91 96 00 	lds	r18, 0x0096
    2cee:	30 91 97 00 	lds	r19, 0x0097
    2cf2:	a9 01       	movw	r20, r18
    2cf4:	48 1b       	sub	r20, r24
    2cf6:	59 0b       	sbc	r21, r25
    2cf8:	50 93 9b 00 	sts	0x009B, r21
    2cfc:	40 93 9a 00 	sts	0x009A, r20
    2d00:	53 c0       	rjmp	.+166    	; 0x2da8 <_Z8backwardv+0xafa>
        break;
      case 3:
        OCR3C=ICR3-vAl;
    2d02:	20 91 96 00 	lds	r18, 0x0096
    2d06:	30 91 97 00 	lds	r19, 0x0097
    2d0a:	f9 01       	movw	r30, r18
    2d0c:	e8 1b       	sub	r30, r24
    2d0e:	f9 0b       	sbc	r31, r25
    2d10:	f0 93 9d 00 	sts	0x009D, r31
    2d14:	e0 93 9c 00 	sts	0x009C, r30
    2d18:	47 c0       	rjmp	.+142    	; 0x2da8 <_Z8backwardv+0xafa>
        break;
      case 6:
        OCR4A=ICR4-vAl;
    2d1a:	20 91 a6 00 	lds	r18, 0x00A6
    2d1e:	30 91 a7 00 	lds	r19, 0x00A7
    2d22:	a9 01       	movw	r20, r18
    2d24:	48 1b       	sub	r20, r24
    2d26:	59 0b       	sbc	r21, r25
    2d28:	50 93 a9 00 	sts	0x00A9, r21
    2d2c:	40 93 a8 00 	sts	0x00A8, r20
    2d30:	3b c0       	rjmp	.+118    	; 0x2da8 <_Z8backwardv+0xafa>
        break;
      case 7:
        OCR4B=ICR4-vAl;
    2d32:	20 91 a6 00 	lds	r18, 0x00A6
    2d36:	30 91 a7 00 	lds	r19, 0x00A7
    2d3a:	f9 01       	movw	r30, r18
    2d3c:	e8 1b       	sub	r30, r24
    2d3e:	f9 0b       	sbc	r31, r25
    2d40:	f0 93 ab 00 	sts	0x00AB, r31
    2d44:	e0 93 aa 00 	sts	0x00AA, r30
    2d48:	2f c0       	rjmp	.+94     	; 0x2da8 <_Z8backwardv+0xafa>
        break; 
      case 8:
        OCR4C=ICR4-vAl;
    2d4a:	20 91 a6 00 	lds	r18, 0x00A6
    2d4e:	30 91 a7 00 	lds	r19, 0x00A7
    2d52:	a9 01       	movw	r20, r18
    2d54:	48 1b       	sub	r20, r24
    2d56:	59 0b       	sbc	r21, r25
    2d58:	50 93 ad 00 	sts	0x00AD, r21
    2d5c:	40 93 ac 00 	sts	0x00AC, r20
    2d60:	23 c0       	rjmp	.+70     	; 0x2da8 <_Z8backwardv+0xafa>
        break;
      case 46:
        OCR5A=ICR5-vAl;
    2d62:	20 91 26 01 	lds	r18, 0x0126
    2d66:	30 91 27 01 	lds	r19, 0x0127
    2d6a:	f9 01       	movw	r30, r18
    2d6c:	e8 1b       	sub	r30, r24
    2d6e:	f9 0b       	sbc	r31, r25
    2d70:	f0 93 29 01 	sts	0x0129, r31
    2d74:	e0 93 28 01 	sts	0x0128, r30
    2d78:	17 c0       	rjmp	.+46     	; 0x2da8 <_Z8backwardv+0xafa>
        break;
      case 45:
        OCR5B=ICR5-vAl;
    2d7a:	20 91 26 01 	lds	r18, 0x0126
    2d7e:	30 91 27 01 	lds	r19, 0x0127
    2d82:	a9 01       	movw	r20, r18
    2d84:	48 1b       	sub	r20, r24
    2d86:	59 0b       	sbc	r21, r25
    2d88:	50 93 2b 01 	sts	0x012B, r21
    2d8c:	40 93 2a 01 	sts	0x012A, r20
    2d90:	0b c0       	rjmp	.+22     	; 0x2da8 <_Z8backwardv+0xafa>
        break;
      case 44:
        OCR5C=ICR5-vAl;
    2d92:	20 91 26 01 	lds	r18, 0x0126
    2d96:	30 91 27 01 	lds	r19, 0x0127
    2d9a:	f9 01       	movw	r30, r18
    2d9c:	e8 1b       	sub	r30, r24
    2d9e:	f9 0b       	sbc	r31, r25
    2da0:	f0 93 2d 01 	sts	0x012D, r31
    2da4:	e0 93 2c 01 	sts	0x012C, r30
		digitalWrite(dIrpin1,dIrection1);
		digitalWrite(dIrpin2,dIrection2);
	}

	void direction(uint8_t dIrection, uint8_t dIrection1, uint8_t dIrection2, uint8_t dIrection3){
		pinMode(dIrpin,OUTPUT);     //sets direction pin as output
    2da8:	80 91 e8 02 	lds	r24, 0x02E8
    2dac:	61 e0       	ldi	r22, 0x01	; 1
    2dae:	0e 94 a6 00 	call	0x14c	; 0x14c <_Z7pinModehh>
	    pinMode(dIrpin1,OUTPUT);
    2db2:	80 91 ed 02 	lds	r24, 0x02ED
    2db6:	61 e0       	ldi	r22, 0x01	; 1
    2db8:	0e 94 a6 00 	call	0x14c	; 0x14c <_Z7pinModehh>
	    pinMode(dIrpin2,OUTPUT);
    2dbc:	80 91 f1 02 	lds	r24, 0x02F1
    2dc0:	61 e0       	ldi	r22, 0x01	; 1
    2dc2:	0e 94 a6 00 	call	0x14c	; 0x14c <_Z7pinModehh>
	    pinMode(dIrpin3,OUTPUT);
    2dc6:	80 91 f5 02 	lds	r24, 0x02F5
    2dca:	61 e0       	ldi	r22, 0x01	; 1
    2dcc:	0e 94 a6 00 	call	0x14c	; 0x14c <_Z7pinModehh>
		digitalWrite(dIrpin,dIrection);
    2dd0:	80 91 e8 02 	lds	r24, 0x02E8
    2dd4:	60 e0       	ldi	r22, 0x00	; 0
    2dd6:	0e 94 49 02 	call	0x492	; 0x492 <_Z12digitalWritehh>
		digitalWrite(dIrpin1,dIrection1);
    2dda:	80 91 ed 02 	lds	r24, 0x02ED
    2dde:	60 e0       	ldi	r22, 0x00	; 0
    2de0:	0e 94 49 02 	call	0x492	; 0x492 <_Z12digitalWritehh>
		digitalWrite(dIrpin2,dIrection2);
    2de4:	80 91 f1 02 	lds	r24, 0x02F1
    2de8:	60 e0       	ldi	r22, 0x00	; 0
    2dea:	0e 94 49 02 	call	0x492	; 0x492 <_Z12digitalWritehh>
		digitalWrite(dIrpin3,dIrection3);
    2dee:	80 91 f5 02 	lds	r24, 0x02F5
    2df2:	60 e0       	ldi	r22, 0x00	; 0
    2df4:	0e 94 49 02 	call	0x492	; 0x492 <_Z12digitalWritehh>
	}	
	
	//FOUR MOTORS
	void drive(uint8_t pWm, uint8_t pWm1, uint8_t pWm2, uint8_t pWm3){
		
		if(pWm>lAstpwm||pWm1>lAstpwm1||pWm2>lAstpwm2||pWm3>lAstpwm3){		//accelerate
    2df8:	80 91 ea 02 	lds	r24, 0x02EA
    2dfc:	88 3c       	cpi	r24, 0xC8	; 200
    2dfe:	08 f4       	brcc	.+2      	; 0x2e02 <_Z8backwardv+0xb54>
    2e00:	9f c0       	rjmp	.+318    	; 0x2f40 <_Z8backwardv+0xc92>
    2e02:	90 91 ef 02 	lds	r25, 0x02EF
    2e06:	98 3c       	cpi	r25, 0xC8	; 200
    2e08:	08 f4       	brcc	.+2      	; 0x2e0c <_Z8backwardv+0xb5e>
    2e0a:	9a c0       	rjmp	.+308    	; 0x2f40 <_Z8backwardv+0xc92>
    2e0c:	20 91 f3 02 	lds	r18, 0x02F3
    2e10:	28 3c       	cpi	r18, 0xC8	; 200
    2e12:	08 f4       	brcc	.+2      	; 0x2e16 <_Z8backwardv+0xb68>
    2e14:	95 c0       	rjmp	.+298    	; 0x2f40 <_Z8backwardv+0xc92>
    2e16:	30 91 f7 02 	lds	r19, 0x02F7
    2e1a:	38 3c       	cpi	r19, 0xC8	; 200
    2e1c:	08 f4       	brcc	.+2      	; 0x2e20 <_Z8backwardv+0xb72>
    2e1e:	90 c0       	rjmp	.+288    	; 0x2f40 <_Z8backwardv+0xc92>
    2e20:	f0 c0       	rjmp	.+480    	; 0x3002 <_Z8backwardv+0xd54>

			for(lAstpwm=lAstpwm,lAstpwm1=lAstpwm1,lAstpwm2=lAstpwm2,lAstpwm3=lAstpwm3;lAstpwm<pWm||lAstpwm1<pWm1||lAstpwm2<pWm2||lAstpwm3<pWm3;){		//increase the speed step by step
				if (pWm>lAstpwm){
					lAstpwm+=step1;
    2e22:	f2 01       	movw	r30, r4
    2e24:	60 81       	ld	r22, Z
    2e26:	86 0f       	add	r24, r22
    2e28:	e9 81       	ldd	r30, Y+1	; 0x01
    2e2a:	fa 81       	ldd	r31, Y+2	; 0x02
    2e2c:	80 83       	st	Z, r24
					analogWrite(pWmpin,constrain(lAstpwm,0,pWm));
    2e2e:	68 2f       	mov	r22, r24
    2e30:	70 e0       	ldi	r23, 0x00	; 0
    2e32:	80 e0       	ldi	r24, 0x00	; 0
    2e34:	90 e0       	ldi	r25, 0x00	; 0
    2e36:	20 e0       	ldi	r18, 0x00	; 0
    2e38:	30 e0       	ldi	r19, 0x00	; 0
    2e3a:	a9 01       	movw	r20, r18
    2e3c:	0f 2e       	mov	r0, r31
    2e3e:	f8 ec       	ldi	r31, 0xC8	; 200
    2e40:	ef 2e       	mov	r14, r31
    2e42:	f0 e0       	ldi	r31, 0x00	; 0
    2e44:	ff 2e       	mov	r15, r31
    2e46:	f0 e0       	ldi	r31, 0x00	; 0
    2e48:	0f 2f       	mov	r16, r31
    2e4a:	f0 e0       	ldi	r31, 0x00	; 0
    2e4c:	1f 2f       	mov	r17, r31
    2e4e:	f0 2d       	mov	r31, r0
    2e50:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <_Z9constrainlll>
    2e54:	eb 81       	ldd	r30, Y+3	; 0x03
    2e56:	fc 81       	ldd	r31, Y+4	; 0x04
    2e58:	80 81       	ld	r24, Z
    2e5a:	0e 94 29 05 	call	0xa52	; 0xa52 <_Z11analogWritehh>
				}
				if (pWm1>lAstpwm1){
    2e5e:	ef ee       	ldi	r30, 0xEF	; 239
    2e60:	f2 e0       	ldi	r31, 0x02	; 2
    2e62:	80 81       	ld	r24, Z
    2e64:	88 3c       	cpi	r24, 0xC8	; 200
    2e66:	f0 f4       	brcc	.+60     	; 0x2ea4 <_Z8backwardv+0xbf6>
					lAstpwm1+=step2;
    2e68:	f1 01       	movw	r30, r2
    2e6a:	60 81       	ld	r22, Z
    2e6c:	86 0f       	add	r24, r22
    2e6e:	ed 81       	ldd	r30, Y+5	; 0x05
    2e70:	fe 81       	ldd	r31, Y+6	; 0x06
    2e72:	80 83       	st	Z, r24
					analogWrite(pWmpin1,constrain(lAstpwm1,0,pWm1));
    2e74:	68 2f       	mov	r22, r24
    2e76:	70 e0       	ldi	r23, 0x00	; 0
    2e78:	80 e0       	ldi	r24, 0x00	; 0
    2e7a:	90 e0       	ldi	r25, 0x00	; 0
    2e7c:	20 e0       	ldi	r18, 0x00	; 0
    2e7e:	30 e0       	ldi	r19, 0x00	; 0
    2e80:	a9 01       	movw	r20, r18
    2e82:	0f 2e       	mov	r0, r31
    2e84:	f8 ec       	ldi	r31, 0xC8	; 200
    2e86:	ef 2e       	mov	r14, r31
    2e88:	f0 e0       	ldi	r31, 0x00	; 0
    2e8a:	ff 2e       	mov	r15, r31
    2e8c:	f0 e0       	ldi	r31, 0x00	; 0
    2e8e:	0f 2f       	mov	r16, r31
    2e90:	f0 e0       	ldi	r31, 0x00	; 0
    2e92:	1f 2f       	mov	r17, r31
    2e94:	f0 2d       	mov	r31, r0
    2e96:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <_Z9constrainlll>
    2e9a:	ef 81       	ldd	r30, Y+7	; 0x07
    2e9c:	f8 85       	ldd	r31, Y+8	; 0x08
    2e9e:	80 81       	ld	r24, Z
    2ea0:	0e 94 29 05 	call	0xa52	; 0xa52 <_Z11analogWritehh>
				}
				if (pWm2>lAstpwm2){
    2ea4:	f6 01       	movw	r30, r12
    2ea6:	80 81       	ld	r24, Z
    2ea8:	88 3c       	cpi	r24, 0xC8	; 200
    2eaa:	f8 f4       	brcc	.+62     	; 0x2eea <_Z8backwardv+0xc3c>
					lAstpwm2+=step3;
    2eac:	e4 ef       	ldi	r30, 0xF4	; 244
    2eae:	f2 e0       	ldi	r31, 0x02	; 2
    2eb0:	60 81       	ld	r22, Z
    2eb2:	86 0f       	add	r24, r22
    2eb4:	e9 85       	ldd	r30, Y+9	; 0x09
    2eb6:	fa 85       	ldd	r31, Y+10	; 0x0a
    2eb8:	80 83       	st	Z, r24
					analogWrite(pWmpin2,constrain(lAstpwm2,0,pWm2));
    2eba:	68 2f       	mov	r22, r24
    2ebc:	70 e0       	ldi	r23, 0x00	; 0
    2ebe:	80 e0       	ldi	r24, 0x00	; 0
    2ec0:	90 e0       	ldi	r25, 0x00	; 0
    2ec2:	20 e0       	ldi	r18, 0x00	; 0
    2ec4:	30 e0       	ldi	r19, 0x00	; 0
    2ec6:	a9 01       	movw	r20, r18
    2ec8:	0f 2e       	mov	r0, r31
    2eca:	f8 ec       	ldi	r31, 0xC8	; 200
    2ecc:	ef 2e       	mov	r14, r31
    2ece:	f0 e0       	ldi	r31, 0x00	; 0
    2ed0:	ff 2e       	mov	r15, r31
    2ed2:	f0 e0       	ldi	r31, 0x00	; 0
    2ed4:	0f 2f       	mov	r16, r31
    2ed6:	f0 e0       	ldi	r31, 0x00	; 0
    2ed8:	1f 2f       	mov	r17, r31
    2eda:	f0 2d       	mov	r31, r0
    2edc:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <_Z9constrainlll>
    2ee0:	eb 85       	ldd	r30, Y+11	; 0x0b
    2ee2:	fc 85       	ldd	r31, Y+12	; 0x0c
    2ee4:	80 81       	ld	r24, Z
    2ee6:	0e 94 29 05 	call	0xa52	; 0xa52 <_Z11analogWritehh>
				}
				if (pWm3>lAstpwm3){
    2eea:	f5 01       	movw	r30, r10
    2eec:	80 81       	ld	r24, Z
    2eee:	88 3c       	cpi	r24, 0xC8	; 200
    2ef0:	f8 f4       	brcc	.+62     	; 0x2f30 <_Z8backwardv+0xc82>
					lAstpwm3+=step4;
    2ef2:	e8 ef       	ldi	r30, 0xF8	; 248
    2ef4:	f2 e0       	ldi	r31, 0x02	; 2
    2ef6:	60 81       	ld	r22, Z
    2ef8:	86 0f       	add	r24, r22
    2efa:	ed 85       	ldd	r30, Y+13	; 0x0d
    2efc:	fe 85       	ldd	r31, Y+14	; 0x0e
    2efe:	80 83       	st	Z, r24
					analogWrite(pWmpin3,constrain(lAstpwm3,0,pWm3));
    2f00:	68 2f       	mov	r22, r24
    2f02:	70 e0       	ldi	r23, 0x00	; 0
    2f04:	80 e0       	ldi	r24, 0x00	; 0
    2f06:	90 e0       	ldi	r25, 0x00	; 0
    2f08:	20 e0       	ldi	r18, 0x00	; 0
    2f0a:	30 e0       	ldi	r19, 0x00	; 0
    2f0c:	a9 01       	movw	r20, r18
    2f0e:	0f 2e       	mov	r0, r31
    2f10:	f8 ec       	ldi	r31, 0xC8	; 200
    2f12:	ef 2e       	mov	r14, r31
    2f14:	f0 e0       	ldi	r31, 0x00	; 0
    2f16:	ff 2e       	mov	r15, r31
    2f18:	f0 e0       	ldi	r31, 0x00	; 0
    2f1a:	0f 2f       	mov	r16, r31
    2f1c:	f0 e0       	ldi	r31, 0x00	; 0
    2f1e:	1f 2f       	mov	r17, r31
    2f20:	f0 2d       	mov	r31, r0
    2f22:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <_Z9constrainlll>
    2f26:	ef 85       	ldd	r30, Y+15	; 0x0f
    2f28:	f8 89       	ldd	r31, Y+16	; 0x10
    2f2a:	80 81       	ld	r24, Z
    2f2c:	0e 94 29 05 	call	0xa52	; 0xa52 <_Z11analogWritehh>
				}	
				delay(interval);		
    2f30:	f3 01       	movw	r30, r6
    2f32:	60 81       	ld	r22, Z
    2f34:	70 e0       	ldi	r23, 0x00	; 0
    2f36:	80 e0       	ldi	r24, 0x00	; 0
    2f38:	90 e0       	ldi	r25, 0x00	; 0
    2f3a:	0e 94 62 06 	call	0xcc4	; 0xcc4 <_Z5delaym>
    2f3e:	4b c0       	rjmp	.+150    	; 0x2fd6 <_Z8backwardv+0xd28>
	//FOUR MOTORS
	void drive(uint8_t pWm, uint8_t pWm1, uint8_t pWm2, uint8_t pWm3){
		
		if(pWm>lAstpwm||pWm1>lAstpwm1||pWm2>lAstpwm2||pWm3>lAstpwm3){		//accelerate

			for(lAstpwm=lAstpwm,lAstpwm1=lAstpwm1,lAstpwm2=lAstpwm2,lAstpwm3=lAstpwm3;lAstpwm<pWm||lAstpwm1<pWm1||lAstpwm2<pWm2||lAstpwm3<pWm3;){		//increase the speed step by step
    2f40:	0f 2e       	mov	r0, r31
    2f42:	fa ee       	ldi	r31, 0xEA	; 234
    2f44:	8f 2e       	mov	r8, r31
    2f46:	f2 e0       	ldi	r31, 0x02	; 2
    2f48:	9f 2e       	mov	r9, r31
    2f4a:	f0 2d       	mov	r31, r0
				if (pWm>lAstpwm){
					lAstpwm+=step1;
    2f4c:	0f 2e       	mov	r0, r31
    2f4e:	fb ee       	ldi	r31, 0xEB	; 235
    2f50:	4f 2e       	mov	r4, r31
    2f52:	f2 e0       	ldi	r31, 0x02	; 2
    2f54:	5f 2e       	mov	r5, r31
    2f56:	f0 2d       	mov	r31, r0
    2f58:	a2 01       	movw	r20, r4
    2f5a:	41 50       	subi	r20, 0x01	; 1
    2f5c:	50 40       	sbci	r21, 0x00	; 0
    2f5e:	5a 83       	std	Y+2, r21	; 0x02
    2f60:	49 83       	std	Y+1, r20	; 0x01
					analogWrite(pWmpin,constrain(lAstpwm,0,pWm));
    2f62:	c2 01       	movw	r24, r4
    2f64:	02 97       	sbiw	r24, 0x02	; 2
    2f66:	9c 83       	std	Y+4, r25	; 0x04
    2f68:	8b 83       	std	Y+3, r24	; 0x03
	//FOUR MOTORS
	void drive(uint8_t pWm, uint8_t pWm1, uint8_t pWm2, uint8_t pWm3){
		
		if(pWm>lAstpwm||pWm1>lAstpwm1||pWm2>lAstpwm2||pWm3>lAstpwm3){		//accelerate

			for(lAstpwm=lAstpwm,lAstpwm1=lAstpwm1,lAstpwm2=lAstpwm2,lAstpwm3=lAstpwm3;lAstpwm<pWm||lAstpwm1<pWm1||lAstpwm2<pWm2||lAstpwm3<pWm3;){		//increase the speed step by step
    2f6a:	0f 2e       	mov	r0, r31
    2f6c:	f3 ef       	ldi	r31, 0xF3	; 243
    2f6e:	cf 2e       	mov	r12, r31
    2f70:	f2 e0       	ldi	r31, 0x02	; 2
    2f72:	df 2e       	mov	r13, r31
    2f74:	f0 2d       	mov	r31, r0
    2f76:	0f 2e       	mov	r0, r31
    2f78:	f7 ef       	ldi	r31, 0xF7	; 247
    2f7a:	af 2e       	mov	r10, r31
    2f7c:	f2 e0       	ldi	r31, 0x02	; 2
    2f7e:	bf 2e       	mov	r11, r31
    2f80:	f0 2d       	mov	r31, r0
				if (pWm>lAstpwm){
					lAstpwm+=step1;
					analogWrite(pWmpin,constrain(lAstpwm,0,pWm));
				}
				if (pWm1>lAstpwm1){
					lAstpwm1+=step2;
    2f82:	0f 2e       	mov	r0, r31
    2f84:	f0 ef       	ldi	r31, 0xF0	; 240
    2f86:	2f 2e       	mov	r2, r31
    2f88:	f2 e0       	ldi	r31, 0x02	; 2
    2f8a:	3f 2e       	mov	r3, r31
    2f8c:	f0 2d       	mov	r31, r0
    2f8e:	f1 01       	movw	r30, r2
    2f90:	31 97       	sbiw	r30, 0x01	; 1
    2f92:	fe 83       	std	Y+6, r31	; 0x06
    2f94:	ed 83       	std	Y+5, r30	; 0x05
					analogWrite(pWmpin1,constrain(lAstpwm1,0,pWm1));
    2f96:	a1 01       	movw	r20, r2
    2f98:	42 50       	subi	r20, 0x02	; 2
    2f9a:	50 40       	sbci	r21, 0x00	; 0
    2f9c:	58 87       	std	Y+8, r21	; 0x08
    2f9e:	4f 83       	std	Y+7, r20	; 0x07
				}
				if (pWm2>lAstpwm2){
					lAstpwm2+=step3;
    2fa0:	84 ef       	ldi	r24, 0xF4	; 244
    2fa2:	92 e0       	ldi	r25, 0x02	; 2
    2fa4:	01 97       	sbiw	r24, 0x01	; 1
    2fa6:	9a 87       	std	Y+10, r25	; 0x0a
    2fa8:	89 87       	std	Y+9, r24	; 0x09
					analogWrite(pWmpin2,constrain(lAstpwm2,0,pWm2));
    2faa:	e4 ef       	ldi	r30, 0xF4	; 244
    2fac:	f2 e0       	ldi	r31, 0x02	; 2
    2fae:	32 97       	sbiw	r30, 0x02	; 2
    2fb0:	fc 87       	std	Y+12, r31	; 0x0c
    2fb2:	eb 87       	std	Y+11, r30	; 0x0b
				}
				if (pWm3>lAstpwm3){
					lAstpwm3+=step4;
    2fb4:	48 ef       	ldi	r20, 0xF8	; 248
    2fb6:	52 e0       	ldi	r21, 0x02	; 2
    2fb8:	41 50       	subi	r20, 0x01	; 1
    2fba:	50 40       	sbci	r21, 0x00	; 0
    2fbc:	5e 87       	std	Y+14, r21	; 0x0e
    2fbe:	4d 87       	std	Y+13, r20	; 0x0d
					analogWrite(pWmpin3,constrain(lAstpwm3,0,pWm3));
    2fc0:	88 ef       	ldi	r24, 0xF8	; 248
    2fc2:	92 e0       	ldi	r25, 0x02	; 2
    2fc4:	02 97       	sbiw	r24, 0x02	; 2
    2fc6:	98 8b       	std	Y+16, r25	; 0x10
    2fc8:	8f 87       	std	Y+15, r24	; 0x0f
				}	
				delay(interval);		
    2fca:	0f 2e       	mov	r0, r31
    2fcc:	fc ee       	ldi	r31, 0xEC	; 236
    2fce:	6f 2e       	mov	r6, r31
    2fd0:	f2 e0       	ldi	r31, 0x02	; 2
    2fd2:	7f 2e       	mov	r7, r31
    2fd4:	f0 2d       	mov	r31, r0
	//FOUR MOTORS
	void drive(uint8_t pWm, uint8_t pWm1, uint8_t pWm2, uint8_t pWm3){
		
		if(pWm>lAstpwm||pWm1>lAstpwm1||pWm2>lAstpwm2||pWm3>lAstpwm3){		//accelerate

			for(lAstpwm=lAstpwm,lAstpwm1=lAstpwm1,lAstpwm2=lAstpwm2,lAstpwm3=lAstpwm3;lAstpwm<pWm||lAstpwm1<pWm1||lAstpwm2<pWm2||lAstpwm3<pWm3;){		//increase the speed step by step
    2fd6:	f4 01       	movw	r30, r8
    2fd8:	80 81       	ld	r24, Z
    2fda:	88 3c       	cpi	r24, 0xC8	; 200
    2fdc:	08 f4       	brcc	.+2      	; 0x2fe0 <_Z8backwardv+0xd32>
    2fde:	21 cf       	rjmp	.-446    	; 0x2e22 <_Z8backwardv+0xb74>
    2fe0:	ef ee       	ldi	r30, 0xEF	; 239
    2fe2:	f2 e0       	ldi	r31, 0x02	; 2
    2fe4:	80 81       	ld	r24, Z
    2fe6:	88 3c       	cpi	r24, 0xC8	; 200
    2fe8:	08 f4       	brcc	.+2      	; 0x2fec <_Z8backwardv+0xd3e>
    2fea:	39 cf       	rjmp	.-398    	; 0x2e5e <_Z8backwardv+0xbb0>
    2fec:	f6 01       	movw	r30, r12
    2fee:	80 81       	ld	r24, Z
    2ff0:	88 3c       	cpi	r24, 0xC8	; 200
    2ff2:	08 f4       	brcc	.+2      	; 0x2ff6 <_Z8backwardv+0xd48>
    2ff4:	34 cf       	rjmp	.-408    	; 0x2e5e <_Z8backwardv+0xbb0>
    2ff6:	f5 01       	movw	r30, r10
    2ff8:	80 81       	ld	r24, Z
    2ffa:	88 3c       	cpi	r24, 0xC8	; 200
    2ffc:	08 f0       	brcs	.+2      	; 0x3000 <_Z8backwardv+0xd52>
    2ffe:	11 c1       	rjmp	.+546    	; 0x3222 <_Z8backwardv+0xf74>
    3000:	2e cf       	rjmp	.-420    	; 0x2e5e <_Z8backwardv+0xbb0>
				delay(interval);		
			}
			
		}

		else if(pWm<lAstpwm||pWm1<lAstpwm1||pWm2<lAstpwm2||pWm3<lAstpwm3){				//decelerate
    3002:	89 3c       	cpi	r24, 0xC9	; 201
    3004:	08 f0       	brcs	.+2      	; 0x3008 <_Z8backwardv+0xd5a>
    3006:	99 c0       	rjmp	.+306    	; 0x313a <_Z8backwardv+0xe8c>
    3008:	99 3c       	cpi	r25, 0xC9	; 201
    300a:	08 f0       	brcs	.+2      	; 0x300e <_Z8backwardv+0xd60>
    300c:	96 c0       	rjmp	.+300    	; 0x313a <_Z8backwardv+0xe8c>
    300e:	29 3c       	cpi	r18, 0xC9	; 201
    3010:	08 f0       	brcs	.+2      	; 0x3014 <_Z8backwardv+0xd66>
    3012:	93 c0       	rjmp	.+294    	; 0x313a <_Z8backwardv+0xe8c>
    3014:	39 3c       	cpi	r19, 0xC9	; 201
    3016:	08 f0       	brcs	.+2      	; 0x301a <_Z8backwardv+0xd6c>
    3018:	90 c0       	rjmp	.+288    	; 0x313a <_Z8backwardv+0xe8c>
    301a:	ef c0       	rjmp	.+478    	; 0x31fa <_Z8backwardv+0xf4c>

			for(lAstpwm=lAstpwm,lAstpwm1=lAstpwm1,lAstpwm2=lAstpwm2,lAstpwm3=lAstpwm3;lAstpwm>pWm||lAstpwm1>pWm1||lAstpwm2>pWm2||lAstpwm3>pWm3;){		//decrease the speed step by step
				if (pWm<lAstpwm){
					lAstpwm-=step1;
    301c:	f2 01       	movw	r30, r4
    301e:	80 81       	ld	r24, Z
    3020:	68 1b       	sub	r22, r24
    3022:	e9 81       	ldd	r30, Y+1	; 0x01
    3024:	fa 81       	ldd	r31, Y+2	; 0x02
    3026:	60 83       	st	Z, r22
					analogWrite(pWmpin,constrain(lAstpwm,pWm,255));
    3028:	70 e0       	ldi	r23, 0x00	; 0
    302a:	80 e0       	ldi	r24, 0x00	; 0
    302c:	90 e0       	ldi	r25, 0x00	; 0
    302e:	28 ec       	ldi	r18, 0xC8	; 200
    3030:	30 e0       	ldi	r19, 0x00	; 0
    3032:	40 e0       	ldi	r20, 0x00	; 0
    3034:	50 e0       	ldi	r21, 0x00	; 0
    3036:	0f 2e       	mov	r0, r31
    3038:	ff ef       	ldi	r31, 0xFF	; 255
    303a:	ef 2e       	mov	r14, r31
    303c:	f0 e0       	ldi	r31, 0x00	; 0
    303e:	ff 2e       	mov	r15, r31
    3040:	f0 e0       	ldi	r31, 0x00	; 0
    3042:	0f 2f       	mov	r16, r31
    3044:	f0 e0       	ldi	r31, 0x00	; 0
    3046:	1f 2f       	mov	r17, r31
    3048:	f0 2d       	mov	r31, r0
    304a:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <_Z9constrainlll>
    304e:	eb 81       	ldd	r30, Y+3	; 0x03
    3050:	fc 81       	ldd	r31, Y+4	; 0x04
    3052:	80 81       	ld	r24, Z
    3054:	0e 94 29 05 	call	0xa52	; 0xa52 <_Z11analogWritehh>
				}
				if (pWm1<lAstpwm1){
    3058:	ef ee       	ldi	r30, 0xEF	; 239
    305a:	f2 e0       	ldi	r31, 0x02	; 2
    305c:	60 81       	ld	r22, Z
    305e:	69 3c       	cpi	r22, 0xC9	; 201
    3060:	f0 f0       	brcs	.+60     	; 0x309e <_Z8backwardv+0xdf0>
					lAstpwm1-=step2;
    3062:	f1 01       	movw	r30, r2
    3064:	80 81       	ld	r24, Z
    3066:	68 1b       	sub	r22, r24
    3068:	ed 81       	ldd	r30, Y+5	; 0x05
    306a:	fe 81       	ldd	r31, Y+6	; 0x06
    306c:	60 83       	st	Z, r22
					analogWrite(pWmpin1,constrain(lAstpwm1,pWm1,255));
    306e:	70 e0       	ldi	r23, 0x00	; 0
    3070:	80 e0       	ldi	r24, 0x00	; 0
    3072:	90 e0       	ldi	r25, 0x00	; 0
    3074:	28 ec       	ldi	r18, 0xC8	; 200
    3076:	30 e0       	ldi	r19, 0x00	; 0
    3078:	40 e0       	ldi	r20, 0x00	; 0
    307a:	50 e0       	ldi	r21, 0x00	; 0
    307c:	0f 2e       	mov	r0, r31
    307e:	ff ef       	ldi	r31, 0xFF	; 255
    3080:	ef 2e       	mov	r14, r31
    3082:	f0 e0       	ldi	r31, 0x00	; 0
    3084:	ff 2e       	mov	r15, r31
    3086:	f0 e0       	ldi	r31, 0x00	; 0
    3088:	0f 2f       	mov	r16, r31
    308a:	f0 e0       	ldi	r31, 0x00	; 0
    308c:	1f 2f       	mov	r17, r31
    308e:	f0 2d       	mov	r31, r0
    3090:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <_Z9constrainlll>
    3094:	ef 81       	ldd	r30, Y+7	; 0x07
    3096:	f8 85       	ldd	r31, Y+8	; 0x08
    3098:	80 81       	ld	r24, Z
    309a:	0e 94 29 05 	call	0xa52	; 0xa52 <_Z11analogWritehh>
				}
				if (pWm2<lAstpwm2){
    309e:	f6 01       	movw	r30, r12
    30a0:	60 81       	ld	r22, Z
    30a2:	69 3c       	cpi	r22, 0xC9	; 201
    30a4:	f8 f0       	brcs	.+62     	; 0x30e4 <_Z8backwardv+0xe36>
					lAstpwm2-=step3;
    30a6:	e4 ef       	ldi	r30, 0xF4	; 244
    30a8:	f2 e0       	ldi	r31, 0x02	; 2
    30aa:	80 81       	ld	r24, Z
    30ac:	68 1b       	sub	r22, r24
    30ae:	e9 85       	ldd	r30, Y+9	; 0x09
    30b0:	fa 85       	ldd	r31, Y+10	; 0x0a
    30b2:	60 83       	st	Z, r22
					analogWrite(pWmpin2,constrain(lAstpwm2,pWm2,255));
    30b4:	70 e0       	ldi	r23, 0x00	; 0
    30b6:	80 e0       	ldi	r24, 0x00	; 0
    30b8:	90 e0       	ldi	r25, 0x00	; 0
    30ba:	28 ec       	ldi	r18, 0xC8	; 200
    30bc:	30 e0       	ldi	r19, 0x00	; 0
    30be:	40 e0       	ldi	r20, 0x00	; 0
    30c0:	50 e0       	ldi	r21, 0x00	; 0
    30c2:	0f 2e       	mov	r0, r31
    30c4:	ff ef       	ldi	r31, 0xFF	; 255
    30c6:	ef 2e       	mov	r14, r31
    30c8:	f0 e0       	ldi	r31, 0x00	; 0
    30ca:	ff 2e       	mov	r15, r31
    30cc:	f0 e0       	ldi	r31, 0x00	; 0
    30ce:	0f 2f       	mov	r16, r31
    30d0:	f0 e0       	ldi	r31, 0x00	; 0
    30d2:	1f 2f       	mov	r17, r31
    30d4:	f0 2d       	mov	r31, r0
    30d6:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <_Z9constrainlll>
    30da:	eb 85       	ldd	r30, Y+11	; 0x0b
    30dc:	fc 85       	ldd	r31, Y+12	; 0x0c
    30de:	80 81       	ld	r24, Z
    30e0:	0e 94 29 05 	call	0xa52	; 0xa52 <_Z11analogWritehh>
				}
				if (pWm3<lAstpwm3){
    30e4:	f5 01       	movw	r30, r10
    30e6:	60 81       	ld	r22, Z
    30e8:	69 3c       	cpi	r22, 0xC9	; 201
    30ea:	f8 f0       	brcs	.+62     	; 0x312a <_Z8backwardv+0xe7c>
					lAstpwm3-=step4;
    30ec:	e8 ef       	ldi	r30, 0xF8	; 248
    30ee:	f2 e0       	ldi	r31, 0x02	; 2
    30f0:	80 81       	ld	r24, Z
    30f2:	68 1b       	sub	r22, r24
    30f4:	ed 85       	ldd	r30, Y+13	; 0x0d
    30f6:	fe 85       	ldd	r31, Y+14	; 0x0e
    30f8:	60 83       	st	Z, r22
					analogWrite(pWmpin3,constrain(lAstpwm3,pWm3,255));
    30fa:	70 e0       	ldi	r23, 0x00	; 0
    30fc:	80 e0       	ldi	r24, 0x00	; 0
    30fe:	90 e0       	ldi	r25, 0x00	; 0
    3100:	28 ec       	ldi	r18, 0xC8	; 200
    3102:	30 e0       	ldi	r19, 0x00	; 0
    3104:	40 e0       	ldi	r20, 0x00	; 0
    3106:	50 e0       	ldi	r21, 0x00	; 0
    3108:	0f 2e       	mov	r0, r31
    310a:	ff ef       	ldi	r31, 0xFF	; 255
    310c:	ef 2e       	mov	r14, r31
    310e:	f0 e0       	ldi	r31, 0x00	; 0
    3110:	ff 2e       	mov	r15, r31
    3112:	f0 e0       	ldi	r31, 0x00	; 0
    3114:	0f 2f       	mov	r16, r31
    3116:	f0 e0       	ldi	r31, 0x00	; 0
    3118:	1f 2f       	mov	r17, r31
    311a:	f0 2d       	mov	r31, r0
    311c:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <_Z9constrainlll>
    3120:	ef 85       	ldd	r30, Y+15	; 0x0f
    3122:	f8 89       	ldd	r31, Y+16	; 0x10
    3124:	80 81       	ld	r24, Z
    3126:	0e 94 29 05 	call	0xa52	; 0xa52 <_Z11analogWritehh>
				}
				delay(interval);		
    312a:	f3 01       	movw	r30, r6
    312c:	60 81       	ld	r22, Z
    312e:	70 e0       	ldi	r23, 0x00	; 0
    3130:	80 e0       	ldi	r24, 0x00	; 0
    3132:	90 e0       	ldi	r25, 0x00	; 0
    3134:	0e 94 62 06 	call	0xcc4	; 0xcc4 <_Z5delaym>
    3138:	4b c0       	rjmp	.+150    	; 0x31d0 <_Z8backwardv+0xf22>
			
		}

		else if(pWm<lAstpwm||pWm1<lAstpwm1||pWm2<lAstpwm2||pWm3<lAstpwm3){				//decelerate

			for(lAstpwm=lAstpwm,lAstpwm1=lAstpwm1,lAstpwm2=lAstpwm2,lAstpwm3=lAstpwm3;lAstpwm>pWm||lAstpwm1>pWm1||lAstpwm2>pWm2||lAstpwm3>pWm3;){		//decrease the speed step by step
    313a:	0f 2e       	mov	r0, r31
    313c:	fa ee       	ldi	r31, 0xEA	; 234
    313e:	8f 2e       	mov	r8, r31
    3140:	f2 e0       	ldi	r31, 0x02	; 2
    3142:	9f 2e       	mov	r9, r31
    3144:	f0 2d       	mov	r31, r0
				if (pWm<lAstpwm){
					lAstpwm-=step1;
    3146:	0f 2e       	mov	r0, r31
    3148:	fb ee       	ldi	r31, 0xEB	; 235
    314a:	4f 2e       	mov	r4, r31
    314c:	f2 e0       	ldi	r31, 0x02	; 2
    314e:	5f 2e       	mov	r5, r31
    3150:	f0 2d       	mov	r31, r0
    3152:	a2 01       	movw	r20, r4
    3154:	41 50       	subi	r20, 0x01	; 1
    3156:	50 40       	sbci	r21, 0x00	; 0
    3158:	5a 83       	std	Y+2, r21	; 0x02
    315a:	49 83       	std	Y+1, r20	; 0x01
					analogWrite(pWmpin,constrain(lAstpwm,pWm,255));
    315c:	c2 01       	movw	r24, r4
    315e:	02 97       	sbiw	r24, 0x02	; 2
    3160:	9c 83       	std	Y+4, r25	; 0x04
    3162:	8b 83       	std	Y+3, r24	; 0x03
			
		}

		else if(pWm<lAstpwm||pWm1<lAstpwm1||pWm2<lAstpwm2||pWm3<lAstpwm3){				//decelerate

			for(lAstpwm=lAstpwm,lAstpwm1=lAstpwm1,lAstpwm2=lAstpwm2,lAstpwm3=lAstpwm3;lAstpwm>pWm||lAstpwm1>pWm1||lAstpwm2>pWm2||lAstpwm3>pWm3;){		//decrease the speed step by step
    3164:	0f 2e       	mov	r0, r31
    3166:	f3 ef       	ldi	r31, 0xF3	; 243
    3168:	cf 2e       	mov	r12, r31
    316a:	f2 e0       	ldi	r31, 0x02	; 2
    316c:	df 2e       	mov	r13, r31
    316e:	f0 2d       	mov	r31, r0
    3170:	0f 2e       	mov	r0, r31
    3172:	f7 ef       	ldi	r31, 0xF7	; 247
    3174:	af 2e       	mov	r10, r31
    3176:	f2 e0       	ldi	r31, 0x02	; 2
    3178:	bf 2e       	mov	r11, r31
    317a:	f0 2d       	mov	r31, r0
				if (pWm<lAstpwm){
					lAstpwm-=step1;
					analogWrite(pWmpin,constrain(lAstpwm,pWm,255));
				}
				if (pWm1<lAstpwm1){
					lAstpwm1-=step2;
    317c:	0f 2e       	mov	r0, r31
    317e:	f0 ef       	ldi	r31, 0xF0	; 240
    3180:	2f 2e       	mov	r2, r31
    3182:	f2 e0       	ldi	r31, 0x02	; 2
    3184:	3f 2e       	mov	r3, r31
    3186:	f0 2d       	mov	r31, r0
    3188:	f1 01       	movw	r30, r2
    318a:	31 97       	sbiw	r30, 0x01	; 1
    318c:	fe 83       	std	Y+6, r31	; 0x06
    318e:	ed 83       	std	Y+5, r30	; 0x05
					analogWrite(pWmpin1,constrain(lAstpwm1,pWm1,255));
    3190:	a1 01       	movw	r20, r2
    3192:	42 50       	subi	r20, 0x02	; 2
    3194:	50 40       	sbci	r21, 0x00	; 0
    3196:	58 87       	std	Y+8, r21	; 0x08
    3198:	4f 83       	std	Y+7, r20	; 0x07
				}
				if (pWm2<lAstpwm2){
					lAstpwm2-=step3;
    319a:	84 ef       	ldi	r24, 0xF4	; 244
    319c:	92 e0       	ldi	r25, 0x02	; 2
    319e:	01 97       	sbiw	r24, 0x01	; 1
    31a0:	9a 87       	std	Y+10, r25	; 0x0a
    31a2:	89 87       	std	Y+9, r24	; 0x09
					analogWrite(pWmpin2,constrain(lAstpwm2,pWm2,255));
    31a4:	e4 ef       	ldi	r30, 0xF4	; 244
    31a6:	f2 e0       	ldi	r31, 0x02	; 2
    31a8:	32 97       	sbiw	r30, 0x02	; 2
    31aa:	fc 87       	std	Y+12, r31	; 0x0c
    31ac:	eb 87       	std	Y+11, r30	; 0x0b
				}
				if (pWm3<lAstpwm3){
					lAstpwm3-=step4;
    31ae:	48 ef       	ldi	r20, 0xF8	; 248
    31b0:	52 e0       	ldi	r21, 0x02	; 2
    31b2:	41 50       	subi	r20, 0x01	; 1
    31b4:	50 40       	sbci	r21, 0x00	; 0
    31b6:	5e 87       	std	Y+14, r21	; 0x0e
    31b8:	4d 87       	std	Y+13, r20	; 0x0d
					analogWrite(pWmpin3,constrain(lAstpwm3,pWm3,255));
    31ba:	88 ef       	ldi	r24, 0xF8	; 248
    31bc:	92 e0       	ldi	r25, 0x02	; 2
    31be:	02 97       	sbiw	r24, 0x02	; 2
    31c0:	98 8b       	std	Y+16, r25	; 0x10
    31c2:	8f 87       	std	Y+15, r24	; 0x0f
				}
				delay(interval);		
    31c4:	0f 2e       	mov	r0, r31
    31c6:	fc ee       	ldi	r31, 0xEC	; 236
    31c8:	6f 2e       	mov	r6, r31
    31ca:	f2 e0       	ldi	r31, 0x02	; 2
    31cc:	7f 2e       	mov	r7, r31
    31ce:	f0 2d       	mov	r31, r0
			
		}

		else if(pWm<lAstpwm||pWm1<lAstpwm1||pWm2<lAstpwm2||pWm3<lAstpwm3){				//decelerate

			for(lAstpwm=lAstpwm,lAstpwm1=lAstpwm1,lAstpwm2=lAstpwm2,lAstpwm3=lAstpwm3;lAstpwm>pWm||lAstpwm1>pWm1||lAstpwm2>pWm2||lAstpwm3>pWm3;){		//decrease the speed step by step
    31d0:	f4 01       	movw	r30, r8
    31d2:	60 81       	ld	r22, Z
    31d4:	69 3c       	cpi	r22, 0xC9	; 201
    31d6:	08 f0       	brcs	.+2      	; 0x31da <_Z8backwardv+0xf2c>
    31d8:	21 cf       	rjmp	.-446    	; 0x301c <_Z8backwardv+0xd6e>
    31da:	ef ee       	ldi	r30, 0xEF	; 239
    31dc:	f2 e0       	ldi	r31, 0x02	; 2
    31de:	80 81       	ld	r24, Z
    31e0:	89 3c       	cpi	r24, 0xC9	; 201
    31e2:	08 f0       	brcs	.+2      	; 0x31e6 <_Z8backwardv+0xf38>
    31e4:	39 cf       	rjmp	.-398    	; 0x3058 <_Z8backwardv+0xdaa>
    31e6:	f6 01       	movw	r30, r12
    31e8:	80 81       	ld	r24, Z
    31ea:	89 3c       	cpi	r24, 0xC9	; 201
    31ec:	08 f0       	brcs	.+2      	; 0x31f0 <_Z8backwardv+0xf42>
    31ee:	34 cf       	rjmp	.-408    	; 0x3058 <_Z8backwardv+0xdaa>
    31f0:	f5 01       	movw	r30, r10
    31f2:	80 81       	ld	r24, Z
    31f4:	89 3c       	cpi	r24, 0xC9	; 201
    31f6:	a8 f0       	brcs	.+42     	; 0x3222 <_Z8backwardv+0xf74>
    31f8:	2f cf       	rjmp	.-418    	; 0x3058 <_Z8backwardv+0xdaa>
				delay(interval);		
			}
		}

		else{		//no change
			analogWrite(pWmpin,pWm);
    31fa:	80 91 e9 02 	lds	r24, 0x02E9
    31fe:	68 ec       	ldi	r22, 0xC8	; 200
    3200:	0e 94 29 05 	call	0xa52	; 0xa52 <_Z11analogWritehh>
			analogWrite(pWmpin1,pWm1);
    3204:	80 91 ee 02 	lds	r24, 0x02EE
    3208:	68 ec       	ldi	r22, 0xC8	; 200
    320a:	0e 94 29 05 	call	0xa52	; 0xa52 <_Z11analogWritehh>
			analogWrite(pWmpin2,pWm2);
    320e:	80 91 f2 02 	lds	r24, 0x02F2
    3212:	68 ec       	ldi	r22, 0xC8	; 200
    3214:	0e 94 29 05 	call	0xa52	; 0xa52 <_Z11analogWritehh>
			analogWrite(pWmpin3,pWm3);
    3218:	80 91 f6 02 	lds	r24, 0x02F6
    321c:	68 ec       	ldi	r22, 0xC8	; 200
    321e:	0e 94 29 05 	call	0xa52	; 0xa52 <_Z11analogWritehh>
	motors.direction(0,0,0,0);
	motors.drive(200,200,200,200);
	prevDir='b';
    3222:	82 e6       	ldi	r24, 0x62	; 98
    3224:	80 93 f9 02 	sts	0x02F9, r24
}
    3228:	60 96       	adiw	r28, 0x10	; 16
    322a:	0f b6       	in	r0, 0x3f	; 63
    322c:	f8 94       	cli
    322e:	de bf       	out	0x3e, r29	; 62
    3230:	0f be       	out	0x3f, r0	; 63
    3232:	cd bf       	out	0x3d, r28	; 61
    3234:	cf 91       	pop	r28
    3236:	df 91       	pop	r29
    3238:	1f 91       	pop	r17
    323a:	0f 91       	pop	r16
    323c:	ff 90       	pop	r15
    323e:	ef 90       	pop	r14
    3240:	df 90       	pop	r13
    3242:	cf 90       	pop	r12
    3244:	bf 90       	pop	r11
    3246:	af 90       	pop	r10
    3248:	9f 90       	pop	r9
    324a:	8f 90       	pop	r8
    324c:	7f 90       	pop	r7
    324e:	6f 90       	pop	r6
    3250:	5f 90       	pop	r5
    3252:	4f 90       	pop	r4
    3254:	3f 90       	pop	r3
    3256:	2f 90       	pop	r2
    3258:	08 95       	ret

0000325a <_Z5setupv>:

void setup(){
    325a:	cf 93       	push	r28
    325c:	df 93       	push	r29
public:
  uint8_t pIn;
  
  void attach(uint8_t nUm)       //F_CPU=clock frequency and num=pin no.to be attached
  {
    iCr=19999;
    325e:	8f e1       	ldi	r24, 0x1F	; 31
    3260:	9e e4       	ldi	r25, 0x4E	; 78
    3262:	90 93 dd 02 	sts	0x02DD, r25
    3266:	80 93 dc 02 	sts	0x02DC, r24
    pIn=nUm;
    326a:	2b e0       	ldi	r18, 0x0B	; 11
    326c:	20 93 de 02 	sts	0x02DE, r18
    switch(pIn)
    {
     case 11 :                           //OC1A
        DDRB|=(1<<PB5); // PORTB as OUTPUT
    3270:	25 9a       	sbi	0x04, 5	; 4
        TCCR1A |= (1<<WGM11) | (1<<COM1A1) | (1<<COM1A0);
    3272:	a0 e8       	ldi	r26, 0x80	; 128
    3274:	b0 e0       	ldi	r27, 0x00	; 0
    3276:	2c 91       	ld	r18, X
    3278:	22 6c       	ori	r18, 0xC2	; 194
    327a:	2c 93       	st	X, r18
        TCCR1B |= (1<<WGM12) | (1<<WGM13);
    327c:	e1 e8       	ldi	r30, 0x81	; 129
    327e:	f0 e0       	ldi	r31, 0x00	; 0
    3280:	20 81       	ld	r18, Z
    3282:	28 61       	ori	r18, 0x18	; 24
    3284:	20 83       	st	Z, r18
        TCCR1B |= (1<<CS10);
    3286:	20 81       	ld	r18, Z
    3288:	21 60       	ori	r18, 0x01	; 1
    328a:	20 83       	st	Z, r18
        ICR1=iCr;                    //generating 20msec pulse (pwm method)
    328c:	c6 e8       	ldi	r28, 0x86	; 134
    328e:	d0 e0       	ldi	r29, 0x00	; 0
    3290:	99 83       	std	Y+1, r25	; 0x01
    3292:	88 83       	st	Y, r24
public:
  uint8_t pIn;
  
  void attach(uint8_t nUm)       //F_CPU=clock frequency and num=pin no.to be attached
  {
    iCr=19999;
    3294:	90 93 e0 02 	sts	0x02E0, r25
    3298:	80 93 df 02 	sts	0x02DF, r24
    pIn=nUm;
    329c:	2c e0       	ldi	r18, 0x0C	; 12
    329e:	20 93 e1 02 	sts	0x02E1, r18
        TCCR1B |= (1<<CS10);
        ICR1=iCr;                    //generating 20msec pulse (pwm method)
        break; 

     case 12 :                            //OC1B
        DDRB|=(1<<PB6); // PORTB as OUTPUT
    32a2:	26 9a       	sbi	0x04, 6	; 4
        TCCR1A|=(1<<WGM11)|(1<<COM1B1)|(1<<COM1B0);  //SETTING PRESCALAR AS 64 
    32a4:	2c 91       	ld	r18, X
    32a6:	22 63       	ori	r18, 0x32	; 50
    32a8:	2c 93       	st	X, r18
        TCCR1B|=(1<<WGM12)|(1<<WGM13)|(1<<CS10); //FAST PWM MODE
    32aa:	20 81       	ld	r18, Z
    32ac:	29 61       	ori	r18, 0x19	; 25
    32ae:	20 83       	st	Z, r18
        ICR1=iCr;                    //generating 20msec pulse (pwm method)
    32b0:	99 83       	std	Y+1, r25	; 0x01
    32b2:	88 83       	st	Y, r24
public:
  uint8_t pIn;
  
  void attach(uint8_t nUm)       //F_CPU=clock frequency and num=pin no.to be attached
  {
    iCr=19999;
    32b4:	90 93 e3 02 	sts	0x02E3, r25
    32b8:	80 93 e2 02 	sts	0x02E2, r24
    pIn=nUm;
    32bc:	25 e0       	ldi	r18, 0x05	; 5
    32be:	20 93 e4 02 	sts	0x02E4, r18
        TCCR1B|=(1<<WGM12)|(1<<WGM13)|(1<<CS10); //FAST PWM MODE
        ICR1=iCr;                    //generating 20msec pulse (pwm method)
        break;

      case 5 :                            //OC3A
        DDRE|=(1<<PE3); // PORTB as OUTPUT
    32c2:	6b 9a       	sbi	0x0d, 3	; 13
        TCCR3A|=(1<<WGM31)|(1<<COM3A1)|(1<<COM3A0);  //SETTING PRESCALAR AS 64 
    32c4:	a0 e9       	ldi	r26, 0x90	; 144
    32c6:	b0 e0       	ldi	r27, 0x00	; 0
    32c8:	2c 91       	ld	r18, X
    32ca:	22 6c       	ori	r18, 0xC2	; 194
    32cc:	2c 93       	st	X, r18
        TCCR3B|=(1<<WGM32)|(1<<WGM33)|(1<<CS30); //FAST PWM MODE
    32ce:	e1 e9       	ldi	r30, 0x91	; 145
    32d0:	f0 e0       	ldi	r31, 0x00	; 0
    32d2:	20 81       	ld	r18, Z
    32d4:	29 61       	ori	r18, 0x19	; 25
    32d6:	20 83       	st	Z, r18
        ICR3=iCr;                    //generating 20msec pulse (pwm method)
    32d8:	c6 e9       	ldi	r28, 0x96	; 150
    32da:	d0 e0       	ldi	r29, 0x00	; 0
    32dc:	99 83       	std	Y+1, r25	; 0x01
    32de:	88 83       	st	Y, r24
public:
  uint8_t pIn;
  
  void attach(uint8_t nUm)       //F_CPU=clock frequency and num=pin no.to be attached
  {
    iCr=19999;
    32e0:	90 93 e6 02 	sts	0x02E6, r25
    32e4:	80 93 e5 02 	sts	0x02E5, r24
    pIn=nUm;
    32e8:	22 e0       	ldi	r18, 0x02	; 2
    32ea:	20 93 e7 02 	sts	0x02E7, r18
        TCCR3B|=(1<<WGM32)|(1<<WGM33)|(1<<CS30); //FAST PWM MODE
        ICR3=iCr;                    //generating 20msec pulse (pwm method)
        break;

      case 2 :                            //OC3B
        DDRE|=(1<<PE4); // PORTB as OUTPUT
    32ee:	6c 9a       	sbi	0x0d, 4	; 13
        TCCR3A|=(1<<WGM31)|(1<<COM3B1)|(1<<COM3B0);  //SETTING PRESCALAR AS 64 
    32f0:	2c 91       	ld	r18, X
    32f2:	22 63       	ori	r18, 0x32	; 50
    32f4:	2c 93       	st	X, r18
        TCCR3B|=(1<<WGM32)|(1<<WGM33)|(1<<CS30); //FAST PWM MODE
    32f6:	20 81       	ld	r18, Z
    32f8:	29 61       	ori	r18, 0x19	; 25
    32fa:	20 83       	st	Z, r18
        ICR3=iCr;                    //generating 20msec pulse (pwm method)
    32fc:	99 83       	std	Y+1, r25	; 0x01
    32fe:	88 83       	st	Y, r24
	swerve1.attach(servoPwm1);
	swerve2.attach(servoPwm2);
	swerve3.attach(servoPwm3);
	swerve4.attach(servoPwm4);
}
    3300:	df 91       	pop	r29
    3302:	cf 91       	pop	r28
    3304:	08 95       	ret

00003306 <_Z4loopv>:

void loop(){
	//XXX: Check if servo is stalling, if yes don't freak out just make sure it doesn't stall for long time. Check if heating
	forward();
    3306:	0e 94 81 09 	call	0x1302	; 0x1302 <_Z7forwardv>
	delay(1000);
    330a:	68 ee       	ldi	r22, 0xE8	; 232
    330c:	73 e0       	ldi	r23, 0x03	; 3
    330e:	80 e0       	ldi	r24, 0x00	; 0
    3310:	90 e0       	ldi	r25, 0x00	; 0
    3312:	0e 94 62 06 	call	0xcc4	; 0xcc4 <_Z5delaym>
	backward();
    3316:	0e 94 57 11 	call	0x22ae	; 0x22ae <_Z8backwardv>
	delay(1000);
    331a:	68 ee       	ldi	r22, 0xE8	; 232
    331c:	73 e0       	ldi	r23, 0x03	; 3
    331e:	80 e0       	ldi	r24, 0x00	; 0
    3320:	90 e0       	ldi	r25, 0x00	; 0
    3322:	0e 94 62 06 	call	0xcc4	; 0xcc4 <_Z5delaym>
}
    3326:	08 95       	ret

00003328 <main>:
{
	uSerfun();
}*/
int main(){
	//tinit();
	setup();
    3328:	0e 94 2d 19 	call	0x325a	; 0x325a <_Z5setupv>
	while(1){
		loop();
    332c:	0e 94 83 19 	call	0x3306	; 0x3306 <_Z4loopv>
    3330:	fd cf       	rjmp	.-6      	; 0x332c <main+0x4>

00003332 <_GLOBAL__I_tImer2_millis>:
		step2=5;
		step3=5;
		interval=10;
  	}
  	Cytron(uint8_t getdIrpin, uint8_t getpWmpin, uint8_t getdIrpin1, uint8_t getpWmpin1, uint8_t getdIrpin2, uint8_t getpWmpin2, uint8_t getdIrpin3, uint8_t getpWmpin3){     //constructor function takes direction and pwm pins for cytron
	    pWmpin=getpWmpin;
    3332:	84 e0       	ldi	r24, 0x04	; 4
    3334:	80 93 e9 02 	sts	0x02E9, r24
	    dIrpin=getdIrpin;
    3338:	e9 ee       	ldi	r30, 0xE9	; 233
    333a:	f2 e0       	ldi	r31, 0x02	; 2
    333c:	8e e1       	ldi	r24, 0x1E	; 30
    333e:	82 93       	st	-Z, r24
	    pWmpin1=getpWmpin1;
    3340:	8d e0       	ldi	r24, 0x0D	; 13
    3342:	86 83       	std	Z+6, r24	; 0x06
	    dIrpin1=getdIrpin1;
    3344:	8f e1       	ldi	r24, 0x1F	; 31
    3346:	85 83       	std	Z+5, r24	; 0x05
	    pWmpin2=getpWmpin2;
    3348:	9a e0       	ldi	r25, 0x0A	; 10
    334a:	92 87       	std	Z+10, r25	; 0x0a
	    dIrpin2=getdIrpin2;
    334c:	80 e2       	ldi	r24, 0x20	; 32
    334e:	81 87       	std	Z+9, r24	; 0x09
	    pWmpin3=getpWmpin3;
    3350:	89 e0       	ldi	r24, 0x09	; 9
    3352:	86 87       	std	Z+14, r24	; 0x0e
	    dIrpin3=getdIrpin3;
    3354:	81 e2       	ldi	r24, 0x21	; 33
    3356:	85 87       	std	Z+13, r24	; 0x0d
	    lAstpwm=0;
    3358:	12 82       	std	Z+2, r1	; 0x02
		lAstpwm1=0;
    335a:	17 82       	std	Z+7, r1	; 0x07
		lAstpwm2=0;
    335c:	13 86       	std	Z+11, r1	; 0x0b
		lAstpwm3=0;
    335e:	17 86       	std	Z+15, r1	; 0x0f
		step1=5;
    3360:	85 e0       	ldi	r24, 0x05	; 5
    3362:	83 83       	std	Z+3, r24	; 0x03
		step2=5;
    3364:	80 87       	std	Z+8, r24	; 0x08
		step3=5;
    3366:	84 87       	std	Z+12, r24	; 0x0c
		step4=5;
    3368:	80 8b       	std	Z+16, r24	; 0x10
		interval=10;
    336a:	94 83       	std	Z+4, r25	; 0x04
    336c:	08 95       	ret

0000336e <__divsf3>:
    336e:	0c d0       	rcall	.+24     	; 0x3388 <__divsf3x>
    3370:	eb c0       	rjmp	.+470    	; 0x3548 <__fp_round>
    3372:	e3 d0       	rcall	.+454    	; 0x353a <__fp_pscB>
    3374:	40 f0       	brcs	.+16     	; 0x3386 <__divsf3+0x18>
    3376:	da d0       	rcall	.+436    	; 0x352c <__fp_pscA>
    3378:	30 f0       	brcs	.+12     	; 0x3386 <__divsf3+0x18>
    337a:	21 f4       	brne	.+8      	; 0x3384 <__divsf3+0x16>
    337c:	5f 3f       	cpi	r21, 0xFF	; 255
    337e:	19 f0       	breq	.+6      	; 0x3386 <__divsf3+0x18>
    3380:	cc c0       	rjmp	.+408    	; 0x351a <__fp_inf>
    3382:	51 11       	cpse	r21, r1
    3384:	15 c1       	rjmp	.+554    	; 0x35b0 <__fp_szero>
    3386:	cf c0       	rjmp	.+414    	; 0x3526 <__fp_nan>

00003388 <__divsf3x>:
    3388:	f0 d0       	rcall	.+480    	; 0x356a <__fp_split3>
    338a:	98 f3       	brcs	.-26     	; 0x3372 <__divsf3+0x4>

0000338c <__divsf3_pse>:
    338c:	99 23       	and	r25, r25
    338e:	c9 f3       	breq	.-14     	; 0x3382 <__divsf3+0x14>
    3390:	55 23       	and	r21, r21
    3392:	b1 f3       	breq	.-20     	; 0x3380 <__divsf3+0x12>
    3394:	95 1b       	sub	r25, r21
    3396:	55 0b       	sbc	r21, r21
    3398:	bb 27       	eor	r27, r27
    339a:	aa 27       	eor	r26, r26
    339c:	62 17       	cp	r22, r18
    339e:	73 07       	cpc	r23, r19
    33a0:	84 07       	cpc	r24, r20
    33a2:	38 f0       	brcs	.+14     	; 0x33b2 <__divsf3_pse+0x26>
    33a4:	9f 5f       	subi	r25, 0xFF	; 255
    33a6:	5f 4f       	sbci	r21, 0xFF	; 255
    33a8:	22 0f       	add	r18, r18
    33aa:	33 1f       	adc	r19, r19
    33ac:	44 1f       	adc	r20, r20
    33ae:	aa 1f       	adc	r26, r26
    33b0:	a9 f3       	breq	.-22     	; 0x339c <__divsf3_pse+0x10>
    33b2:	33 d0       	rcall	.+102    	; 0x341a <__divsf3_pse+0x8e>
    33b4:	0e 2e       	mov	r0, r30
    33b6:	3a f0       	brmi	.+14     	; 0x33c6 <__divsf3_pse+0x3a>
    33b8:	e0 e8       	ldi	r30, 0x80	; 128
    33ba:	30 d0       	rcall	.+96     	; 0x341c <__divsf3_pse+0x90>
    33bc:	91 50       	subi	r25, 0x01	; 1
    33be:	50 40       	sbci	r21, 0x00	; 0
    33c0:	e6 95       	lsr	r30
    33c2:	00 1c       	adc	r0, r0
    33c4:	ca f7       	brpl	.-14     	; 0x33b8 <__divsf3_pse+0x2c>
    33c6:	29 d0       	rcall	.+82     	; 0x341a <__divsf3_pse+0x8e>
    33c8:	fe 2f       	mov	r31, r30
    33ca:	27 d0       	rcall	.+78     	; 0x341a <__divsf3_pse+0x8e>
    33cc:	66 0f       	add	r22, r22
    33ce:	77 1f       	adc	r23, r23
    33d0:	88 1f       	adc	r24, r24
    33d2:	bb 1f       	adc	r27, r27
    33d4:	26 17       	cp	r18, r22
    33d6:	37 07       	cpc	r19, r23
    33d8:	48 07       	cpc	r20, r24
    33da:	ab 07       	cpc	r26, r27
    33dc:	b0 e8       	ldi	r27, 0x80	; 128
    33de:	09 f0       	breq	.+2      	; 0x33e2 <__divsf3_pse+0x56>
    33e0:	bb 0b       	sbc	r27, r27
    33e2:	80 2d       	mov	r24, r0
    33e4:	bf 01       	movw	r22, r30
    33e6:	ff 27       	eor	r31, r31
    33e8:	93 58       	subi	r25, 0x83	; 131
    33ea:	5f 4f       	sbci	r21, 0xFF	; 255
    33ec:	2a f0       	brmi	.+10     	; 0x33f8 <__divsf3_pse+0x6c>
    33ee:	9e 3f       	cpi	r25, 0xFE	; 254
    33f0:	51 05       	cpc	r21, r1
    33f2:	68 f0       	brcs	.+26     	; 0x340e <__divsf3_pse+0x82>
    33f4:	92 c0       	rjmp	.+292    	; 0x351a <__fp_inf>
    33f6:	dc c0       	rjmp	.+440    	; 0x35b0 <__fp_szero>
    33f8:	5f 3f       	cpi	r21, 0xFF	; 255
    33fa:	ec f3       	brlt	.-6      	; 0x33f6 <__divsf3_pse+0x6a>
    33fc:	98 3e       	cpi	r25, 0xE8	; 232
    33fe:	dc f3       	brlt	.-10     	; 0x33f6 <__divsf3_pse+0x6a>
    3400:	86 95       	lsr	r24
    3402:	77 95       	ror	r23
    3404:	67 95       	ror	r22
    3406:	b7 95       	ror	r27
    3408:	f7 95       	ror	r31
    340a:	9f 5f       	subi	r25, 0xFF	; 255
    340c:	c9 f7       	brne	.-14     	; 0x3400 <__divsf3_pse+0x74>
    340e:	88 0f       	add	r24, r24
    3410:	91 1d       	adc	r25, r1
    3412:	96 95       	lsr	r25
    3414:	87 95       	ror	r24
    3416:	97 f9       	bld	r25, 7
    3418:	08 95       	ret
    341a:	e1 e0       	ldi	r30, 0x01	; 1
    341c:	66 0f       	add	r22, r22
    341e:	77 1f       	adc	r23, r23
    3420:	88 1f       	adc	r24, r24
    3422:	bb 1f       	adc	r27, r27
    3424:	62 17       	cp	r22, r18
    3426:	73 07       	cpc	r23, r19
    3428:	84 07       	cpc	r24, r20
    342a:	ba 07       	cpc	r27, r26
    342c:	20 f0       	brcs	.+8      	; 0x3436 <__divsf3_pse+0xaa>
    342e:	62 1b       	sub	r22, r18
    3430:	73 0b       	sbc	r23, r19
    3432:	84 0b       	sbc	r24, r20
    3434:	ba 0b       	sbc	r27, r26
    3436:	ee 1f       	adc	r30, r30
    3438:	88 f7       	brcc	.-30     	; 0x341c <__divsf3_pse+0x90>
    343a:	e0 95       	com	r30
    343c:	08 95       	ret

0000343e <__fixsfsi>:
    343e:	04 d0       	rcall	.+8      	; 0x3448 <__fixunssfsi>
    3440:	68 94       	set
    3442:	b1 11       	cpse	r27, r1
    3444:	b5 c0       	rjmp	.+362    	; 0x35b0 <__fp_szero>
    3446:	08 95       	ret

00003448 <__fixunssfsi>:
    3448:	98 d0       	rcall	.+304    	; 0x357a <__fp_splitA>
    344a:	88 f0       	brcs	.+34     	; 0x346e <__fixunssfsi+0x26>
    344c:	9f 57       	subi	r25, 0x7F	; 127
    344e:	90 f0       	brcs	.+36     	; 0x3474 <__fixunssfsi+0x2c>
    3450:	b9 2f       	mov	r27, r25
    3452:	99 27       	eor	r25, r25
    3454:	b7 51       	subi	r27, 0x17	; 23
    3456:	a0 f0       	brcs	.+40     	; 0x3480 <__fixunssfsi+0x38>
    3458:	d1 f0       	breq	.+52     	; 0x348e <__fixunssfsi+0x46>
    345a:	66 0f       	add	r22, r22
    345c:	77 1f       	adc	r23, r23
    345e:	88 1f       	adc	r24, r24
    3460:	99 1f       	adc	r25, r25
    3462:	1a f0       	brmi	.+6      	; 0x346a <__fixunssfsi+0x22>
    3464:	ba 95       	dec	r27
    3466:	c9 f7       	brne	.-14     	; 0x345a <__fixunssfsi+0x12>
    3468:	12 c0       	rjmp	.+36     	; 0x348e <__fixunssfsi+0x46>
    346a:	b1 30       	cpi	r27, 0x01	; 1
    346c:	81 f0       	breq	.+32     	; 0x348e <__fixunssfsi+0x46>
    346e:	9f d0       	rcall	.+318    	; 0x35ae <__fp_zero>
    3470:	b1 e0       	ldi	r27, 0x01	; 1
    3472:	08 95       	ret
    3474:	9c c0       	rjmp	.+312    	; 0x35ae <__fp_zero>
    3476:	67 2f       	mov	r22, r23
    3478:	78 2f       	mov	r23, r24
    347a:	88 27       	eor	r24, r24
    347c:	b8 5f       	subi	r27, 0xF8	; 248
    347e:	39 f0       	breq	.+14     	; 0x348e <__fixunssfsi+0x46>
    3480:	b9 3f       	cpi	r27, 0xF9	; 249
    3482:	cc f3       	brlt	.-14     	; 0x3476 <__fixunssfsi+0x2e>
    3484:	86 95       	lsr	r24
    3486:	77 95       	ror	r23
    3488:	67 95       	ror	r22
    348a:	b3 95       	inc	r27
    348c:	d9 f7       	brne	.-10     	; 0x3484 <__fixunssfsi+0x3c>
    348e:	3e f4       	brtc	.+14     	; 0x349e <__fixunssfsi+0x56>
    3490:	90 95       	com	r25
    3492:	80 95       	com	r24
    3494:	70 95       	com	r23
    3496:	61 95       	neg	r22
    3498:	7f 4f       	sbci	r23, 0xFF	; 255
    349a:	8f 4f       	sbci	r24, 0xFF	; 255
    349c:	9f 4f       	sbci	r25, 0xFF	; 255
    349e:	08 95       	ret

000034a0 <__floatunsisf>:
    34a0:	e8 94       	clt
    34a2:	09 c0       	rjmp	.+18     	; 0x34b6 <__floatsisf+0x12>

000034a4 <__floatsisf>:
    34a4:	97 fb       	bst	r25, 7
    34a6:	3e f4       	brtc	.+14     	; 0x34b6 <__floatsisf+0x12>
    34a8:	90 95       	com	r25
    34aa:	80 95       	com	r24
    34ac:	70 95       	com	r23
    34ae:	61 95       	neg	r22
    34b0:	7f 4f       	sbci	r23, 0xFF	; 255
    34b2:	8f 4f       	sbci	r24, 0xFF	; 255
    34b4:	9f 4f       	sbci	r25, 0xFF	; 255
    34b6:	99 23       	and	r25, r25
    34b8:	a9 f0       	breq	.+42     	; 0x34e4 <__floatsisf+0x40>
    34ba:	f9 2f       	mov	r31, r25
    34bc:	96 e9       	ldi	r25, 0x96	; 150
    34be:	bb 27       	eor	r27, r27
    34c0:	93 95       	inc	r25
    34c2:	f6 95       	lsr	r31
    34c4:	87 95       	ror	r24
    34c6:	77 95       	ror	r23
    34c8:	67 95       	ror	r22
    34ca:	b7 95       	ror	r27
    34cc:	f1 11       	cpse	r31, r1
    34ce:	f8 cf       	rjmp	.-16     	; 0x34c0 <__floatsisf+0x1c>
    34d0:	fa f4       	brpl	.+62     	; 0x3510 <__floatsisf+0x6c>
    34d2:	bb 0f       	add	r27, r27
    34d4:	11 f4       	brne	.+4      	; 0x34da <__floatsisf+0x36>
    34d6:	60 ff       	sbrs	r22, 0
    34d8:	1b c0       	rjmp	.+54     	; 0x3510 <__floatsisf+0x6c>
    34da:	6f 5f       	subi	r22, 0xFF	; 255
    34dc:	7f 4f       	sbci	r23, 0xFF	; 255
    34de:	8f 4f       	sbci	r24, 0xFF	; 255
    34e0:	9f 4f       	sbci	r25, 0xFF	; 255
    34e2:	16 c0       	rjmp	.+44     	; 0x3510 <__floatsisf+0x6c>
    34e4:	88 23       	and	r24, r24
    34e6:	11 f0       	breq	.+4      	; 0x34ec <__floatsisf+0x48>
    34e8:	96 e9       	ldi	r25, 0x96	; 150
    34ea:	11 c0       	rjmp	.+34     	; 0x350e <__floatsisf+0x6a>
    34ec:	77 23       	and	r23, r23
    34ee:	21 f0       	breq	.+8      	; 0x34f8 <__floatsisf+0x54>
    34f0:	9e e8       	ldi	r25, 0x8E	; 142
    34f2:	87 2f       	mov	r24, r23
    34f4:	76 2f       	mov	r23, r22
    34f6:	05 c0       	rjmp	.+10     	; 0x3502 <__floatsisf+0x5e>
    34f8:	66 23       	and	r22, r22
    34fa:	71 f0       	breq	.+28     	; 0x3518 <__floatsisf+0x74>
    34fc:	96 e8       	ldi	r25, 0x86	; 134
    34fe:	86 2f       	mov	r24, r22
    3500:	70 e0       	ldi	r23, 0x00	; 0
    3502:	60 e0       	ldi	r22, 0x00	; 0
    3504:	2a f0       	brmi	.+10     	; 0x3510 <__floatsisf+0x6c>
    3506:	9a 95       	dec	r25
    3508:	66 0f       	add	r22, r22
    350a:	77 1f       	adc	r23, r23
    350c:	88 1f       	adc	r24, r24
    350e:	da f7       	brpl	.-10     	; 0x3506 <__floatsisf+0x62>
    3510:	88 0f       	add	r24, r24
    3512:	96 95       	lsr	r25
    3514:	87 95       	ror	r24
    3516:	97 f9       	bld	r25, 7
    3518:	08 95       	ret

0000351a <__fp_inf>:
    351a:	97 f9       	bld	r25, 7
    351c:	9f 67       	ori	r25, 0x7F	; 127
    351e:	80 e8       	ldi	r24, 0x80	; 128
    3520:	70 e0       	ldi	r23, 0x00	; 0
    3522:	60 e0       	ldi	r22, 0x00	; 0
    3524:	08 95       	ret

00003526 <__fp_nan>:
    3526:	9f ef       	ldi	r25, 0xFF	; 255
    3528:	80 ec       	ldi	r24, 0xC0	; 192
    352a:	08 95       	ret

0000352c <__fp_pscA>:
    352c:	00 24       	eor	r0, r0
    352e:	0a 94       	dec	r0
    3530:	16 16       	cp	r1, r22
    3532:	17 06       	cpc	r1, r23
    3534:	18 06       	cpc	r1, r24
    3536:	09 06       	cpc	r0, r25
    3538:	08 95       	ret

0000353a <__fp_pscB>:
    353a:	00 24       	eor	r0, r0
    353c:	0a 94       	dec	r0
    353e:	12 16       	cp	r1, r18
    3540:	13 06       	cpc	r1, r19
    3542:	14 06       	cpc	r1, r20
    3544:	05 06       	cpc	r0, r21
    3546:	08 95       	ret

00003548 <__fp_round>:
    3548:	09 2e       	mov	r0, r25
    354a:	03 94       	inc	r0
    354c:	00 0c       	add	r0, r0
    354e:	11 f4       	brne	.+4      	; 0x3554 <__fp_round+0xc>
    3550:	88 23       	and	r24, r24
    3552:	52 f0       	brmi	.+20     	; 0x3568 <__fp_round+0x20>
    3554:	bb 0f       	add	r27, r27
    3556:	40 f4       	brcc	.+16     	; 0x3568 <__fp_round+0x20>
    3558:	bf 2b       	or	r27, r31
    355a:	11 f4       	brne	.+4      	; 0x3560 <__fp_round+0x18>
    355c:	60 ff       	sbrs	r22, 0
    355e:	04 c0       	rjmp	.+8      	; 0x3568 <__fp_round+0x20>
    3560:	6f 5f       	subi	r22, 0xFF	; 255
    3562:	7f 4f       	sbci	r23, 0xFF	; 255
    3564:	8f 4f       	sbci	r24, 0xFF	; 255
    3566:	9f 4f       	sbci	r25, 0xFF	; 255
    3568:	08 95       	ret

0000356a <__fp_split3>:
    356a:	57 fd       	sbrc	r21, 7
    356c:	90 58       	subi	r25, 0x80	; 128
    356e:	44 0f       	add	r20, r20
    3570:	55 1f       	adc	r21, r21
    3572:	59 f0       	breq	.+22     	; 0x358a <__fp_splitA+0x10>
    3574:	5f 3f       	cpi	r21, 0xFF	; 255
    3576:	71 f0       	breq	.+28     	; 0x3594 <__fp_splitA+0x1a>
    3578:	47 95       	ror	r20

0000357a <__fp_splitA>:
    357a:	88 0f       	add	r24, r24
    357c:	97 fb       	bst	r25, 7
    357e:	99 1f       	adc	r25, r25
    3580:	61 f0       	breq	.+24     	; 0x359a <__fp_splitA+0x20>
    3582:	9f 3f       	cpi	r25, 0xFF	; 255
    3584:	79 f0       	breq	.+30     	; 0x35a4 <__fp_splitA+0x2a>
    3586:	87 95       	ror	r24
    3588:	08 95       	ret
    358a:	12 16       	cp	r1, r18
    358c:	13 06       	cpc	r1, r19
    358e:	14 06       	cpc	r1, r20
    3590:	55 1f       	adc	r21, r21
    3592:	f2 cf       	rjmp	.-28     	; 0x3578 <__fp_split3+0xe>
    3594:	46 95       	lsr	r20
    3596:	f1 df       	rcall	.-30     	; 0x357a <__fp_splitA>
    3598:	08 c0       	rjmp	.+16     	; 0x35aa <__fp_splitA+0x30>
    359a:	16 16       	cp	r1, r22
    359c:	17 06       	cpc	r1, r23
    359e:	18 06       	cpc	r1, r24
    35a0:	99 1f       	adc	r25, r25
    35a2:	f1 cf       	rjmp	.-30     	; 0x3586 <__fp_splitA+0xc>
    35a4:	86 95       	lsr	r24
    35a6:	71 05       	cpc	r23, r1
    35a8:	61 05       	cpc	r22, r1
    35aa:	08 94       	sec
    35ac:	08 95       	ret

000035ae <__fp_zero>:
    35ae:	e8 94       	clt

000035b0 <__fp_szero>:
    35b0:	bb 27       	eor	r27, r27
    35b2:	66 27       	eor	r22, r22
    35b4:	77 27       	eor	r23, r23
    35b6:	cb 01       	movw	r24, r22
    35b8:	97 f9       	bld	r25, 7
    35ba:	08 95       	ret

000035bc <__mulsf3>:
    35bc:	0b d0       	rcall	.+22     	; 0x35d4 <__mulsf3x>
    35be:	c4 cf       	rjmp	.-120    	; 0x3548 <__fp_round>
    35c0:	b5 df       	rcall	.-150    	; 0x352c <__fp_pscA>
    35c2:	28 f0       	brcs	.+10     	; 0x35ce <__mulsf3+0x12>
    35c4:	ba df       	rcall	.-140    	; 0x353a <__fp_pscB>
    35c6:	18 f0       	brcs	.+6      	; 0x35ce <__mulsf3+0x12>
    35c8:	95 23       	and	r25, r21
    35ca:	09 f0       	breq	.+2      	; 0x35ce <__mulsf3+0x12>
    35cc:	a6 cf       	rjmp	.-180    	; 0x351a <__fp_inf>
    35ce:	ab cf       	rjmp	.-170    	; 0x3526 <__fp_nan>
    35d0:	11 24       	eor	r1, r1
    35d2:	ee cf       	rjmp	.-36     	; 0x35b0 <__fp_szero>

000035d4 <__mulsf3x>:
    35d4:	ca df       	rcall	.-108    	; 0x356a <__fp_split3>
    35d6:	a0 f3       	brcs	.-24     	; 0x35c0 <__mulsf3+0x4>

000035d8 <__mulsf3_pse>:
    35d8:	95 9f       	mul	r25, r21
    35da:	d1 f3       	breq	.-12     	; 0x35d0 <__mulsf3+0x14>
    35dc:	95 0f       	add	r25, r21
    35de:	50 e0       	ldi	r21, 0x00	; 0
    35e0:	55 1f       	adc	r21, r21
    35e2:	62 9f       	mul	r22, r18
    35e4:	f0 01       	movw	r30, r0
    35e6:	72 9f       	mul	r23, r18
    35e8:	bb 27       	eor	r27, r27
    35ea:	f0 0d       	add	r31, r0
    35ec:	b1 1d       	adc	r27, r1
    35ee:	63 9f       	mul	r22, r19
    35f0:	aa 27       	eor	r26, r26
    35f2:	f0 0d       	add	r31, r0
    35f4:	b1 1d       	adc	r27, r1
    35f6:	aa 1f       	adc	r26, r26
    35f8:	64 9f       	mul	r22, r20
    35fa:	66 27       	eor	r22, r22
    35fc:	b0 0d       	add	r27, r0
    35fe:	a1 1d       	adc	r26, r1
    3600:	66 1f       	adc	r22, r22
    3602:	82 9f       	mul	r24, r18
    3604:	22 27       	eor	r18, r18
    3606:	b0 0d       	add	r27, r0
    3608:	a1 1d       	adc	r26, r1
    360a:	62 1f       	adc	r22, r18
    360c:	73 9f       	mul	r23, r19
    360e:	b0 0d       	add	r27, r0
    3610:	a1 1d       	adc	r26, r1
    3612:	62 1f       	adc	r22, r18
    3614:	83 9f       	mul	r24, r19
    3616:	a0 0d       	add	r26, r0
    3618:	61 1d       	adc	r22, r1
    361a:	22 1f       	adc	r18, r18
    361c:	74 9f       	mul	r23, r20
    361e:	33 27       	eor	r19, r19
    3620:	a0 0d       	add	r26, r0
    3622:	61 1d       	adc	r22, r1
    3624:	23 1f       	adc	r18, r19
    3626:	84 9f       	mul	r24, r20
    3628:	60 0d       	add	r22, r0
    362a:	21 1d       	adc	r18, r1
    362c:	82 2f       	mov	r24, r18
    362e:	76 2f       	mov	r23, r22
    3630:	6a 2f       	mov	r22, r26
    3632:	11 24       	eor	r1, r1
    3634:	9f 57       	subi	r25, 0x7F	; 127
    3636:	50 40       	sbci	r21, 0x00	; 0
    3638:	8a f0       	brmi	.+34     	; 0x365c <__mulsf3_pse+0x84>
    363a:	e1 f0       	breq	.+56     	; 0x3674 <__mulsf3_pse+0x9c>
    363c:	88 23       	and	r24, r24
    363e:	4a f0       	brmi	.+18     	; 0x3652 <__mulsf3_pse+0x7a>
    3640:	ee 0f       	add	r30, r30
    3642:	ff 1f       	adc	r31, r31
    3644:	bb 1f       	adc	r27, r27
    3646:	66 1f       	adc	r22, r22
    3648:	77 1f       	adc	r23, r23
    364a:	88 1f       	adc	r24, r24
    364c:	91 50       	subi	r25, 0x01	; 1
    364e:	50 40       	sbci	r21, 0x00	; 0
    3650:	a9 f7       	brne	.-22     	; 0x363c <__mulsf3_pse+0x64>
    3652:	9e 3f       	cpi	r25, 0xFE	; 254
    3654:	51 05       	cpc	r21, r1
    3656:	70 f0       	brcs	.+28     	; 0x3674 <__mulsf3_pse+0x9c>
    3658:	60 cf       	rjmp	.-320    	; 0x351a <__fp_inf>
    365a:	aa cf       	rjmp	.-172    	; 0x35b0 <__fp_szero>
    365c:	5f 3f       	cpi	r21, 0xFF	; 255
    365e:	ec f3       	brlt	.-6      	; 0x365a <__mulsf3_pse+0x82>
    3660:	98 3e       	cpi	r25, 0xE8	; 232
    3662:	dc f3       	brlt	.-10     	; 0x365a <__mulsf3_pse+0x82>
    3664:	86 95       	lsr	r24
    3666:	77 95       	ror	r23
    3668:	67 95       	ror	r22
    366a:	b7 95       	ror	r27
    366c:	f7 95       	ror	r31
    366e:	e7 95       	ror	r30
    3670:	9f 5f       	subi	r25, 0xFF	; 255
    3672:	c1 f7       	brne	.-16     	; 0x3664 <__mulsf3_pse+0x8c>
    3674:	fe 2b       	or	r31, r30
    3676:	88 0f       	add	r24, r24
    3678:	91 1d       	adc	r25, r1
    367a:	96 95       	lsr	r25
    367c:	87 95       	ror	r24
    367e:	97 f9       	bld	r25, 7
    3680:	08 95       	ret

00003682 <__mulsi3>:
    3682:	62 9f       	mul	r22, r18
    3684:	d0 01       	movw	r26, r0
    3686:	73 9f       	mul	r23, r19
    3688:	f0 01       	movw	r30, r0
    368a:	82 9f       	mul	r24, r18
    368c:	e0 0d       	add	r30, r0
    368e:	f1 1d       	adc	r31, r1
    3690:	64 9f       	mul	r22, r20
    3692:	e0 0d       	add	r30, r0
    3694:	f1 1d       	adc	r31, r1
    3696:	92 9f       	mul	r25, r18
    3698:	f0 0d       	add	r31, r0
    369a:	83 9f       	mul	r24, r19
    369c:	f0 0d       	add	r31, r0
    369e:	74 9f       	mul	r23, r20
    36a0:	f0 0d       	add	r31, r0
    36a2:	65 9f       	mul	r22, r21
    36a4:	f0 0d       	add	r31, r0
    36a6:	99 27       	eor	r25, r25
    36a8:	72 9f       	mul	r23, r18
    36aa:	b0 0d       	add	r27, r0
    36ac:	e1 1d       	adc	r30, r1
    36ae:	f9 1f       	adc	r31, r25
    36b0:	63 9f       	mul	r22, r19
    36b2:	b0 0d       	add	r27, r0
    36b4:	e1 1d       	adc	r30, r1
    36b6:	f9 1f       	adc	r31, r25
    36b8:	bd 01       	movw	r22, r26
    36ba:	cf 01       	movw	r24, r30
    36bc:	11 24       	eor	r1, r1
    36be:	08 95       	ret

000036c0 <__divmodhi4>:
    36c0:	97 fb       	bst	r25, 7
    36c2:	09 2e       	mov	r0, r25
    36c4:	07 26       	eor	r0, r23
    36c6:	0a d0       	rcall	.+20     	; 0x36dc <__divmodhi4_neg1>
    36c8:	77 fd       	sbrc	r23, 7
    36ca:	04 d0       	rcall	.+8      	; 0x36d4 <__divmodhi4_neg2>
    36cc:	27 d0       	rcall	.+78     	; 0x371c <__udivmodhi4>
    36ce:	06 d0       	rcall	.+12     	; 0x36dc <__divmodhi4_neg1>
    36d0:	00 20       	and	r0, r0
    36d2:	1a f4       	brpl	.+6      	; 0x36da <__divmodhi4_exit>

000036d4 <__divmodhi4_neg2>:
    36d4:	70 95       	com	r23
    36d6:	61 95       	neg	r22
    36d8:	7f 4f       	sbci	r23, 0xFF	; 255

000036da <__divmodhi4_exit>:
    36da:	08 95       	ret

000036dc <__divmodhi4_neg1>:
    36dc:	f6 f7       	brtc	.-4      	; 0x36da <__divmodhi4_exit>
    36de:	90 95       	com	r25
    36e0:	81 95       	neg	r24
    36e2:	9f 4f       	sbci	r25, 0xFF	; 255
    36e4:	08 95       	ret

000036e6 <__divmodsi4>:
    36e6:	97 fb       	bst	r25, 7
    36e8:	09 2e       	mov	r0, r25
    36ea:	05 26       	eor	r0, r21
    36ec:	0e d0       	rcall	.+28     	; 0x370a <__divmodsi4_neg1>
    36ee:	57 fd       	sbrc	r21, 7
    36f0:	04 d0       	rcall	.+8      	; 0x36fa <__divmodsi4_neg2>
    36f2:	28 d0       	rcall	.+80     	; 0x3744 <__udivmodsi4>
    36f4:	0a d0       	rcall	.+20     	; 0x370a <__divmodsi4_neg1>
    36f6:	00 1c       	adc	r0, r0
    36f8:	38 f4       	brcc	.+14     	; 0x3708 <__divmodsi4_exit>

000036fa <__divmodsi4_neg2>:
    36fa:	50 95       	com	r21
    36fc:	40 95       	com	r20
    36fe:	30 95       	com	r19
    3700:	21 95       	neg	r18
    3702:	3f 4f       	sbci	r19, 0xFF	; 255
    3704:	4f 4f       	sbci	r20, 0xFF	; 255
    3706:	5f 4f       	sbci	r21, 0xFF	; 255

00003708 <__divmodsi4_exit>:
    3708:	08 95       	ret

0000370a <__divmodsi4_neg1>:
    370a:	f6 f7       	brtc	.-4      	; 0x3708 <__divmodsi4_exit>
    370c:	90 95       	com	r25
    370e:	80 95       	com	r24
    3710:	70 95       	com	r23
    3712:	61 95       	neg	r22
    3714:	7f 4f       	sbci	r23, 0xFF	; 255
    3716:	8f 4f       	sbci	r24, 0xFF	; 255
    3718:	9f 4f       	sbci	r25, 0xFF	; 255
    371a:	08 95       	ret

0000371c <__udivmodhi4>:
    371c:	aa 1b       	sub	r26, r26
    371e:	bb 1b       	sub	r27, r27
    3720:	51 e1       	ldi	r21, 0x11	; 17
    3722:	07 c0       	rjmp	.+14     	; 0x3732 <__udivmodhi4_ep>

00003724 <__udivmodhi4_loop>:
    3724:	aa 1f       	adc	r26, r26
    3726:	bb 1f       	adc	r27, r27
    3728:	a6 17       	cp	r26, r22
    372a:	b7 07       	cpc	r27, r23
    372c:	10 f0       	brcs	.+4      	; 0x3732 <__udivmodhi4_ep>
    372e:	a6 1b       	sub	r26, r22
    3730:	b7 0b       	sbc	r27, r23

00003732 <__udivmodhi4_ep>:
    3732:	88 1f       	adc	r24, r24
    3734:	99 1f       	adc	r25, r25
    3736:	5a 95       	dec	r21
    3738:	a9 f7       	brne	.-22     	; 0x3724 <__udivmodhi4_loop>
    373a:	80 95       	com	r24
    373c:	90 95       	com	r25
    373e:	bc 01       	movw	r22, r24
    3740:	cd 01       	movw	r24, r26
    3742:	08 95       	ret

00003744 <__udivmodsi4>:
    3744:	a1 e2       	ldi	r26, 0x21	; 33
    3746:	1a 2e       	mov	r1, r26
    3748:	aa 1b       	sub	r26, r26
    374a:	bb 1b       	sub	r27, r27
    374c:	fd 01       	movw	r30, r26
    374e:	0d c0       	rjmp	.+26     	; 0x376a <__udivmodsi4_ep>

00003750 <__udivmodsi4_loop>:
    3750:	aa 1f       	adc	r26, r26
    3752:	bb 1f       	adc	r27, r27
    3754:	ee 1f       	adc	r30, r30
    3756:	ff 1f       	adc	r31, r31
    3758:	a2 17       	cp	r26, r18
    375a:	b3 07       	cpc	r27, r19
    375c:	e4 07       	cpc	r30, r20
    375e:	f5 07       	cpc	r31, r21
    3760:	20 f0       	brcs	.+8      	; 0x376a <__udivmodsi4_ep>
    3762:	a2 1b       	sub	r26, r18
    3764:	b3 0b       	sbc	r27, r19
    3766:	e4 0b       	sbc	r30, r20
    3768:	f5 0b       	sbc	r31, r21

0000376a <__udivmodsi4_ep>:
    376a:	66 1f       	adc	r22, r22
    376c:	77 1f       	adc	r23, r23
    376e:	88 1f       	adc	r24, r24
    3770:	99 1f       	adc	r25, r25
    3772:	1a 94       	dec	r1
    3774:	69 f7       	brne	.-38     	; 0x3750 <__udivmodsi4_loop>
    3776:	60 95       	com	r22
    3778:	70 95       	com	r23
    377a:	80 95       	com	r24
    377c:	90 95       	com	r25
    377e:	9b 01       	movw	r18, r22
    3780:	ac 01       	movw	r20, r24
    3782:	bd 01       	movw	r22, r26
    3784:	cf 01       	movw	r24, r30
    3786:	08 95       	ret

00003788 <__tablejump_elpm__>:
    3788:	07 90       	elpm	r0, Z+
    378a:	f6 91       	elpm	r31, Z+
    378c:	e0 2d       	mov	r30, r0
    378e:	19 94       	eijmp

00003790 <_exit>:
    3790:	f8 94       	cli

00003792 <__stop_program>:
    3792:	ff cf       	rjmp	.-2      	; 0x3792 <__stop_program>
