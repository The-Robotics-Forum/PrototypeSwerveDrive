
PrototypeSwerveDrive.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b4  00800200  00001cde  00001d72  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001cde  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  008002b4  008002b4  00001e26  2**0
                  ALLOC
  3 .stab         00002460  00000000  00000000  00001e28  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000008a6  00000000  00000000  00004288  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  00004b2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000020c  00000000  00000000  00004b4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000c5d  00000000  00000000  00004d5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000039d  00000000  00000000  000059b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001267  00000000  00000000  00005d54  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001d0  00000000  00000000  00006fbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000623  00000000  00000000  0000718c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000d15  00000000  00000000  000077af  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000067  00000000  00000000  000084c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 ed 0b 	jmp	0x17da	; 0x17da <__vector_1>
       8:	0c 94 75 0a 	jmp	0x14ea	; 0x14ea <__vector_2>
       c:	0c 94 a0 0a 	jmp	0x1540	; 0x1540 <__vector_3>
      10:	0c 94 cb 0a 	jmp	0x1596	; 0x1596 <__vector_4>
      14:	0c 94 f6 0a 	jmp	0x15ec	; 0x15ec <__vector_5>
      18:	0c 94 21 0b 	jmp	0x1642	; 0x1642 <__vector_6>
      1c:	0c 94 4c 0b 	jmp	0x1698	; 0x1698 <__vector_7>
      20:	0c 94 77 0b 	jmp	0x16ee	; 0x16ee <__vector_8>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 31 08 	jmp	0x1062	; 0x1062 <__vector_23>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ee ed       	ldi	r30, 0xDE	; 222
      fc:	fc e1       	ldi	r31, 0x1C	; 28
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a4 3b       	cpi	r26, 0xB4	; 180
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	12 e0       	ldi	r17, 0x02	; 2
     110:	a4 eb       	ldi	r26, 0xB4	; 180
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a3 3c       	cpi	r26, 0xC3	; 195
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <main>
     122:	0c 94 6d 0e 	jmp	0x1cda	; 0x1cda <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <_Z7pinModehh>:
//Functions:

void pinMode(uint8_t pInno,uint8_t mOde)
{
	int l;
  	if(mOde==0)
     12a:	66 23       	and	r22, r22
     12c:	09 f0       	breq	.+2      	; 0x130 <_Z7pinModehh+0x6>
     12e:	b8 c0       	rjmp	.+368    	; 0x2a0 <_Z7pinModehh+0x176>
    { 
    	switch(d[pInno]){
     130:	90 e0       	ldi	r25, 0x00	; 0
     132:	fc 01       	movw	r30, r24
     134:	e8 58       	subi	r30, 0x88	; 136
     136:	fd 4f       	sbci	r31, 0xFD	; 253
     138:	20 81       	ld	r18, Z
     13a:	25 36       	cpi	r18, 0x65	; 101
     13c:	09 f4       	brne	.+2      	; 0x140 <_Z7pinModehh+0x16>
     13e:	50 c0       	rjmp	.+160    	; 0x1e0 <_Z7pinModehh+0xb6>
     140:	26 36       	cpi	r18, 0x66	; 102
     142:	40 f4       	brcc	.+16     	; 0x154 <_Z7pinModehh+0x2a>
     144:	23 36       	cpi	r18, 0x63	; 99
     146:	41 f1       	breq	.+80     	; 0x198 <_Z7pinModehh+0x6e>
     148:	24 36       	cpi	r18, 0x64	; 100
     14a:	c0 f5       	brcc	.+112    	; 0x1bc <_Z7pinModehh+0x92>
     14c:	22 36       	cpi	r18, 0x62	; 98
     14e:	09 f0       	breq	.+2      	; 0x152 <_Z7pinModehh+0x28>
     150:	5e c1       	rjmp	.+700    	; 0x40e <_Z7pinModehh+0x2e4>
     152:	10 c0       	rjmp	.+32     	; 0x174 <_Z7pinModehh+0x4a>
     154:	28 36       	cpi	r18, 0x68	; 104
     156:	09 f4       	brne	.+2      	; 0x15a <_Z7pinModehh+0x30>
     158:	67 c0       	rjmp	.+206    	; 0x228 <_Z7pinModehh+0xfe>
     15a:	29 36       	cpi	r18, 0x69	; 105
     15c:	20 f4       	brcc	.+8      	; 0x166 <_Z7pinModehh+0x3c>
     15e:	27 36       	cpi	r18, 0x67	; 103
     160:	09 f0       	breq	.+2      	; 0x164 <_Z7pinModehh+0x3a>
     162:	55 c1       	rjmp	.+682    	; 0x40e <_Z7pinModehh+0x2e4>
     164:	4f c0       	rjmp	.+158    	; 0x204 <_Z7pinModehh+0xda>
     166:	2a 36       	cpi	r18, 0x6A	; 106
     168:	09 f4       	brne	.+2      	; 0x16c <_Z7pinModehh+0x42>
     16a:	72 c0       	rjmp	.+228    	; 0x250 <_Z7pinModehh+0x126>
     16c:	2c 36       	cpi	r18, 0x6C	; 108
     16e:	09 f0       	breq	.+2      	; 0x172 <_Z7pinModehh+0x48>
     170:	4e c1       	rjmp	.+668    	; 0x40e <_Z7pinModehh+0x2e4>
     172:	82 c0       	rjmp	.+260    	; 0x278 <_Z7pinModehh+0x14e>
 
          	case'b':
                  DDRB&=~(1<<c[pInno]);
     174:	24 b1       	in	r18, 0x04	; 4
     176:	fc 01       	movw	r30, r24
     178:	ee 0f       	add	r30, r30
     17a:	ff 1f       	adc	r31, r31
     17c:	e0 50       	subi	r30, 0x00	; 0
     17e:	fe 4f       	sbci	r31, 0xFE	; 254
     180:	81 e0       	ldi	r24, 0x01	; 1
     182:	90 e0       	ldi	r25, 0x00	; 0
     184:	00 80       	ld	r0, Z
     186:	02 c0       	rjmp	.+4      	; 0x18c <_Z7pinModehh+0x62>
     188:	88 0f       	add	r24, r24
     18a:	99 1f       	adc	r25, r25
     18c:	0a 94       	dec	r0
     18e:	e2 f7       	brpl	.-8      	; 0x188 <_Z7pinModehh+0x5e>
     190:	80 95       	com	r24
     192:	82 23       	and	r24, r18
     194:	84 b9       	out	0x04, r24	; 4
		           break;
     196:	08 95       	ret
          	case'c':
                 DDRC&=~(1<<c[pInno]);
     198:	27 b1       	in	r18, 0x07	; 7
     19a:	fc 01       	movw	r30, r24
     19c:	ee 0f       	add	r30, r30
     19e:	ff 1f       	adc	r31, r31
     1a0:	e0 50       	subi	r30, 0x00	; 0
     1a2:	fe 4f       	sbci	r31, 0xFE	; 254
     1a4:	81 e0       	ldi	r24, 0x01	; 1
     1a6:	90 e0       	ldi	r25, 0x00	; 0
     1a8:	00 80       	ld	r0, Z
     1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <_Z7pinModehh+0x86>
     1ac:	88 0f       	add	r24, r24
     1ae:	99 1f       	adc	r25, r25
     1b0:	0a 94       	dec	r0
     1b2:	e2 f7       	brpl	.-8      	; 0x1ac <_Z7pinModehh+0x82>
     1b4:	80 95       	com	r24
     1b6:	82 23       	and	r24, r18
     1b8:	87 b9       	out	0x07, r24	; 7
		          break;
     1ba:	08 95       	ret
          	case'd':
                 DDRD&=~(1<<c[pInno]);
     1bc:	2a b1       	in	r18, 0x0a	; 10
     1be:	fc 01       	movw	r30, r24
     1c0:	ee 0f       	add	r30, r30
     1c2:	ff 1f       	adc	r31, r31
     1c4:	e0 50       	subi	r30, 0x00	; 0
     1c6:	fe 4f       	sbci	r31, 0xFE	; 254
     1c8:	81 e0       	ldi	r24, 0x01	; 1
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	00 80       	ld	r0, Z
     1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <_Z7pinModehh+0xaa>
     1d0:	88 0f       	add	r24, r24
     1d2:	99 1f       	adc	r25, r25
     1d4:	0a 94       	dec	r0
     1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <_Z7pinModehh+0xa6>
     1d8:	80 95       	com	r24
     1da:	82 23       	and	r24, r18
     1dc:	8a b9       	out	0x0a, r24	; 10
		          break;
     1de:	08 95       	ret
	      	case'e':
                  DDRE&=~(1<<c[pInno]);
     1e0:	2d b1       	in	r18, 0x0d	; 13
     1e2:	fc 01       	movw	r30, r24
     1e4:	ee 0f       	add	r30, r30
     1e6:	ff 1f       	adc	r31, r31
     1e8:	e0 50       	subi	r30, 0x00	; 0
     1ea:	fe 4f       	sbci	r31, 0xFE	; 254
     1ec:	81 e0       	ldi	r24, 0x01	; 1
     1ee:	90 e0       	ldi	r25, 0x00	; 0
     1f0:	00 80       	ld	r0, Z
     1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <_Z7pinModehh+0xce>
     1f4:	88 0f       	add	r24, r24
     1f6:	99 1f       	adc	r25, r25
     1f8:	0a 94       	dec	r0
     1fa:	e2 f7       	brpl	.-8      	; 0x1f4 <_Z7pinModehh+0xca>
     1fc:	80 95       	com	r24
     1fe:	82 23       	and	r24, r18
     200:	8d b9       	out	0x0d, r24	; 13
		           break;
     202:	08 95       	ret
		    case'g':
                  DDRG&=~(1<<c[pInno]);
     204:	23 b3       	in	r18, 0x13	; 19
     206:	fc 01       	movw	r30, r24
     208:	ee 0f       	add	r30, r30
     20a:	ff 1f       	adc	r31, r31
     20c:	e0 50       	subi	r30, 0x00	; 0
     20e:	fe 4f       	sbci	r31, 0xFE	; 254
     210:	81 e0       	ldi	r24, 0x01	; 1
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	00 80       	ld	r0, Z
     216:	02 c0       	rjmp	.+4      	; 0x21c <_Z7pinModehh+0xf2>
     218:	88 0f       	add	r24, r24
     21a:	99 1f       	adc	r25, r25
     21c:	0a 94       	dec	r0
     21e:	e2 f7       	brpl	.-8      	; 0x218 <_Z7pinModehh+0xee>
     220:	80 95       	com	r24
     222:	82 23       	and	r24, r18
     224:	83 bb       	out	0x13, r24	; 19
		           break;
     226:	08 95       	ret
			case'h':
                  DDRH&=~(1<<c[pInno]);
     228:	e1 e0       	ldi	r30, 0x01	; 1
     22a:	f1 e0       	ldi	r31, 0x01	; 1
     22c:	20 81       	ld	r18, Z
     22e:	dc 01       	movw	r26, r24
     230:	aa 0f       	add	r26, r26
     232:	bb 1f       	adc	r27, r27
     234:	a0 50       	subi	r26, 0x00	; 0
     236:	be 4f       	sbci	r27, 0xFE	; 254
     238:	81 e0       	ldi	r24, 0x01	; 1
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	0c 90       	ld	r0, X
     23e:	02 c0       	rjmp	.+4      	; 0x244 <_Z7pinModehh+0x11a>
     240:	88 0f       	add	r24, r24
     242:	99 1f       	adc	r25, r25
     244:	0a 94       	dec	r0
     246:	e2 f7       	brpl	.-8      	; 0x240 <_Z7pinModehh+0x116>
     248:	80 95       	com	r24
     24a:	82 23       	and	r24, r18
     24c:	80 83       	st	Z, r24
				  break;
     24e:	08 95       	ret
		    case'j':
                  DDRJ&=~(1<<c[pInno]);
     250:	e4 e0       	ldi	r30, 0x04	; 4
     252:	f1 e0       	ldi	r31, 0x01	; 1
     254:	20 81       	ld	r18, Z
     256:	dc 01       	movw	r26, r24
     258:	aa 0f       	add	r26, r26
     25a:	bb 1f       	adc	r27, r27
     25c:	a0 50       	subi	r26, 0x00	; 0
     25e:	be 4f       	sbci	r27, 0xFE	; 254
     260:	81 e0       	ldi	r24, 0x01	; 1
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	0c 90       	ld	r0, X
     266:	02 c0       	rjmp	.+4      	; 0x26c <_Z7pinModehh+0x142>
     268:	88 0f       	add	r24, r24
     26a:	99 1f       	adc	r25, r25
     26c:	0a 94       	dec	r0
     26e:	e2 f7       	brpl	.-8      	; 0x268 <_Z7pinModehh+0x13e>
     270:	80 95       	com	r24
     272:	82 23       	and	r24, r18
     274:	80 83       	st	Z, r24
		          break;
     276:	08 95       	ret
			case'l':
                  DDRL&=~(1<<c[pInno]);
     278:	ea e0       	ldi	r30, 0x0A	; 10
     27a:	f1 e0       	ldi	r31, 0x01	; 1
     27c:	20 81       	ld	r18, Z
     27e:	dc 01       	movw	r26, r24
     280:	aa 0f       	add	r26, r26
     282:	bb 1f       	adc	r27, r27
     284:	a0 50       	subi	r26, 0x00	; 0
     286:	be 4f       	sbci	r27, 0xFE	; 254
     288:	81 e0       	ldi	r24, 0x01	; 1
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	0c 90       	ld	r0, X
     28e:	02 c0       	rjmp	.+4      	; 0x294 <_Z7pinModehh+0x16a>
     290:	88 0f       	add	r24, r24
     292:	99 1f       	adc	r25, r25
     294:	0a 94       	dec	r0
     296:	e2 f7       	brpl	.-8      	; 0x290 <_Z7pinModehh+0x166>
     298:	80 95       	com	r24
     29a:	82 23       	and	r24, r18
     29c:	80 83       	st	Z, r24
		          break;	        		   		   	  	  		 		 			 
     29e:	08 95       	ret
     	}  
	}
	else{          
			switch(d[pInno])
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	fc 01       	movw	r30, r24
     2a4:	e8 58       	subi	r30, 0x88	; 136
     2a6:	fd 4f       	sbci	r31, 0xFD	; 253
     2a8:	20 81       	ld	r18, Z
     2aa:	25 36       	cpi	r18, 0x65	; 101
     2ac:	09 f4       	brne	.+2      	; 0x2b0 <_Z7pinModehh+0x186>
     2ae:	50 c0       	rjmp	.+160    	; 0x350 <_Z7pinModehh+0x226>
     2b0:	26 36       	cpi	r18, 0x66	; 102
     2b2:	40 f4       	brcc	.+16     	; 0x2c4 <_Z7pinModehh+0x19a>
     2b4:	23 36       	cpi	r18, 0x63	; 99
     2b6:	41 f1       	breq	.+80     	; 0x308 <_Z7pinModehh+0x1de>
     2b8:	24 36       	cpi	r18, 0x64	; 100
     2ba:	c0 f5       	brcc	.+112    	; 0x32c <_Z7pinModehh+0x202>
     2bc:	22 36       	cpi	r18, 0x62	; 98
     2be:	09 f0       	breq	.+2      	; 0x2c2 <_Z7pinModehh+0x198>
     2c0:	a6 c0       	rjmp	.+332    	; 0x40e <_Z7pinModehh+0x2e4>
     2c2:	10 c0       	rjmp	.+32     	; 0x2e4 <_Z7pinModehh+0x1ba>
     2c4:	28 36       	cpi	r18, 0x68	; 104
     2c6:	09 f4       	brne	.+2      	; 0x2ca <_Z7pinModehh+0x1a0>
     2c8:	67 c0       	rjmp	.+206    	; 0x398 <_Z7pinModehh+0x26e>
     2ca:	29 36       	cpi	r18, 0x69	; 105
     2cc:	20 f4       	brcc	.+8      	; 0x2d6 <_Z7pinModehh+0x1ac>
     2ce:	27 36       	cpi	r18, 0x67	; 103
     2d0:	09 f0       	breq	.+2      	; 0x2d4 <_Z7pinModehh+0x1aa>
     2d2:	9d c0       	rjmp	.+314    	; 0x40e <_Z7pinModehh+0x2e4>
     2d4:	4f c0       	rjmp	.+158    	; 0x374 <_Z7pinModehh+0x24a>
     2d6:	2a 36       	cpi	r18, 0x6A	; 106
     2d8:	09 f4       	brne	.+2      	; 0x2dc <_Z7pinModehh+0x1b2>
     2da:	72 c0       	rjmp	.+228    	; 0x3c0 <_Z7pinModehh+0x296>
     2dc:	2c 36       	cpi	r18, 0x6C	; 108
     2de:	09 f0       	breq	.+2      	; 0x2e2 <_Z7pinModehh+0x1b8>
     2e0:	96 c0       	rjmp	.+300    	; 0x40e <_Z7pinModehh+0x2e4>
     2e2:	82 c0       	rjmp	.+260    	; 0x3e8 <_Z7pinModehh+0x2be>
         	{
	 
	        	case'b':
	            	DDRB|=(1<<c[pInno]);
     2e4:	44 b1       	in	r20, 0x04	; 4
     2e6:	fc 01       	movw	r30, r24
     2e8:	ee 0f       	add	r30, r30
     2ea:	ff 1f       	adc	r31, r31
     2ec:	e0 50       	subi	r30, 0x00	; 0
     2ee:	fe 4f       	sbci	r31, 0xFE	; 254
     2f0:	21 e0       	ldi	r18, 0x01	; 1
     2f2:	30 e0       	ldi	r19, 0x00	; 0
     2f4:	c9 01       	movw	r24, r18
     2f6:	00 80       	ld	r0, Z
     2f8:	02 c0       	rjmp	.+4      	; 0x2fe <_Z7pinModehh+0x1d4>
     2fa:	88 0f       	add	r24, r24
     2fc:	99 1f       	adc	r25, r25
     2fe:	0a 94       	dec	r0
     300:	e2 f7       	brpl	.-8      	; 0x2fa <_Z7pinModehh+0x1d0>
     302:	84 2b       	or	r24, r20
     304:	84 b9       	out	0x04, r24	; 4
			    	break;
     306:	08 95       	ret
	          	case'c':
	                DDRC|=(1<<c[pInno]);
     308:	47 b1       	in	r20, 0x07	; 7
     30a:	fc 01       	movw	r30, r24
     30c:	ee 0f       	add	r30, r30
     30e:	ff 1f       	adc	r31, r31
     310:	e0 50       	subi	r30, 0x00	; 0
     312:	fe 4f       	sbci	r31, 0xFE	; 254
     314:	21 e0       	ldi	r18, 0x01	; 1
     316:	30 e0       	ldi	r19, 0x00	; 0
     318:	c9 01       	movw	r24, r18
     31a:	00 80       	ld	r0, Z
     31c:	02 c0       	rjmp	.+4      	; 0x322 <_Z7pinModehh+0x1f8>
     31e:	88 0f       	add	r24, r24
     320:	99 1f       	adc	r25, r25
     322:	0a 94       	dec	r0
     324:	e2 f7       	brpl	.-8      	; 0x31e <_Z7pinModehh+0x1f4>
     326:	84 2b       	or	r24, r20
     328:	87 b9       	out	0x07, r24	; 7
			        break;
     32a:	08 95       	ret
	          	case'd':
	                DDRD|=(1<<c[pInno]);
     32c:	4a b1       	in	r20, 0x0a	; 10
     32e:	fc 01       	movw	r30, r24
     330:	ee 0f       	add	r30, r30
     332:	ff 1f       	adc	r31, r31
     334:	e0 50       	subi	r30, 0x00	; 0
     336:	fe 4f       	sbci	r31, 0xFE	; 254
     338:	21 e0       	ldi	r18, 0x01	; 1
     33a:	30 e0       	ldi	r19, 0x00	; 0
     33c:	c9 01       	movw	r24, r18
     33e:	00 80       	ld	r0, Z
     340:	02 c0       	rjmp	.+4      	; 0x346 <_Z7pinModehh+0x21c>
     342:	88 0f       	add	r24, r24
     344:	99 1f       	adc	r25, r25
     346:	0a 94       	dec	r0
     348:	e2 f7       	brpl	.-8      	; 0x342 <_Z7pinModehh+0x218>
     34a:	84 2b       	or	r24, r20
     34c:	8a b9       	out	0x0a, r24	; 10
			        break;
     34e:	08 95       	ret
		      	case'e':
	                DDRE|=(1<<c[pInno]);
     350:	4d b1       	in	r20, 0x0d	; 13
     352:	fc 01       	movw	r30, r24
     354:	ee 0f       	add	r30, r30
     356:	ff 1f       	adc	r31, r31
     358:	e0 50       	subi	r30, 0x00	; 0
     35a:	fe 4f       	sbci	r31, 0xFE	; 254
     35c:	21 e0       	ldi	r18, 0x01	; 1
     35e:	30 e0       	ldi	r19, 0x00	; 0
     360:	c9 01       	movw	r24, r18
     362:	00 80       	ld	r0, Z
     364:	02 c0       	rjmp	.+4      	; 0x36a <_Z7pinModehh+0x240>
     366:	88 0f       	add	r24, r24
     368:	99 1f       	adc	r25, r25
     36a:	0a 94       	dec	r0
     36c:	e2 f7       	brpl	.-8      	; 0x366 <_Z7pinModehh+0x23c>
     36e:	84 2b       	or	r24, r20
     370:	8d b9       	out	0x0d, r24	; 13
			        break;
     372:	08 95       	ret
			    case'g':
	                DDRG|=(1<<c[pInno]);
     374:	43 b3       	in	r20, 0x13	; 19
     376:	fc 01       	movw	r30, r24
     378:	ee 0f       	add	r30, r30
     37a:	ff 1f       	adc	r31, r31
     37c:	e0 50       	subi	r30, 0x00	; 0
     37e:	fe 4f       	sbci	r31, 0xFE	; 254
     380:	21 e0       	ldi	r18, 0x01	; 1
     382:	30 e0       	ldi	r19, 0x00	; 0
     384:	c9 01       	movw	r24, r18
     386:	00 80       	ld	r0, Z
     388:	02 c0       	rjmp	.+4      	; 0x38e <_Z7pinModehh+0x264>
     38a:	88 0f       	add	r24, r24
     38c:	99 1f       	adc	r25, r25
     38e:	0a 94       	dec	r0
     390:	e2 f7       	brpl	.-8      	; 0x38a <_Z7pinModehh+0x260>
     392:	84 2b       	or	r24, r20
     394:	83 bb       	out	0x13, r24	; 19
			        break;
     396:	08 95       	ret
			 	case'h':
	                DDRH|=(1<<c[pInno]);
     398:	e1 e0       	ldi	r30, 0x01	; 1
     39a:	f1 e0       	ldi	r31, 0x01	; 1
     39c:	40 81       	ld	r20, Z
     39e:	dc 01       	movw	r26, r24
     3a0:	aa 0f       	add	r26, r26
     3a2:	bb 1f       	adc	r27, r27
     3a4:	a0 50       	subi	r26, 0x00	; 0
     3a6:	be 4f       	sbci	r27, 0xFE	; 254
     3a8:	21 e0       	ldi	r18, 0x01	; 1
     3aa:	30 e0       	ldi	r19, 0x00	; 0
     3ac:	c9 01       	movw	r24, r18
     3ae:	0c 90       	ld	r0, X
     3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <_Z7pinModehh+0x28c>
     3b2:	88 0f       	add	r24, r24
     3b4:	99 1f       	adc	r25, r25
     3b6:	0a 94       	dec	r0
     3b8:	e2 f7       	brpl	.-8      	; 0x3b2 <_Z7pinModehh+0x288>
     3ba:	84 2b       	or	r24, r20
     3bc:	80 83       	st	Z, r24
			        break;
     3be:	08 95       	ret
			    case'j':
	                DDRJ|=(1<<c[pInno]);
     3c0:	e4 e0       	ldi	r30, 0x04	; 4
     3c2:	f1 e0       	ldi	r31, 0x01	; 1
     3c4:	40 81       	ld	r20, Z
     3c6:	dc 01       	movw	r26, r24
     3c8:	aa 0f       	add	r26, r26
     3ca:	bb 1f       	adc	r27, r27
     3cc:	a0 50       	subi	r26, 0x00	; 0
     3ce:	be 4f       	sbci	r27, 0xFE	; 254
     3d0:	21 e0       	ldi	r18, 0x01	; 1
     3d2:	30 e0       	ldi	r19, 0x00	; 0
     3d4:	c9 01       	movw	r24, r18
     3d6:	0c 90       	ld	r0, X
     3d8:	02 c0       	rjmp	.+4      	; 0x3de <_Z7pinModehh+0x2b4>
     3da:	88 0f       	add	r24, r24
     3dc:	99 1f       	adc	r25, r25
     3de:	0a 94       	dec	r0
     3e0:	e2 f7       	brpl	.-8      	; 0x3da <_Z7pinModehh+0x2b0>
     3e2:	84 2b       	or	r24, r20
     3e4:	80 83       	st	Z, r24
			        break;
     3e6:	08 95       	ret
				case'l':
	                DDRL|=(1<<c[pInno]);
     3e8:	ea e0       	ldi	r30, 0x0A	; 10
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	40 81       	ld	r20, Z
     3ee:	dc 01       	movw	r26, r24
     3f0:	aa 0f       	add	r26, r26
     3f2:	bb 1f       	adc	r27, r27
     3f4:	a0 50       	subi	r26, 0x00	; 0
     3f6:	be 4f       	sbci	r27, 0xFE	; 254
     3f8:	21 e0       	ldi	r18, 0x01	; 1
     3fa:	30 e0       	ldi	r19, 0x00	; 0
     3fc:	c9 01       	movw	r24, r18
     3fe:	0c 90       	ld	r0, X
     400:	02 c0       	rjmp	.+4      	; 0x406 <_Z7pinModehh+0x2dc>
     402:	88 0f       	add	r24, r24
     404:	99 1f       	adc	r25, r25
     406:	0a 94       	dec	r0
     408:	e2 f7       	brpl	.-8      	; 0x402 <_Z7pinModehh+0x2d8>
     40a:	84 2b       	or	r24, r20
     40c:	80 83       	st	Z, r24
     40e:	08 95       	ret

00000410 <_Z12digitalWritehh>:
	}
}

void digitalWrite (uint8_t pInno ,uint8_t mOde)		 
{
   if(mOde==0)
     410:	66 23       	and	r22, r22
     412:	09 f0       	breq	.+2      	; 0x416 <_Z12digitalWritehh+0x6>
     414:	b8 c0       	rjmp	.+368    	; 0x586 <_Z12digitalWritehh+0x176>
        { switch(d[pInno])
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	fc 01       	movw	r30, r24
     41a:	e8 58       	subi	r30, 0x88	; 136
     41c:	fd 4f       	sbci	r31, 0xFD	; 253
     41e:	20 81       	ld	r18, Z
     420:	25 36       	cpi	r18, 0x65	; 101
     422:	09 f4       	brne	.+2      	; 0x426 <_Z12digitalWritehh+0x16>
     424:	50 c0       	rjmp	.+160    	; 0x4c6 <_Z12digitalWritehh+0xb6>
     426:	26 36       	cpi	r18, 0x66	; 102
     428:	40 f4       	brcc	.+16     	; 0x43a <_Z12digitalWritehh+0x2a>
     42a:	23 36       	cpi	r18, 0x63	; 99
     42c:	41 f1       	breq	.+80     	; 0x47e <_Z12digitalWritehh+0x6e>
     42e:	24 36       	cpi	r18, 0x64	; 100
     430:	c0 f5       	brcc	.+112    	; 0x4a2 <_Z12digitalWritehh+0x92>
     432:	22 36       	cpi	r18, 0x62	; 98
     434:	09 f0       	breq	.+2      	; 0x438 <_Z12digitalWritehh+0x28>
     436:	5e c1       	rjmp	.+700    	; 0x6f4 <_Z12digitalWritehh+0x2e4>
     438:	10 c0       	rjmp	.+32     	; 0x45a <_Z12digitalWritehh+0x4a>
     43a:	28 36       	cpi	r18, 0x68	; 104
     43c:	09 f4       	brne	.+2      	; 0x440 <_Z12digitalWritehh+0x30>
     43e:	67 c0       	rjmp	.+206    	; 0x50e <_Z12digitalWritehh+0xfe>
     440:	29 36       	cpi	r18, 0x69	; 105
     442:	20 f4       	brcc	.+8      	; 0x44c <_Z12digitalWritehh+0x3c>
     444:	27 36       	cpi	r18, 0x67	; 103
     446:	09 f0       	breq	.+2      	; 0x44a <_Z12digitalWritehh+0x3a>
     448:	55 c1       	rjmp	.+682    	; 0x6f4 <_Z12digitalWritehh+0x2e4>
     44a:	4f c0       	rjmp	.+158    	; 0x4ea <_Z12digitalWritehh+0xda>
     44c:	2a 36       	cpi	r18, 0x6A	; 106
     44e:	09 f4       	brne	.+2      	; 0x452 <_Z12digitalWritehh+0x42>
     450:	72 c0       	rjmp	.+228    	; 0x536 <_Z12digitalWritehh+0x126>
     452:	2c 36       	cpi	r18, 0x6C	; 108
     454:	09 f0       	breq	.+2      	; 0x458 <_Z12digitalWritehh+0x48>
     456:	4e c1       	rjmp	.+668    	; 0x6f4 <_Z12digitalWritehh+0x2e4>
     458:	82 c0       	rjmp	.+260    	; 0x55e <_Z12digitalWritehh+0x14e>
         {
	 
	          case'b':
	                  PORTB&=~(1<<c[pInno]);
     45a:	25 b1       	in	r18, 0x05	; 5
     45c:	fc 01       	movw	r30, r24
     45e:	ee 0f       	add	r30, r30
     460:	ff 1f       	adc	r31, r31
     462:	e0 50       	subi	r30, 0x00	; 0
     464:	fe 4f       	sbci	r31, 0xFE	; 254
     466:	81 e0       	ldi	r24, 0x01	; 1
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	00 80       	ld	r0, Z
     46c:	02 c0       	rjmp	.+4      	; 0x472 <_Z12digitalWritehh+0x62>
     46e:	88 0f       	add	r24, r24
     470:	99 1f       	adc	r25, r25
     472:	0a 94       	dec	r0
     474:	e2 f7       	brpl	.-8      	; 0x46e <_Z12digitalWritehh+0x5e>
     476:	80 95       	com	r24
     478:	82 23       	and	r24, r18
     47a:	85 b9       	out	0x05, r24	; 5
			           break;
     47c:	08 95       	ret
	          case'c':
	                 PORTB&=~(1<<c[pInno]);
     47e:	25 b1       	in	r18, 0x05	; 5
     480:	fc 01       	movw	r30, r24
     482:	ee 0f       	add	r30, r30
     484:	ff 1f       	adc	r31, r31
     486:	e0 50       	subi	r30, 0x00	; 0
     488:	fe 4f       	sbci	r31, 0xFE	; 254
     48a:	81 e0       	ldi	r24, 0x01	; 1
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	00 80       	ld	r0, Z
     490:	02 c0       	rjmp	.+4      	; 0x496 <_Z12digitalWritehh+0x86>
     492:	88 0f       	add	r24, r24
     494:	99 1f       	adc	r25, r25
     496:	0a 94       	dec	r0
     498:	e2 f7       	brpl	.-8      	; 0x492 <_Z12digitalWritehh+0x82>
     49a:	80 95       	com	r24
     49c:	82 23       	and	r24, r18
     49e:	85 b9       	out	0x05, r24	; 5
			          break;
     4a0:	08 95       	ret
	          case'd':
	                 PORTD&=~(1<<c[pInno]);
     4a2:	2b b1       	in	r18, 0x0b	; 11
     4a4:	fc 01       	movw	r30, r24
     4a6:	ee 0f       	add	r30, r30
     4a8:	ff 1f       	adc	r31, r31
     4aa:	e0 50       	subi	r30, 0x00	; 0
     4ac:	fe 4f       	sbci	r31, 0xFE	; 254
     4ae:	81 e0       	ldi	r24, 0x01	; 1
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	00 80       	ld	r0, Z
     4b4:	02 c0       	rjmp	.+4      	; 0x4ba <_Z12digitalWritehh+0xaa>
     4b6:	88 0f       	add	r24, r24
     4b8:	99 1f       	adc	r25, r25
     4ba:	0a 94       	dec	r0
     4bc:	e2 f7       	brpl	.-8      	; 0x4b6 <_Z12digitalWritehh+0xa6>
     4be:	80 95       	com	r24
     4c0:	82 23       	and	r24, r18
     4c2:	8b b9       	out	0x0b, r24	; 11
			          break;
     4c4:	08 95       	ret
				
		      case'e':
	                  PORTE&=~(1<<c[pInno]);
     4c6:	2e b1       	in	r18, 0x0e	; 14
     4c8:	fc 01       	movw	r30, r24
     4ca:	ee 0f       	add	r30, r30
     4cc:	ff 1f       	adc	r31, r31
     4ce:	e0 50       	subi	r30, 0x00	; 0
     4d0:	fe 4f       	sbci	r31, 0xFE	; 254
     4d2:	81 e0       	ldi	r24, 0x01	; 1
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	00 80       	ld	r0, Z
     4d8:	02 c0       	rjmp	.+4      	; 0x4de <_Z12digitalWritehh+0xce>
     4da:	88 0f       	add	r24, r24
     4dc:	99 1f       	adc	r25, r25
     4de:	0a 94       	dec	r0
     4e0:	e2 f7       	brpl	.-8      	; 0x4da <_Z12digitalWritehh+0xca>
     4e2:	80 95       	com	r24
     4e4:	82 23       	and	r24, r18
     4e6:	8e b9       	out	0x0e, r24	; 14
			           break;
     4e8:	08 95       	ret

			     case'g':
	                  PORTG&=~(1<<c[pInno]);
     4ea:	24 b3       	in	r18, 0x14	; 20
     4ec:	fc 01       	movw	r30, r24
     4ee:	ee 0f       	add	r30, r30
     4f0:	ff 1f       	adc	r31, r31
     4f2:	e0 50       	subi	r30, 0x00	; 0
     4f4:	fe 4f       	sbci	r31, 0xFE	; 254
     4f6:	81 e0       	ldi	r24, 0x01	; 1
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	00 80       	ld	r0, Z
     4fc:	02 c0       	rjmp	.+4      	; 0x502 <_Z12digitalWritehh+0xf2>
     4fe:	88 0f       	add	r24, r24
     500:	99 1f       	adc	r25, r25
     502:	0a 94       	dec	r0
     504:	e2 f7       	brpl	.-8      	; 0x4fe <_Z12digitalWritehh+0xee>
     506:	80 95       	com	r24
     508:	82 23       	and	r24, r18
     50a:	84 bb       	out	0x14, r24	; 20
			           break;
     50c:	08 95       	ret
			 case'h':
	                  PORTH&=~(1<<c[pInno]);
     50e:	e2 e0       	ldi	r30, 0x02	; 2
     510:	f1 e0       	ldi	r31, 0x01	; 1
     512:	20 81       	ld	r18, Z
     514:	dc 01       	movw	r26, r24
     516:	aa 0f       	add	r26, r26
     518:	bb 1f       	adc	r27, r27
     51a:	a0 50       	subi	r26, 0x00	; 0
     51c:	be 4f       	sbci	r27, 0xFE	; 254
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	0c 90       	ld	r0, X
     524:	02 c0       	rjmp	.+4      	; 0x52a <_Z12digitalWritehh+0x11a>
     526:	88 0f       	add	r24, r24
     528:	99 1f       	adc	r25, r25
     52a:	0a 94       	dec	r0
     52c:	e2 f7       	brpl	.-8      	; 0x526 <_Z12digitalWritehh+0x116>
     52e:	80 95       	com	r24
     530:	82 23       	and	r24, r18
     532:	80 83       	st	Z, r24
			           break;
     534:	08 95       	ret
		     
			     case'j':
	                  PORTJ&=~(1<<c[pInno]);
     536:	e5 e0       	ldi	r30, 0x05	; 5
     538:	f1 e0       	ldi	r31, 0x01	; 1
     53a:	20 81       	ld	r18, Z
     53c:	dc 01       	movw	r26, r24
     53e:	aa 0f       	add	r26, r26
     540:	bb 1f       	adc	r27, r27
     542:	a0 50       	subi	r26, 0x00	; 0
     544:	be 4f       	sbci	r27, 0xFE	; 254
     546:	81 e0       	ldi	r24, 0x01	; 1
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	0c 90       	ld	r0, X
     54c:	02 c0       	rjmp	.+4      	; 0x552 <_Z12digitalWritehh+0x142>
     54e:	88 0f       	add	r24, r24
     550:	99 1f       	adc	r25, r25
     552:	0a 94       	dec	r0
     554:	e2 f7       	brpl	.-8      	; 0x54e <_Z12digitalWritehh+0x13e>
     556:	80 95       	com	r24
     558:	82 23       	and	r24, r18
     55a:	80 83       	st	Z, r24
			           break;
     55c:	08 95       	ret
				     case'l':
	                  PORTL&=~(1<<c[pInno]);
     55e:	eb e0       	ldi	r30, 0x0B	; 11
     560:	f1 e0       	ldi	r31, 0x01	; 1
     562:	20 81       	ld	r18, Z
     564:	dc 01       	movw	r26, r24
     566:	aa 0f       	add	r26, r26
     568:	bb 1f       	adc	r27, r27
     56a:	a0 50       	subi	r26, 0x00	; 0
     56c:	be 4f       	sbci	r27, 0xFE	; 254
     56e:	81 e0       	ldi	r24, 0x01	; 1
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	0c 90       	ld	r0, X
     574:	02 c0       	rjmp	.+4      	; 0x57a <_Z12digitalWritehh+0x16a>
     576:	88 0f       	add	r24, r24
     578:	99 1f       	adc	r25, r25
     57a:	0a 94       	dec	r0
     57c:	e2 f7       	brpl	.-8      	; 0x576 <_Z12digitalWritehh+0x166>
     57e:	80 95       	com	r24
     580:	82 23       	and	r24, r18
     582:	80 83       	st	Z, r24
			           break;	        		   		   	  	  		 		 			 
     584:	08 95       	ret
	     }  }
	else{          switch(d[pInno])
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	fc 01       	movw	r30, r24
     58a:	e8 58       	subi	r30, 0x88	; 136
     58c:	fd 4f       	sbci	r31, 0xFD	; 253
     58e:	20 81       	ld	r18, Z
     590:	25 36       	cpi	r18, 0x65	; 101
     592:	09 f4       	brne	.+2      	; 0x596 <_Z12digitalWritehh+0x186>
     594:	50 c0       	rjmp	.+160    	; 0x636 <_Z12digitalWritehh+0x226>
     596:	26 36       	cpi	r18, 0x66	; 102
     598:	40 f4       	brcc	.+16     	; 0x5aa <_Z12digitalWritehh+0x19a>
     59a:	23 36       	cpi	r18, 0x63	; 99
     59c:	41 f1       	breq	.+80     	; 0x5ee <_Z12digitalWritehh+0x1de>
     59e:	24 36       	cpi	r18, 0x64	; 100
     5a0:	c0 f5       	brcc	.+112    	; 0x612 <_Z12digitalWritehh+0x202>
     5a2:	22 36       	cpi	r18, 0x62	; 98
     5a4:	09 f0       	breq	.+2      	; 0x5a8 <_Z12digitalWritehh+0x198>
     5a6:	a6 c0       	rjmp	.+332    	; 0x6f4 <_Z12digitalWritehh+0x2e4>
     5a8:	10 c0       	rjmp	.+32     	; 0x5ca <_Z12digitalWritehh+0x1ba>
     5aa:	28 36       	cpi	r18, 0x68	; 104
     5ac:	09 f4       	brne	.+2      	; 0x5b0 <_Z12digitalWritehh+0x1a0>
     5ae:	67 c0       	rjmp	.+206    	; 0x67e <_Z12digitalWritehh+0x26e>
     5b0:	29 36       	cpi	r18, 0x69	; 105
     5b2:	20 f4       	brcc	.+8      	; 0x5bc <_Z12digitalWritehh+0x1ac>
     5b4:	27 36       	cpi	r18, 0x67	; 103
     5b6:	09 f0       	breq	.+2      	; 0x5ba <_Z12digitalWritehh+0x1aa>
     5b8:	9d c0       	rjmp	.+314    	; 0x6f4 <_Z12digitalWritehh+0x2e4>
     5ba:	4f c0       	rjmp	.+158    	; 0x65a <_Z12digitalWritehh+0x24a>
     5bc:	2a 36       	cpi	r18, 0x6A	; 106
     5be:	09 f4       	brne	.+2      	; 0x5c2 <_Z12digitalWritehh+0x1b2>
     5c0:	72 c0       	rjmp	.+228    	; 0x6a6 <_Z12digitalWritehh+0x296>
     5c2:	2c 36       	cpi	r18, 0x6C	; 108
     5c4:	09 f0       	breq	.+2      	; 0x5c8 <_Z12digitalWritehh+0x1b8>
     5c6:	96 c0       	rjmp	.+300    	; 0x6f4 <_Z12digitalWritehh+0x2e4>
     5c8:	82 c0       	rjmp	.+260    	; 0x6ce <_Z12digitalWritehh+0x2be>
         {
	 
	          case'b':
	                 PORTB|=(1<<c[pInno]);
     5ca:	45 b1       	in	r20, 0x05	; 5
     5cc:	fc 01       	movw	r30, r24
     5ce:	ee 0f       	add	r30, r30
     5d0:	ff 1f       	adc	r31, r31
     5d2:	e0 50       	subi	r30, 0x00	; 0
     5d4:	fe 4f       	sbci	r31, 0xFE	; 254
     5d6:	21 e0       	ldi	r18, 0x01	; 1
     5d8:	30 e0       	ldi	r19, 0x00	; 0
     5da:	c9 01       	movw	r24, r18
     5dc:	00 80       	ld	r0, Z
     5de:	02 c0       	rjmp	.+4      	; 0x5e4 <_Z12digitalWritehh+0x1d4>
     5e0:	88 0f       	add	r24, r24
     5e2:	99 1f       	adc	r25, r25
     5e4:	0a 94       	dec	r0
     5e6:	e2 f7       	brpl	.-8      	; 0x5e0 <_Z12digitalWritehh+0x1d0>
     5e8:	84 2b       	or	r24, r20
     5ea:	85 b9       	out	0x05, r24	; 5
			           break;
     5ec:	08 95       	ret
	          case'c':
	                 PORTC|=(1<<c[pInno]);
     5ee:	48 b1       	in	r20, 0x08	; 8
     5f0:	fc 01       	movw	r30, r24
     5f2:	ee 0f       	add	r30, r30
     5f4:	ff 1f       	adc	r31, r31
     5f6:	e0 50       	subi	r30, 0x00	; 0
     5f8:	fe 4f       	sbci	r31, 0xFE	; 254
     5fa:	21 e0       	ldi	r18, 0x01	; 1
     5fc:	30 e0       	ldi	r19, 0x00	; 0
     5fe:	c9 01       	movw	r24, r18
     600:	00 80       	ld	r0, Z
     602:	02 c0       	rjmp	.+4      	; 0x608 <_Z12digitalWritehh+0x1f8>
     604:	88 0f       	add	r24, r24
     606:	99 1f       	adc	r25, r25
     608:	0a 94       	dec	r0
     60a:	e2 f7       	brpl	.-8      	; 0x604 <_Z12digitalWritehh+0x1f4>
     60c:	84 2b       	or	r24, r20
     60e:	88 b9       	out	0x08, r24	; 8
			          break;
     610:	08 95       	ret
	          case'd':
	                 PORTD|=(1<<c[pInno]);
     612:	4b b1       	in	r20, 0x0b	; 11
     614:	fc 01       	movw	r30, r24
     616:	ee 0f       	add	r30, r30
     618:	ff 1f       	adc	r31, r31
     61a:	e0 50       	subi	r30, 0x00	; 0
     61c:	fe 4f       	sbci	r31, 0xFE	; 254
     61e:	21 e0       	ldi	r18, 0x01	; 1
     620:	30 e0       	ldi	r19, 0x00	; 0
     622:	c9 01       	movw	r24, r18
     624:	00 80       	ld	r0, Z
     626:	02 c0       	rjmp	.+4      	; 0x62c <_Z12digitalWritehh+0x21c>
     628:	88 0f       	add	r24, r24
     62a:	99 1f       	adc	r25, r25
     62c:	0a 94       	dec	r0
     62e:	e2 f7       	brpl	.-8      	; 0x628 <_Z12digitalWritehh+0x218>
     630:	84 2b       	or	r24, r20
     632:	8b b9       	out	0x0b, r24	; 11
			          break;
     634:	08 95       	ret
				    
		      case'e':
	                  PORTE|=(1<<c[pInno]);
     636:	4e b1       	in	r20, 0x0e	; 14
     638:	fc 01       	movw	r30, r24
     63a:	ee 0f       	add	r30, r30
     63c:	ff 1f       	adc	r31, r31
     63e:	e0 50       	subi	r30, 0x00	; 0
     640:	fe 4f       	sbci	r31, 0xFE	; 254
     642:	21 e0       	ldi	r18, 0x01	; 1
     644:	30 e0       	ldi	r19, 0x00	; 0
     646:	c9 01       	movw	r24, r18
     648:	00 80       	ld	r0, Z
     64a:	02 c0       	rjmp	.+4      	; 0x650 <_Z12digitalWritehh+0x240>
     64c:	88 0f       	add	r24, r24
     64e:	99 1f       	adc	r25, r25
     650:	0a 94       	dec	r0
     652:	e2 f7       	brpl	.-8      	; 0x64c <_Z12digitalWritehh+0x23c>
     654:	84 2b       	or	r24, r20
     656:	8e b9       	out	0x0e, r24	; 14
			           break;
     658:	08 95       	ret

			     case'g':
	                  PORTG|=(1<<c[pInno]);
     65a:	44 b3       	in	r20, 0x14	; 20
     65c:	fc 01       	movw	r30, r24
     65e:	ee 0f       	add	r30, r30
     660:	ff 1f       	adc	r31, r31
     662:	e0 50       	subi	r30, 0x00	; 0
     664:	fe 4f       	sbci	r31, 0xFE	; 254
     666:	21 e0       	ldi	r18, 0x01	; 1
     668:	30 e0       	ldi	r19, 0x00	; 0
     66a:	c9 01       	movw	r24, r18
     66c:	00 80       	ld	r0, Z
     66e:	02 c0       	rjmp	.+4      	; 0x674 <_Z12digitalWritehh+0x264>
     670:	88 0f       	add	r24, r24
     672:	99 1f       	adc	r25, r25
     674:	0a 94       	dec	r0
     676:	e2 f7       	brpl	.-8      	; 0x670 <_Z12digitalWritehh+0x260>
     678:	84 2b       	or	r24, r20
     67a:	84 bb       	out	0x14, r24	; 20
			           break;
     67c:	08 95       	ret
			 case'h':
	                  PORTH|=(1<<c[pInno]);
     67e:	e2 e0       	ldi	r30, 0x02	; 2
     680:	f1 e0       	ldi	r31, 0x01	; 1
     682:	40 81       	ld	r20, Z
     684:	dc 01       	movw	r26, r24
     686:	aa 0f       	add	r26, r26
     688:	bb 1f       	adc	r27, r27
     68a:	a0 50       	subi	r26, 0x00	; 0
     68c:	be 4f       	sbci	r27, 0xFE	; 254
     68e:	21 e0       	ldi	r18, 0x01	; 1
     690:	30 e0       	ldi	r19, 0x00	; 0
     692:	c9 01       	movw	r24, r18
     694:	0c 90       	ld	r0, X
     696:	02 c0       	rjmp	.+4      	; 0x69c <_Z12digitalWritehh+0x28c>
     698:	88 0f       	add	r24, r24
     69a:	99 1f       	adc	r25, r25
     69c:	0a 94       	dec	r0
     69e:	e2 f7       	brpl	.-8      	; 0x698 <_Z12digitalWritehh+0x288>
     6a0:	84 2b       	or	r24, r20
     6a2:	80 83       	st	Z, r24
			           break;
     6a4:	08 95       	ret
		     /*case'i':
	                  PORTI|=(1<<c[pInno]);
			           break;*/
			     case'j':
	                  PORTJ|=(1<<c[pInno]);
     6a6:	e5 e0       	ldi	r30, 0x05	; 5
     6a8:	f1 e0       	ldi	r31, 0x01	; 1
     6aa:	40 81       	ld	r20, Z
     6ac:	dc 01       	movw	r26, r24
     6ae:	aa 0f       	add	r26, r26
     6b0:	bb 1f       	adc	r27, r27
     6b2:	a0 50       	subi	r26, 0x00	; 0
     6b4:	be 4f       	sbci	r27, 0xFE	; 254
     6b6:	21 e0       	ldi	r18, 0x01	; 1
     6b8:	30 e0       	ldi	r19, 0x00	; 0
     6ba:	c9 01       	movw	r24, r18
     6bc:	0c 90       	ld	r0, X
     6be:	02 c0       	rjmp	.+4      	; 0x6c4 <_Z12digitalWritehh+0x2b4>
     6c0:	88 0f       	add	r24, r24
     6c2:	99 1f       	adc	r25, r25
     6c4:	0a 94       	dec	r0
     6c6:	e2 f7       	brpl	.-8      	; 0x6c0 <_Z12digitalWritehh+0x2b0>
     6c8:	84 2b       	or	r24, r20
     6ca:	80 83       	st	Z, r24
			           break;
     6cc:	08 95       	ret
				     case'l':
	                  PORTL|=(1<<c[pInno]);
     6ce:	eb e0       	ldi	r30, 0x0B	; 11
     6d0:	f1 e0       	ldi	r31, 0x01	; 1
     6d2:	40 81       	ld	r20, Z
     6d4:	dc 01       	movw	r26, r24
     6d6:	aa 0f       	add	r26, r26
     6d8:	bb 1f       	adc	r27, r27
     6da:	a0 50       	subi	r26, 0x00	; 0
     6dc:	be 4f       	sbci	r27, 0xFE	; 254
     6de:	21 e0       	ldi	r18, 0x01	; 1
     6e0:	30 e0       	ldi	r19, 0x00	; 0
     6e2:	c9 01       	movw	r24, r18
     6e4:	0c 90       	ld	r0, X
     6e6:	02 c0       	rjmp	.+4      	; 0x6ec <_Z12digitalWritehh+0x2dc>
     6e8:	88 0f       	add	r24, r24
     6ea:	99 1f       	adc	r25, r25
     6ec:	0a 94       	dec	r0
     6ee:	e2 f7       	brpl	.-8      	; 0x6e8 <_Z12digitalWritehh+0x2d8>
     6f0:	84 2b       	or	r24, r20
     6f2:	80 83       	st	Z, r24
     6f4:	08 95       	ret

000006f6 <_Z11digitalReadi>:

uint8_t digitalRead(int pInno)
{  
	uint8_t z;				//not a good practice
	uint8_t x;				//not a good practice
   switch(d[pInno])
     6f6:	fc 01       	movw	r30, r24
     6f8:	e8 58       	subi	r30, 0x88	; 136
     6fa:	fd 4f       	sbci	r31, 0xFD	; 253
     6fc:	80 81       	ld	r24, Z
     6fe:	85 36       	cpi	r24, 0x65	; 101
     700:	d9 f0       	breq	.+54     	; 0x738 <_Z11digitalReadi+0x42>
     702:	86 36       	cpi	r24, 0x66	; 102
     704:	38 f4       	brcc	.+14     	; 0x714 <_Z11digitalReadi+0x1e>
     706:	83 36       	cpi	r24, 0x63	; 99
     708:	99 f0       	breq	.+38     	; 0x730 <_Z11digitalReadi+0x3a>
     70a:	84 36       	cpi	r24, 0x64	; 100
     70c:	98 f4       	brcc	.+38     	; 0x734 <_Z11digitalReadi+0x3e>
     70e:	82 36       	cpi	r24, 0x62	; 98
     710:	f9 f4       	brne	.+62     	; 0x750 <_Z11digitalReadi+0x5a>
     712:	0c c0       	rjmp	.+24     	; 0x72c <_Z11digitalReadi+0x36>
     714:	88 36       	cpi	r24, 0x68	; 104
     716:	a1 f0       	breq	.+40     	; 0x740 <_Z11digitalReadi+0x4a>
     718:	89 36       	cpi	r24, 0x69	; 105
     71a:	18 f4       	brcc	.+6      	; 0x722 <_Z11digitalReadi+0x2c>
     71c:	87 36       	cpi	r24, 0x67	; 103
     71e:	c1 f4       	brne	.+48     	; 0x750 <_Z11digitalReadi+0x5a>
     720:	0d c0       	rjmp	.+26     	; 0x73c <_Z11digitalReadi+0x46>
     722:	8a 36       	cpi	r24, 0x6A	; 106
     724:	81 f0       	breq	.+32     	; 0x746 <_Z11digitalReadi+0x50>
     726:	8c 36       	cpi	r24, 0x6C	; 108
     728:	99 f4       	brne	.+38     	; 0x750 <_Z11digitalReadi+0x5a>
     72a:	10 c0       	rjmp	.+32     	; 0x74c <_Z11digitalReadi+0x56>
         {
	 
	          case'b':
	                  z=PINB&(1<<c[pInno]);
     72c:	83 b1       	in	r24, 0x03	; 3
			           break;
     72e:	08 95       	ret
	          case'c':
	                  z=PINC&(1<<c[pInno]);
     730:	86 b1       	in	r24, 0x06	; 6
			          break;
     732:	08 95       	ret
	          case'd':
	                  z=PIND&(1<<c[pInno]);
     734:	89 b1       	in	r24, 0x09	; 9
			          break;
     736:	08 95       	ret
				
		      case'e':
	                   z=PINE&(1<<c[pInno]);
     738:	8c b1       	in	r24, 0x0c	; 12
			           break;
     73a:	08 95       	ret

			     case'g':
	                   z=PING&(1<<c[pInno]);
     73c:	82 b3       	in	r24, 0x12	; 18
			           break;
     73e:	08 95       	ret
			 case'h':
	                  z=PINH&(1<<c[pInno]);
     740:	80 91 00 01 	lds	r24, 0x0100
			           break;
     744:	08 95       	ret
		     
			     case'j':
	                   z=PINJ&(1<<c[pInno]);
     746:	80 91 03 01 	lds	r24, 0x0103
			           break;
     74a:	08 95       	ret
				     case'l':
	                   z=PINL&(1<<c[pInno]);
     74c:	80 91 09 01 	lds	r24, 0x0109
			           break;
					   return z;	        		   		   	  	  		 		 			 
	     }  
}
     750:	08 95       	ret

00000752 <_Z20microsecondsToInchesm>:
{
  // According to Parallax's datasheet for the PING))), there are 73.746
  // microseconds per inch (i.e. sound travels at 1130 feet per second).
  // This gives the distance travelled by the ping, outbound and return,
  // so we divide by 2 to get the distance of the obstacle.
  return (mIcroseconds*0.00669/ 2);
     752:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <__floatunsisf>
     756:	2a ec       	ldi	r18, 0xCA	; 202
     758:	37 e3       	ldi	r19, 0x37	; 55
     75a:	4b ed       	ldi	r20, 0xDB	; 219
     75c:	5b e3       	ldi	r21, 0x3B	; 59
     75e:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <__mulsf3>
     762:	20 e0       	ldi	r18, 0x00	; 0
     764:	30 e0       	ldi	r19, 0x00	; 0
     766:	40 e0       	ldi	r20, 0x00	; 0
     768:	5f e3       	ldi	r21, 0x3F	; 63
     76a:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <__mulsf3>
     76e:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <__fixunssfsi>
}
     772:	08 95       	ret

00000774 <_Z25microsecondsToCentimetersm>:
long unsigned int microsecondsToCentimeters(long unsigned int microseconds) 
{
  // The speed of sound is 340 m/s or 29 microseconds per centimeter.
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
     774:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <__floatunsisf>
     778:	2b e7       	ldi	r18, 0x7B	; 123
     77a:	34 e1       	ldi	r19, 0x14	; 20
     77c:	4e e2       	ldi	r20, 0x2E	; 46
     77e:	5e e3       	ldi	r21, 0x3E	; 62
     780:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <__mulsf3>
     784:	20 e0       	ldi	r18, 0x00	; 0
     786:	30 e0       	ldi	r19, 0x00	; 0
     788:	40 e0       	ldi	r20, 0x00	; 0
     78a:	5f e3       	ldi	r21, 0x3F	; 63
     78c:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <__mulsf3>
     790:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <__fixunssfsi>
}
     794:	08 95       	ret

00000796 <_Z7pulseInhh>:

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
{ 
     796:	8f 92       	push	r8
     798:	9f 92       	push	r9
     79a:	af 92       	push	r10
     79c:	bf 92       	push	r11
     79e:	cf 92       	push	r12
     7a0:	df 92       	push	r13
     7a2:	ef 92       	push	r14
     7a4:	ff 92       	push	r15
     7a6:	0f 93       	push	r16
     7a8:	1f 93       	push	r17
     7aa:	df 93       	push	r29
     7ac:	cf 93       	push	r28
     7ae:	0f 92       	push	r0
     7b0:	cd b7       	in	r28, 0x3d	; 61
     7b2:	de b7       	in	r29, 0x3e	; 62
     7b4:	89 83       	std	Y+1, r24	; 0x01
	char x;
  TCCR2A = (1 << WGM21) | (1 << COM2A1) | (1 << FOC2A) | (0 << COM2A0) | (0 << WGM20); //initializing in CTC mode
     7b6:	e0 eb       	ldi	r30, 0xB0	; 176
     7b8:	f0 e0       	ldi	r31, 0x00	; 0
     7ba:	82 e8       	ldi	r24, 0x82	; 130
     7bc:	80 83       	st	Z, r24
  TCCR2A = (1 << CS20);
     7be:	81 e0       	ldi	r24, 0x01	; 1
     7c0:	80 83       	st	Z, r24
  unsigned long mAxloops = 500000;
  unsigned long wIdth = 0;
  // wait for any previous pulse to end
  switch(d[pInno]){
     7c2:	89 81       	ldd	r24, Y+1	; 0x01
     7c4:	e8 e7       	ldi	r30, 0x78	; 120
     7c6:	f2 e0       	ldi	r31, 0x02	; 2
     7c8:	e8 0f       	add	r30, r24
     7ca:	f1 1d       	adc	r31, r1
     7cc:	80 81       	ld	r24, Z
     7ce:	85 36       	cpi	r24, 0x65	; 101
     7d0:	09 f4       	brne	.+2      	; 0x7d4 <_Z7pulseInhh+0x3e>
     7d2:	6e c1       	rjmp	.+732    	; 0xab0 <_Z7pulseInhh+0x31a>
     7d4:	86 36       	cpi	r24, 0x66	; 102
     7d6:	50 f4       	brcc	.+20     	; 0x7ec <_Z7pulseInhh+0x56>
     7d8:	83 36       	cpi	r24, 0x63	; 99
     7da:	09 f4       	brne	.+2      	; 0x7de <_Z7pulseInhh+0x48>
     7dc:	87 c0       	rjmp	.+270    	; 0x8ec <_Z7pulseInhh+0x156>
     7de:	84 36       	cpi	r24, 0x64	; 100
     7e0:	08 f0       	brcs	.+2      	; 0x7e4 <_Z7pulseInhh+0x4e>
     7e2:	f5 c0       	rjmp	.+490    	; 0x9ce <_Z7pulseInhh+0x238>
     7e4:	82 36       	cpi	r24, 0x62	; 98
     7e6:	09 f0       	breq	.+2      	; 0x7ea <_Z7pulseInhh+0x54>
     7e8:	4f c3       	rjmp	.+1694   	; 0xe88 <_Z7pulseInhh+0x6f2>
     7ea:	0f c0       	rjmp	.+30     	; 0x80a <_Z7pulseInhh+0x74>
     7ec:	8a 36       	cpi	r24, 0x6A	; 106
     7ee:	09 f4       	brne	.+2      	; 0x7f2 <_Z7pulseInhh+0x5c>
     7f0:	50 c2       	rjmp	.+1184   	; 0xc92 <_Z7pulseInhh+0x4fc>
     7f2:	8c 36       	cpi	r24, 0x6C	; 108
     7f4:	09 f4       	brne	.+2      	; 0x7f8 <_Z7pulseInhh+0x62>
     7f6:	cd c2       	rjmp	.+1434   	; 0xd92 <_Z7pulseInhh+0x5fc>
     7f8:	88 36       	cpi	r24, 0x68	; 104
     7fa:	09 f0       	breq	.+2      	; 0x7fe <_Z7pulseInhh+0x68>
     7fc:	45 c3       	rjmp	.+1674   	; 0xe88 <_Z7pulseInhh+0x6f2>
     7fe:	c9 c1       	rjmp	.+914    	; 0xb92 <_Z7pulseInhh+0x3fc>
            case'b':
	               { while (((PINB) && ((c[pInno]))) == vAlue)
	              {
		          if (--mAxloops == 0)
     800:	01 97       	sbiw	r24, 0x01	; 1
     802:	a1 09       	sbc	r26, r1
     804:	b1 09       	sbc	r27, r1
     806:	51 f4       	brne	.+20     	; 0x81c <_Z7pulseInhh+0x86>
     808:	40 c3       	rjmp	.+1664   	; 0xe8a <_Z7pulseInhh+0x6f4>
  TCCR2A = (1 << WGM21) | (1 << COM2A1) | (1 << FOC2A) | (0 << COM2A0) | (0 << WGM20); //initializing in CTC mode
  TCCR2A = (1 << CS20);
  unsigned long mAxloops = 500000;
  unsigned long wIdth = 0;
  // wait for any previous pulse to end
  switch(d[pInno]){
     80a:	80 e2       	ldi	r24, 0x20	; 32
     80c:	91 ea       	ldi	r25, 0xA1	; 161
     80e:	a7 e0       	ldi	r26, 0x07	; 7
     810:	b0 e0       	ldi	r27, 0x00	; 0
            case'b':
	               { while (((PINB) && ((c[pInno]))) == vAlue)
     812:	00 e0       	ldi	r16, 0x00	; 0
     814:	40 e0       	ldi	r20, 0x00	; 0
     816:	52 e0       	ldi	r21, 0x02	; 2
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     818:	11 e0       	ldi	r17, 0x01	; 1
  unsigned long mAxloops = 500000;
  unsigned long wIdth = 0;
  // wait for any previous pulse to end
  switch(d[pInno]){
            case'b':
	               { while (((PINB) && ((c[pInno]))) == vAlue)
     81a:	70 e0       	ldi	r23, 0x00	; 0
     81c:	23 b1       	in	r18, 0x03	; 3
     81e:	22 23       	and	r18, r18
     820:	71 f0       	breq	.+28     	; 0x83e <_Z7pulseInhh+0xa8>
     822:	e9 81       	ldd	r30, Y+1	; 0x01
     824:	f0 e0       	ldi	r31, 0x00	; 0
     826:	ee 0f       	add	r30, r30
     828:	ff 1f       	adc	r31, r31
     82a:	e4 0f       	add	r30, r20
     82c:	f5 1f       	adc	r31, r21
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     82e:	21 2f       	mov	r18, r17
     830:	01 90       	ld	r0, Z+
     832:	f0 81       	ld	r31, Z
     834:	e0 2d       	mov	r30, r0
     836:	30 97       	sbiw	r30, 0x00	; 0
     838:	19 f4       	brne	.+6      	; 0x840 <_Z7pulseInhh+0xaa>
     83a:	20 2f       	mov	r18, r16
     83c:	01 c0       	rjmp	.+2      	; 0x840 <_Z7pulseInhh+0xaa>
  unsigned long mAxloops = 500000;
  unsigned long wIdth = 0;
  // wait for any previous pulse to end
  switch(d[pInno]){
            case'b':
	               { while (((PINB) && ((c[pInno]))) == vAlue)
     83e:	20 2f       	mov	r18, r16
     840:	4b 01       	movw	r8, r22
     842:	30 e0       	ldi	r19, 0x00	; 0
     844:	26 17       	cp	r18, r22
     846:	37 07       	cpc	r19, r23
     848:	d9 f2       	breq	.-74     	; 0x800 <_Z7pulseInhh+0x6a>
     84a:	05 c0       	rjmp	.+10     	; 0x856 <_Z7pulseInhh+0xc0>
		            return 0;
	                }
             // wait for the pulse to start  
              while (((PINB) && (c[pInno])) != vAlue)
	              {
		     if (--mAxloops == 0) 
     84c:	01 97       	sbiw	r24, 0x01	; 1
     84e:	a1 09       	sbc	r26, r1
     850:	b1 09       	sbc	r27, r1
     852:	29 f4       	brne	.+10     	; 0x85e <_Z7pulseInhh+0xc8>
     854:	1e c3       	rjmp	.+1596   	; 0xe92 <_Z7pulseInhh+0x6fc>
	              {
		          if (--mAxloops == 0)
		            return 0;
	                }
             // wait for the pulse to start  
              while (((PINB) && (c[pInno])) != vAlue)
     856:	60 e0       	ldi	r22, 0x00	; 0
     858:	72 e0       	ldi	r23, 0x02	; 2
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     85a:	01 e0       	ldi	r16, 0x01	; 1
     85c:	10 e0       	ldi	r17, 0x00	; 0
	              {
		          if (--mAxloops == 0)
		            return 0;
	                }
             // wait for the pulse to start  
              while (((PINB) && (c[pInno])) != vAlue)
     85e:	23 b1       	in	r18, 0x03	; 3
     860:	22 23       	and	r18, r18
     862:	79 f0       	breq	.+30     	; 0x882 <_Z7pulseInhh+0xec>
     864:	49 81       	ldd	r20, Y+1	; 0x01
     866:	50 e0       	ldi	r21, 0x00	; 0
     868:	44 0f       	add	r20, r20
     86a:	55 1f       	adc	r21, r21
     86c:	46 0f       	add	r20, r22
     86e:	57 1f       	adc	r21, r23
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     870:	20 2f       	mov	r18, r16
     872:	fa 01       	movw	r30, r20
     874:	40 81       	ld	r20, Z
     876:	51 81       	ldd	r21, Z+1	; 0x01
     878:	41 15       	cp	r20, r1
     87a:	51 05       	cpc	r21, r1
     87c:	19 f4       	brne	.+6      	; 0x884 <_Z7pulseInhh+0xee>
     87e:	21 2f       	mov	r18, r17
     880:	01 c0       	rjmp	.+2      	; 0x884 <_Z7pulseInhh+0xee>
	              {
		          if (--mAxloops == 0)
		            return 0;
	                }
             // wait for the pulse to start  
              while (((PINB) && (c[pInno])) != vAlue)
     882:	21 2f       	mov	r18, r17
     884:	30 e0       	ldi	r19, 0x00	; 0
     886:	82 16       	cp	r8, r18
     888:	93 06       	cpc	r9, r19
     88a:	01 f7       	brne	.-64     	; 0x84c <_Z7pulseInhh+0xb6>
     88c:	20 e0       	ldi	r18, 0x00	; 0
     88e:	30 e0       	ldi	r19, 0x00	; 0
     890:	a9 01       	movw	r20, r18
	              {
		     if (--mAxloops == 0) 
		          return 0;
	           }
            // wait for the pulse to stop
             while (((PINB) && (c[pInno])) == vAlue)
     892:	cc 24       	eor	r12, r12
     894:	00 e0       	ldi	r16, 0x00	; 0
     896:	12 e0       	ldi	r17, 0x02	; 2
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     898:	bb 24       	eor	r11, r11
     89a:	b3 94       	inc	r11
     89c:	0a c0       	rjmp	.+20     	; 0x8b2 <_Z7pulseInhh+0x11c>
		          return 0;
	           }
            // wait for the pulse to stop
             while (((PINB) && (c[pInno])) == vAlue)
	                   {
	               	if (++wIdth == mAxloops)
     89e:	2f 5f       	subi	r18, 0xFF	; 255
     8a0:	3f 4f       	sbci	r19, 0xFF	; 255
     8a2:	4f 4f       	sbci	r20, 0xFF	; 255
     8a4:	5f 4f       	sbci	r21, 0xFF	; 255
     8a6:	82 17       	cp	r24, r18
     8a8:	93 07       	cpc	r25, r19
     8aa:	a4 07       	cpc	r26, r20
     8ac:	b5 07       	cpc	r27, r21
     8ae:	09 f4       	brne	.+2      	; 0x8b2 <_Z7pulseInhh+0x11c>
     8b0:	f4 c2       	rjmp	.+1512   	; 0xe9a <_Z7pulseInhh+0x704>
	              {
		     if (--mAxloops == 0) 
		          return 0;
	           }
            // wait for the pulse to stop
             while (((PINB) && (c[pInno])) == vAlue)
     8b2:	63 b1       	in	r22, 0x03	; 3
     8b4:	66 23       	and	r22, r22
     8b6:	79 f0       	breq	.+30     	; 0x8d6 <_Z7pulseInhh+0x140>
     8b8:	e9 80       	ldd	r14, Y+1	; 0x01
     8ba:	ff 24       	eor	r15, r15
     8bc:	ee 0c       	add	r14, r14
     8be:	ff 1c       	adc	r15, r15
     8c0:	e0 0e       	add	r14, r16
     8c2:	f1 1e       	adc	r15, r17
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     8c4:	6b 2d       	mov	r22, r11
     8c6:	f7 01       	movw	r30, r14
     8c8:	e0 80       	ld	r14, Z
     8ca:	f1 80       	ldd	r15, Z+1	; 0x01
     8cc:	e1 14       	cp	r14, r1
     8ce:	f1 04       	cpc	r15, r1
     8d0:	19 f4       	brne	.+6      	; 0x8d8 <_Z7pulseInhh+0x142>
     8d2:	6c 2d       	mov	r22, r12
     8d4:	01 c0       	rjmp	.+2      	; 0x8d8 <_Z7pulseInhh+0x142>
	              {
		     if (--mAxloops == 0) 
		          return 0;
	           }
            // wait for the pulse to stop
             while (((PINB) && (c[pInno])) == vAlue)
     8d6:	6c 2d       	mov	r22, r12
     8d8:	70 e0       	ldi	r23, 0x00	; 0
     8da:	86 16       	cp	r8, r22
     8dc:	97 06       	cpc	r9, r23
     8de:	f9 f2       	breq	.-66     	; 0x89e <_Z7pulseInhh+0x108>
     8e0:	27 c3       	rjmp	.+1614   	; 0xf30 <_Z7pulseInhh+0x79a>
              return wIdth;
                    }  break;
 case'c':
	                 { while (((PINC) && (c[pInno])) == vAlue)
	                {
		              if (--mAxloops == 0)
     8e2:	01 97       	sbiw	r24, 0x01	; 1
     8e4:	a1 09       	sbc	r26, r1
     8e6:	b1 09       	sbc	r27, r1
     8e8:	51 f4       	brne	.+20     	; 0x8fe <_Z7pulseInhh+0x168>
     8ea:	db c2       	rjmp	.+1462   	; 0xea2 <_Z7pulseInhh+0x70c>
  TCCR2A = (1 << WGM21) | (1 << COM2A1) | (1 << FOC2A) | (0 << COM2A0) | (0 << WGM20); //initializing in CTC mode
  TCCR2A = (1 << CS20);
  unsigned long mAxloops = 500000;
  unsigned long wIdth = 0;
  // wait for any previous pulse to end
  switch(d[pInno]){
     8ec:	80 e2       	ldi	r24, 0x20	; 32
     8ee:	91 ea       	ldi	r25, 0xA1	; 161
     8f0:	a7 e0       	ldi	r26, 0x07	; 7
     8f2:	b0 e0       	ldi	r27, 0x00	; 0
		          return 0;
	                      }
              return wIdth;
                    }  break;
 case'c':
	                 { while (((PINC) && (c[pInno])) == vAlue)
     8f4:	00 e0       	ldi	r16, 0x00	; 0
     8f6:	40 e0       	ldi	r20, 0x00	; 0
     8f8:	52 e0       	ldi	r21, 0x02	; 2
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     8fa:	11 e0       	ldi	r17, 0x01	; 1
		          return 0;
	                      }
              return wIdth;
                    }  break;
 case'c':
	                 { while (((PINC) && (c[pInno])) == vAlue)
     8fc:	70 e0       	ldi	r23, 0x00	; 0
     8fe:	26 b1       	in	r18, 0x06	; 6
     900:	22 23       	and	r18, r18
     902:	71 f0       	breq	.+28     	; 0x920 <_Z7pulseInhh+0x18a>
     904:	e9 81       	ldd	r30, Y+1	; 0x01
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	ee 0f       	add	r30, r30
     90a:	ff 1f       	adc	r31, r31
     90c:	e4 0f       	add	r30, r20
     90e:	f5 1f       	adc	r31, r21
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     910:	21 2f       	mov	r18, r17
     912:	01 90       	ld	r0, Z+
     914:	f0 81       	ld	r31, Z
     916:	e0 2d       	mov	r30, r0
     918:	30 97       	sbiw	r30, 0x00	; 0
     91a:	19 f4       	brne	.+6      	; 0x922 <_Z7pulseInhh+0x18c>
     91c:	20 2f       	mov	r18, r16
     91e:	01 c0       	rjmp	.+2      	; 0x922 <_Z7pulseInhh+0x18c>
		          return 0;
	                      }
              return wIdth;
                    }  break;
 case'c':
	                 { while (((PINC) && (c[pInno])) == vAlue)
     920:	20 2f       	mov	r18, r16
     922:	4b 01       	movw	r8, r22
     924:	30 e0       	ldi	r19, 0x00	; 0
     926:	26 17       	cp	r18, r22
     928:	37 07       	cpc	r19, r23
     92a:	d9 f2       	breq	.-74     	; 0x8e2 <_Z7pulseInhh+0x14c>
     92c:	05 c0       	rjmp	.+10     	; 0x938 <_Z7pulseInhh+0x1a2>
		               return 0;
	                   }
  // wait for the pulse to start  
                  while (((PINC) && (c[pInno])) != vAlue)
	                  {
		              if (--mAxloops == 0)
     92e:	01 97       	sbiw	r24, 0x01	; 1
     930:	a1 09       	sbc	r26, r1
     932:	b1 09       	sbc	r27, r1
     934:	29 f4       	brne	.+10     	; 0x940 <_Z7pulseInhh+0x1aa>
     936:	b9 c2       	rjmp	.+1394   	; 0xeaa <_Z7pulseInhh+0x714>
	                {
		              if (--mAxloops == 0)
		               return 0;
	                   }
  // wait for the pulse to start  
                  while (((PINC) && (c[pInno])) != vAlue)
     938:	60 e0       	ldi	r22, 0x00	; 0
     93a:	72 e0       	ldi	r23, 0x02	; 2
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     93c:	01 e0       	ldi	r16, 0x01	; 1
     93e:	10 e0       	ldi	r17, 0x00	; 0
	                {
		              if (--mAxloops == 0)
		               return 0;
	                   }
  // wait for the pulse to start  
                  while (((PINC) && (c[pInno])) != vAlue)
     940:	26 b1       	in	r18, 0x06	; 6
     942:	22 23       	and	r18, r18
     944:	79 f0       	breq	.+30     	; 0x964 <_Z7pulseInhh+0x1ce>
     946:	49 81       	ldd	r20, Y+1	; 0x01
     948:	50 e0       	ldi	r21, 0x00	; 0
     94a:	44 0f       	add	r20, r20
     94c:	55 1f       	adc	r21, r21
     94e:	46 0f       	add	r20, r22
     950:	57 1f       	adc	r21, r23
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     952:	20 2f       	mov	r18, r16
     954:	fa 01       	movw	r30, r20
     956:	40 81       	ld	r20, Z
     958:	51 81       	ldd	r21, Z+1	; 0x01
     95a:	41 15       	cp	r20, r1
     95c:	51 05       	cpc	r21, r1
     95e:	19 f4       	brne	.+6      	; 0x966 <_Z7pulseInhh+0x1d0>
     960:	21 2f       	mov	r18, r17
     962:	01 c0       	rjmp	.+2      	; 0x966 <_Z7pulseInhh+0x1d0>
	                {
		              if (--mAxloops == 0)
		               return 0;
	                   }
  // wait for the pulse to start  
                  while (((PINC) && (c[pInno])) != vAlue)
     964:	21 2f       	mov	r18, r17
     966:	30 e0       	ldi	r19, 0x00	; 0
     968:	82 16       	cp	r8, r18
     96a:	93 06       	cpc	r9, r19
     96c:	01 f7       	brne	.-64     	; 0x92e <_Z7pulseInhh+0x198>
     96e:	20 e0       	ldi	r18, 0x00	; 0
     970:	30 e0       	ldi	r19, 0x00	; 0
     972:	a9 01       	movw	r20, r18
	                  {
		              if (--mAxloops == 0)
		                 return 0;
	                      }
  // wait for the pulse to stop
                while (((PINC) && (c[pInno])) == vAlue)
     974:	cc 24       	eor	r12, r12
     976:	00 e0       	ldi	r16, 0x00	; 0
     978:	12 e0       	ldi	r17, 0x02	; 2
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     97a:	bb 24       	eor	r11, r11
     97c:	b3 94       	inc	r11
     97e:	0a c0       	rjmp	.+20     	; 0x994 <_Z7pulseInhh+0x1fe>
		                 return 0;
	                      }
  // wait for the pulse to stop
                while (((PINC) && (c[pInno])) == vAlue)
	                 {
                 		if (++wIdth == mAxloops)
     980:	2f 5f       	subi	r18, 0xFF	; 255
     982:	3f 4f       	sbci	r19, 0xFF	; 255
     984:	4f 4f       	sbci	r20, 0xFF	; 255
     986:	5f 4f       	sbci	r21, 0xFF	; 255
     988:	82 17       	cp	r24, r18
     98a:	93 07       	cpc	r25, r19
     98c:	a4 07       	cpc	r26, r20
     98e:	b5 07       	cpc	r27, r21
     990:	09 f4       	brne	.+2      	; 0x994 <_Z7pulseInhh+0x1fe>
     992:	8f c2       	rjmp	.+1310   	; 0xeb2 <_Z7pulseInhh+0x71c>
	                  {
		              if (--mAxloops == 0)
		                 return 0;
	                      }
  // wait for the pulse to stop
                while (((PINC) && (c[pInno])) == vAlue)
     994:	66 b1       	in	r22, 0x06	; 6
     996:	66 23       	and	r22, r22
     998:	79 f0       	breq	.+30     	; 0x9b8 <_Z7pulseInhh+0x222>
     99a:	e9 80       	ldd	r14, Y+1	; 0x01
     99c:	ff 24       	eor	r15, r15
     99e:	ee 0c       	add	r14, r14
     9a0:	ff 1c       	adc	r15, r15
     9a2:	e0 0e       	add	r14, r16
     9a4:	f1 1e       	adc	r15, r17
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     9a6:	6b 2d       	mov	r22, r11
     9a8:	f7 01       	movw	r30, r14
     9aa:	e0 80       	ld	r14, Z
     9ac:	f1 80       	ldd	r15, Z+1	; 0x01
     9ae:	e1 14       	cp	r14, r1
     9b0:	f1 04       	cpc	r15, r1
     9b2:	19 f4       	brne	.+6      	; 0x9ba <_Z7pulseInhh+0x224>
     9b4:	6c 2d       	mov	r22, r12
     9b6:	01 c0       	rjmp	.+2      	; 0x9ba <_Z7pulseInhh+0x224>
	                  {
		              if (--mAxloops == 0)
		                 return 0;
	                      }
  // wait for the pulse to stop
                while (((PINC) && (c[pInno])) == vAlue)
     9b8:	6c 2d       	mov	r22, r12
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	86 16       	cp	r8, r22
     9be:	97 06       	cpc	r9, r23
     9c0:	f9 f2       	breq	.-66     	; 0x980 <_Z7pulseInhh+0x1ea>
     9c2:	b6 c2       	rjmp	.+1388   	; 0xf30 <_Z7pulseInhh+0x79a>
						 
	 case'd':
	     
	                 { while (((PIND) && (c[pInno])) == vAlue)
	                {
		              if (--mAxloops == 0)
     9c4:	01 97       	sbiw	r24, 0x01	; 1
     9c6:	a1 09       	sbc	r26, r1
     9c8:	b1 09       	sbc	r27, r1
     9ca:	51 f4       	brne	.+20     	; 0x9e0 <_Z7pulseInhh+0x24a>
     9cc:	76 c2       	rjmp	.+1260   	; 0xeba <_Z7pulseInhh+0x724>
  TCCR2A = (1 << WGM21) | (1 << COM2A1) | (1 << FOC2A) | (0 << COM2A0) | (0 << WGM20); //initializing in CTC mode
  TCCR2A = (1 << CS20);
  unsigned long mAxloops = 500000;
  unsigned long wIdth = 0;
  // wait for any previous pulse to end
  switch(d[pInno]){
     9ce:	80 e2       	ldi	r24, 0x20	; 32
     9d0:	91 ea       	ldi	r25, 0xA1	; 161
     9d2:	a7 e0       	ldi	r26, 0x07	; 7
     9d4:	b0 e0       	ldi	r27, 0x00	; 0
                     return wIdth;
                         }break;
						 
	 case'd':
	     
	                 { while (((PIND) && (c[pInno])) == vAlue)
     9d6:	00 e0       	ldi	r16, 0x00	; 0
     9d8:	40 e0       	ldi	r20, 0x00	; 0
     9da:	52 e0       	ldi	r21, 0x02	; 2
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     9dc:	11 e0       	ldi	r17, 0x01	; 1
                     return wIdth;
                         }break;
						 
	 case'd':
	     
	                 { while (((PIND) && (c[pInno])) == vAlue)
     9de:	70 e0       	ldi	r23, 0x00	; 0
     9e0:	29 b1       	in	r18, 0x09	; 9
     9e2:	22 23       	and	r18, r18
     9e4:	71 f0       	breq	.+28     	; 0xa02 <_Z7pulseInhh+0x26c>
     9e6:	e9 81       	ldd	r30, Y+1	; 0x01
     9e8:	f0 e0       	ldi	r31, 0x00	; 0
     9ea:	ee 0f       	add	r30, r30
     9ec:	ff 1f       	adc	r31, r31
     9ee:	e4 0f       	add	r30, r20
     9f0:	f5 1f       	adc	r31, r21
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     9f2:	21 2f       	mov	r18, r17
     9f4:	01 90       	ld	r0, Z+
     9f6:	f0 81       	ld	r31, Z
     9f8:	e0 2d       	mov	r30, r0
     9fa:	30 97       	sbiw	r30, 0x00	; 0
     9fc:	19 f4       	brne	.+6      	; 0xa04 <_Z7pulseInhh+0x26e>
     9fe:	20 2f       	mov	r18, r16
     a00:	01 c0       	rjmp	.+2      	; 0xa04 <_Z7pulseInhh+0x26e>
                     return wIdth;
                         }break;
						 
	 case'd':
	     
	                 { while (((PIND) && (c[pInno])) == vAlue)
     a02:	20 2f       	mov	r18, r16
     a04:	4b 01       	movw	r8, r22
     a06:	30 e0       	ldi	r19, 0x00	; 0
     a08:	26 17       	cp	r18, r22
     a0a:	37 07       	cpc	r19, r23
     a0c:	d9 f2       	breq	.-74     	; 0x9c4 <_Z7pulseInhh+0x22e>
     a0e:	05 c0       	rjmp	.+10     	; 0xa1a <_Z7pulseInhh+0x284>
		               return 0;
	                   }
  // wait for the pulse to start  
                  while (((PIND) && (c[pInno])) != vAlue)
	                  {
		              if (--mAxloops == 0)
     a10:	01 97       	sbiw	r24, 0x01	; 1
     a12:	a1 09       	sbc	r26, r1
     a14:	b1 09       	sbc	r27, r1
     a16:	29 f4       	brne	.+10     	; 0xa22 <_Z7pulseInhh+0x28c>
     a18:	54 c2       	rjmp	.+1192   	; 0xec2 <_Z7pulseInhh+0x72c>
	                {
		              if (--mAxloops == 0)
		               return 0;
	                   }
  // wait for the pulse to start  
                  while (((PIND) && (c[pInno])) != vAlue)
     a1a:	60 e0       	ldi	r22, 0x00	; 0
     a1c:	72 e0       	ldi	r23, 0x02	; 2
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     a1e:	01 e0       	ldi	r16, 0x01	; 1
     a20:	10 e0       	ldi	r17, 0x00	; 0
	                {
		              if (--mAxloops == 0)
		               return 0;
	                   }
  // wait for the pulse to start  
                  while (((PIND) && (c[pInno])) != vAlue)
     a22:	29 b1       	in	r18, 0x09	; 9
     a24:	22 23       	and	r18, r18
     a26:	79 f0       	breq	.+30     	; 0xa46 <_Z7pulseInhh+0x2b0>
     a28:	49 81       	ldd	r20, Y+1	; 0x01
     a2a:	50 e0       	ldi	r21, 0x00	; 0
     a2c:	44 0f       	add	r20, r20
     a2e:	55 1f       	adc	r21, r21
     a30:	46 0f       	add	r20, r22
     a32:	57 1f       	adc	r21, r23
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     a34:	20 2f       	mov	r18, r16
     a36:	fa 01       	movw	r30, r20
     a38:	40 81       	ld	r20, Z
     a3a:	51 81       	ldd	r21, Z+1	; 0x01
     a3c:	41 15       	cp	r20, r1
     a3e:	51 05       	cpc	r21, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <_Z7pulseInhh+0x2b2>
     a42:	21 2f       	mov	r18, r17
     a44:	01 c0       	rjmp	.+2      	; 0xa48 <_Z7pulseInhh+0x2b2>
	                {
		              if (--mAxloops == 0)
		               return 0;
	                   }
  // wait for the pulse to start  
                  while (((PIND) && (c[pInno])) != vAlue)
     a46:	21 2f       	mov	r18, r17
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	82 16       	cp	r8, r18
     a4c:	93 06       	cpc	r9, r19
     a4e:	01 f7       	brne	.-64     	; 0xa10 <_Z7pulseInhh+0x27a>
     a50:	20 e0       	ldi	r18, 0x00	; 0
     a52:	30 e0       	ldi	r19, 0x00	; 0
     a54:	a9 01       	movw	r20, r18
	                  {
		              if (--mAxloops == 0)
		                 return 0;
	                      }
  // wait for the pulse to stop
                while (((PIND) && (c[pInno])) == vAlue)
     a56:	cc 24       	eor	r12, r12
     a58:	00 e0       	ldi	r16, 0x00	; 0
     a5a:	12 e0       	ldi	r17, 0x02	; 2
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     a5c:	bb 24       	eor	r11, r11
     a5e:	b3 94       	inc	r11
     a60:	0a c0       	rjmp	.+20     	; 0xa76 <_Z7pulseInhh+0x2e0>
		                 return 0;
	                      }
  // wait for the pulse to stop
                while (((PIND) && (c[pInno])) == vAlue)
	                 {
                 		if (++wIdth == mAxloops)
     a62:	2f 5f       	subi	r18, 0xFF	; 255
     a64:	3f 4f       	sbci	r19, 0xFF	; 255
     a66:	4f 4f       	sbci	r20, 0xFF	; 255
     a68:	5f 4f       	sbci	r21, 0xFF	; 255
     a6a:	82 17       	cp	r24, r18
     a6c:	93 07       	cpc	r25, r19
     a6e:	a4 07       	cpc	r26, r20
     a70:	b5 07       	cpc	r27, r21
     a72:	09 f4       	brne	.+2      	; 0xa76 <_Z7pulseInhh+0x2e0>
     a74:	2a c2       	rjmp	.+1108   	; 0xeca <_Z7pulseInhh+0x734>
	                  {
		              if (--mAxloops == 0)
		                 return 0;
	                      }
  // wait for the pulse to stop
                while (((PIND) && (c[pInno])) == vAlue)
     a76:	69 b1       	in	r22, 0x09	; 9
     a78:	66 23       	and	r22, r22
     a7a:	79 f0       	breq	.+30     	; 0xa9a <_Z7pulseInhh+0x304>
     a7c:	e9 80       	ldd	r14, Y+1	; 0x01
     a7e:	ff 24       	eor	r15, r15
     a80:	ee 0c       	add	r14, r14
     a82:	ff 1c       	adc	r15, r15
     a84:	e0 0e       	add	r14, r16
     a86:	f1 1e       	adc	r15, r17
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     a88:	6b 2d       	mov	r22, r11
     a8a:	f7 01       	movw	r30, r14
     a8c:	e0 80       	ld	r14, Z
     a8e:	f1 80       	ldd	r15, Z+1	; 0x01
     a90:	e1 14       	cp	r14, r1
     a92:	f1 04       	cpc	r15, r1
     a94:	19 f4       	brne	.+6      	; 0xa9c <_Z7pulseInhh+0x306>
     a96:	6c 2d       	mov	r22, r12
     a98:	01 c0       	rjmp	.+2      	; 0xa9c <_Z7pulseInhh+0x306>
	                  {
		              if (--mAxloops == 0)
		                 return 0;
	                      }
  // wait for the pulse to stop
                while (((PIND) && (c[pInno])) == vAlue)
     a9a:	6c 2d       	mov	r22, r12
     a9c:	70 e0       	ldi	r23, 0x00	; 0
     a9e:	86 16       	cp	r8, r22
     aa0:	97 06       	cpc	r9, r23
     aa2:	f9 f2       	breq	.-66     	; 0xa62 <_Z7pulseInhh+0x2cc>
     aa4:	45 c2       	rjmp	.+1162   	; 0xf30 <_Z7pulseInhh+0x79a>
				  //  DDRH|(0<<c[pInno]);
	case'e':
	                  
	                 { while (((PINE) && (c[pInno])) == vAlue)
	                {
		              if (--mAxloops == 0)
     aa6:	01 97       	sbiw	r24, 0x01	; 1
     aa8:	a1 09       	sbc	r26, r1
     aaa:	b1 09       	sbc	r27, r1
     aac:	51 f4       	brne	.+20     	; 0xac2 <_Z7pulseInhh+0x32c>
     aae:	11 c2       	rjmp	.+1058   	; 0xed2 <_Z7pulseInhh+0x73c>
  TCCR2A = (1 << WGM21) | (1 << COM2A1) | (1 << FOC2A) | (0 << COM2A0) | (0 << WGM20); //initializing in CTC mode
  TCCR2A = (1 << CS20);
  unsigned long mAxloops = 500000;
  unsigned long wIdth = 0;
  // wait for any previous pulse to end
  switch(d[pInno]){
     ab0:	80 e2       	ldi	r24, 0x20	; 32
     ab2:	91 ea       	ldi	r25, 0xA1	; 161
     ab4:	a7 e0       	ldi	r26, 0x07	; 7
     ab6:	b0 e0       	ldi	r27, 0x00	; 0
                     return wIdth;
                         } break; 		//case'h':
				  //  DDRH|(0<<c[pInno]);
	case'e':
	                  
	                 { while (((PINE) && (c[pInno])) == vAlue)
     ab8:	00 e0       	ldi	r16, 0x00	; 0
     aba:	40 e0       	ldi	r20, 0x00	; 0
     abc:	52 e0       	ldi	r21, 0x02	; 2
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     abe:	11 e0       	ldi	r17, 0x01	; 1
                     return wIdth;
                         } break; 		//case'h':
				  //  DDRH|(0<<c[pInno]);
	case'e':
	                  
	                 { while (((PINE) && (c[pInno])) == vAlue)
     ac0:	70 e0       	ldi	r23, 0x00	; 0
     ac2:	2c b1       	in	r18, 0x0c	; 12
     ac4:	22 23       	and	r18, r18
     ac6:	71 f0       	breq	.+28     	; 0xae4 <_Z7pulseInhh+0x34e>
     ac8:	e9 81       	ldd	r30, Y+1	; 0x01
     aca:	f0 e0       	ldi	r31, 0x00	; 0
     acc:	ee 0f       	add	r30, r30
     ace:	ff 1f       	adc	r31, r31
     ad0:	e4 0f       	add	r30, r20
     ad2:	f5 1f       	adc	r31, r21
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     ad4:	21 2f       	mov	r18, r17
     ad6:	01 90       	ld	r0, Z+
     ad8:	f0 81       	ld	r31, Z
     ada:	e0 2d       	mov	r30, r0
     adc:	30 97       	sbiw	r30, 0x00	; 0
     ade:	19 f4       	brne	.+6      	; 0xae6 <_Z7pulseInhh+0x350>
     ae0:	20 2f       	mov	r18, r16
     ae2:	01 c0       	rjmp	.+2      	; 0xae6 <_Z7pulseInhh+0x350>
                     return wIdth;
                         } break; 		//case'h':
				  //  DDRH|(0<<c[pInno]);
	case'e':
	                  
	                 { while (((PINE) && (c[pInno])) == vAlue)
     ae4:	20 2f       	mov	r18, r16
     ae6:	4b 01       	movw	r8, r22
     ae8:	30 e0       	ldi	r19, 0x00	; 0
     aea:	26 17       	cp	r18, r22
     aec:	37 07       	cpc	r19, r23
     aee:	d9 f2       	breq	.-74     	; 0xaa6 <_Z7pulseInhh+0x310>
     af0:	05 c0       	rjmp	.+10     	; 0xafc <_Z7pulseInhh+0x366>
		               return 0;
	                   }
  // wait for the pulse to start  
                  while (((PINE) && (c[pInno])) != vAlue)
	                  {
		              if (--mAxloops == 0)
     af2:	01 97       	sbiw	r24, 0x01	; 1
     af4:	a1 09       	sbc	r26, r1
     af6:	b1 09       	sbc	r27, r1
     af8:	29 f4       	brne	.+10     	; 0xb04 <_Z7pulseInhh+0x36e>
     afa:	ef c1       	rjmp	.+990    	; 0xeda <_Z7pulseInhh+0x744>
	                {
		              if (--mAxloops == 0)
		               return 0;
	                   }
  // wait for the pulse to start  
                  while (((PINE) && (c[pInno])) != vAlue)
     afc:	60 e0       	ldi	r22, 0x00	; 0
     afe:	72 e0       	ldi	r23, 0x02	; 2
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     b00:	01 e0       	ldi	r16, 0x01	; 1
     b02:	10 e0       	ldi	r17, 0x00	; 0
	                {
		              if (--mAxloops == 0)
		               return 0;
	                   }
  // wait for the pulse to start  
                  while (((PINE) && (c[pInno])) != vAlue)
     b04:	2c b1       	in	r18, 0x0c	; 12
     b06:	22 23       	and	r18, r18
     b08:	79 f0       	breq	.+30     	; 0xb28 <_Z7pulseInhh+0x392>
     b0a:	49 81       	ldd	r20, Y+1	; 0x01
     b0c:	50 e0       	ldi	r21, 0x00	; 0
     b0e:	44 0f       	add	r20, r20
     b10:	55 1f       	adc	r21, r21
     b12:	46 0f       	add	r20, r22
     b14:	57 1f       	adc	r21, r23
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     b16:	20 2f       	mov	r18, r16
     b18:	fa 01       	movw	r30, r20
     b1a:	40 81       	ld	r20, Z
     b1c:	51 81       	ldd	r21, Z+1	; 0x01
     b1e:	41 15       	cp	r20, r1
     b20:	51 05       	cpc	r21, r1
     b22:	19 f4       	brne	.+6      	; 0xb2a <_Z7pulseInhh+0x394>
     b24:	21 2f       	mov	r18, r17
     b26:	01 c0       	rjmp	.+2      	; 0xb2a <_Z7pulseInhh+0x394>
	                {
		              if (--mAxloops == 0)
		               return 0;
	                   }
  // wait for the pulse to start  
                  while (((PINE) && (c[pInno])) != vAlue)
     b28:	21 2f       	mov	r18, r17
     b2a:	30 e0       	ldi	r19, 0x00	; 0
     b2c:	82 16       	cp	r8, r18
     b2e:	93 06       	cpc	r9, r19
     b30:	01 f7       	brne	.-64     	; 0xaf2 <_Z7pulseInhh+0x35c>
     b32:	20 e0       	ldi	r18, 0x00	; 0
     b34:	30 e0       	ldi	r19, 0x00	; 0
     b36:	a9 01       	movw	r20, r18
	                  {
		              if (--mAxloops == 0)
		                 return 0;
	                      }
  // wait for the pulse to stop
                while (((PINE) && (c[pInno])) == vAlue)
     b38:	cc 24       	eor	r12, r12
     b3a:	00 e0       	ldi	r16, 0x00	; 0
     b3c:	12 e0       	ldi	r17, 0x02	; 2
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     b3e:	bb 24       	eor	r11, r11
     b40:	b3 94       	inc	r11
     b42:	0a c0       	rjmp	.+20     	; 0xb58 <_Z7pulseInhh+0x3c2>
		                 return 0;
	                      }
  // wait for the pulse to stop
                while (((PINE) && (c[pInno])) == vAlue)
	                 {
                 		if (++wIdth == mAxloops)
     b44:	2f 5f       	subi	r18, 0xFF	; 255
     b46:	3f 4f       	sbci	r19, 0xFF	; 255
     b48:	4f 4f       	sbci	r20, 0xFF	; 255
     b4a:	5f 4f       	sbci	r21, 0xFF	; 255
     b4c:	82 17       	cp	r24, r18
     b4e:	93 07       	cpc	r25, r19
     b50:	a4 07       	cpc	r26, r20
     b52:	b5 07       	cpc	r27, r21
     b54:	09 f4       	brne	.+2      	; 0xb58 <_Z7pulseInhh+0x3c2>
     b56:	c5 c1       	rjmp	.+906    	; 0xee2 <_Z7pulseInhh+0x74c>
	                  {
		              if (--mAxloops == 0)
		                 return 0;
	                      }
  // wait for the pulse to stop
                while (((PINE) && (c[pInno])) == vAlue)
     b58:	6c b1       	in	r22, 0x0c	; 12
     b5a:	66 23       	and	r22, r22
     b5c:	79 f0       	breq	.+30     	; 0xb7c <_Z7pulseInhh+0x3e6>
     b5e:	e9 80       	ldd	r14, Y+1	; 0x01
     b60:	ff 24       	eor	r15, r15
     b62:	ee 0c       	add	r14, r14
     b64:	ff 1c       	adc	r15, r15
     b66:	e0 0e       	add	r14, r16
     b68:	f1 1e       	adc	r15, r17
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     b6a:	6b 2d       	mov	r22, r11
     b6c:	f7 01       	movw	r30, r14
     b6e:	e0 80       	ld	r14, Z
     b70:	f1 80       	ldd	r15, Z+1	; 0x01
     b72:	e1 14       	cp	r14, r1
     b74:	f1 04       	cpc	r15, r1
     b76:	19 f4       	brne	.+6      	; 0xb7e <_Z7pulseInhh+0x3e8>
     b78:	6c 2d       	mov	r22, r12
     b7a:	01 c0       	rjmp	.+2      	; 0xb7e <_Z7pulseInhh+0x3e8>
	                  {
		              if (--mAxloops == 0)
		                 return 0;
	                      }
  // wait for the pulse to stop
                while (((PINE) && (c[pInno])) == vAlue)
     b7c:	6c 2d       	mov	r22, r12
     b7e:	70 e0       	ldi	r23, 0x00	; 0
     b80:	86 16       	cp	r8, r22
     b82:	97 06       	cpc	r9, r23
     b84:	f9 f2       	breq	.-66     	; 0xb44 <_Z7pulseInhh+0x3ae>
     b86:	d4 c1       	rjmp	.+936    	; 0xf30 <_Z7pulseInhh+0x79a>
	                  
case'h':
	                 
	                 { while (((PINH) &&(c[pInno])) == vAlue)
	                {
		              if (--mAxloops == 0)
     b88:	01 97       	sbiw	r24, 0x01	; 1
     b8a:	a1 09       	sbc	r26, r1
     b8c:	b1 09       	sbc	r27, r1
     b8e:	69 f4       	brne	.+26     	; 0xbaa <_Z7pulseInhh+0x414>
     b90:	ac c1       	rjmp	.+856    	; 0xeea <_Z7pulseInhh+0x754>
  TCCR2A = (1 << WGM21) | (1 << COM2A1) | (1 << FOC2A) | (0 << COM2A0) | (0 << WGM20); //initializing in CTC mode
  TCCR2A = (1 << CS20);
  unsigned long mAxloops = 500000;
  unsigned long wIdth = 0;
  // wait for any previous pulse to end
  switch(d[pInno]){
     b92:	80 e2       	ldi	r24, 0x20	; 32
     b94:	91 ea       	ldi	r25, 0xA1	; 161
     b96:	a7 e0       	ldi	r26, 0x07	; 7
     b98:	b0 e0       	ldi	r27, 0x00	; 0
                     return wIdth;
                         } break; 			    
	                  
case'h':
	                 
	                 { while (((PINH) &&(c[pInno])) == vAlue)
     b9a:	20 e0       	ldi	r18, 0x00	; 0
     b9c:	31 e0       	ldi	r19, 0x01	; 1
     b9e:	ee 24       	eor	r14, r14
     ba0:	40 e0       	ldi	r20, 0x00	; 0
     ba2:	52 e0       	ldi	r21, 0x02	; 2
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     ba4:	cc 24       	eor	r12, r12
     ba6:	c3 94       	inc	r12
                     return wIdth;
                         } break; 			    
	                  
case'h':
	                 
	                 { while (((PINH) &&(c[pInno])) == vAlue)
     ba8:	70 e0       	ldi	r23, 0x00	; 0
     baa:	f9 01       	movw	r30, r18
     bac:	10 81       	ld	r17, Z
     bae:	11 23       	and	r17, r17
     bb0:	71 f0       	breq	.+28     	; 0xbce <_Z7pulseInhh+0x438>
     bb2:	e9 81       	ldd	r30, Y+1	; 0x01
     bb4:	f0 e0       	ldi	r31, 0x00	; 0
     bb6:	ee 0f       	add	r30, r30
     bb8:	ff 1f       	adc	r31, r31
     bba:	e4 0f       	add	r30, r20
     bbc:	f5 1f       	adc	r31, r21
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     bbe:	0c 2d       	mov	r16, r12
     bc0:	01 90       	ld	r0, Z+
     bc2:	f0 81       	ld	r31, Z
     bc4:	e0 2d       	mov	r30, r0
     bc6:	30 97       	sbiw	r30, 0x00	; 0
     bc8:	19 f4       	brne	.+6      	; 0xbd0 <_Z7pulseInhh+0x43a>
     bca:	0e 2d       	mov	r16, r14
     bcc:	01 c0       	rjmp	.+2      	; 0xbd0 <_Z7pulseInhh+0x43a>
                     return wIdth;
                         } break; 			    
	                  
case'h':
	                 
	                 { while (((PINH) &&(c[pInno])) == vAlue)
     bce:	0e 2d       	mov	r16, r14
     bd0:	4b 01       	movw	r8, r22
     bd2:	10 e0       	ldi	r17, 0x00	; 0
     bd4:	06 17       	cp	r16, r22
     bd6:	17 07       	cpc	r17, r23
     bd8:	b9 f2       	breq	.-82     	; 0xb88 <_Z7pulseInhh+0x3f2>
     bda:	05 c0       	rjmp	.+10     	; 0xbe6 <_Z7pulseInhh+0x450>
		               return 0;
	                   }
  // wait for the pulse to start  
                  while (((PINH) && (c[pInno])) != vAlue)
	                  {
		              if (--mAxloops == 0)
     bdc:	01 97       	sbiw	r24, 0x01	; 1
     bde:	a1 09       	sbc	r26, r1
     be0:	b1 09       	sbc	r27, r1
     be2:	41 f4       	brne	.+16     	; 0xbf4 <_Z7pulseInhh+0x45e>
     be4:	86 c1       	rjmp	.+780    	; 0xef2 <_Z7pulseInhh+0x75c>
	                {
		              if (--mAxloops == 0)
		               return 0;
	                   }
  // wait for the pulse to start  
                  while (((PINH) && (c[pInno])) != vAlue)
     be6:	40 e0       	ldi	r20, 0x00	; 0
     be8:	51 e0       	ldi	r21, 0x01	; 1
     bea:	00 e0       	ldi	r16, 0x00	; 0
     bec:	12 e0       	ldi	r17, 0x02	; 2
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     bee:	cc 24       	eor	r12, r12
     bf0:	c3 94       	inc	r12
     bf2:	ee 24       	eor	r14, r14
	                {
		              if (--mAxloops == 0)
		               return 0;
	                   }
  // wait for the pulse to start  
                  while (((PINH) && (c[pInno])) != vAlue)
     bf4:	fa 01       	movw	r30, r20
     bf6:	20 81       	ld	r18, Z
     bf8:	22 23       	and	r18, r18
     bfa:	79 f0       	breq	.+30     	; 0xc1a <_Z7pulseInhh+0x484>
     bfc:	69 81       	ldd	r22, Y+1	; 0x01
     bfe:	70 e0       	ldi	r23, 0x00	; 0
     c00:	66 0f       	add	r22, r22
     c02:	77 1f       	adc	r23, r23
     c04:	60 0f       	add	r22, r16
     c06:	71 1f       	adc	r23, r17
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     c08:	2c 2d       	mov	r18, r12
     c0a:	fb 01       	movw	r30, r22
     c0c:	60 81       	ld	r22, Z
     c0e:	71 81       	ldd	r23, Z+1	; 0x01
     c10:	61 15       	cp	r22, r1
     c12:	71 05       	cpc	r23, r1
     c14:	19 f4       	brne	.+6      	; 0xc1c <_Z7pulseInhh+0x486>
     c16:	2e 2d       	mov	r18, r14
     c18:	01 c0       	rjmp	.+2      	; 0xc1c <_Z7pulseInhh+0x486>
	                {
		              if (--mAxloops == 0)
		               return 0;
	                   }
  // wait for the pulse to start  
                  while (((PINH) && (c[pInno])) != vAlue)
     c1a:	2e 2d       	mov	r18, r14
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	82 16       	cp	r8, r18
     c20:	93 06       	cpc	r9, r19
     c22:	e1 f6       	brne	.-72     	; 0xbdc <_Z7pulseInhh+0x446>
     c24:	20 e0       	ldi	r18, 0x00	; 0
     c26:	30 e0       	ldi	r19, 0x00	; 0
     c28:	a9 01       	movw	r20, r18
	                  {
		              if (--mAxloops == 0)
		                 return 0;
	                      }
  // wait for the pulse to stop
                while (((PINH) && ((c[pInno]))) == vAlue)
     c2a:	00 e0       	ldi	r16, 0x00	; 0
     c2c:	11 e0       	ldi	r17, 0x01	; 1
     c2e:	bb 24       	eor	r11, r11
     c30:	0f 2e       	mov	r0, r31
     c32:	f0 e0       	ldi	r31, 0x00	; 0
     c34:	cf 2e       	mov	r12, r31
     c36:	f2 e0       	ldi	r31, 0x02	; 2
     c38:	df 2e       	mov	r13, r31
     c3a:	f0 2d       	mov	r31, r0
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     c3c:	aa 24       	eor	r10, r10
     c3e:	a3 94       	inc	r10
     c40:	0a c0       	rjmp	.+20     	; 0xc56 <_Z7pulseInhh+0x4c0>
		                 return 0;
	                      }
  // wait for the pulse to stop
                while (((PINH) && ((c[pInno]))) == vAlue)
	                 {
                 		if (++wIdth == mAxloops)
     c42:	2f 5f       	subi	r18, 0xFF	; 255
     c44:	3f 4f       	sbci	r19, 0xFF	; 255
     c46:	4f 4f       	sbci	r20, 0xFF	; 255
     c48:	5f 4f       	sbci	r21, 0xFF	; 255
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	a4 07       	cpc	r26, r20
     c50:	b5 07       	cpc	r27, r21
     c52:	09 f4       	brne	.+2      	; 0xc56 <_Z7pulseInhh+0x4c0>
     c54:	52 c1       	rjmp	.+676    	; 0xefa <_Z7pulseInhh+0x764>
	                  {
		              if (--mAxloops == 0)
		                 return 0;
	                      }
  // wait for the pulse to stop
                while (((PINH) && ((c[pInno]))) == vAlue)
     c56:	f8 01       	movw	r30, r16
     c58:	60 81       	ld	r22, Z
     c5a:	66 23       	and	r22, r22
     c5c:	79 f0       	breq	.+30     	; 0xc7c <_Z7pulseInhh+0x4e6>
     c5e:	e9 80       	ldd	r14, Y+1	; 0x01
     c60:	ff 24       	eor	r15, r15
     c62:	ee 0c       	add	r14, r14
     c64:	ff 1c       	adc	r15, r15
     c66:	ec 0c       	add	r14, r12
     c68:	fd 1c       	adc	r15, r13
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     c6a:	6a 2d       	mov	r22, r10
     c6c:	f7 01       	movw	r30, r14
     c6e:	e0 80       	ld	r14, Z
     c70:	f1 80       	ldd	r15, Z+1	; 0x01
     c72:	e1 14       	cp	r14, r1
     c74:	f1 04       	cpc	r15, r1
     c76:	19 f4       	brne	.+6      	; 0xc7e <_Z7pulseInhh+0x4e8>
     c78:	6b 2d       	mov	r22, r11
     c7a:	01 c0       	rjmp	.+2      	; 0xc7e <_Z7pulseInhh+0x4e8>
	                  {
		              if (--mAxloops == 0)
		                 return 0;
	                      }
  // wait for the pulse to stop
                while (((PINH) && ((c[pInno]))) == vAlue)
     c7c:	6b 2d       	mov	r22, r11
     c7e:	70 e0       	ldi	r23, 0x00	; 0
     c80:	86 16       	cp	r8, r22
     c82:	97 06       	cpc	r9, r23
     c84:	f1 f2       	breq	.-68     	; 0xc42 <_Z7pulseInhh+0x4ac>
     c86:	54 c1       	rjmp	.+680    	; 0xf30 <_Z7pulseInhh+0x79a>
                         } break;  
case'j':
	                  
	                 { while (((PINJ) && (c[pInno])) == vAlue)
	                {
		              if (--mAxloops == 0)
     c88:	01 97       	sbiw	r24, 0x01	; 1
     c8a:	a1 09       	sbc	r26, r1
     c8c:	b1 09       	sbc	r27, r1
     c8e:	69 f4       	brne	.+26     	; 0xcaa <_Z7pulseInhh+0x514>
     c90:	38 c1       	rjmp	.+624    	; 0xf02 <_Z7pulseInhh+0x76c>
  TCCR2A = (1 << WGM21) | (1 << COM2A1) | (1 << FOC2A) | (0 << COM2A0) | (0 << WGM20); //initializing in CTC mode
  TCCR2A = (1 << CS20);
  unsigned long mAxloops = 500000;
  unsigned long wIdth = 0;
  // wait for any previous pulse to end
  switch(d[pInno]){
     c92:	80 e2       	ldi	r24, 0x20	; 32
     c94:	91 ea       	ldi	r25, 0xA1	; 161
     c96:	a7 e0       	ldi	r26, 0x07	; 7
     c98:	b0 e0       	ldi	r27, 0x00	; 0
                     	    }
                     return wIdth;
                         } break;  
case'j':
	                  
	                 { while (((PINJ) && (c[pInno])) == vAlue)
     c9a:	23 e0       	ldi	r18, 0x03	; 3
     c9c:	31 e0       	ldi	r19, 0x01	; 1
     c9e:	ee 24       	eor	r14, r14
     ca0:	40 e0       	ldi	r20, 0x00	; 0
     ca2:	52 e0       	ldi	r21, 0x02	; 2
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     ca4:	cc 24       	eor	r12, r12
     ca6:	c3 94       	inc	r12
                     	    }
                     return wIdth;
                         } break;  
case'j':
	                  
	                 { while (((PINJ) && (c[pInno])) == vAlue)
     ca8:	70 e0       	ldi	r23, 0x00	; 0
     caa:	f9 01       	movw	r30, r18
     cac:	10 81       	ld	r17, Z
     cae:	11 23       	and	r17, r17
     cb0:	71 f0       	breq	.+28     	; 0xcce <_Z7pulseInhh+0x538>
     cb2:	e9 81       	ldd	r30, Y+1	; 0x01
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	ee 0f       	add	r30, r30
     cb8:	ff 1f       	adc	r31, r31
     cba:	e4 0f       	add	r30, r20
     cbc:	f5 1f       	adc	r31, r21
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     cbe:	0c 2d       	mov	r16, r12
     cc0:	01 90       	ld	r0, Z+
     cc2:	f0 81       	ld	r31, Z
     cc4:	e0 2d       	mov	r30, r0
     cc6:	30 97       	sbiw	r30, 0x00	; 0
     cc8:	19 f4       	brne	.+6      	; 0xcd0 <_Z7pulseInhh+0x53a>
     cca:	0e 2d       	mov	r16, r14
     ccc:	01 c0       	rjmp	.+2      	; 0xcd0 <_Z7pulseInhh+0x53a>
                     	    }
                     return wIdth;
                         } break;  
case'j':
	                  
	                 { while (((PINJ) && (c[pInno])) == vAlue)
     cce:	0e 2d       	mov	r16, r14
     cd0:	4b 01       	movw	r8, r22
     cd2:	10 e0       	ldi	r17, 0x00	; 0
     cd4:	06 17       	cp	r16, r22
     cd6:	17 07       	cpc	r17, r23
     cd8:	b9 f2       	breq	.-82     	; 0xc88 <_Z7pulseInhh+0x4f2>
     cda:	05 c0       	rjmp	.+10     	; 0xce6 <_Z7pulseInhh+0x550>
		               return 0;
	                   }
  // wait for the pulse to start  
                  while (((PINJ) && (c[pInno])) != vAlue)
	                  {
		              if (--mAxloops == 0)
     cdc:	01 97       	sbiw	r24, 0x01	; 1
     cde:	a1 09       	sbc	r26, r1
     ce0:	b1 09       	sbc	r27, r1
     ce2:	41 f4       	brne	.+16     	; 0xcf4 <_Z7pulseInhh+0x55e>
     ce4:	12 c1       	rjmp	.+548    	; 0xf0a <_Z7pulseInhh+0x774>
	                {
		              if (--mAxloops == 0)
		               return 0;
	                   }
  // wait for the pulse to start  
                  while (((PINJ) && (c[pInno])) != vAlue)
     ce6:	43 e0       	ldi	r20, 0x03	; 3
     ce8:	51 e0       	ldi	r21, 0x01	; 1
     cea:	00 e0       	ldi	r16, 0x00	; 0
     cec:	12 e0       	ldi	r17, 0x02	; 2
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     cee:	cc 24       	eor	r12, r12
     cf0:	c3 94       	inc	r12
     cf2:	ee 24       	eor	r14, r14
	                {
		              if (--mAxloops == 0)
		               return 0;
	                   }
  // wait for the pulse to start  
                  while (((PINJ) && (c[pInno])) != vAlue)
     cf4:	fa 01       	movw	r30, r20
     cf6:	20 81       	ld	r18, Z
     cf8:	22 23       	and	r18, r18
     cfa:	79 f0       	breq	.+30     	; 0xd1a <_Z7pulseInhh+0x584>
     cfc:	69 81       	ldd	r22, Y+1	; 0x01
     cfe:	70 e0       	ldi	r23, 0x00	; 0
     d00:	66 0f       	add	r22, r22
     d02:	77 1f       	adc	r23, r23
     d04:	60 0f       	add	r22, r16
     d06:	71 1f       	adc	r23, r17
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     d08:	2c 2d       	mov	r18, r12
     d0a:	fb 01       	movw	r30, r22
     d0c:	60 81       	ld	r22, Z
     d0e:	71 81       	ldd	r23, Z+1	; 0x01
     d10:	61 15       	cp	r22, r1
     d12:	71 05       	cpc	r23, r1
     d14:	19 f4       	brne	.+6      	; 0xd1c <_Z7pulseInhh+0x586>
     d16:	2e 2d       	mov	r18, r14
     d18:	01 c0       	rjmp	.+2      	; 0xd1c <_Z7pulseInhh+0x586>
	                {
		              if (--mAxloops == 0)
		               return 0;
	                   }
  // wait for the pulse to start  
                  while (((PINJ) && (c[pInno])) != vAlue)
     d1a:	2e 2d       	mov	r18, r14
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	82 16       	cp	r8, r18
     d20:	93 06       	cpc	r9, r19
     d22:	e1 f6       	brne	.-72     	; 0xcdc <_Z7pulseInhh+0x546>
     d24:	20 e0       	ldi	r18, 0x00	; 0
     d26:	30 e0       	ldi	r19, 0x00	; 0
     d28:	a9 01       	movw	r20, r18
	                  {
		              if (--mAxloops == 0)
		                 return 0;
	                      }
  // wait for the pulse to stop
                while (((PINJ) && (c[pInno])) == vAlue)
     d2a:	03 e0       	ldi	r16, 0x03	; 3
     d2c:	11 e0       	ldi	r17, 0x01	; 1
     d2e:	bb 24       	eor	r11, r11
     d30:	0f 2e       	mov	r0, r31
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	cf 2e       	mov	r12, r31
     d36:	f2 e0       	ldi	r31, 0x02	; 2
     d38:	df 2e       	mov	r13, r31
     d3a:	f0 2d       	mov	r31, r0
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     d3c:	aa 24       	eor	r10, r10
     d3e:	a3 94       	inc	r10
     d40:	0a c0       	rjmp	.+20     	; 0xd56 <_Z7pulseInhh+0x5c0>
		                 return 0;
	                      }
  // wait for the pulse to stop
                while (((PINJ) && (c[pInno])) == vAlue)
	                 {
                 		if (++wIdth == mAxloops)
     d42:	2f 5f       	subi	r18, 0xFF	; 255
     d44:	3f 4f       	sbci	r19, 0xFF	; 255
     d46:	4f 4f       	sbci	r20, 0xFF	; 255
     d48:	5f 4f       	sbci	r21, 0xFF	; 255
     d4a:	82 17       	cp	r24, r18
     d4c:	93 07       	cpc	r25, r19
     d4e:	a4 07       	cpc	r26, r20
     d50:	b5 07       	cpc	r27, r21
     d52:	09 f4       	brne	.+2      	; 0xd56 <_Z7pulseInhh+0x5c0>
     d54:	de c0       	rjmp	.+444    	; 0xf12 <_Z7pulseInhh+0x77c>
	                  {
		              if (--mAxloops == 0)
		                 return 0;
	                      }
  // wait for the pulse to stop
                while (((PINJ) && (c[pInno])) == vAlue)
     d56:	f8 01       	movw	r30, r16
     d58:	60 81       	ld	r22, Z
     d5a:	66 23       	and	r22, r22
     d5c:	79 f0       	breq	.+30     	; 0xd7c <_Z7pulseInhh+0x5e6>
     d5e:	e9 80       	ldd	r14, Y+1	; 0x01
     d60:	ff 24       	eor	r15, r15
     d62:	ee 0c       	add	r14, r14
     d64:	ff 1c       	adc	r15, r15
     d66:	ec 0c       	add	r14, r12
     d68:	fd 1c       	adc	r15, r13
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     d6a:	6a 2d       	mov	r22, r10
     d6c:	f7 01       	movw	r30, r14
     d6e:	e0 80       	ld	r14, Z
     d70:	f1 80       	ldd	r15, Z+1	; 0x01
     d72:	e1 14       	cp	r14, r1
     d74:	f1 04       	cpc	r15, r1
     d76:	19 f4       	brne	.+6      	; 0xd7e <_Z7pulseInhh+0x5e8>
     d78:	6b 2d       	mov	r22, r11
     d7a:	01 c0       	rjmp	.+2      	; 0xd7e <_Z7pulseInhh+0x5e8>
	                  {
		              if (--mAxloops == 0)
		                 return 0;
	                      }
  // wait for the pulse to stop
                while (((PINJ) && (c[pInno])) == vAlue)
     d7c:	6b 2d       	mov	r22, r11
     d7e:	70 e0       	ldi	r23, 0x00	; 0
     d80:	86 16       	cp	r8, r22
     d82:	97 06       	cpc	r9, r23
     d84:	f1 f2       	breq	.-68     	; 0xd42 <_Z7pulseInhh+0x5ac>
     d86:	d4 c0       	rjmp	.+424    	; 0xf30 <_Z7pulseInhh+0x79a>
			           break;
case 'l':
	                  
	                 { while (((PINL) && (c[pInno])) == vAlue)
	                {
		              if (--mAxloops == 0)
     d88:	01 97       	sbiw	r24, 0x01	; 1
     d8a:	a1 09       	sbc	r26, r1
     d8c:	b1 09       	sbc	r27, r1
     d8e:	69 f4       	brne	.+26     	; 0xdaa <_Z7pulseInhh+0x614>
     d90:	c4 c0       	rjmp	.+392    	; 0xf1a <_Z7pulseInhh+0x784>
  TCCR2A = (1 << WGM21) | (1 << COM2A1) | (1 << FOC2A) | (0 << COM2A0) | (0 << WGM20); //initializing in CTC mode
  TCCR2A = (1 << CS20);
  unsigned long mAxloops = 500000;
  unsigned long wIdth = 0;
  // wait for any previous pulse to end
  switch(d[pInno]){
     d92:	80 e2       	ldi	r24, 0x20	; 32
     d94:	91 ea       	ldi	r25, 0xA1	; 161
     d96:	a7 e0       	ldi	r26, 0x07	; 7
     d98:	b0 e0       	ldi	r27, 0x00	; 0
                     return wIdth;
                         }  
			           break;
case 'l':
	                  
	                 { while (((PINL) && (c[pInno])) == vAlue)
     d9a:	29 e0       	ldi	r18, 0x09	; 9
     d9c:	31 e0       	ldi	r19, 0x01	; 1
     d9e:	ee 24       	eor	r14, r14
     da0:	40 e0       	ldi	r20, 0x00	; 0
     da2:	52 e0       	ldi	r21, 0x02	; 2
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     da4:	cc 24       	eor	r12, r12
     da6:	c3 94       	inc	r12
                     return wIdth;
                         }  
			           break;
case 'l':
	                  
	                 { while (((PINL) && (c[pInno])) == vAlue)
     da8:	70 e0       	ldi	r23, 0x00	; 0
     daa:	f9 01       	movw	r30, r18
     dac:	10 81       	ld	r17, Z
     dae:	11 23       	and	r17, r17
     db0:	71 f0       	breq	.+28     	; 0xdce <_Z7pulseInhh+0x638>
     db2:	e9 81       	ldd	r30, Y+1	; 0x01
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	ee 0f       	add	r30, r30
     db8:	ff 1f       	adc	r31, r31
     dba:	e4 0f       	add	r30, r20
     dbc:	f5 1f       	adc	r31, r21
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     dbe:	0c 2d       	mov	r16, r12
     dc0:	01 90       	ld	r0, Z+
     dc2:	f0 81       	ld	r31, Z
     dc4:	e0 2d       	mov	r30, r0
     dc6:	30 97       	sbiw	r30, 0x00	; 0
     dc8:	19 f4       	brne	.+6      	; 0xdd0 <_Z7pulseInhh+0x63a>
     dca:	0e 2d       	mov	r16, r14
     dcc:	01 c0       	rjmp	.+2      	; 0xdd0 <_Z7pulseInhh+0x63a>
                     return wIdth;
                         }  
			           break;
case 'l':
	                  
	                 { while (((PINL) && (c[pInno])) == vAlue)
     dce:	0e 2d       	mov	r16, r14
     dd0:	4b 01       	movw	r8, r22
     dd2:	10 e0       	ldi	r17, 0x00	; 0
     dd4:	06 17       	cp	r16, r22
     dd6:	17 07       	cpc	r17, r23
     dd8:	b9 f2       	breq	.-82     	; 0xd88 <_Z7pulseInhh+0x5f2>
     dda:	05 c0       	rjmp	.+10     	; 0xde6 <_Z7pulseInhh+0x650>
		               return 0;
	                   }
  // wait for the pulse to start  
                  while (((PINL) && (c[pInno])) != vAlue)
	                  {
		              if (--mAxloops == 0)
     ddc:	01 97       	sbiw	r24, 0x01	; 1
     dde:	a1 09       	sbc	r26, r1
     de0:	b1 09       	sbc	r27, r1
     de2:	41 f4       	brne	.+16     	; 0xdf4 <_Z7pulseInhh+0x65e>
     de4:	9e c0       	rjmp	.+316    	; 0xf22 <_Z7pulseInhh+0x78c>
	                {
		              if (--mAxloops == 0)
		               return 0;
	                   }
  // wait for the pulse to start  
                  while (((PINL) && (c[pInno])) != vAlue)
     de6:	49 e0       	ldi	r20, 0x09	; 9
     de8:	51 e0       	ldi	r21, 0x01	; 1
     dea:	00 e0       	ldi	r16, 0x00	; 0
     dec:	12 e0       	ldi	r17, 0x02	; 2
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     dee:	cc 24       	eor	r12, r12
     df0:	c3 94       	inc	r12
     df2:	ee 24       	eor	r14, r14
	                {
		              if (--mAxloops == 0)
		               return 0;
	                   }
  // wait for the pulse to start  
                  while (((PINL) && (c[pInno])) != vAlue)
     df4:	fa 01       	movw	r30, r20
     df6:	20 81       	ld	r18, Z
     df8:	22 23       	and	r18, r18
     dfa:	79 f0       	breq	.+30     	; 0xe1a <_Z7pulseInhh+0x684>
     dfc:	69 81       	ldd	r22, Y+1	; 0x01
     dfe:	70 e0       	ldi	r23, 0x00	; 0
     e00:	66 0f       	add	r22, r22
     e02:	77 1f       	adc	r23, r23
     e04:	60 0f       	add	r22, r16
     e06:	71 1f       	adc	r23, r17
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     e08:	2c 2d       	mov	r18, r12
     e0a:	fb 01       	movw	r30, r22
     e0c:	60 81       	ld	r22, Z
     e0e:	71 81       	ldd	r23, Z+1	; 0x01
     e10:	61 15       	cp	r22, r1
     e12:	71 05       	cpc	r23, r1
     e14:	19 f4       	brne	.+6      	; 0xe1c <_Z7pulseInhh+0x686>
     e16:	2e 2d       	mov	r18, r14
     e18:	01 c0       	rjmp	.+2      	; 0xe1c <_Z7pulseInhh+0x686>
	                {
		              if (--mAxloops == 0)
		               return 0;
	                   }
  // wait for the pulse to start  
                  while (((PINL) && (c[pInno])) != vAlue)
     e1a:	2e 2d       	mov	r18, r14
     e1c:	30 e0       	ldi	r19, 0x00	; 0
     e1e:	82 16       	cp	r8, r18
     e20:	93 06       	cpc	r9, r19
     e22:	e1 f6       	brne	.-72     	; 0xddc <_Z7pulseInhh+0x646>
     e24:	20 e0       	ldi	r18, 0x00	; 0
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	a9 01       	movw	r20, r18
	                  {
		              if (--mAxloops == 0)
		                 return 0;
	                      }
  // wait for the pulse to stop
                while (((PINL) && (c[pInno])) == vAlue)
     e2a:	09 e0       	ldi	r16, 0x09	; 9
     e2c:	11 e0       	ldi	r17, 0x01	; 1
     e2e:	bb 24       	eor	r11, r11
     e30:	0f 2e       	mov	r0, r31
     e32:	f0 e0       	ldi	r31, 0x00	; 0
     e34:	cf 2e       	mov	r12, r31
     e36:	f2 e0       	ldi	r31, 0x02	; 2
     e38:	df 2e       	mov	r13, r31
     e3a:	f0 2d       	mov	r31, r0
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     e3c:	aa 24       	eor	r10, r10
     e3e:	a3 94       	inc	r10
     e40:	0a c0       	rjmp	.+20     	; 0xe56 <_Z7pulseInhh+0x6c0>
		                 return 0;
	                      }
  // wait for the pulse to stop
                while (((PINL) && (c[pInno])) == vAlue)
	                 {
                 		if (++wIdth == mAxloops)
     e42:	2f 5f       	subi	r18, 0xFF	; 255
     e44:	3f 4f       	sbci	r19, 0xFF	; 255
     e46:	4f 4f       	sbci	r20, 0xFF	; 255
     e48:	5f 4f       	sbci	r21, 0xFF	; 255
     e4a:	82 17       	cp	r24, r18
     e4c:	93 07       	cpc	r25, r19
     e4e:	a4 07       	cpc	r26, r20
     e50:	b5 07       	cpc	r27, r21
     e52:	09 f4       	brne	.+2      	; 0xe56 <_Z7pulseInhh+0x6c0>
     e54:	6a c0       	rjmp	.+212    	; 0xf2a <_Z7pulseInhh+0x794>
	                  {
		              if (--mAxloops == 0)
		                 return 0;
	                      }
  // wait for the pulse to stop
                while (((PINL) && (c[pInno])) == vAlue)
     e56:	f8 01       	movw	r30, r16
     e58:	60 81       	ld	r22, Z
     e5a:	66 23       	and	r22, r22
     e5c:	79 f0       	breq	.+30     	; 0xe7c <_Z7pulseInhh+0x6e6>
     e5e:	e9 80       	ldd	r14, Y+1	; 0x01
     e60:	ff 24       	eor	r15, r15
     e62:	ee 0c       	add	r14, r14
     e64:	ff 1c       	adc	r15, r15
     e66:	ec 0c       	add	r14, r12
     e68:	fd 1c       	adc	r15, r13
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return (microseconds*0.17/ 2);
}

unsigned long pulseIn(volatile uint8_t pInno, uint8_t vAlue)
     e6a:	6a 2d       	mov	r22, r10
     e6c:	f7 01       	movw	r30, r14
     e6e:	e0 80       	ld	r14, Z
     e70:	f1 80       	ldd	r15, Z+1	; 0x01
     e72:	e1 14       	cp	r14, r1
     e74:	f1 04       	cpc	r15, r1
     e76:	19 f4       	brne	.+6      	; 0xe7e <_Z7pulseInhh+0x6e8>
     e78:	6b 2d       	mov	r22, r11
     e7a:	01 c0       	rjmp	.+2      	; 0xe7e <_Z7pulseInhh+0x6e8>
	                  {
		              if (--mAxloops == 0)
		                 return 0;
	                      }
  // wait for the pulse to stop
                while (((PINL) && (c[pInno])) == vAlue)
     e7c:	6b 2d       	mov	r22, r11
     e7e:	70 e0       	ldi	r23, 0x00	; 0
     e80:	86 16       	cp	r8, r22
     e82:	97 06       	cpc	r9, r23
     e84:	f1 f2       	breq	.-68     	; 0xe42 <_Z7pulseInhh+0x6ac>
     e86:	54 c0       	rjmp	.+168    	; 0xf30 <_Z7pulseInhh+0x79a>
     e88:	57 c0       	rjmp	.+174    	; 0xf38 <_Z7pulseInhh+0x7a2>
  switch(d[pInno]){
            case'b':
	               { while (((PINB) && ((c[pInno]))) == vAlue)
	              {
		          if (--mAxloops == 0)
		            return 0;
     e8a:	20 e0       	ldi	r18, 0x00	; 0
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	a9 01       	movw	r20, r18
     e90:	4f c0       	rjmp	.+158    	; 0xf30 <_Z7pulseInhh+0x79a>
	                }
             // wait for the pulse to start  
              while (((PINB) && (c[pInno])) != vAlue)
	              {
		     if (--mAxloops == 0) 
		          return 0;
     e92:	20 e0       	ldi	r18, 0x00	; 0
     e94:	30 e0       	ldi	r19, 0x00	; 0
     e96:	a9 01       	movw	r20, r18
     e98:	4b c0       	rjmp	.+150    	; 0xf30 <_Z7pulseInhh+0x79a>
	           }
            // wait for the pulse to stop
             while (((PINB) && (c[pInno])) == vAlue)
	                   {
	               	if (++wIdth == mAxloops)
		          return 0;
     e9a:	20 e0       	ldi	r18, 0x00	; 0
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	a9 01       	movw	r20, r18
     ea0:	47 c0       	rjmp	.+142    	; 0xf30 <_Z7pulseInhh+0x79a>
                    }  break;
 case'c':
	                 { while (((PINC) && (c[pInno])) == vAlue)
	                {
		              if (--mAxloops == 0)
		               return 0;
     ea2:	20 e0       	ldi	r18, 0x00	; 0
     ea4:	30 e0       	ldi	r19, 0x00	; 0
     ea6:	a9 01       	movw	r20, r18
     ea8:	43 c0       	rjmp	.+134    	; 0xf30 <_Z7pulseInhh+0x79a>
	                   }
  // wait for the pulse to start  
                  while (((PINC) && (c[pInno])) != vAlue)
	                  {
		              if (--mAxloops == 0)
		                 return 0;
     eaa:	20 e0       	ldi	r18, 0x00	; 0
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	a9 01       	movw	r20, r18
     eb0:	3f c0       	rjmp	.+126    	; 0xf30 <_Z7pulseInhh+0x79a>
	                      }
  // wait for the pulse to stop
                while (((PINC) && (c[pInno])) == vAlue)
	                 {
                 		if (++wIdth == mAxloops)
                  		return 0;
     eb2:	20 e0       	ldi	r18, 0x00	; 0
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	a9 01       	movw	r20, r18
     eb8:	3b c0       	rjmp	.+118    	; 0xf30 <_Z7pulseInhh+0x79a>
	 case'd':
	     
	                 { while (((PIND) && (c[pInno])) == vAlue)
	                {
		              if (--mAxloops == 0)
		               return 0;
     eba:	20 e0       	ldi	r18, 0x00	; 0
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	a9 01       	movw	r20, r18
     ec0:	37 c0       	rjmp	.+110    	; 0xf30 <_Z7pulseInhh+0x79a>
	                   }
  // wait for the pulse to start  
                  while (((PIND) && (c[pInno])) != vAlue)
	                  {
		              if (--mAxloops == 0)
		                 return 0;
     ec2:	20 e0       	ldi	r18, 0x00	; 0
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	a9 01       	movw	r20, r18
     ec8:	33 c0       	rjmp	.+102    	; 0xf30 <_Z7pulseInhh+0x79a>
	                      }
  // wait for the pulse to stop
                while (((PIND) && (c[pInno])) == vAlue)
	                 {
                 		if (++wIdth == mAxloops)
                  		return 0;
     eca:	20 e0       	ldi	r18, 0x00	; 0
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	a9 01       	movw	r20, r18
     ed0:	2f c0       	rjmp	.+94     	; 0xf30 <_Z7pulseInhh+0x79a>
	case'e':
	                  
	                 { while (((PINE) && (c[pInno])) == vAlue)
	                {
		              if (--mAxloops == 0)
		               return 0;
     ed2:	20 e0       	ldi	r18, 0x00	; 0
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	a9 01       	movw	r20, r18
     ed8:	2b c0       	rjmp	.+86     	; 0xf30 <_Z7pulseInhh+0x79a>
	                   }
  // wait for the pulse to start  
                  while (((PINE) && (c[pInno])) != vAlue)
	                  {
		              if (--mAxloops == 0)
		                 return 0;
     eda:	20 e0       	ldi	r18, 0x00	; 0
     edc:	30 e0       	ldi	r19, 0x00	; 0
     ede:	a9 01       	movw	r20, r18
     ee0:	27 c0       	rjmp	.+78     	; 0xf30 <_Z7pulseInhh+0x79a>
	                      }
  // wait for the pulse to stop
                while (((PINE) && (c[pInno])) == vAlue)
	                 {
                 		if (++wIdth == mAxloops)
                  		return 0;
     ee2:	20 e0       	ldi	r18, 0x00	; 0
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	a9 01       	movw	r20, r18
     ee8:	23 c0       	rjmp	.+70     	; 0xf30 <_Z7pulseInhh+0x79a>
case'h':
	                 
	                 { while (((PINH) &&(c[pInno])) == vAlue)
	                {
		              if (--mAxloops == 0)
		               return 0;
     eea:	20 e0       	ldi	r18, 0x00	; 0
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	a9 01       	movw	r20, r18
     ef0:	1f c0       	rjmp	.+62     	; 0xf30 <_Z7pulseInhh+0x79a>
	                   }
  // wait for the pulse to start  
                  while (((PINH) && (c[pInno])) != vAlue)
	                  {
		              if (--mAxloops == 0)
		                 return 0;
     ef2:	20 e0       	ldi	r18, 0x00	; 0
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	a9 01       	movw	r20, r18
     ef8:	1b c0       	rjmp	.+54     	; 0xf30 <_Z7pulseInhh+0x79a>
	                      }
  // wait for the pulse to stop
                while (((PINH) && ((c[pInno]))) == vAlue)
	                 {
                 		if (++wIdth == mAxloops)
                  		return 0;
     efa:	20 e0       	ldi	r18, 0x00	; 0
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	a9 01       	movw	r20, r18
     f00:	17 c0       	rjmp	.+46     	; 0xf30 <_Z7pulseInhh+0x79a>
case'j':
	                  
	                 { while (((PINJ) && (c[pInno])) == vAlue)
	                {
		              if (--mAxloops == 0)
		               return 0;
     f02:	20 e0       	ldi	r18, 0x00	; 0
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	a9 01       	movw	r20, r18
     f08:	13 c0       	rjmp	.+38     	; 0xf30 <_Z7pulseInhh+0x79a>
	                   }
  // wait for the pulse to start  
                  while (((PINJ) && (c[pInno])) != vAlue)
	                  {
		              if (--mAxloops == 0)
		                 return 0;
     f0a:	20 e0       	ldi	r18, 0x00	; 0
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	a9 01       	movw	r20, r18
     f10:	0f c0       	rjmp	.+30     	; 0xf30 <_Z7pulseInhh+0x79a>
	                      }
  // wait for the pulse to stop
                while (((PINJ) && (c[pInno])) == vAlue)
	                 {
                 		if (++wIdth == mAxloops)
                  		return 0;
     f12:	20 e0       	ldi	r18, 0x00	; 0
     f14:	30 e0       	ldi	r19, 0x00	; 0
     f16:	a9 01       	movw	r20, r18
     f18:	0b c0       	rjmp	.+22     	; 0xf30 <_Z7pulseInhh+0x79a>
case 'l':
	                  
	                 { while (((PINL) && (c[pInno])) == vAlue)
	                {
		              if (--mAxloops == 0)
		               return 0;
     f1a:	20 e0       	ldi	r18, 0x00	; 0
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	a9 01       	movw	r20, r18
     f20:	07 c0       	rjmp	.+14     	; 0xf30 <_Z7pulseInhh+0x79a>
	                   }
  // wait for the pulse to start  
                  while (((PINL) && (c[pInno])) != vAlue)
	                  {
		              if (--mAxloops == 0)
		                 return 0;
     f22:	20 e0       	ldi	r18, 0x00	; 0
     f24:	30 e0       	ldi	r19, 0x00	; 0
     f26:	a9 01       	movw	r20, r18
     f28:	03 c0       	rjmp	.+6      	; 0xf30 <_Z7pulseInhh+0x79a>
	                      }
  // wait for the pulse to stop
                while (((PINL) && (c[pInno])) == vAlue)
	                 {
                 		if (++wIdth == mAxloops)
                  		return 0;
     f2a:	20 e0       	ldi	r18, 0x00	; 0
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	a9 01       	movw	r20, r18
                     	    }
                     return wIdth;
                         }  
			           break;	        		   		   	  	  		 		 			 
	     }  
					 }					 	
     f30:	62 2f       	mov	r22, r18
     f32:	73 2f       	mov	r23, r19
     f34:	84 2f       	mov	r24, r20
     f36:	95 2f       	mov	r25, r21
     f38:	0f 90       	pop	r0
     f3a:	cf 91       	pop	r28
     f3c:	df 91       	pop	r29
     f3e:	1f 91       	pop	r17
     f40:	0f 91       	pop	r16
     f42:	ff 90       	pop	r15
     f44:	ef 90       	pop	r14
     f46:	df 90       	pop	r13
     f48:	cf 90       	pop	r12
     f4a:	bf 90       	pop	r11
     f4c:	af 90       	pop	r10
     f4e:	9f 90       	pop	r9
     f50:	8f 90       	pop	r8
     f52:	08 95       	ret

00000f54 <_Z7initADCv>:
	}

};
void initADC()
{
	ADMUX=(1<<REFS0);				//Aref=AVcc
     f54:	80 e4       	ldi	r24, 0x40	; 64
     f56:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1);		//ADC enabled, Prescaler 64
     f5a:	86 e8       	ldi	r24, 0x86	; 134
     f5c:	80 93 7a 00 	sts	0x007A, r24
}
     f60:	08 95       	ret

00000f62 <_Z10analogReadi>:

int analogRead(int (pInno))
{
     f62:	cf 93       	push	r28
     f64:	df 93       	push	r29
        //prescalar set to default
  	ADMUX=(1<<REFS0)|(0<<REFS1);
     f66:	cc e7       	ldi	r28, 0x7C	; 124
     f68:	d0 e0       	ldi	r29, 0x00	; 0
     f6a:	20 e4       	ldi	r18, 0x40	; 64
     f6c:	28 83       	st	Y, r18
  	ADCSRA|=(1<<ADEN);
     f6e:	ea e7       	ldi	r30, 0x7A	; 122
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	20 81       	ld	r18, Z
     f74:	20 68       	ori	r18, 0x80	; 128
     f76:	20 83       	st	Z, r18
        ADMUX|=(pInno%8);//chose value from 0 to 7 to chose adc pin accordingly
     f78:	28 81       	ld	r18, Y
     f7a:	68 e0       	ldi	r22, 0x08	; 8
     f7c:	70 e0       	ldi	r23, 0x00	; 0
     f7e:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <__divmodhi4>
     f82:	28 2b       	or	r18, r24
     f84:	28 83       	st	Y, r18
        ADCSRA|=(1<<ADEN);
     f86:	80 81       	ld	r24, Z
     f88:	80 68       	ori	r24, 0x80	; 128
     f8a:	80 83       	st	Z, r24
        ADCSRA|=(1<<ADSC);
     f8c:	80 81       	ld	r24, Z
     f8e:	80 64       	ori	r24, 0x40	; 64
     f90:	80 83       	st	Z, r24
	while(ADCSRA&(1<<ADSC));
     f92:	80 81       	ld	r24, Z
     f94:	86 fd       	sbrc	r24, 6
     f96:	fd cf       	rjmp	.-6      	; 0xf92 <_Z10analogReadi+0x30>
	return (ADC);
     f98:	20 91 78 00 	lds	r18, 0x0078
     f9c:	30 91 79 00 	lds	r19, 0x0079
}
     fa0:	82 2f       	mov	r24, r18
     fa2:	93 2f       	mov	r25, r19
     fa4:	df 91       	pop	r29
     fa6:	cf 91       	pop	r28
     fa8:	08 95       	ret

00000faa <_Z11analogWritehh>:

void analogWrite(uint8_t pInno,uint8_t dUtycY)
{
  TCCR1B=(1<<CS11)|(1<<CS10);
     faa:	93 e0       	ldi	r25, 0x03	; 3
     fac:	90 93 81 00 	sts	0x0081, r25
  TCCR1A=(1<<WGM10)|(1<<WGM12)|(1<<COM1A1)|(1<<COM1B1);
     fb0:	99 ea       	ldi	r25, 0xA9	; 169
     fb2:	90 93 80 00 	sts	0x0080, r25
	if((pInno%8)==1)
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	87 70       	andi	r24, 0x07	; 7
     fba:	90 70       	andi	r25, 0x00	; 0
     fbc:	81 30       	cpi	r24, 0x01	; 1
     fbe:	91 05       	cpc	r25, r1
     fc0:	31 f4       	brne	.+12     	; 0xfce <_Z11analogWritehh+0x24>
	{
	  OCR1A=dUtycY;
     fc2:	70 e0       	ldi	r23, 0x00	; 0
     fc4:	70 93 89 00 	sts	0x0089, r23
     fc8:	60 93 88 00 	sts	0x0088, r22
     fcc:	08 95       	ret
	}
	if((pInno%8)==2)
     fce:	82 30       	cpi	r24, 0x02	; 2
     fd0:	91 05       	cpc	r25, r1
     fd2:	29 f4       	brne	.+10     	; 0xfde <_Z11analogWritehh+0x34>
	{
          OCR1B=dUtycY;
     fd4:	70 e0       	ldi	r23, 0x00	; 0
     fd6:	70 93 8b 00 	sts	0x008B, r23
     fda:	60 93 8a 00 	sts	0x008A, r22
     fde:	08 95       	ret

00000fe0 <_Z6millisv>:
	}
}

int millis()
{
     fe0:	cf 92       	push	r12
     fe2:	df 92       	push	r13
     fe4:	ef 92       	push	r14
     fe6:	ff 92       	push	r15
     fe8:	1f 93       	push	r17
	float l;
	l=mIlli*0.16+0.00000625*TCNT0;
     fea:	16 b5       	in	r17, 0x26	; 38
     fec:	60 91 b4 02 	lds	r22, 0x02B4
     ff0:	70 91 b5 02 	lds	r23, 0x02B5
     ff4:	80 91 b6 02 	lds	r24, 0x02B6
     ff8:	90 91 b7 02 	lds	r25, 0x02B7
     ffc:	2a e0       	ldi	r18, 0x0A	; 10
     ffe:	37 ed       	ldi	r19, 0xD7	; 215
    1000:	43 e2       	ldi	r20, 0x23	; 35
    1002:	5e e3       	ldi	r21, 0x3E	; 62
    1004:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <__mulsf3>
    1008:	6b 01       	movw	r12, r22
    100a:	7c 01       	movw	r14, r24
    100c:	61 2f       	mov	r22, r17
    100e:	70 e0       	ldi	r23, 0x00	; 0
    1010:	88 27       	eor	r24, r24
    1012:	77 fd       	sbrc	r23, 7
    1014:	80 95       	com	r24
    1016:	98 2f       	mov	r25, r24
    1018:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <__floatsisf>
    101c:	27 e1       	ldi	r18, 0x17	; 23
    101e:	37 eb       	ldi	r19, 0xB7	; 183
    1020:	41 ed       	ldi	r20, 0xD1	; 209
    1022:	56 e3       	ldi	r21, 0x36	; 54
    1024:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <__mulsf3>
    1028:	9b 01       	movw	r18, r22
    102a:	ac 01       	movw	r20, r24
    102c:	c7 01       	movw	r24, r14
    102e:	b6 01       	movw	r22, r12
    1030:	0e 94 2c 0c 	call	0x1858	; 0x1858 <__addsf3>
        return l;
    1034:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <__fixsfsi>
}
    1038:	86 2f       	mov	r24, r22
    103a:	97 2f       	mov	r25, r23
    103c:	1f 91       	pop	r17
    103e:	ff 90       	pop	r15
    1040:	ef 90       	pop	r14
    1042:	df 90       	pop	r13
    1044:	cf 90       	pop	r12
    1046:	08 95       	ret

00001048 <_Z5tinitv>:

void tinit(void)
{ 
	TCCR0A|=(1<<WGM01);
    1048:	84 b5       	in	r24, 0x24	; 36
    104a:	82 60       	ori	r24, 0x02	; 2
    104c:	84 bd       	out	0x24, r24	; 36
        TCCR0A|=(1<<CS00);
    104e:	84 b5       	in	r24, 0x24	; 36
    1050:	81 60       	ori	r24, 0x01	; 1
    1052:	84 bd       	out	0x24, r24	; 36
	TIMSK0|=(1<<TOV0);
    1054:	ee e6       	ldi	r30, 0x6E	; 110
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	81 60       	ori	r24, 0x01	; 1
    105c:	80 83       	st	Z, r24
        TCNT0=0;
    105e:	16 bc       	out	0x26, r1	; 38
}
    1060:	08 95       	ret

00001062 <__vector_23>:


ISR(TIMER0_OVF_vect)
{
    1062:	1f 92       	push	r1
    1064:	0f 92       	push	r0
    1066:	0f b6       	in	r0, 0x3f	; 63
    1068:	0f 92       	push	r0
    106a:	0b b6       	in	r0, 0x3b	; 59
    106c:	0f 92       	push	r0
    106e:	11 24       	eor	r1, r1
    1070:	2f 93       	push	r18
    1072:	3f 93       	push	r19
    1074:	4f 93       	push	r20
    1076:	5f 93       	push	r21
    1078:	6f 93       	push	r22
    107a:	7f 93       	push	r23
    107c:	8f 93       	push	r24
    107e:	9f 93       	push	r25
    1080:	af 93       	push	r26
    1082:	bf 93       	push	r27
    1084:	ef 93       	push	r30
    1086:	ff 93       	push	r31
	mIlli++;	
    1088:	60 91 b4 02 	lds	r22, 0x02B4
    108c:	70 91 b5 02 	lds	r23, 0x02B5
    1090:	80 91 b6 02 	lds	r24, 0x02B6
    1094:	90 91 b7 02 	lds	r25, 0x02B7
    1098:	20 e0       	ldi	r18, 0x00	; 0
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	40 e8       	ldi	r20, 0x80	; 128
    109e:	5f e3       	ldi	r21, 0x3F	; 63
    10a0:	0e 94 2c 0c 	call	0x1858	; 0x1858 <__addsf3>
    10a4:	60 93 b4 02 	sts	0x02B4, r22
    10a8:	70 93 b5 02 	sts	0x02B5, r23
    10ac:	80 93 b6 02 	sts	0x02B6, r24
    10b0:	90 93 b7 02 	sts	0x02B7, r25
}	
    10b4:	ff 91       	pop	r31
    10b6:	ef 91       	pop	r30
    10b8:	bf 91       	pop	r27
    10ba:	af 91       	pop	r26
    10bc:	9f 91       	pop	r25
    10be:	8f 91       	pop	r24
    10c0:	7f 91       	pop	r23
    10c2:	6f 91       	pop	r22
    10c4:	5f 91       	pop	r21
    10c6:	4f 91       	pop	r20
    10c8:	3f 91       	pop	r19
    10ca:	2f 91       	pop	r18
    10cc:	0f 90       	pop	r0
    10ce:	0b be       	out	0x3b, r0	; 59
    10d0:	0f 90       	pop	r0
    10d2:	0f be       	out	0x3f, r0	; 63
    10d4:	0f 90       	pop	r0
    10d6:	1f 90       	pop	r1
    10d8:	18 95       	reti

000010da <_Z5delaym>:

void delay(unsigned long mIllisec)
{
    10da:	9b 01       	movw	r18, r22
    10dc:	ac 01       	movw	r20, r24
	int i;
	for(i=0;i<mIllisec;i++)
    10de:	61 15       	cp	r22, r1
    10e0:	71 05       	cpc	r23, r1
    10e2:	81 05       	cpc	r24, r1
    10e4:	91 05       	cpc	r25, r1
    10e6:	a1 f0       	breq	.+40     	; 0x1110 <_Z5delaym+0x36>
    10e8:	60 e0       	ldi	r22, 0x00	; 0
    10ea:	70 e0       	ldi	r23, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    10ec:	89 ef       	ldi	r24, 0xF9	; 249
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	01 97       	sbiw	r24, 0x01	; 1
    10f2:	f1 f7       	brne	.-4      	; 0x10f0 <_Z5delaym+0x16>
    10f4:	00 c0       	rjmp	.+0      	; 0x10f6 <_Z5delaym+0x1c>
    10f6:	00 00       	nop
    10f8:	6f 5f       	subi	r22, 0xFF	; 255
    10fa:	7f 4f       	sbci	r23, 0xFF	; 255
    10fc:	cb 01       	movw	r24, r22
    10fe:	aa 27       	eor	r26, r26
    1100:	97 fd       	sbrc	r25, 7
    1102:	a0 95       	com	r26
    1104:	ba 2f       	mov	r27, r26
    1106:	82 17       	cp	r24, r18
    1108:	93 07       	cpc	r25, r19
    110a:	a4 07       	cpc	r26, r20
    110c:	b5 07       	cpc	r27, r21
    110e:	70 f3       	brcs	.-36     	; 0x10ec <_Z5delaym+0x12>
    1110:	08 95       	ret

00001112 <_Z17delayMicrosecondsm>:
	}
	return;
}

void delayMicroseconds(unsigned long mIcrosec)
{
    1112:	9b 01       	movw	r18, r22
    1114:	ac 01       	movw	r20, r24
	int i;
	for(i=0;i<mIcrosec;i++)
    1116:	61 15       	cp	r22, r1
    1118:	71 05       	cpc	r23, r1
    111a:	81 05       	cpc	r24, r1
    111c:	91 05       	cpc	r25, r1
    111e:	79 f0       	breq	.+30     	; 0x113e <_Z17delayMicrosecondsm+0x2c>
    1120:	60 e0       	ldi	r22, 0x00	; 0
    1122:	70 e0       	ldi	r23, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1124:	00 00       	nop
    1126:	6f 5f       	subi	r22, 0xFF	; 255
    1128:	7f 4f       	sbci	r23, 0xFF	; 255
    112a:	cb 01       	movw	r24, r22
    112c:	aa 27       	eor	r26, r26
    112e:	97 fd       	sbrc	r25, 7
    1130:	a0 95       	com	r26
    1132:	ba 2f       	mov	r27, r26
    1134:	82 17       	cp	r24, r18
    1136:	93 07       	cpc	r25, r19
    1138:	a4 07       	cpc	r26, r20
    113a:	b5 07       	cpc	r27, r21
    113c:	98 f3       	brcs	.-26     	; 0x1124 <_Z17delayMicrosecondsm+0x12>
    113e:	08 95       	ret

00001140 <_Z3mapddddd>:
	}
	return;
}

double map(double vAlue, double fromLow, double fromHigh, double toLow, double toHigh)
{
    1140:	2f 92       	push	r2
    1142:	3f 92       	push	r3
    1144:	4f 92       	push	r4
    1146:	5f 92       	push	r5
    1148:	6f 92       	push	r6
    114a:	7f 92       	push	r7
    114c:	8f 92       	push	r8
    114e:	9f 92       	push	r9
    1150:	af 92       	push	r10
    1152:	bf 92       	push	r11
    1154:	cf 92       	push	r12
    1156:	df 92       	push	r13
    1158:	ef 92       	push	r14
    115a:	ff 92       	push	r15
    115c:	0f 93       	push	r16
    115e:	1f 93       	push	r17
    1160:	df 93       	push	r29
    1162:	cf 93       	push	r28
    1164:	cd b7       	in	r28, 0x3d	; 61
    1166:	de b7       	in	r29, 0x3e	; 62
    1168:	39 01       	movw	r6, r18
    116a:	4a 01       	movw	r8, r20
    116c:	17 01       	movw	r2, r14
    116e:	28 01       	movw	r4, r16
	return ((vAlue-fromLow)/abs(fromHigh-fromLow)*abs(toHigh+toLow));
    1170:	0e 94 2b 0c 	call	0x1856	; 0x1856 <__subsf3>
    1174:	7b 01       	movw	r14, r22
    1176:	8c 01       	movw	r16, r24
    1178:	c2 01       	movw	r24, r4
    117a:	b1 01       	movw	r22, r2
    117c:	a4 01       	movw	r20, r8
    117e:	93 01       	movw	r18, r6
    1180:	0e 94 2b 0c 	call	0x1856	; 0x1856 <__subsf3>
    1184:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <__fixsfsi>
    1188:	86 2f       	mov	r24, r22
    118a:	97 2f       	mov	r25, r23
    118c:	bc 01       	movw	r22, r24
    118e:	77 23       	and	r23, r23
    1190:	24 f4       	brge	.+8      	; 0x119a <_Z3mapddddd+0x5a>
    1192:	66 27       	eor	r22, r22
    1194:	77 27       	eor	r23, r23
    1196:	68 1b       	sub	r22, r24
    1198:	79 0b       	sbc	r23, r25
    119a:	88 27       	eor	r24, r24
    119c:	77 fd       	sbrc	r23, 7
    119e:	80 95       	com	r24
    11a0:	98 2f       	mov	r25, r24
    11a2:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <__floatsisf>
    11a6:	9b 01       	movw	r18, r22
    11a8:	ac 01       	movw	r20, r24
    11aa:	c8 01       	movw	r24, r16
    11ac:	b7 01       	movw	r22, r14
    11ae:	0e 94 94 0c 	call	0x1928	; 0x1928 <__divsf3>
    11b2:	3b 01       	movw	r6, r22
    11b4:	4c 01       	movw	r8, r24
    11b6:	6e 89       	ldd	r22, Y+22	; 0x16
    11b8:	7f 89       	ldd	r23, Y+23	; 0x17
    11ba:	88 8d       	ldd	r24, Y+24	; 0x18
    11bc:	99 8d       	ldd	r25, Y+25	; 0x19
    11be:	a6 01       	movw	r20, r12
    11c0:	95 01       	movw	r18, r10
    11c2:	0e 94 2c 0c 	call	0x1858	; 0x1858 <__addsf3>
    11c6:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <__fixsfsi>
    11ca:	86 2f       	mov	r24, r22
    11cc:	97 2f       	mov	r25, r23
    11ce:	bc 01       	movw	r22, r24
    11d0:	77 23       	and	r23, r23
    11d2:	24 f4       	brge	.+8      	; 0x11dc <_Z3mapddddd+0x9c>
    11d4:	66 27       	eor	r22, r22
    11d6:	77 27       	eor	r23, r23
    11d8:	68 1b       	sub	r22, r24
    11da:	79 0b       	sbc	r23, r25
    11dc:	88 27       	eor	r24, r24
    11de:	77 fd       	sbrc	r23, 7
    11e0:	80 95       	com	r24
    11e2:	98 2f       	mov	r25, r24
    11e4:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <__floatsisf>
    11e8:	9b 01       	movw	r18, r22
    11ea:	ac 01       	movw	r20, r24
    11ec:	c4 01       	movw	r24, r8
    11ee:	b3 01       	movw	r22, r6
    11f0:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <__mulsf3>
}
    11f4:	cf 91       	pop	r28
    11f6:	df 91       	pop	r29
    11f8:	1f 91       	pop	r17
    11fa:	0f 91       	pop	r16
    11fc:	ff 90       	pop	r15
    11fe:	ef 90       	pop	r14
    1200:	df 90       	pop	r13
    1202:	cf 90       	pop	r12
    1204:	bf 90       	pop	r11
    1206:	af 90       	pop	r10
    1208:	9f 90       	pop	r9
    120a:	8f 90       	pop	r8
    120c:	7f 90       	pop	r7
    120e:	6f 90       	pop	r6
    1210:	5f 90       	pop	r5
    1212:	4f 90       	pop	r4
    1214:	3f 90       	pop	r3
    1216:	2f 90       	pop	r2
    1218:	08 95       	ret

0000121a <_Z9constrainddd>:

double constrain(double nUm,double uPper,double lOwer)
{
    121a:	6f 92       	push	r6
    121c:	7f 92       	push	r7
    121e:	8f 92       	push	r8
    1220:	9f 92       	push	r9
    1222:	af 92       	push	r10
    1224:	bf 92       	push	r11
    1226:	cf 92       	push	r12
    1228:	df 92       	push	r13
    122a:	ef 92       	push	r14
    122c:	ff 92       	push	r15
    122e:	0f 93       	push	r16
    1230:	1f 93       	push	r17
    1232:	96 2e       	mov	r9, r22
    1234:	87 2e       	mov	r8, r23
    1236:	78 2e       	mov	r7, r24
    1238:	69 2e       	mov	r6, r25
    123a:	d2 2e       	mov	r13, r18
    123c:	c3 2e       	mov	r12, r19
    123e:	b4 2e       	mov	r11, r20
    1240:	a5 2e       	mov	r10, r21
	if(nUm<uPper){
    1242:	2d 2d       	mov	r18, r13
    1244:	3c 2d       	mov	r19, r12
    1246:	4b 2d       	mov	r20, r11
    1248:	5a 2d       	mov	r21, r10
    124a:	0e 94 90 0c 	call	0x1920	; 0x1920 <__cmpsf2>
    124e:	88 23       	and	r24, r24
    1250:	ac f0       	brlt	.+42     	; 0x127c <_Z9constrainddd+0x62>
		return uPper;}
	else if(nUm>lOwer){
    1252:	69 2d       	mov	r22, r9
    1254:	78 2d       	mov	r23, r8
    1256:	87 2d       	mov	r24, r7
    1258:	96 2d       	mov	r25, r6
    125a:	2e 2d       	mov	r18, r14
    125c:	3f 2d       	mov	r19, r15
    125e:	40 2f       	mov	r20, r16
    1260:	51 2f       	mov	r21, r17
    1262:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <__gesf2>
    1266:	18 16       	cp	r1, r24
    1268:	2c f4       	brge	.+10     	; 0x1274 <_Z9constrainddd+0x5a>
		return lOwer;}
    126a:	de 2c       	mov	r13, r14
    126c:	cf 2c       	mov	r12, r15
    126e:	b0 2e       	mov	r11, r16
    1270:	a1 2e       	mov	r10, r17
    1272:	04 c0       	rjmp	.+8      	; 0x127c <_Z9constrainddd+0x62>
	else 
	return nUm;	
    1274:	d9 2c       	mov	r13, r9
    1276:	c8 2c       	mov	r12, r8
    1278:	b7 2c       	mov	r11, r7
    127a:	a6 2c       	mov	r10, r6
}
    127c:	6d 2d       	mov	r22, r13
    127e:	7c 2d       	mov	r23, r12
    1280:	8b 2d       	mov	r24, r11
    1282:	9a 2d       	mov	r25, r10
    1284:	1f 91       	pop	r17
    1286:	0f 91       	pop	r16
    1288:	ff 90       	pop	r15
    128a:	ef 90       	pop	r14
    128c:	df 90       	pop	r13
    128e:	cf 90       	pop	r12
    1290:	bf 90       	pop	r11
    1292:	af 90       	pop	r10
    1294:	9f 90       	pop	r9
    1296:	8f 90       	pop	r8
    1298:	7f 90       	pop	r7
    129a:	6f 90       	pop	r6
    129c:	08 95       	ret

0000129e <_Z15attachIntteruptiPFvvEi>:
void attachIntterupt(int pIn, void (*iSrfunc)(void), int cOmpare)		//cOmpare:LOW=0,HIGH1,RISING=2,FALLING=3
{
	sei();
    129e:	78 94       	sei
	cAllisr=iSrfunc;
    12a0:	70 93 b9 02 	sts	0x02B9, r23
    12a4:	60 93 b8 02 	sts	0x02B8, r22
	switch(pIn)	  //enabling interrupt pin
    12a8:	83 30       	cpi	r24, 0x03	; 3
    12aa:	91 05       	cpc	r25, r1
    12ac:	09 f4       	brne	.+2      	; 0x12b0 <_Z15attachIntteruptiPFvvEi+0x12>
    12ae:	7d c0       	rjmp	.+250    	; 0x13aa <_Z15attachIntteruptiPFvvEi+0x10c>
    12b0:	84 30       	cpi	r24, 0x04	; 4
    12b2:	91 05       	cpc	r25, r1
    12b4:	54 f4       	brge	.+20     	; 0x12ca <_Z15attachIntteruptiPFvvEi+0x2c>
    12b6:	81 30       	cpi	r24, 0x01	; 1
    12b8:	91 05       	cpc	r25, r1
    12ba:	c9 f1       	breq	.+114    	; 0x132e <_Z15attachIntteruptiPFvvEi+0x90>
    12bc:	82 30       	cpi	r24, 0x02	; 2
    12be:	91 05       	cpc	r25, r1
    12c0:	0c f0       	brlt	.+2      	; 0x12c4 <_Z15attachIntteruptiPFvvEi+0x26>
    12c2:	54 c0       	rjmp	.+168    	; 0x136c <_Z15attachIntteruptiPFvvEi+0xce>
    12c4:	00 97       	sbiw	r24, 0x00	; 0
    12c6:	91 f0       	breq	.+36     	; 0x12ec <_Z15attachIntteruptiPFvvEi+0x4e>
    12c8:	0b c1       	rjmp	.+534    	; 0x14e0 <_Z15attachIntteruptiPFvvEi+0x242>
    12ca:	85 30       	cpi	r24, 0x05	; 5
    12cc:	91 05       	cpc	r25, r1
    12ce:	09 f4       	brne	.+2      	; 0x12d2 <_Z15attachIntteruptiPFvvEi+0x34>
    12d0:	aa c0       	rjmp	.+340    	; 0x1426 <_Z15attachIntteruptiPFvvEi+0x188>
    12d2:	85 30       	cpi	r24, 0x05	; 5
    12d4:	91 05       	cpc	r25, r1
    12d6:	0c f4       	brge	.+2      	; 0x12da <_Z15attachIntteruptiPFvvEi+0x3c>
    12d8:	87 c0       	rjmp	.+270    	; 0x13e8 <_Z15attachIntteruptiPFvvEi+0x14a>
    12da:	86 30       	cpi	r24, 0x06	; 6
    12dc:	91 05       	cpc	r25, r1
    12de:	09 f4       	brne	.+2      	; 0x12e2 <_Z15attachIntteruptiPFvvEi+0x44>
    12e0:	c1 c0       	rjmp	.+386    	; 0x1464 <_Z15attachIntteruptiPFvvEi+0x1c6>
    12e2:	87 30       	cpi	r24, 0x07	; 7
    12e4:	91 05       	cpc	r25, r1
    12e6:	09 f0       	breq	.+2      	; 0x12ea <_Z15attachIntteruptiPFvvEi+0x4c>
    12e8:	fb c0       	rjmp	.+502    	; 0x14e0 <_Z15attachIntteruptiPFvvEi+0x242>
    12ea:	db c0       	rjmp	.+438    	; 0x14a2 <_Z15attachIntteruptiPFvvEi+0x204>
	{
		case 0:
		EIMSK|=1<<INT0;
    12ec:	e8 9a       	sbi	0x1d, 0	; 29
		switch(cOmpare){
    12ee:	43 30       	cpi	r20, 0x03	; 3
    12f0:	51 05       	cpc	r21, r1
    12f2:	61 f0       	breq	.+24     	; 0x130c <_Z15attachIntteruptiPFvvEi+0x6e>
    12f4:	44 30       	cpi	r20, 0x04	; 4
    12f6:	51 05       	cpc	r21, r1
    12f8:	79 f0       	breq	.+30     	; 0x1318 <_Z15attachIntteruptiPFvvEi+0x7a>
    12fa:	42 30       	cpi	r20, 0x02	; 2
    12fc:	51 05       	cpc	r21, r1
    12fe:	91 f4       	brne	.+36     	; 0x1324 <_Z15attachIntteruptiPFvvEi+0x86>
			case 2:
			EICRA|=(1<<ISC00)|(1<<ISC01);
    1300:	e9 e6       	ldi	r30, 0x69	; 105
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	80 81       	ld	r24, Z
    1306:	83 60       	ori	r24, 0x03	; 3
    1308:	80 83       	st	Z, r24
			break;
    130a:	08 95       	ret
			case 3:
			EICRA|=(0<<ISC00)|(1<<ISC01);
    130c:	e9 e6       	ldi	r30, 0x69	; 105
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	80 81       	ld	r24, Z
    1312:	82 60       	ori	r24, 0x02	; 2
    1314:	80 83       	st	Z, r24
			break;
    1316:	08 95       	ret
			case 4:
			EICRA|=(1<<ISC00)|(0<<ISC01);
    1318:	e9 e6       	ldi	r30, 0x69	; 105
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	80 81       	ld	r24, Z
    131e:	81 60       	ori	r24, 0x01	; 1
    1320:	80 83       	st	Z, r24
			break;
    1322:	08 95       	ret
			default:
			EICRA|=(0<<ISC00)|(0<<ISC01);
    1324:	e9 e6       	ldi	r30, 0x69	; 105
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	80 81       	ld	r24, Z
    132a:	80 83       	st	Z, r24
    132c:	08 95       	ret
		}
		break;

		case 1:
		EIMSK|=1<<INT1;
    132e:	e9 9a       	sbi	0x1d, 1	; 29
                switch(cOmpare)
    1330:	43 30       	cpi	r20, 0x03	; 3
    1332:	51 05       	cpc	r21, r1
    1334:	61 f0       	breq	.+24     	; 0x134e <_Z15attachIntteruptiPFvvEi+0xb0>
    1336:	44 30       	cpi	r20, 0x04	; 4
    1338:	51 05       	cpc	r21, r1
    133a:	69 f0       	breq	.+26     	; 0x1356 <_Z15attachIntteruptiPFvvEi+0xb8>
    133c:	42 30       	cpi	r20, 0x02	; 2
    133e:	51 05       	cpc	r21, r1
    1340:	81 f4       	brne	.+32     	; 0x1362 <_Z15attachIntteruptiPFvvEi+0xc4>
		{
			case 2:
			EICRA|=(1<<ISC10)|(1<<ISC11);
    1342:	e9 e6       	ldi	r30, 0x69	; 105
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	80 81       	ld	r24, Z
    1348:	8c 60       	ori	r24, 0x0C	; 12
    134a:	80 83       	st	Z, r24
			break;
    134c:	08 95       	ret
			case 3:
			EICRA=(0<<ISC10)|(1<<ISC11);
    134e:	88 e0       	ldi	r24, 0x08	; 8
    1350:	80 93 69 00 	sts	0x0069, r24
			break;
    1354:	08 95       	ret
			case 4:
			EICRA|=(1<<ISC10)|(0<<ISC11);
    1356:	e9 e6       	ldi	r30, 0x69	; 105
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	80 81       	ld	r24, Z
    135c:	84 60       	ori	r24, 0x04	; 4
    135e:	80 83       	st	Z, r24
			break;
    1360:	08 95       	ret
			default:
			EICRA|=(0<<ISC10)|(0<<ISC11);
    1362:	e9 e6       	ldi	r30, 0x69	; 105
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	80 81       	ld	r24, Z
    1368:	80 83       	st	Z, r24
    136a:	08 95       	ret
		}
		break;
		
		case 2:
		EIMSK|=1<<INT2;
    136c:	ea 9a       	sbi	0x1d, 2	; 29
		switch(cOmpare)
    136e:	43 30       	cpi	r20, 0x03	; 3
    1370:	51 05       	cpc	r21, r1
    1372:	61 f0       	breq	.+24     	; 0x138c <_Z15attachIntteruptiPFvvEi+0xee>
    1374:	44 30       	cpi	r20, 0x04	; 4
    1376:	51 05       	cpc	r21, r1
    1378:	69 f0       	breq	.+26     	; 0x1394 <_Z15attachIntteruptiPFvvEi+0xf6>
    137a:	42 30       	cpi	r20, 0x02	; 2
    137c:	51 05       	cpc	r21, r1
    137e:	81 f4       	brne	.+32     	; 0x13a0 <_Z15attachIntteruptiPFvvEi+0x102>
		{
			case 2:
			EICRA|=(1<<ISC20)|(1<<ISC21);
    1380:	e9 e6       	ldi	r30, 0x69	; 105
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	80 81       	ld	r24, Z
    1386:	80 63       	ori	r24, 0x30	; 48
    1388:	80 83       	st	Z, r24
			break;
    138a:	08 95       	ret
			case 3:
			EICRA=(0<<ISC20)|(1<<ISC21);
    138c:	80 e2       	ldi	r24, 0x20	; 32
    138e:	80 93 69 00 	sts	0x0069, r24
			break;
    1392:	08 95       	ret
			case 4:
			EICRA|=(1<<ISC20)|(0<<ISC21);
    1394:	e9 e6       	ldi	r30, 0x69	; 105
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	80 81       	ld	r24, Z
    139a:	80 61       	ori	r24, 0x10	; 16
    139c:	80 83       	st	Z, r24
			break;
    139e:	08 95       	ret
			default:
			EICRA|=(0<<ISC20)|(0<<ISC21);
    13a0:	e9 e6       	ldi	r30, 0x69	; 105
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	80 81       	ld	r24, Z
    13a6:	80 83       	st	Z, r24
    13a8:	08 95       	ret
		}
		break;
		
		case 3:
		EIMSK|=1<<INT3;
    13aa:	eb 9a       	sbi	0x1d, 3	; 29
		switch(cOmpare)
    13ac:	43 30       	cpi	r20, 0x03	; 3
    13ae:	51 05       	cpc	r21, r1
    13b0:	61 f0       	breq	.+24     	; 0x13ca <_Z15attachIntteruptiPFvvEi+0x12c>
    13b2:	44 30       	cpi	r20, 0x04	; 4
    13b4:	51 05       	cpc	r21, r1
    13b6:	69 f0       	breq	.+26     	; 0x13d2 <_Z15attachIntteruptiPFvvEi+0x134>
    13b8:	42 30       	cpi	r20, 0x02	; 2
    13ba:	51 05       	cpc	r21, r1
    13bc:	81 f4       	brne	.+32     	; 0x13de <_Z15attachIntteruptiPFvvEi+0x140>
		{
			case 2:
			EICRA|=(1<<ISC30)|(1<<ISC31);
    13be:	e9 e6       	ldi	r30, 0x69	; 105
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	80 81       	ld	r24, Z
    13c4:	80 6c       	ori	r24, 0xC0	; 192
    13c6:	80 83       	st	Z, r24
			break;
    13c8:	08 95       	ret
			case 3:
			EICRA=(0<<ISC30)|(1<<ISC31);
    13ca:	80 e8       	ldi	r24, 0x80	; 128
    13cc:	80 93 69 00 	sts	0x0069, r24
			break;
    13d0:	08 95       	ret
			case 4:
			EICRA|=(1<<ISC30)|(0<<ISC31);
    13d2:	e9 e6       	ldi	r30, 0x69	; 105
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	80 81       	ld	r24, Z
    13d8:	80 64       	ori	r24, 0x40	; 64
    13da:	80 83       	st	Z, r24
			break;
    13dc:	08 95       	ret
			default:
			EICRA|=(0<<ISC30)|(0<<ISC31);
    13de:	e9 e6       	ldi	r30, 0x69	; 105
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	80 81       	ld	r24, Z
    13e4:	80 83       	st	Z, r24
    13e6:	08 95       	ret
		}
		break;
		
		case 4:
		EIMSK|=1<<INT4;
    13e8:	ec 9a       	sbi	0x1d, 4	; 29
                switch(cOmpare)
    13ea:	43 30       	cpi	r20, 0x03	; 3
    13ec:	51 05       	cpc	r21, r1
    13ee:	61 f0       	breq	.+24     	; 0x1408 <_Z15attachIntteruptiPFvvEi+0x16a>
    13f0:	44 30       	cpi	r20, 0x04	; 4
    13f2:	51 05       	cpc	r21, r1
    13f4:	69 f0       	breq	.+26     	; 0x1410 <_Z15attachIntteruptiPFvvEi+0x172>
    13f6:	42 30       	cpi	r20, 0x02	; 2
    13f8:	51 05       	cpc	r21, r1
    13fa:	81 f4       	brne	.+32     	; 0x141c <_Z15attachIntteruptiPFvvEi+0x17e>
		{
			case 2:
			EICRB|=(1<<ISC40)|(1<<ISC41);
    13fc:	ea e6       	ldi	r30, 0x6A	; 106
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
    1400:	80 81       	ld	r24, Z
    1402:	83 60       	ori	r24, 0x03	; 3
    1404:	80 83       	st	Z, r24
			break;
    1406:	08 95       	ret
			case 3:
			EICRB=(0<<ISC40)|(1<<ISC41);
    1408:	82 e0       	ldi	r24, 0x02	; 2
    140a:	80 93 6a 00 	sts	0x006A, r24
			break;
    140e:	08 95       	ret
			case 4:
			EICRB|=(1<<ISC40)|(0<<ISC41);
    1410:	ea e6       	ldi	r30, 0x6A	; 106
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	80 81       	ld	r24, Z
    1416:	81 60       	ori	r24, 0x01	; 1
    1418:	80 83       	st	Z, r24
			break;
    141a:	08 95       	ret
			default:
			EICRB|=(0<<ISC40)|(0<<ISC41);
    141c:	ea e6       	ldi	r30, 0x6A	; 106
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	80 81       	ld	r24, Z
    1422:	80 83       	st	Z, r24
    1424:	08 95       	ret
		}
		break;
		
		case 5:
		EIMSK|=1<<INT5;
    1426:	ed 9a       	sbi	0x1d, 5	; 29
		switch(cOmpare)
    1428:	43 30       	cpi	r20, 0x03	; 3
    142a:	51 05       	cpc	r21, r1
    142c:	61 f0       	breq	.+24     	; 0x1446 <_Z15attachIntteruptiPFvvEi+0x1a8>
    142e:	44 30       	cpi	r20, 0x04	; 4
    1430:	51 05       	cpc	r21, r1
    1432:	69 f0       	breq	.+26     	; 0x144e <_Z15attachIntteruptiPFvvEi+0x1b0>
    1434:	42 30       	cpi	r20, 0x02	; 2
    1436:	51 05       	cpc	r21, r1
    1438:	81 f4       	brne	.+32     	; 0x145a <_Z15attachIntteruptiPFvvEi+0x1bc>
		{
			case 2:
			EICRB|=(1<<ISC50)|(1<<ISC51);
    143a:	ea e6       	ldi	r30, 0x6A	; 106
    143c:	f0 e0       	ldi	r31, 0x00	; 0
    143e:	80 81       	ld	r24, Z
    1440:	8c 60       	ori	r24, 0x0C	; 12
    1442:	80 83       	st	Z, r24
			break;
    1444:	08 95       	ret
			case 3:
			EICRB=(0<<ISC50)|(1<<ISC51);
    1446:	88 e0       	ldi	r24, 0x08	; 8
    1448:	80 93 6a 00 	sts	0x006A, r24
			break;
    144c:	08 95       	ret
			case 4:
			EICRB|=(1<<ISC50)|(0<<ISC51);
    144e:	ea e6       	ldi	r30, 0x6A	; 106
    1450:	f0 e0       	ldi	r31, 0x00	; 0
    1452:	80 81       	ld	r24, Z
    1454:	84 60       	ori	r24, 0x04	; 4
    1456:	80 83       	st	Z, r24
			break;
    1458:	08 95       	ret
			default:
                 	EICRB|=(0<<ISC40)|(0<<ISC41);
    145a:	ea e6       	ldi	r30, 0x6A	; 106
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	80 81       	ld	r24, Z
    1460:	80 83       	st	Z, r24
    1462:	08 95       	ret
			
		}
		break;
		
		case 6:
		EIMSK|=1<<INT6;
    1464:	ee 9a       	sbi	0x1d, 6	; 29
	        switch(cOmpare)
    1466:	43 30       	cpi	r20, 0x03	; 3
    1468:	51 05       	cpc	r21, r1
    146a:	61 f0       	breq	.+24     	; 0x1484 <_Z15attachIntteruptiPFvvEi+0x1e6>
    146c:	44 30       	cpi	r20, 0x04	; 4
    146e:	51 05       	cpc	r21, r1
    1470:	69 f0       	breq	.+26     	; 0x148c <_Z15attachIntteruptiPFvvEi+0x1ee>
    1472:	42 30       	cpi	r20, 0x02	; 2
    1474:	51 05       	cpc	r21, r1
    1476:	81 f4       	brne	.+32     	; 0x1498 <_Z15attachIntteruptiPFvvEi+0x1fa>
		{
			case 2:
			EICRB|=(1<<ISC60)|(1<<ISC61);
    1478:	ea e6       	ldi	r30, 0x6A	; 106
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	80 81       	ld	r24, Z
    147e:	80 63       	ori	r24, 0x30	; 48
    1480:	80 83       	st	Z, r24
			break;
    1482:	08 95       	ret
			case 3:
			EICRB=(0<<ISC60)|(1<<ISC61);
    1484:	80 e2       	ldi	r24, 0x20	; 32
    1486:	80 93 6a 00 	sts	0x006A, r24
			break;
    148a:	08 95       	ret
			case 4:
			EICRB|=(1<<ISC60)|(0<<ISC61);
    148c:	ea e6       	ldi	r30, 0x6A	; 106
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	80 81       	ld	r24, Z
    1492:	80 61       	ori	r24, 0x10	; 16
    1494:	80 83       	st	Z, r24
			break;
    1496:	08 95       	ret
			default:
			EICRB|=(0<<ISC60)|(0<<ISC61);
    1498:	ea e6       	ldi	r30, 0x6A	; 106
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	80 81       	ld	r24, Z
    149e:	80 83       	st	Z, r24
    14a0:	08 95       	ret
			
		}
		break;
		
		case 7:
		EIMSK|=1<<INT7;
    14a2:	ef 9a       	sbi	0x1d, 7	; 29
		switch(cOmpare)
    14a4:	43 30       	cpi	r20, 0x03	; 3
    14a6:	51 05       	cpc	r21, r1
    14a8:	61 f0       	breq	.+24     	; 0x14c2 <_Z15attachIntteruptiPFvvEi+0x224>
    14aa:	44 30       	cpi	r20, 0x04	; 4
    14ac:	51 05       	cpc	r21, r1
    14ae:	69 f0       	breq	.+26     	; 0x14ca <_Z15attachIntteruptiPFvvEi+0x22c>
    14b0:	42 30       	cpi	r20, 0x02	; 2
    14b2:	51 05       	cpc	r21, r1
    14b4:	81 f4       	brne	.+32     	; 0x14d6 <_Z15attachIntteruptiPFvvEi+0x238>
		{
			case 2:
			EICRB|=(1<<ISC70)|(1<<ISC71);
    14b6:	ea e6       	ldi	r30, 0x6A	; 106
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	80 81       	ld	r24, Z
    14bc:	80 6c       	ori	r24, 0xC0	; 192
    14be:	80 83       	st	Z, r24
			break;
    14c0:	08 95       	ret
			case 3:
			EICRB=(0<<ISC70)|(1<<ISC71);
    14c2:	80 e8       	ldi	r24, 0x80	; 128
    14c4:	80 93 6a 00 	sts	0x006A, r24
			break;
    14c8:	08 95       	ret
			case 4:
			EICRB|=(1<<ISC70)|(0<<ISC71);
    14ca:	ea e6       	ldi	r30, 0x6A	; 106
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	80 81       	ld	r24, Z
    14d0:	80 64       	ori	r24, 0x40	; 64
    14d2:	80 83       	st	Z, r24
			break;
    14d4:	08 95       	ret
			default:
			EICRB|=(0<<ISC70)|(0<<ISC71);
    14d6:	ea e6       	ldi	r30, 0x6A	; 106
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	80 81       	ld	r24, Z
    14dc:	80 83       	st	Z, r24
    14de:	08 95       	ret
		}
		break;
		
	        default:EICRA|=(0<<ISC01)|(0<<ISC00);
    14e0:	e9 e6       	ldi	r30, 0x69	; 105
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	80 81       	ld	r24, Z
    14e6:	80 83       	st	Z, r24
    14e8:	08 95       	ret

000014ea <__vector_2>:
/*ISR(INT0_vect)
{
   cAllisr();
}*/
ISR(INT1_vect)
{
    14ea:	1f 92       	push	r1
    14ec:	0f 92       	push	r0
    14ee:	0f b6       	in	r0, 0x3f	; 63
    14f0:	0f 92       	push	r0
    14f2:	0b b6       	in	r0, 0x3b	; 59
    14f4:	0f 92       	push	r0
    14f6:	11 24       	eor	r1, r1
    14f8:	2f 93       	push	r18
    14fa:	3f 93       	push	r19
    14fc:	4f 93       	push	r20
    14fe:	5f 93       	push	r21
    1500:	6f 93       	push	r22
    1502:	7f 93       	push	r23
    1504:	8f 93       	push	r24
    1506:	9f 93       	push	r25
    1508:	af 93       	push	r26
    150a:	bf 93       	push	r27
    150c:	ef 93       	push	r30
    150e:	ff 93       	push	r31
   cAllisr();
    1510:	e0 91 b8 02 	lds	r30, 0x02B8
    1514:	f0 91 b9 02 	lds	r31, 0x02B9
    1518:	19 95       	eicall
}
    151a:	ff 91       	pop	r31
    151c:	ef 91       	pop	r30
    151e:	bf 91       	pop	r27
    1520:	af 91       	pop	r26
    1522:	9f 91       	pop	r25
    1524:	8f 91       	pop	r24
    1526:	7f 91       	pop	r23
    1528:	6f 91       	pop	r22
    152a:	5f 91       	pop	r21
    152c:	4f 91       	pop	r20
    152e:	3f 91       	pop	r19
    1530:	2f 91       	pop	r18
    1532:	0f 90       	pop	r0
    1534:	0b be       	out	0x3b, r0	; 59
    1536:	0f 90       	pop	r0
    1538:	0f be       	out	0x3f, r0	; 63
    153a:	0f 90       	pop	r0
    153c:	1f 90       	pop	r1
    153e:	18 95       	reti

00001540 <__vector_3>:
ISR(INT2_vect)
{
    1540:	1f 92       	push	r1
    1542:	0f 92       	push	r0
    1544:	0f b6       	in	r0, 0x3f	; 63
    1546:	0f 92       	push	r0
    1548:	0b b6       	in	r0, 0x3b	; 59
    154a:	0f 92       	push	r0
    154c:	11 24       	eor	r1, r1
    154e:	2f 93       	push	r18
    1550:	3f 93       	push	r19
    1552:	4f 93       	push	r20
    1554:	5f 93       	push	r21
    1556:	6f 93       	push	r22
    1558:	7f 93       	push	r23
    155a:	8f 93       	push	r24
    155c:	9f 93       	push	r25
    155e:	af 93       	push	r26
    1560:	bf 93       	push	r27
    1562:	ef 93       	push	r30
    1564:	ff 93       	push	r31
   cAllisr();
    1566:	e0 91 b8 02 	lds	r30, 0x02B8
    156a:	f0 91 b9 02 	lds	r31, 0x02B9
    156e:	19 95       	eicall
}
    1570:	ff 91       	pop	r31
    1572:	ef 91       	pop	r30
    1574:	bf 91       	pop	r27
    1576:	af 91       	pop	r26
    1578:	9f 91       	pop	r25
    157a:	8f 91       	pop	r24
    157c:	7f 91       	pop	r23
    157e:	6f 91       	pop	r22
    1580:	5f 91       	pop	r21
    1582:	4f 91       	pop	r20
    1584:	3f 91       	pop	r19
    1586:	2f 91       	pop	r18
    1588:	0f 90       	pop	r0
    158a:	0b be       	out	0x3b, r0	; 59
    158c:	0f 90       	pop	r0
    158e:	0f be       	out	0x3f, r0	; 63
    1590:	0f 90       	pop	r0
    1592:	1f 90       	pop	r1
    1594:	18 95       	reti

00001596 <__vector_4>:
ISR(INT3_vect)
{
    1596:	1f 92       	push	r1
    1598:	0f 92       	push	r0
    159a:	0f b6       	in	r0, 0x3f	; 63
    159c:	0f 92       	push	r0
    159e:	0b b6       	in	r0, 0x3b	; 59
    15a0:	0f 92       	push	r0
    15a2:	11 24       	eor	r1, r1
    15a4:	2f 93       	push	r18
    15a6:	3f 93       	push	r19
    15a8:	4f 93       	push	r20
    15aa:	5f 93       	push	r21
    15ac:	6f 93       	push	r22
    15ae:	7f 93       	push	r23
    15b0:	8f 93       	push	r24
    15b2:	9f 93       	push	r25
    15b4:	af 93       	push	r26
    15b6:	bf 93       	push	r27
    15b8:	ef 93       	push	r30
    15ba:	ff 93       	push	r31
   cAllisr();
    15bc:	e0 91 b8 02 	lds	r30, 0x02B8
    15c0:	f0 91 b9 02 	lds	r31, 0x02B9
    15c4:	19 95       	eicall
}
    15c6:	ff 91       	pop	r31
    15c8:	ef 91       	pop	r30
    15ca:	bf 91       	pop	r27
    15cc:	af 91       	pop	r26
    15ce:	9f 91       	pop	r25
    15d0:	8f 91       	pop	r24
    15d2:	7f 91       	pop	r23
    15d4:	6f 91       	pop	r22
    15d6:	5f 91       	pop	r21
    15d8:	4f 91       	pop	r20
    15da:	3f 91       	pop	r19
    15dc:	2f 91       	pop	r18
    15de:	0f 90       	pop	r0
    15e0:	0b be       	out	0x3b, r0	; 59
    15e2:	0f 90       	pop	r0
    15e4:	0f be       	out	0x3f, r0	; 63
    15e6:	0f 90       	pop	r0
    15e8:	1f 90       	pop	r1
    15ea:	18 95       	reti

000015ec <__vector_5>:
ISR(INT4_vect)
{
    15ec:	1f 92       	push	r1
    15ee:	0f 92       	push	r0
    15f0:	0f b6       	in	r0, 0x3f	; 63
    15f2:	0f 92       	push	r0
    15f4:	0b b6       	in	r0, 0x3b	; 59
    15f6:	0f 92       	push	r0
    15f8:	11 24       	eor	r1, r1
    15fa:	2f 93       	push	r18
    15fc:	3f 93       	push	r19
    15fe:	4f 93       	push	r20
    1600:	5f 93       	push	r21
    1602:	6f 93       	push	r22
    1604:	7f 93       	push	r23
    1606:	8f 93       	push	r24
    1608:	9f 93       	push	r25
    160a:	af 93       	push	r26
    160c:	bf 93       	push	r27
    160e:	ef 93       	push	r30
    1610:	ff 93       	push	r31
    cAllisr();
    1612:	e0 91 b8 02 	lds	r30, 0x02B8
    1616:	f0 91 b9 02 	lds	r31, 0x02B9
    161a:	19 95       	eicall
}
    161c:	ff 91       	pop	r31
    161e:	ef 91       	pop	r30
    1620:	bf 91       	pop	r27
    1622:	af 91       	pop	r26
    1624:	9f 91       	pop	r25
    1626:	8f 91       	pop	r24
    1628:	7f 91       	pop	r23
    162a:	6f 91       	pop	r22
    162c:	5f 91       	pop	r21
    162e:	4f 91       	pop	r20
    1630:	3f 91       	pop	r19
    1632:	2f 91       	pop	r18
    1634:	0f 90       	pop	r0
    1636:	0b be       	out	0x3b, r0	; 59
    1638:	0f 90       	pop	r0
    163a:	0f be       	out	0x3f, r0	; 63
    163c:	0f 90       	pop	r0
    163e:	1f 90       	pop	r1
    1640:	18 95       	reti

00001642 <__vector_6>:
ISR(INT5_vect)
{
    1642:	1f 92       	push	r1
    1644:	0f 92       	push	r0
    1646:	0f b6       	in	r0, 0x3f	; 63
    1648:	0f 92       	push	r0
    164a:	0b b6       	in	r0, 0x3b	; 59
    164c:	0f 92       	push	r0
    164e:	11 24       	eor	r1, r1
    1650:	2f 93       	push	r18
    1652:	3f 93       	push	r19
    1654:	4f 93       	push	r20
    1656:	5f 93       	push	r21
    1658:	6f 93       	push	r22
    165a:	7f 93       	push	r23
    165c:	8f 93       	push	r24
    165e:	9f 93       	push	r25
    1660:	af 93       	push	r26
    1662:	bf 93       	push	r27
    1664:	ef 93       	push	r30
    1666:	ff 93       	push	r31
    cAllisr();
    1668:	e0 91 b8 02 	lds	r30, 0x02B8
    166c:	f0 91 b9 02 	lds	r31, 0x02B9
    1670:	19 95       	eicall
}
    1672:	ff 91       	pop	r31
    1674:	ef 91       	pop	r30
    1676:	bf 91       	pop	r27
    1678:	af 91       	pop	r26
    167a:	9f 91       	pop	r25
    167c:	8f 91       	pop	r24
    167e:	7f 91       	pop	r23
    1680:	6f 91       	pop	r22
    1682:	5f 91       	pop	r21
    1684:	4f 91       	pop	r20
    1686:	3f 91       	pop	r19
    1688:	2f 91       	pop	r18
    168a:	0f 90       	pop	r0
    168c:	0b be       	out	0x3b, r0	; 59
    168e:	0f 90       	pop	r0
    1690:	0f be       	out	0x3f, r0	; 63
    1692:	0f 90       	pop	r0
    1694:	1f 90       	pop	r1
    1696:	18 95       	reti

00001698 <__vector_7>:
ISR(INT6_vect)
{
    1698:	1f 92       	push	r1
    169a:	0f 92       	push	r0
    169c:	0f b6       	in	r0, 0x3f	; 63
    169e:	0f 92       	push	r0
    16a0:	0b b6       	in	r0, 0x3b	; 59
    16a2:	0f 92       	push	r0
    16a4:	11 24       	eor	r1, r1
    16a6:	2f 93       	push	r18
    16a8:	3f 93       	push	r19
    16aa:	4f 93       	push	r20
    16ac:	5f 93       	push	r21
    16ae:	6f 93       	push	r22
    16b0:	7f 93       	push	r23
    16b2:	8f 93       	push	r24
    16b4:	9f 93       	push	r25
    16b6:	af 93       	push	r26
    16b8:	bf 93       	push	r27
    16ba:	ef 93       	push	r30
    16bc:	ff 93       	push	r31
    cAllisr();
    16be:	e0 91 b8 02 	lds	r30, 0x02B8
    16c2:	f0 91 b9 02 	lds	r31, 0x02B9
    16c6:	19 95       	eicall
}
    16c8:	ff 91       	pop	r31
    16ca:	ef 91       	pop	r30
    16cc:	bf 91       	pop	r27
    16ce:	af 91       	pop	r26
    16d0:	9f 91       	pop	r25
    16d2:	8f 91       	pop	r24
    16d4:	7f 91       	pop	r23
    16d6:	6f 91       	pop	r22
    16d8:	5f 91       	pop	r21
    16da:	4f 91       	pop	r20
    16dc:	3f 91       	pop	r19
    16de:	2f 91       	pop	r18
    16e0:	0f 90       	pop	r0
    16e2:	0b be       	out	0x3b, r0	; 59
    16e4:	0f 90       	pop	r0
    16e6:	0f be       	out	0x3f, r0	; 63
    16e8:	0f 90       	pop	r0
    16ea:	1f 90       	pop	r1
    16ec:	18 95       	reti

000016ee <__vector_8>:
ISR(INT7_vect)
{ 
    16ee:	1f 92       	push	r1
    16f0:	0f 92       	push	r0
    16f2:	0f b6       	in	r0, 0x3f	; 63
    16f4:	0f 92       	push	r0
    16f6:	0b b6       	in	r0, 0x3b	; 59
    16f8:	0f 92       	push	r0
    16fa:	11 24       	eor	r1, r1
    16fc:	2f 93       	push	r18
    16fe:	3f 93       	push	r19
    1700:	4f 93       	push	r20
    1702:	5f 93       	push	r21
    1704:	6f 93       	push	r22
    1706:	7f 93       	push	r23
    1708:	8f 93       	push	r24
    170a:	9f 93       	push	r25
    170c:	af 93       	push	r26
    170e:	bf 93       	push	r27
    1710:	ef 93       	push	r30
    1712:	ff 93       	push	r31
    cAllisr();
    1714:	e0 91 b8 02 	lds	r30, 0x02B8
    1718:	f0 91 b9 02 	lds	r31, 0x02B9
    171c:	19 95       	eicall
}
    171e:	ff 91       	pop	r31
    1720:	ef 91       	pop	r30
    1722:	bf 91       	pop	r27
    1724:	af 91       	pop	r26
    1726:	9f 91       	pop	r25
    1728:	8f 91       	pop	r24
    172a:	7f 91       	pop	r23
    172c:	6f 91       	pop	r22
    172e:	5f 91       	pop	r21
    1730:	4f 91       	pop	r20
    1732:	3f 91       	pop	r19
    1734:	2f 91       	pop	r18
    1736:	0f 90       	pop	r0
    1738:	0b be       	out	0x3b, r0	; 59
    173a:	0f 90       	pop	r0
    173c:	0f be       	out	0x3f, r0	; 63
    173e:	0f 90       	pop	r0
    1740:	1f 90       	pop	r1
    1742:	18 95       	reti

00001744 <_Z5setupv>:

static volatile int pulse = 0;
static volatile int i = 0;
uint8_t COUNTA = 0;//storing digital output 	
void setup(){
	DDRA = 0xFF;
    1744:	8f ef       	ldi	r24, 0xFF	; 255
    1746:	81 b9       	out	0x01, r24	; 1
    DDRD = 0b11111011;
    1748:	8b ef       	ldi	r24, 0xFB	; 251
    174a:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    174c:	83 ed       	ldi	r24, 0xD3	; 211
    174e:	90 e3       	ldi	r25, 0x30	; 48
    1750:	01 97       	sbiw	r24, 0x01	; 1
    1752:	f1 f7       	brne	.-4      	; 0x1750 <_Z5setupv+0xc>
    1754:	00 c0       	rjmp	.+0      	; 0x1756 <_Z5setupv+0x12>
    1756:	00 00       	nop
    _delay_ms(50);
	EIMSK|=(1<<INT0);//enabling interrupt0
    1758:	e8 9a       	sbi	0x1d, 0	; 29
	EICRA|=(1<<ISC00);//setting interrupt triggering logic change
    175a:	e9 e6       	ldi	r30, 0x69	; 105
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	80 81       	ld	r24, Z
    1760:	81 60       	ori	r24, 0x01	; 1
    1762:	80 83       	st	Z, r24
	
	sei();
    1764:	78 94       	sei
{
	public:
	void begin( unsigned int BAUD){
		/*Set baud rate */int uBrr;
		uBrr=(F_CPU/16UL/BAUD-1);
		UBRR0H = (unsigned char)(uBrr>>8);
    1766:	10 92 c5 00 	sts	0x00C5, r1
		UBRR0L = (unsigned char)uBrr;
    176a:	8c e0       	ldi	r24, 0x0C	; 12
    176c:	80 93 c4 00 	sts	0x00C4, r24
		/*Enable receiver and transmitter */
		UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    1770:	88 e1       	ldi	r24, 0x18	; 24
    1772:	80 93 c1 00 	sts	0x00C1, r24
	}
	/* Set frame format: 8data, 2stop bit */
	void write( unsigned char dAta ){
		/* Wait for empty transmit buffer */
		while ((UCSR0A & (1<<UDRE0))==0);
    1776:	e0 ec       	ldi	r30, 0xC0	; 192
    1778:	f0 e0       	ldi	r31, 0x00	; 0
    177a:	80 81       	ld	r24, Z
    177c:	85 ff       	sbrs	r24, 5
    177e:	fd cf       	rjmp	.-6      	; 0x177a <_Z5setupv+0x36>
		/* Put data into buffer, sends the data */
		UDR0 = dAta;
    1780:	81 e0       	ldi	r24, 0x01	; 1
    1782:	80 93 c6 00 	sts	0x00C6, r24
    1786:	87 ea       	ldi	r24, 0xA7	; 167
    1788:	91 e6       	ldi	r25, 0x61	; 97
    178a:	01 97       	sbiw	r24, 0x01	; 1
    178c:	f1 f7       	brne	.-4      	; 0x178a <_Z5setupv+0x46>
    178e:	00 c0       	rjmp	.+0      	; 0x1790 <_Z5setupv+0x4c>
    1790:	00 00       	nop
	Serial.begin(4800);
	Serial.write(1);
}	
    1792:	08 95       	ret

00001794 <_Z4loopv>:
void loop(){
	//Serial.write(2);
	PORTD|=(1<<PIND0);
    1794:	58 9a       	sbi	0x0b, 0	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1796:	85 e0       	ldi	r24, 0x05	; 5
    1798:	8a 95       	dec	r24
    179a:	f1 f7       	brne	.-4      	; 0x1798 <_Z4loopv+0x4>
	_delay_us(15);///triggering the sensor for 15usec
	PORTD &=~(1<<PIND0);
    179c:	58 98       	cbi	0x0b, 0	; 11
	//Serial.write(3);
	COUNTA = pulse/58;
    179e:	80 91 c1 02 	lds	r24, 0x02C1
    17a2:	90 91 c2 02 	lds	r25, 0x02C2
    17a6:	6a e3       	ldi	r22, 0x3A	; 58
    17a8:	70 e0       	ldi	r23, 0x00	; 0
    17aa:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <__divmodhi4>
    17ae:	96 2f       	mov	r25, r22
    17b0:	60 93 be 02 	sts	0x02BE, r22
		UCSR0B = (1<<RXEN0)|(1<<TXEN0);
	}
	/* Set frame format: 8data, 2stop bit */
	void write( unsigned char dAta ){
		/* Wait for empty transmit buffer */
		while ((UCSR0A & (1<<UDRE0))==0);
    17b4:	e0 ec       	ldi	r30, 0xC0	; 192
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	80 81       	ld	r24, Z
    17ba:	85 ff       	sbrs	r24, 5
    17bc:	fd cf       	rjmp	.-6      	; 0x17b8 <_Z4loopv+0x24>
		/* Put data into buffer, sends the data */
		UDR0 = dAta;
    17be:	90 93 c6 00 	sts	0x00C6, r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    17c2:	87 ea       	ldi	r24, 0xA7	; 167
    17c4:	91 e6       	ldi	r25, 0x61	; 97
    17c6:	01 97       	sbiw	r24, 0x01	; 1
    17c8:	f1 f7       	brne	.-4      	; 0x17c6 <_Z4loopv+0x32>
    17ca:	00 c0       	rjmp	.+0      	; 0x17cc <_Z4loopv+0x38>
    17cc:	00 00       	nop
	Serial.write(COUNTA);
}
    17ce:	08 95       	ret

000017d0 <main>:
Serial Serial;
Serial1 Serial1;
Serial2 Serial2;
Serial3 Serial3;
int main(){
	setup();
    17d0:	0e 94 a2 0b 	call	0x1744	; 0x1744 <_Z5setupv>
	while(1){
		loop();
    17d4:	0e 94 ca 0b 	call	0x1794	; 0x1794 <_Z4loopv>
    17d8:	fd cf       	rjmp	.-6      	; 0x17d4 <main+0x4>

000017da <__vector_1>:

ISR(INT0_vect)//interrupt service routine when there is a change in logic level

{
    17da:	1f 92       	push	r1
    17dc:	0f 92       	push	r0
    17de:	0f b6       	in	r0, 0x3f	; 63
    17e0:	0f 92       	push	r0
    17e2:	0b b6       	in	r0, 0x3b	; 59
    17e4:	0f 92       	push	r0
    17e6:	11 24       	eor	r1, r1
    17e8:	8f 93       	push	r24
    17ea:	9f 93       	push	r25
    17ec:	ef 93       	push	r30
    17ee:	ff 93       	push	r31
	//Serial.write(5);
	if (i==1)//when logic from HIGH to LOW
    17f0:	80 91 bf 02 	lds	r24, 0x02BF
    17f4:	90 91 c0 02 	lds	r25, 0x02C0
    17f8:	81 30       	cpi	r24, 0x01	; 1
    17fa:	91 05       	cpc	r25, r1
    17fc:	81 f4       	brne	.+32     	; 0x181e <__vector_1+0x44>

	{
	//Serial.write(6);
	TCCR1B=0;//disabling counter
    17fe:	10 92 81 00 	sts	0x0081, r1

	pulse=TCNT1;//count memory is updated to integer
    1802:	e4 e8       	ldi	r30, 0x84	; 132
    1804:	f0 e0       	ldi	r31, 0x00	; 0
    1806:	80 81       	ld	r24, Z
    1808:	91 81       	ldd	r25, Z+1	; 0x01
    180a:	90 93 c2 02 	sts	0x02C2, r25
    180e:	80 93 c1 02 	sts	0x02C1, r24

	TCNT1=0;//resetting the counter memory
    1812:	11 82       	std	Z+1, r1	; 0x01
    1814:	10 82       	st	Z, r1

	i=0;
    1816:	10 92 c0 02 	sts	0x02C0, r1
    181a:	10 92 bf 02 	sts	0x02BF, r1

	}

	if (i==0)//when logic change from LOW to HIGH
    181e:	80 91 bf 02 	lds	r24, 0x02BF
    1822:	90 91 c0 02 	lds	r25, 0x02C0
    1826:	00 97       	sbiw	r24, 0x00	; 0
    1828:	59 f4       	brne	.+22     	; 0x1840 <__vector_1+0x66>

	{
	//Serial.write(7);
	TCCR1B|=(1<<CS10);//enabling counter
    182a:	e1 e8       	ldi	r30, 0x81	; 129
    182c:	f0 e0       	ldi	r31, 0x00	; 0
    182e:	80 81       	ld	r24, Z
    1830:	81 60       	ori	r24, 0x01	; 1
    1832:	80 83       	st	Z, r24

	i=1;
    1834:	81 e0       	ldi	r24, 0x01	; 1
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	90 93 c0 02 	sts	0x02C0, r25
    183c:	80 93 bf 02 	sts	0x02BF, r24

	}

    1840:	ff 91       	pop	r31
    1842:	ef 91       	pop	r30
    1844:	9f 91       	pop	r25
    1846:	8f 91       	pop	r24
    1848:	0f 90       	pop	r0
    184a:	0b be       	out	0x3b, r0	; 59
    184c:	0f 90       	pop	r0
    184e:	0f be       	out	0x3f, r0	; 63
    1850:	0f 90       	pop	r0
    1852:	1f 90       	pop	r1
    1854:	18 95       	reti

00001856 <__subsf3>:
    1856:	50 58       	subi	r21, 0x80	; 128

00001858 <__addsf3>:
    1858:	bb 27       	eor	r27, r27
    185a:	aa 27       	eor	r26, r26
    185c:	0e d0       	rcall	.+28     	; 0x187a <__addsf3x>
    185e:	75 c1       	rjmp	.+746    	; 0x1b4a <__fp_round>
    1860:	66 d1       	rcall	.+716    	; 0x1b2e <__fp_pscA>
    1862:	30 f0       	brcs	.+12     	; 0x1870 <__addsf3+0x18>
    1864:	6b d1       	rcall	.+726    	; 0x1b3c <__fp_pscB>
    1866:	20 f0       	brcs	.+8      	; 0x1870 <__addsf3+0x18>
    1868:	31 f4       	brne	.+12     	; 0x1876 <__addsf3+0x1e>
    186a:	9f 3f       	cpi	r25, 0xFF	; 255
    186c:	11 f4       	brne	.+4      	; 0x1872 <__addsf3+0x1a>
    186e:	1e f4       	brtc	.+6      	; 0x1876 <__addsf3+0x1e>
    1870:	5b c1       	rjmp	.+694    	; 0x1b28 <__fp_nan>
    1872:	0e f4       	brtc	.+2      	; 0x1876 <__addsf3+0x1e>
    1874:	e0 95       	com	r30
    1876:	e7 fb       	bst	r30, 7
    1878:	51 c1       	rjmp	.+674    	; 0x1b1c <__fp_inf>

0000187a <__addsf3x>:
    187a:	e9 2f       	mov	r30, r25
    187c:	77 d1       	rcall	.+750    	; 0x1b6c <__fp_split3>
    187e:	80 f3       	brcs	.-32     	; 0x1860 <__addsf3+0x8>
    1880:	ba 17       	cp	r27, r26
    1882:	62 07       	cpc	r22, r18
    1884:	73 07       	cpc	r23, r19
    1886:	84 07       	cpc	r24, r20
    1888:	95 07       	cpc	r25, r21
    188a:	18 f0       	brcs	.+6      	; 0x1892 <__addsf3x+0x18>
    188c:	71 f4       	brne	.+28     	; 0x18aa <__addsf3x+0x30>
    188e:	9e f5       	brtc	.+102    	; 0x18f6 <__addsf3x+0x7c>
    1890:	8f c1       	rjmp	.+798    	; 0x1bb0 <__fp_zero>
    1892:	0e f4       	brtc	.+2      	; 0x1896 <__addsf3x+0x1c>
    1894:	e0 95       	com	r30
    1896:	0b 2e       	mov	r0, r27
    1898:	ba 2f       	mov	r27, r26
    189a:	a0 2d       	mov	r26, r0
    189c:	0b 01       	movw	r0, r22
    189e:	b9 01       	movw	r22, r18
    18a0:	90 01       	movw	r18, r0
    18a2:	0c 01       	movw	r0, r24
    18a4:	ca 01       	movw	r24, r20
    18a6:	a0 01       	movw	r20, r0
    18a8:	11 24       	eor	r1, r1
    18aa:	ff 27       	eor	r31, r31
    18ac:	59 1b       	sub	r21, r25
    18ae:	99 f0       	breq	.+38     	; 0x18d6 <__addsf3x+0x5c>
    18b0:	59 3f       	cpi	r21, 0xF9	; 249
    18b2:	50 f4       	brcc	.+20     	; 0x18c8 <__addsf3x+0x4e>
    18b4:	50 3e       	cpi	r21, 0xE0	; 224
    18b6:	68 f1       	brcs	.+90     	; 0x1912 <__addsf3x+0x98>
    18b8:	1a 16       	cp	r1, r26
    18ba:	f0 40       	sbci	r31, 0x00	; 0
    18bc:	a2 2f       	mov	r26, r18
    18be:	23 2f       	mov	r18, r19
    18c0:	34 2f       	mov	r19, r20
    18c2:	44 27       	eor	r20, r20
    18c4:	58 5f       	subi	r21, 0xF8	; 248
    18c6:	f3 cf       	rjmp	.-26     	; 0x18ae <__addsf3x+0x34>
    18c8:	46 95       	lsr	r20
    18ca:	37 95       	ror	r19
    18cc:	27 95       	ror	r18
    18ce:	a7 95       	ror	r26
    18d0:	f0 40       	sbci	r31, 0x00	; 0
    18d2:	53 95       	inc	r21
    18d4:	c9 f7       	brne	.-14     	; 0x18c8 <__addsf3x+0x4e>
    18d6:	7e f4       	brtc	.+30     	; 0x18f6 <__addsf3x+0x7c>
    18d8:	1f 16       	cp	r1, r31
    18da:	ba 0b       	sbc	r27, r26
    18dc:	62 0b       	sbc	r22, r18
    18de:	73 0b       	sbc	r23, r19
    18e0:	84 0b       	sbc	r24, r20
    18e2:	ba f0       	brmi	.+46     	; 0x1912 <__addsf3x+0x98>
    18e4:	91 50       	subi	r25, 0x01	; 1
    18e6:	a1 f0       	breq	.+40     	; 0x1910 <__addsf3x+0x96>
    18e8:	ff 0f       	add	r31, r31
    18ea:	bb 1f       	adc	r27, r27
    18ec:	66 1f       	adc	r22, r22
    18ee:	77 1f       	adc	r23, r23
    18f0:	88 1f       	adc	r24, r24
    18f2:	c2 f7       	brpl	.-16     	; 0x18e4 <__addsf3x+0x6a>
    18f4:	0e c0       	rjmp	.+28     	; 0x1912 <__addsf3x+0x98>
    18f6:	ba 0f       	add	r27, r26
    18f8:	62 1f       	adc	r22, r18
    18fa:	73 1f       	adc	r23, r19
    18fc:	84 1f       	adc	r24, r20
    18fe:	48 f4       	brcc	.+18     	; 0x1912 <__addsf3x+0x98>
    1900:	87 95       	ror	r24
    1902:	77 95       	ror	r23
    1904:	67 95       	ror	r22
    1906:	b7 95       	ror	r27
    1908:	f7 95       	ror	r31
    190a:	9e 3f       	cpi	r25, 0xFE	; 254
    190c:	08 f0       	brcs	.+2      	; 0x1910 <__addsf3x+0x96>
    190e:	b3 cf       	rjmp	.-154    	; 0x1876 <__addsf3+0x1e>
    1910:	93 95       	inc	r25
    1912:	88 0f       	add	r24, r24
    1914:	08 f0       	brcs	.+2      	; 0x1918 <__addsf3x+0x9e>
    1916:	99 27       	eor	r25, r25
    1918:	ee 0f       	add	r30, r30
    191a:	97 95       	ror	r25
    191c:	87 95       	ror	r24
    191e:	08 95       	ret

00001920 <__cmpsf2>:
    1920:	d9 d0       	rcall	.+434    	; 0x1ad4 <__fp_cmp>
    1922:	08 f4       	brcc	.+2      	; 0x1926 <__cmpsf2+0x6>
    1924:	81 e0       	ldi	r24, 0x01	; 1
    1926:	08 95       	ret

00001928 <__divsf3>:
    1928:	0c d0       	rcall	.+24     	; 0x1942 <__divsf3x>
    192a:	0f c1       	rjmp	.+542    	; 0x1b4a <__fp_round>
    192c:	07 d1       	rcall	.+526    	; 0x1b3c <__fp_pscB>
    192e:	40 f0       	brcs	.+16     	; 0x1940 <__divsf3+0x18>
    1930:	fe d0       	rcall	.+508    	; 0x1b2e <__fp_pscA>
    1932:	30 f0       	brcs	.+12     	; 0x1940 <__divsf3+0x18>
    1934:	21 f4       	brne	.+8      	; 0x193e <__divsf3+0x16>
    1936:	5f 3f       	cpi	r21, 0xFF	; 255
    1938:	19 f0       	breq	.+6      	; 0x1940 <__divsf3+0x18>
    193a:	f0 c0       	rjmp	.+480    	; 0x1b1c <__fp_inf>
    193c:	51 11       	cpse	r21, r1
    193e:	39 c1       	rjmp	.+626    	; 0x1bb2 <__fp_szero>
    1940:	f3 c0       	rjmp	.+486    	; 0x1b28 <__fp_nan>

00001942 <__divsf3x>:
    1942:	14 d1       	rcall	.+552    	; 0x1b6c <__fp_split3>
    1944:	98 f3       	brcs	.-26     	; 0x192c <__divsf3+0x4>

00001946 <__divsf3_pse>:
    1946:	99 23       	and	r25, r25
    1948:	c9 f3       	breq	.-14     	; 0x193c <__divsf3+0x14>
    194a:	55 23       	and	r21, r21
    194c:	b1 f3       	breq	.-20     	; 0x193a <__divsf3+0x12>
    194e:	95 1b       	sub	r25, r21
    1950:	55 0b       	sbc	r21, r21
    1952:	bb 27       	eor	r27, r27
    1954:	aa 27       	eor	r26, r26
    1956:	62 17       	cp	r22, r18
    1958:	73 07       	cpc	r23, r19
    195a:	84 07       	cpc	r24, r20
    195c:	38 f0       	brcs	.+14     	; 0x196c <__divsf3_pse+0x26>
    195e:	9f 5f       	subi	r25, 0xFF	; 255
    1960:	5f 4f       	sbci	r21, 0xFF	; 255
    1962:	22 0f       	add	r18, r18
    1964:	33 1f       	adc	r19, r19
    1966:	44 1f       	adc	r20, r20
    1968:	aa 1f       	adc	r26, r26
    196a:	a9 f3       	breq	.-22     	; 0x1956 <__divsf3_pse+0x10>
    196c:	33 d0       	rcall	.+102    	; 0x19d4 <__divsf3_pse+0x8e>
    196e:	0e 2e       	mov	r0, r30
    1970:	3a f0       	brmi	.+14     	; 0x1980 <__divsf3_pse+0x3a>
    1972:	e0 e8       	ldi	r30, 0x80	; 128
    1974:	30 d0       	rcall	.+96     	; 0x19d6 <__divsf3_pse+0x90>
    1976:	91 50       	subi	r25, 0x01	; 1
    1978:	50 40       	sbci	r21, 0x00	; 0
    197a:	e6 95       	lsr	r30
    197c:	00 1c       	adc	r0, r0
    197e:	ca f7       	brpl	.-14     	; 0x1972 <__divsf3_pse+0x2c>
    1980:	29 d0       	rcall	.+82     	; 0x19d4 <__divsf3_pse+0x8e>
    1982:	fe 2f       	mov	r31, r30
    1984:	27 d0       	rcall	.+78     	; 0x19d4 <__divsf3_pse+0x8e>
    1986:	66 0f       	add	r22, r22
    1988:	77 1f       	adc	r23, r23
    198a:	88 1f       	adc	r24, r24
    198c:	bb 1f       	adc	r27, r27
    198e:	26 17       	cp	r18, r22
    1990:	37 07       	cpc	r19, r23
    1992:	48 07       	cpc	r20, r24
    1994:	ab 07       	cpc	r26, r27
    1996:	b0 e8       	ldi	r27, 0x80	; 128
    1998:	09 f0       	breq	.+2      	; 0x199c <__divsf3_pse+0x56>
    199a:	bb 0b       	sbc	r27, r27
    199c:	80 2d       	mov	r24, r0
    199e:	bf 01       	movw	r22, r30
    19a0:	ff 27       	eor	r31, r31
    19a2:	93 58       	subi	r25, 0x83	; 131
    19a4:	5f 4f       	sbci	r21, 0xFF	; 255
    19a6:	2a f0       	brmi	.+10     	; 0x19b2 <__divsf3_pse+0x6c>
    19a8:	9e 3f       	cpi	r25, 0xFE	; 254
    19aa:	51 05       	cpc	r21, r1
    19ac:	68 f0       	brcs	.+26     	; 0x19c8 <__divsf3_pse+0x82>
    19ae:	b6 c0       	rjmp	.+364    	; 0x1b1c <__fp_inf>
    19b0:	00 c1       	rjmp	.+512    	; 0x1bb2 <__fp_szero>
    19b2:	5f 3f       	cpi	r21, 0xFF	; 255
    19b4:	ec f3       	brlt	.-6      	; 0x19b0 <__divsf3_pse+0x6a>
    19b6:	98 3e       	cpi	r25, 0xE8	; 232
    19b8:	dc f3       	brlt	.-10     	; 0x19b0 <__divsf3_pse+0x6a>
    19ba:	86 95       	lsr	r24
    19bc:	77 95       	ror	r23
    19be:	67 95       	ror	r22
    19c0:	b7 95       	ror	r27
    19c2:	f7 95       	ror	r31
    19c4:	9f 5f       	subi	r25, 0xFF	; 255
    19c6:	c9 f7       	brne	.-14     	; 0x19ba <__divsf3_pse+0x74>
    19c8:	88 0f       	add	r24, r24
    19ca:	91 1d       	adc	r25, r1
    19cc:	96 95       	lsr	r25
    19ce:	87 95       	ror	r24
    19d0:	97 f9       	bld	r25, 7
    19d2:	08 95       	ret
    19d4:	e1 e0       	ldi	r30, 0x01	; 1
    19d6:	66 0f       	add	r22, r22
    19d8:	77 1f       	adc	r23, r23
    19da:	88 1f       	adc	r24, r24
    19dc:	bb 1f       	adc	r27, r27
    19de:	62 17       	cp	r22, r18
    19e0:	73 07       	cpc	r23, r19
    19e2:	84 07       	cpc	r24, r20
    19e4:	ba 07       	cpc	r27, r26
    19e6:	20 f0       	brcs	.+8      	; 0x19f0 <__divsf3_pse+0xaa>
    19e8:	62 1b       	sub	r22, r18
    19ea:	73 0b       	sbc	r23, r19
    19ec:	84 0b       	sbc	r24, r20
    19ee:	ba 0b       	sbc	r27, r26
    19f0:	ee 1f       	adc	r30, r30
    19f2:	88 f7       	brcc	.-30     	; 0x19d6 <__divsf3_pse+0x90>
    19f4:	e0 95       	com	r30
    19f6:	08 95       	ret

000019f8 <__fixsfsi>:
    19f8:	04 d0       	rcall	.+8      	; 0x1a02 <__fixunssfsi>
    19fa:	68 94       	set
    19fc:	b1 11       	cpse	r27, r1
    19fe:	d9 c0       	rjmp	.+434    	; 0x1bb2 <__fp_szero>
    1a00:	08 95       	ret

00001a02 <__fixunssfsi>:
    1a02:	bc d0       	rcall	.+376    	; 0x1b7c <__fp_splitA>
    1a04:	88 f0       	brcs	.+34     	; 0x1a28 <__fixunssfsi+0x26>
    1a06:	9f 57       	subi	r25, 0x7F	; 127
    1a08:	90 f0       	brcs	.+36     	; 0x1a2e <__fixunssfsi+0x2c>
    1a0a:	b9 2f       	mov	r27, r25
    1a0c:	99 27       	eor	r25, r25
    1a0e:	b7 51       	subi	r27, 0x17	; 23
    1a10:	a0 f0       	brcs	.+40     	; 0x1a3a <__fixunssfsi+0x38>
    1a12:	d1 f0       	breq	.+52     	; 0x1a48 <__fixunssfsi+0x46>
    1a14:	66 0f       	add	r22, r22
    1a16:	77 1f       	adc	r23, r23
    1a18:	88 1f       	adc	r24, r24
    1a1a:	99 1f       	adc	r25, r25
    1a1c:	1a f0       	brmi	.+6      	; 0x1a24 <__fixunssfsi+0x22>
    1a1e:	ba 95       	dec	r27
    1a20:	c9 f7       	brne	.-14     	; 0x1a14 <__fixunssfsi+0x12>
    1a22:	12 c0       	rjmp	.+36     	; 0x1a48 <__fixunssfsi+0x46>
    1a24:	b1 30       	cpi	r27, 0x01	; 1
    1a26:	81 f0       	breq	.+32     	; 0x1a48 <__fixunssfsi+0x46>
    1a28:	c3 d0       	rcall	.+390    	; 0x1bb0 <__fp_zero>
    1a2a:	b1 e0       	ldi	r27, 0x01	; 1
    1a2c:	08 95       	ret
    1a2e:	c0 c0       	rjmp	.+384    	; 0x1bb0 <__fp_zero>
    1a30:	67 2f       	mov	r22, r23
    1a32:	78 2f       	mov	r23, r24
    1a34:	88 27       	eor	r24, r24
    1a36:	b8 5f       	subi	r27, 0xF8	; 248
    1a38:	39 f0       	breq	.+14     	; 0x1a48 <__fixunssfsi+0x46>
    1a3a:	b9 3f       	cpi	r27, 0xF9	; 249
    1a3c:	cc f3       	brlt	.-14     	; 0x1a30 <__fixunssfsi+0x2e>
    1a3e:	86 95       	lsr	r24
    1a40:	77 95       	ror	r23
    1a42:	67 95       	ror	r22
    1a44:	b3 95       	inc	r27
    1a46:	d9 f7       	brne	.-10     	; 0x1a3e <__fixunssfsi+0x3c>
    1a48:	3e f4       	brtc	.+14     	; 0x1a58 <__fixunssfsi+0x56>
    1a4a:	90 95       	com	r25
    1a4c:	80 95       	com	r24
    1a4e:	70 95       	com	r23
    1a50:	61 95       	neg	r22
    1a52:	7f 4f       	sbci	r23, 0xFF	; 255
    1a54:	8f 4f       	sbci	r24, 0xFF	; 255
    1a56:	9f 4f       	sbci	r25, 0xFF	; 255
    1a58:	08 95       	ret

00001a5a <__floatunsisf>:
    1a5a:	e8 94       	clt
    1a5c:	09 c0       	rjmp	.+18     	; 0x1a70 <__floatsisf+0x12>

00001a5e <__floatsisf>:
    1a5e:	97 fb       	bst	r25, 7
    1a60:	3e f4       	brtc	.+14     	; 0x1a70 <__floatsisf+0x12>
    1a62:	90 95       	com	r25
    1a64:	80 95       	com	r24
    1a66:	70 95       	com	r23
    1a68:	61 95       	neg	r22
    1a6a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a6c:	8f 4f       	sbci	r24, 0xFF	; 255
    1a6e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a70:	99 23       	and	r25, r25
    1a72:	a9 f0       	breq	.+42     	; 0x1a9e <__floatsisf+0x40>
    1a74:	f9 2f       	mov	r31, r25
    1a76:	96 e9       	ldi	r25, 0x96	; 150
    1a78:	bb 27       	eor	r27, r27
    1a7a:	93 95       	inc	r25
    1a7c:	f6 95       	lsr	r31
    1a7e:	87 95       	ror	r24
    1a80:	77 95       	ror	r23
    1a82:	67 95       	ror	r22
    1a84:	b7 95       	ror	r27
    1a86:	f1 11       	cpse	r31, r1
    1a88:	f8 cf       	rjmp	.-16     	; 0x1a7a <__floatsisf+0x1c>
    1a8a:	fa f4       	brpl	.+62     	; 0x1aca <__floatsisf+0x6c>
    1a8c:	bb 0f       	add	r27, r27
    1a8e:	11 f4       	brne	.+4      	; 0x1a94 <__floatsisf+0x36>
    1a90:	60 ff       	sbrs	r22, 0
    1a92:	1b c0       	rjmp	.+54     	; 0x1aca <__floatsisf+0x6c>
    1a94:	6f 5f       	subi	r22, 0xFF	; 255
    1a96:	7f 4f       	sbci	r23, 0xFF	; 255
    1a98:	8f 4f       	sbci	r24, 0xFF	; 255
    1a9a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a9c:	16 c0       	rjmp	.+44     	; 0x1aca <__floatsisf+0x6c>
    1a9e:	88 23       	and	r24, r24
    1aa0:	11 f0       	breq	.+4      	; 0x1aa6 <__floatsisf+0x48>
    1aa2:	96 e9       	ldi	r25, 0x96	; 150
    1aa4:	11 c0       	rjmp	.+34     	; 0x1ac8 <__floatsisf+0x6a>
    1aa6:	77 23       	and	r23, r23
    1aa8:	21 f0       	breq	.+8      	; 0x1ab2 <__floatsisf+0x54>
    1aaa:	9e e8       	ldi	r25, 0x8E	; 142
    1aac:	87 2f       	mov	r24, r23
    1aae:	76 2f       	mov	r23, r22
    1ab0:	05 c0       	rjmp	.+10     	; 0x1abc <__floatsisf+0x5e>
    1ab2:	66 23       	and	r22, r22
    1ab4:	71 f0       	breq	.+28     	; 0x1ad2 <__floatsisf+0x74>
    1ab6:	96 e8       	ldi	r25, 0x86	; 134
    1ab8:	86 2f       	mov	r24, r22
    1aba:	70 e0       	ldi	r23, 0x00	; 0
    1abc:	60 e0       	ldi	r22, 0x00	; 0
    1abe:	2a f0       	brmi	.+10     	; 0x1aca <__floatsisf+0x6c>
    1ac0:	9a 95       	dec	r25
    1ac2:	66 0f       	add	r22, r22
    1ac4:	77 1f       	adc	r23, r23
    1ac6:	88 1f       	adc	r24, r24
    1ac8:	da f7       	brpl	.-10     	; 0x1ac0 <__floatsisf+0x62>
    1aca:	88 0f       	add	r24, r24
    1acc:	96 95       	lsr	r25
    1ace:	87 95       	ror	r24
    1ad0:	97 f9       	bld	r25, 7
    1ad2:	08 95       	ret

00001ad4 <__fp_cmp>:
    1ad4:	99 0f       	add	r25, r25
    1ad6:	00 08       	sbc	r0, r0
    1ad8:	55 0f       	add	r21, r21
    1ada:	aa 0b       	sbc	r26, r26
    1adc:	e0 e8       	ldi	r30, 0x80	; 128
    1ade:	fe ef       	ldi	r31, 0xFE	; 254
    1ae0:	16 16       	cp	r1, r22
    1ae2:	17 06       	cpc	r1, r23
    1ae4:	e8 07       	cpc	r30, r24
    1ae6:	f9 07       	cpc	r31, r25
    1ae8:	c0 f0       	brcs	.+48     	; 0x1b1a <__fp_cmp+0x46>
    1aea:	12 16       	cp	r1, r18
    1aec:	13 06       	cpc	r1, r19
    1aee:	e4 07       	cpc	r30, r20
    1af0:	f5 07       	cpc	r31, r21
    1af2:	98 f0       	brcs	.+38     	; 0x1b1a <__fp_cmp+0x46>
    1af4:	62 1b       	sub	r22, r18
    1af6:	73 0b       	sbc	r23, r19
    1af8:	84 0b       	sbc	r24, r20
    1afa:	95 0b       	sbc	r25, r21
    1afc:	39 f4       	brne	.+14     	; 0x1b0c <__fp_cmp+0x38>
    1afe:	0a 26       	eor	r0, r26
    1b00:	61 f0       	breq	.+24     	; 0x1b1a <__fp_cmp+0x46>
    1b02:	23 2b       	or	r18, r19
    1b04:	24 2b       	or	r18, r20
    1b06:	25 2b       	or	r18, r21
    1b08:	21 f4       	brne	.+8      	; 0x1b12 <__fp_cmp+0x3e>
    1b0a:	08 95       	ret
    1b0c:	0a 26       	eor	r0, r26
    1b0e:	09 f4       	brne	.+2      	; 0x1b12 <__fp_cmp+0x3e>
    1b10:	a1 40       	sbci	r26, 0x01	; 1
    1b12:	a6 95       	lsr	r26
    1b14:	8f ef       	ldi	r24, 0xFF	; 255
    1b16:	81 1d       	adc	r24, r1
    1b18:	81 1d       	adc	r24, r1
    1b1a:	08 95       	ret

00001b1c <__fp_inf>:
    1b1c:	97 f9       	bld	r25, 7
    1b1e:	9f 67       	ori	r25, 0x7F	; 127
    1b20:	80 e8       	ldi	r24, 0x80	; 128
    1b22:	70 e0       	ldi	r23, 0x00	; 0
    1b24:	60 e0       	ldi	r22, 0x00	; 0
    1b26:	08 95       	ret

00001b28 <__fp_nan>:
    1b28:	9f ef       	ldi	r25, 0xFF	; 255
    1b2a:	80 ec       	ldi	r24, 0xC0	; 192
    1b2c:	08 95       	ret

00001b2e <__fp_pscA>:
    1b2e:	00 24       	eor	r0, r0
    1b30:	0a 94       	dec	r0
    1b32:	16 16       	cp	r1, r22
    1b34:	17 06       	cpc	r1, r23
    1b36:	18 06       	cpc	r1, r24
    1b38:	09 06       	cpc	r0, r25
    1b3a:	08 95       	ret

00001b3c <__fp_pscB>:
    1b3c:	00 24       	eor	r0, r0
    1b3e:	0a 94       	dec	r0
    1b40:	12 16       	cp	r1, r18
    1b42:	13 06       	cpc	r1, r19
    1b44:	14 06       	cpc	r1, r20
    1b46:	05 06       	cpc	r0, r21
    1b48:	08 95       	ret

00001b4a <__fp_round>:
    1b4a:	09 2e       	mov	r0, r25
    1b4c:	03 94       	inc	r0
    1b4e:	00 0c       	add	r0, r0
    1b50:	11 f4       	brne	.+4      	; 0x1b56 <__fp_round+0xc>
    1b52:	88 23       	and	r24, r24
    1b54:	52 f0       	brmi	.+20     	; 0x1b6a <__fp_round+0x20>
    1b56:	bb 0f       	add	r27, r27
    1b58:	40 f4       	brcc	.+16     	; 0x1b6a <__fp_round+0x20>
    1b5a:	bf 2b       	or	r27, r31
    1b5c:	11 f4       	brne	.+4      	; 0x1b62 <__fp_round+0x18>
    1b5e:	60 ff       	sbrs	r22, 0
    1b60:	04 c0       	rjmp	.+8      	; 0x1b6a <__fp_round+0x20>
    1b62:	6f 5f       	subi	r22, 0xFF	; 255
    1b64:	7f 4f       	sbci	r23, 0xFF	; 255
    1b66:	8f 4f       	sbci	r24, 0xFF	; 255
    1b68:	9f 4f       	sbci	r25, 0xFF	; 255
    1b6a:	08 95       	ret

00001b6c <__fp_split3>:
    1b6c:	57 fd       	sbrc	r21, 7
    1b6e:	90 58       	subi	r25, 0x80	; 128
    1b70:	44 0f       	add	r20, r20
    1b72:	55 1f       	adc	r21, r21
    1b74:	59 f0       	breq	.+22     	; 0x1b8c <__fp_splitA+0x10>
    1b76:	5f 3f       	cpi	r21, 0xFF	; 255
    1b78:	71 f0       	breq	.+28     	; 0x1b96 <__fp_splitA+0x1a>
    1b7a:	47 95       	ror	r20

00001b7c <__fp_splitA>:
    1b7c:	88 0f       	add	r24, r24
    1b7e:	97 fb       	bst	r25, 7
    1b80:	99 1f       	adc	r25, r25
    1b82:	61 f0       	breq	.+24     	; 0x1b9c <__fp_splitA+0x20>
    1b84:	9f 3f       	cpi	r25, 0xFF	; 255
    1b86:	79 f0       	breq	.+30     	; 0x1ba6 <__fp_splitA+0x2a>
    1b88:	87 95       	ror	r24
    1b8a:	08 95       	ret
    1b8c:	12 16       	cp	r1, r18
    1b8e:	13 06       	cpc	r1, r19
    1b90:	14 06       	cpc	r1, r20
    1b92:	55 1f       	adc	r21, r21
    1b94:	f2 cf       	rjmp	.-28     	; 0x1b7a <__fp_split3+0xe>
    1b96:	46 95       	lsr	r20
    1b98:	f1 df       	rcall	.-30     	; 0x1b7c <__fp_splitA>
    1b9a:	08 c0       	rjmp	.+16     	; 0x1bac <__fp_splitA+0x30>
    1b9c:	16 16       	cp	r1, r22
    1b9e:	17 06       	cpc	r1, r23
    1ba0:	18 06       	cpc	r1, r24
    1ba2:	99 1f       	adc	r25, r25
    1ba4:	f1 cf       	rjmp	.-30     	; 0x1b88 <__fp_splitA+0xc>
    1ba6:	86 95       	lsr	r24
    1ba8:	71 05       	cpc	r23, r1
    1baa:	61 05       	cpc	r22, r1
    1bac:	08 94       	sec
    1bae:	08 95       	ret

00001bb0 <__fp_zero>:
    1bb0:	e8 94       	clt

00001bb2 <__fp_szero>:
    1bb2:	bb 27       	eor	r27, r27
    1bb4:	66 27       	eor	r22, r22
    1bb6:	77 27       	eor	r23, r23
    1bb8:	cb 01       	movw	r24, r22
    1bba:	97 f9       	bld	r25, 7
    1bbc:	08 95       	ret

00001bbe <__gesf2>:
    1bbe:	8a df       	rcall	.-236    	; 0x1ad4 <__fp_cmp>
    1bc0:	08 f4       	brcc	.+2      	; 0x1bc4 <__gesf2+0x6>
    1bc2:	8f ef       	ldi	r24, 0xFF	; 255
    1bc4:	08 95       	ret

00001bc6 <__mulsf3>:
    1bc6:	0b d0       	rcall	.+22     	; 0x1bde <__mulsf3x>
    1bc8:	c0 cf       	rjmp	.-128    	; 0x1b4a <__fp_round>
    1bca:	b1 df       	rcall	.-158    	; 0x1b2e <__fp_pscA>
    1bcc:	28 f0       	brcs	.+10     	; 0x1bd8 <__mulsf3+0x12>
    1bce:	b6 df       	rcall	.-148    	; 0x1b3c <__fp_pscB>
    1bd0:	18 f0       	brcs	.+6      	; 0x1bd8 <__mulsf3+0x12>
    1bd2:	95 23       	and	r25, r21
    1bd4:	09 f0       	breq	.+2      	; 0x1bd8 <__mulsf3+0x12>
    1bd6:	a2 cf       	rjmp	.-188    	; 0x1b1c <__fp_inf>
    1bd8:	a7 cf       	rjmp	.-178    	; 0x1b28 <__fp_nan>
    1bda:	11 24       	eor	r1, r1
    1bdc:	ea cf       	rjmp	.-44     	; 0x1bb2 <__fp_szero>

00001bde <__mulsf3x>:
    1bde:	c6 df       	rcall	.-116    	; 0x1b6c <__fp_split3>
    1be0:	a0 f3       	brcs	.-24     	; 0x1bca <__mulsf3+0x4>

00001be2 <__mulsf3_pse>:
    1be2:	95 9f       	mul	r25, r21
    1be4:	d1 f3       	breq	.-12     	; 0x1bda <__mulsf3+0x14>
    1be6:	95 0f       	add	r25, r21
    1be8:	50 e0       	ldi	r21, 0x00	; 0
    1bea:	55 1f       	adc	r21, r21
    1bec:	62 9f       	mul	r22, r18
    1bee:	f0 01       	movw	r30, r0
    1bf0:	72 9f       	mul	r23, r18
    1bf2:	bb 27       	eor	r27, r27
    1bf4:	f0 0d       	add	r31, r0
    1bf6:	b1 1d       	adc	r27, r1
    1bf8:	63 9f       	mul	r22, r19
    1bfa:	aa 27       	eor	r26, r26
    1bfc:	f0 0d       	add	r31, r0
    1bfe:	b1 1d       	adc	r27, r1
    1c00:	aa 1f       	adc	r26, r26
    1c02:	64 9f       	mul	r22, r20
    1c04:	66 27       	eor	r22, r22
    1c06:	b0 0d       	add	r27, r0
    1c08:	a1 1d       	adc	r26, r1
    1c0a:	66 1f       	adc	r22, r22
    1c0c:	82 9f       	mul	r24, r18
    1c0e:	22 27       	eor	r18, r18
    1c10:	b0 0d       	add	r27, r0
    1c12:	a1 1d       	adc	r26, r1
    1c14:	62 1f       	adc	r22, r18
    1c16:	73 9f       	mul	r23, r19
    1c18:	b0 0d       	add	r27, r0
    1c1a:	a1 1d       	adc	r26, r1
    1c1c:	62 1f       	adc	r22, r18
    1c1e:	83 9f       	mul	r24, r19
    1c20:	a0 0d       	add	r26, r0
    1c22:	61 1d       	adc	r22, r1
    1c24:	22 1f       	adc	r18, r18
    1c26:	74 9f       	mul	r23, r20
    1c28:	33 27       	eor	r19, r19
    1c2a:	a0 0d       	add	r26, r0
    1c2c:	61 1d       	adc	r22, r1
    1c2e:	23 1f       	adc	r18, r19
    1c30:	84 9f       	mul	r24, r20
    1c32:	60 0d       	add	r22, r0
    1c34:	21 1d       	adc	r18, r1
    1c36:	82 2f       	mov	r24, r18
    1c38:	76 2f       	mov	r23, r22
    1c3a:	6a 2f       	mov	r22, r26
    1c3c:	11 24       	eor	r1, r1
    1c3e:	9f 57       	subi	r25, 0x7F	; 127
    1c40:	50 40       	sbci	r21, 0x00	; 0
    1c42:	8a f0       	brmi	.+34     	; 0x1c66 <__mulsf3_pse+0x84>
    1c44:	e1 f0       	breq	.+56     	; 0x1c7e <__mulsf3_pse+0x9c>
    1c46:	88 23       	and	r24, r24
    1c48:	4a f0       	brmi	.+18     	; 0x1c5c <__mulsf3_pse+0x7a>
    1c4a:	ee 0f       	add	r30, r30
    1c4c:	ff 1f       	adc	r31, r31
    1c4e:	bb 1f       	adc	r27, r27
    1c50:	66 1f       	adc	r22, r22
    1c52:	77 1f       	adc	r23, r23
    1c54:	88 1f       	adc	r24, r24
    1c56:	91 50       	subi	r25, 0x01	; 1
    1c58:	50 40       	sbci	r21, 0x00	; 0
    1c5a:	a9 f7       	brne	.-22     	; 0x1c46 <__mulsf3_pse+0x64>
    1c5c:	9e 3f       	cpi	r25, 0xFE	; 254
    1c5e:	51 05       	cpc	r21, r1
    1c60:	70 f0       	brcs	.+28     	; 0x1c7e <__mulsf3_pse+0x9c>
    1c62:	5c cf       	rjmp	.-328    	; 0x1b1c <__fp_inf>
    1c64:	a6 cf       	rjmp	.-180    	; 0x1bb2 <__fp_szero>
    1c66:	5f 3f       	cpi	r21, 0xFF	; 255
    1c68:	ec f3       	brlt	.-6      	; 0x1c64 <__mulsf3_pse+0x82>
    1c6a:	98 3e       	cpi	r25, 0xE8	; 232
    1c6c:	dc f3       	brlt	.-10     	; 0x1c64 <__mulsf3_pse+0x82>
    1c6e:	86 95       	lsr	r24
    1c70:	77 95       	ror	r23
    1c72:	67 95       	ror	r22
    1c74:	b7 95       	ror	r27
    1c76:	f7 95       	ror	r31
    1c78:	e7 95       	ror	r30
    1c7a:	9f 5f       	subi	r25, 0xFF	; 255
    1c7c:	c1 f7       	brne	.-16     	; 0x1c6e <__mulsf3_pse+0x8c>
    1c7e:	fe 2b       	or	r31, r30
    1c80:	88 0f       	add	r24, r24
    1c82:	91 1d       	adc	r25, r1
    1c84:	96 95       	lsr	r25
    1c86:	87 95       	ror	r24
    1c88:	97 f9       	bld	r25, 7
    1c8a:	08 95       	ret

00001c8c <__divmodhi4>:
    1c8c:	97 fb       	bst	r25, 7
    1c8e:	09 2e       	mov	r0, r25
    1c90:	07 26       	eor	r0, r23
    1c92:	0a d0       	rcall	.+20     	; 0x1ca8 <__divmodhi4_neg1>
    1c94:	77 fd       	sbrc	r23, 7
    1c96:	04 d0       	rcall	.+8      	; 0x1ca0 <__divmodhi4_neg2>
    1c98:	0c d0       	rcall	.+24     	; 0x1cb2 <__udivmodhi4>
    1c9a:	06 d0       	rcall	.+12     	; 0x1ca8 <__divmodhi4_neg1>
    1c9c:	00 20       	and	r0, r0
    1c9e:	1a f4       	brpl	.+6      	; 0x1ca6 <__divmodhi4_exit>

00001ca0 <__divmodhi4_neg2>:
    1ca0:	70 95       	com	r23
    1ca2:	61 95       	neg	r22
    1ca4:	7f 4f       	sbci	r23, 0xFF	; 255

00001ca6 <__divmodhi4_exit>:
    1ca6:	08 95       	ret

00001ca8 <__divmodhi4_neg1>:
    1ca8:	f6 f7       	brtc	.-4      	; 0x1ca6 <__divmodhi4_exit>
    1caa:	90 95       	com	r25
    1cac:	81 95       	neg	r24
    1cae:	9f 4f       	sbci	r25, 0xFF	; 255
    1cb0:	08 95       	ret

00001cb2 <__udivmodhi4>:
    1cb2:	aa 1b       	sub	r26, r26
    1cb4:	bb 1b       	sub	r27, r27
    1cb6:	51 e1       	ldi	r21, 0x11	; 17
    1cb8:	07 c0       	rjmp	.+14     	; 0x1cc8 <__udivmodhi4_ep>

00001cba <__udivmodhi4_loop>:
    1cba:	aa 1f       	adc	r26, r26
    1cbc:	bb 1f       	adc	r27, r27
    1cbe:	a6 17       	cp	r26, r22
    1cc0:	b7 07       	cpc	r27, r23
    1cc2:	10 f0       	brcs	.+4      	; 0x1cc8 <__udivmodhi4_ep>
    1cc4:	a6 1b       	sub	r26, r22
    1cc6:	b7 0b       	sbc	r27, r23

00001cc8 <__udivmodhi4_ep>:
    1cc8:	88 1f       	adc	r24, r24
    1cca:	99 1f       	adc	r25, r25
    1ccc:	5a 95       	dec	r21
    1cce:	a9 f7       	brne	.-22     	; 0x1cba <__udivmodhi4_loop>
    1cd0:	80 95       	com	r24
    1cd2:	90 95       	com	r25
    1cd4:	bc 01       	movw	r22, r24
    1cd6:	cd 01       	movw	r24, r26
    1cd8:	08 95       	ret

00001cda <_exit>:
    1cda:	f8 94       	cli

00001cdc <__stop_program>:
    1cdc:	ff cf       	rjmp	.-2      	; 0x1cdc <__stop_program>
