/*
 SINE WAVE
 
 */ 
 
 
#define F_CPU 1000000UL		//Buffer board's crystal is not working
#define trig 22
#define echo 3
#include <m2560/io.h>
#include <m2560/Servo.h>
#include <ModularLibrary/Cytron.h>

#define pwm1 4
#define pwm2 13
#define pwm3 10
#define pwm4 9

#define dir1 30
#define dir2 31
#define dir3 32
#define dir4 33

float k=0.12;  // Constant for getting the sine wave
int ang1=120,ang2=120,ang3=120,ang4=120;  //Initial angles of servo motors for all wheels to be parallel
int v,y,z,w;   //Angles of servo
int dist;   //Distance in mm from wall


/********************Objects***********************/
servo servo1;   // 4 Objects created for 4 servos
servo servo2;
servo servo3;
servo servo4;
Cytron motors(dir1,pwm1,dir2,pwm2,dir3,pwm3,dir4,pwm4);



	void angle1(int dist)
	{
		v=(ang1-90) +(dist-1250)*k;
		y=(ang2-90)+ (dist-1250)*k;
		z=(ang3-90)+ (dist-1250)*k;
		w=(ang4-90)+ (dist-1250)*k;

		servo1.write(v);
		servo2.write(y);
		servo3.write(z);
		servo4.write(w);
	}
	void angle2(int dist)
	{
		v=ang1 + (dist-2000)*k;
		y=ang2 + (dist-2000)*k;
		z=ang3 + (dist-2000)*k;
		w=ang4 + (dist-2000)*k;

		servo1.write(v);
		servo2.write(y);
		servo3.write(z);
		servo4.write(w);
	}
	void angle3(int dist)
	{
		v=(ang1+90)-(dist-2750)*k;
		y=(ang2+90)-(dist-2750)*k;
		z=(ang3+90)-(dist-2750)*k;
		w=(ang4+90)-(dist-2750)*k;

		servo1.write(v);
		servo2.write(y);
		servo3.write(z);
		servo4.write(w);
		
	}
	void angle4(int dist)
	{
		v=ang1-(dist-500)*k;
		y=ang2-(dist-500)*k;
		z=ang3-(dist-500)*k;
		w=ang4-(dist-500)*k;
		
		servo1.write(v);
		servo2.write(y);
		servo3.write(z);
		servo2.write(w);
		
	}
	void angle5(int dist)
	{
		v=ang1-(dist-3500)*k;
		y=ang2-(dist-3500)*k;
		z=ang3-(dist-3500)*k;
		w=ang4-(dist-3500)*k;

		servo1.write(v);
		servo2.write(y);
		servo3.write(z);
		servo4.write(w);
		
	}
	void angle6(int dist)
	{
		v=(ang1-90)+ (dist-4250)*k;
		y=(ang2-90)+ (dist-4250)*k;
		z=(ang3-90)+ (dist-4250)*k;
		w=(ang4-90)+ (dist-4250)*k;

		servo1.write(v);
		servo2.write(y);
		servo3.write(z);
		servo4.write(w);
	}
	void angle7(int dist)
	{
		v=ang1+(dist-5000)*k;
		y=ang2+(dist-5000)*k;
		z=ang3+(dist-5000)*k;
		w=ang3+(dist-5000)*k;

		servo1.write(v);
		servo2.write(y);
		servo3.write(z);
		servo4.write(w);
		
	}
 
 	




    int main(){


        pinMode(echo,0);
 	pinMode(trig,1);
		

	
	   while(1)
	   {
	  	int dist;
		
	
	        servo1.attach(11);
		servo2.attach(12);
		servo3.attach(5);
		servo4.attach(3);
		
		
		/*
		digitalWrite(trig,LOW);
		delayMicroseconds(2);
		digitalWrite(trig,HIGH);
		delayMicroseconds(10);
		digitalWrite(trig,LOW);
		
		//Distance is calculated in cm using US sensor
		int dur,distance;
		dur=pUlsein(echo,HIGH);
		distance=0.034*dur/2;
		dist=distance*100; // Distance is converted in mm and stored in 'val' variable
		//According to the distance,we will decide in which quarter of the sine wave we should enter.
		*/
		
		
		
		if((500<=dist)&&(dist<=1250))
		{
			angle4(dist);
			
			
		}
		else if((1250<dist)&&(dist<=2000))
		{
			angle1(dist);
		}
		else if((2000<dist)&&(dist<=2750))
		{
			angle2(dist);
		}
		else if((2750<dist)&&(dist<=3500))
		{
			angle3(dist);
		}
		else if((3500<dist)&&(dist<=4250))
		{
			angle5(dist);
		}
		else if((4250<dist)&&(dist<=5000))
		{
			angle6(dist);
			
		}
		else if((5000<dist)&&(dist<=5750))
		{
			angle7(dist);
		}
	   
	}
}
  
